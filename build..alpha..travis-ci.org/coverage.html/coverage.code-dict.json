{"/home/travis/build/npmtest/node-npmtest-googleapis/test.js":"/* istanbul instrument in package npmtest_googleapis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-googleapis/lib.npmtest_googleapis.js":"/* istanbul instrument in package npmtest_googleapis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_googleapis = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_googleapis = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-googleapis/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-googleapis && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_googleapis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_googleapis\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_googleapis.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_googleapis.rollup.js'] =\n            local.assetsDict['/assets.npmtest_googleapis.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_googleapis.__dirname + '/lib.npmtest_googleapis.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/lib/googleapis.js":"// Copyright 2012-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar util = require('util');\nvar Discovery = require('./discovery');\nvar discovery = new Discovery({ debug: false, includePrivate: false });\n\n/**\n * Load the apis from apis index file\n * This file holds all version information\n * @private\n */\nvar apis = {};\n\n/**\n * Return a Function that requires an API from the disk\n * @param  {String} filename Filename of API\n * @return {function}        function used to require the API from disk\n * @private\n */\nfunction requireAPI (filename) {\n  return function (options) {\n    var type = typeof options;\n    var version;\n    if (type === 'string') {\n      version = options;\n      options = {};\n    } else if (type === 'object') {\n      version = options.version;\n      delete options.version;\n    } else {\n      throw new Error('Argument error: Accepts only string or object');\n    }\n    try {\n      var endpointPath = path.join(__dirname, filename, path.basename(version));\n      var Endpoint = require(endpointPath);\n      var ep = new Endpoint(options);\n      ep.google = this; // for drive.google.transporter\n      return Object.freeze(ep); // create new & freeze\n    } catch (e) {\n      throw new Error(util.format('Unable to load endpoint %s(\"%s\"): %s',\n        filename, version, e.message));\n    }\n  };\n}\n\n// Dynamically discover available APIs\nfs.readdirSync(path.join(__dirname, '../apis')).forEach(function (file) {\n  apis[file] = requireAPI('../apis/' + file);\n});\n\n/**\n * @class GoogleAuth\n */\nvar GoogleAuth = require('google-auth-library');\n\n/**\n * GoogleApis constructor.\n *\n * @example\n * var GoogleApis = require('googleapis').GoogleApis;\n * var google = new GoogleApis();\n *\n * @class GoogleApis\n * @param {Object} [options] Configuration options.\n */\nfunction GoogleApis (options) {\n  this.options(options);\n  this.addAPIs(apis);\n\n  /**\n   * A reference to an instance of GoogleAuth.\n   *\n   * @name GoogleApis#auth\n   * @type {GoogleAuth}\n   */\n  this.auth = new GoogleAuth();\n\n  /**\n   * A reference to the {@link GoogleApis} constructor function.\n   *\n   * @name GoogleApis#GoogleApis\n   * @see GoogleApis\n   * @type {Function}\n   */\n  this.GoogleApis = GoogleApis;\n}\n\n/**\n * Set options.\n *\n * @param  {Object} [options] Configuration options.\n */\nGoogleApis.prototype.options = function (options) {\n  this._options = options || {};\n};\n\n/**\n * Add APIs endpoints to googleapis object\n * E.g. googleapis.drive and googleapis.datastore\n *\n * @name GoogleApis#addAPIs\n * @method\n * @param {Object} apis Apis to be added to this GoogleApis instance.\n * @private\n */\nGoogleApis.prototype.addAPIs = function (apis) {\n  for (var apiName in apis) {\n    this[apiName] = apis[apiName].bind(this);\n  }\n};\n\n/**\n * Dynamically generate an apis object that can provide Endpoint objects for the\n * discovered APIs.\n *\n * @example\n * var google = require('googleapis');\n * var discoveryUrl = 'https://myapp.appspot.com/_ah/api/discovery/v1/apis/';\n * google.discover(discoveryUrl, function (err) {\n *   var someapi = google.someapi('v1');\n * });\n *\n * @name GoogleApis#discover\n * @method\n * @param {string} url Url to the discovery service for a set of APIs. e.g.,\n * https://www.googleapis.com/discovery/v1/apis\n * @param {Function} callback Callback function.\n */\nGoogleApis.prototype.discover = function (url, callback) {\n  var self = this;\n\n  discovery.discoverAllAPIs(url, function (err, apis) {\n    if (err) {\n      return callback(err);\n    }\n    self.addAPIs(apis);\n    callback();\n  });\n};\n\n/**\n * Dynamically generate an Endpoint object from a discovery doc.\n *\n * @example\n * var google = require('google');\n * var discoveryDocUrl = 'https://myapp.appspot.com/_ah/api/discovery/v1/apis/someapi/v1/rest';\n * google.discoverApi(discoveryDocUrl, function (err, someapi) {\n *   // use someapi\n * });\n *\n * @name GoogleApis#discoverAPI\n * @method\n * @param {string} path Url or file path to discover doc for a single API.\n * @param {object} [options] Options to configure the Endpoint object generated\n * from the discovery doc.\n * @param {Function} callback Callback function.\n */\nGoogleApis.prototype.discoverAPI = function (path, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  if (!options) {\n    options = {};\n  }\n  discovery.discoverAPI(path, function (err, Endpoint) {\n    if (err) {\n      return callback(err);\n    }\n    var ep = new Endpoint(options);\n    ep.google = self; // for drive.google.transporter\n    return callback(null, Object.freeze(ep)); // create new & freeze\n  });\n};\n\n/**\n * {@link GoogleApis} class.\n *\n * @name module:googleapis.GoogleApis\n * @see GoogleApis\n * @type {Function}\n */\n\n/**\n * {@link GoogleAuth} class.\n *\n * @name module:googleapis.auth\n * @see GoogleAuth\n * @type {Function}\n */\n\n/**\n * @example\n * var google = require('googleapis');\n *\n * @module googleapis\n * @type {GoogleApis}\n */\nmodule.exports = new GoogleApis();\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/lib/discovery.js":"// Copyright 2014-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\nvar generatorUtils = require('./generator_utils');\nvar DefaultTransporter = generatorUtils.DefaultTransporter;\nvar buildurl = generatorUtils.buildurl;\nvar handleError = generatorUtils.handleError;\nvar async = require('async');\nvar fs = require('fs');\nvar url = require('url');\nvar util = require('util');\nvar createAPIRequest = require('./apirequest');\n\nvar transporter = new DefaultTransporter();\n\nfunction getPathParams (params) {\n  var pathParams = [];\n  if (typeof params !== 'object') {\n    params = {};\n  }\n  Object.keys(params).forEach(function (key) {\n    if (params[key].location === 'path') {\n      pathParams.push(key);\n    }\n  });\n  return pathParams;\n}\n\n/**\n * Given a method schema, add a method to a target.\n *\n * @private\n * @param {object} target The target to which to add the method.\n * @param {object} schema The top-level schema that contains the rootUrl, etc.\n * @param {object} method The method schema from which to generate the method.\n * @param {object} context The context to add to the method.\n */\nfunction makeMethod (schema, method, context) {\n  return function (params, callback) {\n    var url = buildurl(schema.rootUrl + schema.servicePath + method.path);\n\n    var parameters = {\n      options: {\n        url: url.substring(1, url.length - 1),\n        method: method.httpMethod\n      },\n      params: params,\n      requiredParams: method.parameterOrder || [],\n      pathParams: getPathParams(method.parameters),\n      context: context\n    };\n\n    if (method.mediaUpload && method.mediaUpload.protocols &&\n      method.mediaUpload.protocols.simple &&\n      method.mediaUpload.protocols.simple.path) {\n      var mediaUrl = buildurl(\n        schema.rootUrl +\n        method.mediaUpload.protocols.simple.path\n      );\n      parameters.mediaUrl = mediaUrl.substring(1, mediaUrl.length - 1);\n    }\n\n    return createAPIRequest(parameters, callback);\n  };\n}\n\n/**\n * Given a schema, add methods to a target.\n *\n * @private\n * @param {object} target The target to which to apply the methods.\n * @param {object} rootSchema The top-level schema, so we don't lose track of it\n * during recursion.\n * @param {object} schema The current schema from which to extract methods.\n * @param {object} context The context to add to each method.\n */\nfunction applyMethodsFromSchema (target, rootSchema, schema, context) {\n  if (schema.methods) {\n    for (var name in schema.methods) {\n      var method = schema.methods[name];\n      target[name] = makeMethod(rootSchema, method, context);\n    }\n  }\n}\n\n/**\n * Given a schema, add methods and resources to a target.\n *\n * @private\n * @param {object} target The target to which to apply the schema.\n * @param {object} rootSchema The top-level schema, so we don't lose track of it\n * during recursion.\n * @param {object} schema The current schema from which to extract methods and\n * resources.\n * @param {object} context The context to add to each method.\n */\nfunction applySchema (target, rootSchema, schema, context) {\n  applyMethodsFromSchema(target, rootSchema, schema, context);\n\n  if (schema.resources) {\n    for (var resourceName in schema.resources) {\n      var resource = schema.resources[resourceName];\n      if (!target[resourceName]) {\n        target[resourceName] = {};\n      }\n      applySchema(target[resourceName], rootSchema, resource, context);\n    }\n  }\n}\n\n/**\n * Generate and Endpoint from an endpoint schema object.\n *\n * @private\n * @param {object} schema The schema from which to generate the Endpoint.\n * @return Function The Endpoint.\n */\nfunction makeEndpoint (schema) {\n  var Endpoint = function (options) {\n    var self = this;\n    self._options = options || {};\n\n    applySchema(self, schema, schema, self);\n  };\n  return Endpoint;\n}\n\n/**\n * Discovery for discovering API endpoints\n *\n * @private\n * @param {object} options Options for discovery\n * @this {Discovery}\n */\nfunction Discovery (options) {\n  this.options = options || {};\n}\n\n/**\n * Log output of generator\n * Works just like console.log\n */\nDiscovery.prototype.log = function () {\n  if (this.options && this.options.debug) {\n    console.log.apply(this, arguments);\n  }\n};\n\n/**\n * Generate all APIs and return as in-memory object.\n *\n * @param {function} callback Callback when all APIs have been generated\n * @throws {Error} If there is an error generating any of the APIs\n */\nDiscovery.prototype.discoverAllAPIs = function (discoveryUrl, callback) {\n  var self = this;\n  var headers = this.options.includePrivate ? {} : { 'X-User-Ip': '0.0.0.0' };\n  transporter.request({\n    uri: discoveryUrl,\n    headers: headers\n  }, function (err, resp) {\n    if (err) {\n      return handleError(err, callback);\n    }\n\n    async.parallel(resp.items.map(function (api) {\n      return function (cb) {\n        self.discoverAPI(api.discoveryRestUrl, function (err, _api) {\n          if (err) {\n            return cb(err);\n          }\n          api.api = _api;\n          cb(null, api);\n        });\n      };\n    }), function (err, apis) {\n      if (err) {\n        return callback(err);\n      }\n\n      var versionIndex = {};\n      var apisIndex = {};\n\n      apis.forEach(function (api) {\n        if (!apisIndex[api.name]) {\n          versionIndex[api.name] = {};\n          apisIndex[api.name] = function (options) {\n            var type = typeof options;\n            var version;\n            if (type === 'string') {\n              version = options;\n              options = {};\n            } else if (type === 'object') {\n              version = options.version;\n              delete options.version;\n            } else {\n              throw new Error('Argument error: Accepts only string or object');\n            }\n            try {\n              var Endpoint = versionIndex[api.name][version];\n              var ep = new Endpoint(options);\n              ep.google = this; // for drive.google.transporter\n              return Object.freeze(ep); // create new & freeze\n            } catch (e) {\n              throw new Error(util.format('Unable to load endpoint %s(\"%s\"): %s',\n                api.name, version, e.message));\n            }\n          };\n        }\n        versionIndex[api.name][api.version] = api.api;\n      });\n\n      return callback(null, apisIndex);\n    });\n  });\n};\n\n/**\n * Generate API file given discovery URL\n *\n * @param  {String} apiDiscoveryUrl URL or filename of discovery doc for API\n * @param {function} callback Callback when successful write of API\n * @throws {Error} If there is an error generating the API.\n */\nDiscovery.prototype.discoverAPI = function (apiDiscoveryUrl, callback) {\n  function _generate (err, resp) {\n    if (err) {\n      return handleError(err, callback);\n    }\n    return callback(null, makeEndpoint(resp));\n  }\n\n  if (typeof apiDiscoveryUrl === 'string') {\n    var parts = url.parse(apiDiscoveryUrl);\n\n    if (apiDiscoveryUrl && !parts.protocol) {\n      this.log('Reading from file ' + apiDiscoveryUrl);\n      try {\n        return fs.readFile(apiDiscoveryUrl, {\n          encoding: 'utf8'\n        }, function (err, file) {\n          _generate(err, JSON.parse(file));\n        });\n      } catch (err) {\n        return handleError(err, callback);\n      }\n    } else {\n      this.log('Requesting ' + apiDiscoveryUrl);\n      transporter.request({\n        uri: apiDiscoveryUrl\n      }, _generate);\n    }\n  } else {\n    var options = apiDiscoveryUrl;\n    this.log('Requesting ' + options.url);\n    var parameters = {\n      options: {\n        url: options.url,\n        method: 'GET'\n      },\n      requiredParams: [],\n      pathParams: [],\n      context: {\n        google: {\n          _options: {}\n        },\n        _options: {}\n      }\n    };\n    delete options.url;\n    parameters.params = options;\n    createAPIRequest(parameters, _generate);\n  }\n};\n\n/**\n * Export the Discovery object\n * @type {Discovery}\n */\nmodule.exports = Discovery;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/lib/generator_utils.js":"// Copyright 2014-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\n/**\n * Build a string used to create a URL from the discovery doc provided URL.\n *\n * @private\n * @param  {String} input URL to build from\n * @return {String}       Resulting built URL\n */\nfunction buildurl (input) {\n  return ('\\'' + input + '\\'')\n    // No * symbols\n    .replace(/\\*/g, '')\n    // No + symbols\n    .replace(/\\+/g, '')\n    // replace double slashes with single slash (except in https://)\n    .replace(/([^:]\\/)\\/+/g, '$1')\n    // No {/ symbols\n    .replace(/\\{\\//g, '/{');\n}\n\n/**\n * Disable auto-escaping its output\n * @type {Boolean}\n */\nbuildurl.safe = true;\n\n/**\n * Handle error object with callback\n *\n * @private\n * @param  {Error}   err      Error object to return in callback\n * @param  {Function=} callback Optional callback function\n */\nfunction handleError (err, callback) {\n  if (callback && typeof callback === 'function') {\n    callback(err, null);\n  }\n}\n\nexports.DefaultTransporter = require('../lib/transporters');\nexports.buildurl = buildurl;\nexports.handleError = handleError;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/lib/transporters.js":"// Copyright 2012-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\n/**\n * This code has been moved to the google-auth-library repo, at\n * https://github.com/google/google-auth-library-nodejs.\n *\n * Please update your references to point to the google-auth-library implementation,\n * rather than this file.\n */\n\nmodule.exports = require('google-auth-library/lib/transporters.js');\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/lib/apirequest.js":"// Copyright 2014-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\nvar utils = require('./utils.js');\nvar DefaultTransporter = require('./transporters.js');\nvar stream = require('stream');\nvar parseString = require('string-template');\n\nfunction isReadableStream (obj) {\n  return obj instanceof stream.Stream &&\n    typeof obj._read === 'function' &&\n    typeof obj._readableState === 'object';\n}\n\nfunction logError (err) {\n  if (err) {\n    console.error(err);\n  }\n}\n\nfunction createCallback (callback) {\n  return typeof callback === 'function' ? callback : logError;\n}\n\nfunction getMissingParams (params, required) {\n  var missing = [];\n\n  required.forEach(function (param) {\n    // Is the required param in the params object?\n    if (!params[param]) {\n      missing.push(param);\n    }\n  });\n\n  // If there are any required params missing, return their names in array, otherwise return null\n  return missing.length > 0 ? missing : null;\n}\n\n/**\n * Create and send request to Google API\n * @param  {object}   parameters Parameters used to form request\n * @param  {Function} callback   Callback when request finished or error found\n * @return {Request}             Returns Request object or null\n */\nfunction createAPIRequest (parameters, callback) {\n  var req, body, missingParams;\n  var params = parameters.params;\n  var options = utils.extend({}, parameters.options);\n\n  // If the params are not present, and callback was passed instead,\n  // use params as the callback and create empty params.\n  if (typeof params === 'function') {\n    callback = params;\n    params = {};\n  }\n\n  // Create a new params object so it can no longer be modified from outside code\n  // Also support global and per-client params, but allow them to be overriden per-request\n  params = utils.extend(\n    {}, // New base object\n    parameters.context.google._options.params, // Global params\n    parameters.context._options.params, // Per-client params\n    params // API call params\n  );\n\n  var media = params.media || {};\n  var resource = params.resource;\n  var authClient = params.auth ||\n    parameters.context._options.auth ||\n    parameters.context.google._options.auth;\n\n  var defaultMime = typeof media.body === 'string' ? 'text/plain' : 'application/octet-stream';\n  delete params.media;\n  delete params.resource;\n  delete params.auth;\n\n  // Grab headers from user provided options\n  var headers = params.headers || {};\n  delete params.headers;\n\n  // Un-alias parameters that were modified due to conflicts with reserved names\n  Object.keys(params).forEach(function (key) {\n    if (key.slice(-1) === '_') {\n      var newKey = key.slice(0, -1);\n      params[newKey] = params[key];\n      delete params[key];\n    }\n  });\n\n  // Normalize callback\n  callback = createCallback(callback);\n\n  // Check for missing required parameters in the API request\n  missingParams = getMissingParams(params, parameters.requiredParams);\n  if (missingParams) {\n    // Some params are missing - stop further operations and inform the developer which required\n    // params are not included in the request\n    callback(new Error('Missing required parameters: ' + missingParams.join(', ')));\n\n    return null;\n  }\n\n  // Parse urls\n  if (options.url) {\n    options.url = parseString(options.url, params);\n  }\n  if (parameters.mediaUrl) {\n    parameters.mediaUrl = parseString(parameters.mediaUrl, params);\n  }\n\n  // delete path parameters from the params object so they do not end up in query\n  parameters.pathParams.forEach(function (param) {\n    delete params[param];\n  });\n\n  // if authClient is actually a string, use it as an API KEY\n  if (typeof authClient === 'string') {\n    params.key = params.key || authClient;\n    authClient = null;\n  }\n\n  if (parameters.mediaUrl && media.body) {\n    options.url = parameters.mediaUrl;\n    if (resource) {\n      params.uploadType = 'multipart';\n      options.multipart = [\n        {\n          'Content-Type': 'application/json',\n          body: JSON.stringify(resource)\n        },\n        {\n          'Content-Type': media.mimeType || (resource && resource.mimeType) || defaultMime,\n          body: media.body // can be a readable stream or raw string!\n        }\n      ];\n    } else {\n      params.uploadType = 'media';\n      utils.extend(headers, {\n        'Content-Type': media.mimeType || defaultMime\n      });\n\n      if (isReadableStream(media.body)) {\n        body = media.body;\n      } else {\n        options.body = media.body;\n      }\n    }\n  } else {\n    options.json = resource || (\n      (options.method === 'GET' || options.method === 'DELETE') ? true : {}\n    );\n  }\n\n  options.headers = headers;\n  options.qs = params;\n  options.useQuerystring = true;\n\n  options = utils.extend({},\n    parameters.context.google._options,\n    parameters.context._options,\n    options\n  );\n  delete options.auth; // is overridden by our auth code\n  delete options.params; // We handle params ourselves and Request does not recognise 'params'\n\n  // create request (using authClient or otherwise and return request obj)\n  if (authClient) {\n    req = authClient.request(options, callback);\n  } else {\n    req = new DefaultTransporter().request(options, callback);\n  }\n\n  if (body) {\n    body.pipe(req);\n  }\n  return req;\n}\n\n/**\n * Exports createAPIRequest\n * @type {Function}\n */\nmodule.exports = createAPIRequest;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/lib/utils.js":"// Copyright 2012-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\n/**\n * This code has been moved to the google-auth-library repo, at\n * https://github.com/google/google-auth-library-nodejs.\n *\n * Please update your references to point to the google-auth-library implementation,\n * rather than this file.\n */\n\nmodule.exports = require('google-auth-library/lib/utils.js');\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/lib/generator.js":"// Copyright 2014-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\nvar generatorUtils = require('./generator_utils');\nvar DefaultTransporter = generatorUtils.DefaultTransporter;\nvar buildurl = generatorUtils.buildurl;\nvar handleError = generatorUtils.handleError;\nvar async = require('async');\nvar swig = require('swig');\nvar beautify = require('js-beautify').js_beautify;\nvar path = require('path');\nvar mkdirp = require('mkdirp');\nvar fs = require('fs');\nvar url = require('url');\nvar argv = require('minimist')(process.argv.slice(2));\nvar args = argv._;\n\nvar DISCOVERY_URL = argv['discovery-url'] ? argv['discovery-url'] : (\n  args.length ? args[0] : 'https://www.googleapis.com/discovery/v1/apis/'\n);\nvar FRAGMENT_URL = 'https://storage.googleapis.com/apisnippets-staging/public/';\n\nvar API_TEMPLATE = './templates/api-endpoint.js';\nvar BEAUTIFY_OPTIONS = {\n  'indent_size': 2,\n  'indent_char': ' ',\n  'eol': '\\n',\n  'indent_level': 0,\n  'indent_with_tabs': false,\n  'preserve_newlines': true,\n  'max_preserve_newlines': 2,\n  'jslint_happy': false,\n  'space_after_anon_function': true,\n  'brace_style': 'collapse',\n  'keep_array_indentation': false,\n  'keep_function_indentation': true,\n  'space_before_conditional': true,\n  'break_chained_methods': false,\n  'eval_code': false,\n  'unescape_strings': false,\n  'wrap_line_length': 0,\n  'wrap_attributes': 'auto',\n  'wrap_attributes_indent_size': 4,\n  'end_with_newline': true\n};\nvar RESERVED_PARAMS = ['resource', 'media', 'auth'];\nvar templateContents = fs.readFileSync(API_TEMPLATE, { encoding: 'utf8' });\nvar transporter = new DefaultTransporter();\n\n/**\n * A multi-line string is turned into one line.\n *\n * @private\n * @param  {string} str String to process\n * @return {string}     Single line string processed\n */\nfunction oneLine (str) {\n  return str.replace(/\\n/g, ' ');\n}\n\n/**\n * Clean a string of comment tags.\n *\n * @private\n * @param  {string} str String to process\n * @return {string}     Single line string processed\n */\nfunction cleanComments (str) {\n  // Convert /* into /x and */ into x/\n  return str.replace(/\\*\\//g, 'x/').replace(/\\/\\*/g, '/x');\n}\n\n/**\n * Returns the list of names of APIS\n *\n * @private\n * @param  {object} items Object of api endpoints\n * @return {array}        Array of api names\n */\nfunction getAPIs (items) {\n  var apis = [];\n  for (var i in items) {\n    apis.push(items[i].name);\n  }\n  return apis;\n}\n\nfunction getPathParams (params) {\n  var pathParams = [];\n  if (typeof params !== 'object') {\n    params = {};\n  }\n  Object.keys(params).forEach(function (key) {\n    if (params[key].location === 'path') {\n      pathParams.push(key);\n    }\n  });\n  return pathParams;\n}\n\nfunction getSafeParamName (param) {\n  if (RESERVED_PARAMS.indexOf(param) !== -1) {\n    return param + '_';\n  }\n  return param;\n}\n\n/**\n * Disable auto-escaping its output\n * @type {Boolean}\n */\nswig.setFilter('buildurl', buildurl);\nswig.setFilter('getAPIs', getAPIs);\nswig.setFilter('oneLine', oneLine);\nswig.setFilter('cleanComments', cleanComments);\nswig.setFilter('getPathParams', getPathParams);\nswig.setFilter('getSafeParamName', getSafeParamName);\nswig.setFilter('cleanPaths', function (str) {\n  return str.replace(/\\/\\*\\//gi, '/x/').replace(/\\/\\*`/gi, '/x');\n});\nswig.setDefaults({ loader: swig.loaders.fs(path.join(__dirname, '..', 'templates')) });\n\n/**\n * Generator for generating API endpoints\n *\n * @private\n * @param {object} options Options for generation\n * @this {Generator}\n */\nfunction Generator (options) {\n  this.options = options || {};\n}\n\n/**\n * Log output of generator\n * Works just like console.log\n */\nGenerator.prototype.log = function () {\n  if (this.options && this.options.debug) {\n    console.log.apply(this, arguments);\n  }\n};\n\n/**\n * Generate all APIs and write to files.\n *\n * @param {function} callback Callback when all APIs have been generated\n * @throws {Error} If there is an error generating any of the APIs\n */\nGenerator.prototype.generateAllAPIs = function (callback) {\n  var self = this;\n  var headers = this.options.includePrivate ? {} : { 'X-User-Ip': '0.0.0.0' };\n  transporter.request({\n    uri: DISCOVERY_URL,\n    headers: headers\n  }, function (err, resp) {\n    if (err) {\n      return handleError(err, callback);\n    }\n    var apis = resp.items;\n\n    var queue = async.queue(function (api, next) {\n      self.log('Generating API for %s...', api.id);\n      self.generateAPI(api.discoveryRestUrl, function (err, filename) {\n        if (err) {\n          // Try again\n          self.generateAPI(api.discoveryRestUrl, next);\n        } else {\n          next(err, filename);\n        }\n      });\n    }, 10);\n\n    apis.forEach(function (api) {\n      queue.push(api);\n    });\n\n    queue.drain = callback;\n  });\n};\n\nfunction getFragmentsForSchema (schema, path, tasks) {\n  if (schema.methods) {\n    for (var methodName in schema.methods) {\n      var methodSchema = schema.methods[methodName];\n      methodSchema.sampleUrl = path + '.' + methodName + '.frag.json';\n      (function (schema) {\n        tasks.push(function (cb) {\n          transporter.request({\n            uri: schema.sampleUrl\n          }, function (err, response) {\n            if (err) {\n              return cb(err);\n            }\n            if (response && response.codeFragment && response.codeFragment['Node.js']) {\n              var fragment = response.codeFragment['Node.js'].fragment;\n              fragment = fragment.replace(/\\/\\*/gi, '/<');\n              fragment = fragment.replace(/\\*\\//gi, '>/');\n              fragment = fragment.replace(/`\\*/gi, '`<');\n              fragment = fragment.replace(/\\*`/gi, '>`');\n              var lines = fragment.split('\\n');\n              lines.forEach(function (_line, i) {\n                if (_line) {\n                  lines[i] = '* ' + lines[i];\n                } else {\n                  lines[i] = '*';\n                }\n              });\n              fragment = lines.join('\\n');\n              schema.fragment = fragment;\n            }\n            cb();\n          });\n        });\n      })(methodSchema);\n    }\n  }\n  if (schema.resources) {\n    for (var resourceName in schema.resources) {\n      getFragmentsForSchema(\n        schema.resources[resourceName],\n        path + '.' + resourceName,\n        tasks\n      );\n    }\n  }\n}\n\n/**\n * Generate API file given discovery URL\n * @param  {String} apiDiscoveryUrl URL or filename of discovery doc for API\n * @param {function} callback Callback when successful write of API\n * @throws {Error} If there is an error generating the API.\n */\nGenerator.prototype.generateAPI = function (apiDiscoveryUrl, callback) {\n  function _generate (err, resp) {\n    if (err) {\n      handleError(err, callback);\n      return;\n    }\n    var tasks = [];\n    getFragmentsForSchema(\n      resp,\n      FRAGMENT_URL + resp.name + '/' + resp.version + '/0/' + resp.name,\n      tasks\n    );\n\n    // e.g. apis/drive/v2.js\n    var exportFilename = path.join(__dirname, '../apis', resp.name, resp.version + '.js');\n    var contents;\n\n    async.waterfall([\n      function (cb) {\n        async.parallel(tasks, cb);\n      },\n      function (results, cb) {\n        var result = swig.render(templateContents, { locals: resp });\n        contents = beautify(result, BEAUTIFY_OPTIONS);\n\n        mkdirp(path.dirname(exportFilename), cb);\n      },\n      function (dir, cb) {\n        fs.writeFile(exportFilename, contents, { encoding: 'utf8' }, cb);\n      }\n    ], function (err) {\n      if (err) {\n        handleError(err, callback);\n        return;\n      }\n      callback(null, exportFilename);\n    });\n  }\n\n  var parts = url.parse(apiDiscoveryUrl);\n\n  if (apiDiscoveryUrl && !parts.protocol) {\n    this.log('Reading from file ' + apiDiscoveryUrl);\n    try {\n      return _generate(null, JSON.parse(fs.readFileSync(apiDiscoveryUrl, {\n        encoding: 'utf-8'\n      })));\n    } catch (err) {\n      return handleError(err, callback);\n    }\n  } else {\n    this.log('Requesting ' + apiDiscoveryUrl);\n    transporter.request({\n      uri: apiDiscoveryUrl\n    }, _generate);\n  }\n};\n\n/**\n * Export the Generator object\n * @type {Generator}\n */\nmodule.exports = Generator;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/lib/pemverifier.js":"// Copyright 2012-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\n/**\n * This code has been moved to the google-auth-library repo, at\n * https://github.com/google/google-auth-library-nodejs.\n *\n * Please update your references to point to the google-auth-library implementation,\n * rather than this file.\n */\n\nmodule.exports = require('google-auth-library/lib/pemverifier.js');\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/scripts/generate.js":"/**\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\nvar Generator = require('../lib/generator');\nvar rimraf = require('rimraf');\nvar path = require('path');\nvar debug = false;\n\nvar argv = require('minimist')(process.argv.slice(2));\n\n// constructors\nvar gen = new Generator({ debug: debug, includePrivate: false });\n\nvar args = argv._;\n\nif (args.length) {\n  args.forEach(function (url) {\n    gen.generateAPI(url, function (err) {\n      if (err) {\n        throw err;\n      }\n      console.log('Generated API for ' + url);\n    });\n  });\n} else {\n  console.log('Removing old APIs...');\n  rimraf(path.join(__dirname, '..', 'apis'), function (err) {\n    if (err) {\n      throw err;\n    }\n    console.log('Generating APIs...');\n    gen.generateAllAPIs(function (err) {\n      if (err) {\n        throw err;\n      }\n      console.log('Finished generating APIs!');\n    });\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/templates/api-endpoint.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n{% set Name = name|capitalize %}\n{% set Version = version|replace('\\.', '_')|capitalize %}\n{% set Namespace = [Name, Version]|join('') %}\n\n/**\n * {{ title }}\n *\n * {{ description }}\n *\n * @example\n * var google = require('googleapis');\n * var {{ name }} = google.{{ name }}('{{ version }}');\n *\n * @namespace {{ name }}\n * @type {Function}\n * @version {{ version }}\n * @variation {{ version }}\n * @param {object=} options Options for {{ Name }}\n */\nfunction {{ Name }} (options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n{% if methods %}\n  {% set globalmethods = true %}\n  {% for mname, m in methods %}\n    {% include \"./method-partial.js\" with m %}\n  {% endfor -%}\n{%- endif -%}\n\n{% if resources %}\n{% set globalmethods = false %}\n{% for rname, r in resources %}\n{% set ResourceNamespace = [Name, rname]|join('.') %}\n  self.{{ rname }} = {\n    {% include \"./resource-partial.js\" with r %}\n  };\n{%- endfor -%}\n{%- endif -%}\n}\n\n{% set lb = \"{\" %}\n{% set rb = \"}\" %}\n\n{% for schemaName, schema in schemas %}\n/**\n * @typedef {{ schema.id }}\n * @memberOf! {{ name }}({{ version }})\n * @type {{ schema.type }}\n{% if schema.properties -%}\n{%- for pname, p in schema.properties -%}\n{%- if p.$ref -%}\n * @property {{ lb }}{{ name }}({{ version }}).{{ p.$ref }}{{ rb }} {{ pname }} {{ p.description | cleanPaths }}\n{%- elif p.items and p.items.type -%}\n * @property {{ lb }}{{ p.items.type }}[]{{ rb }} {{ pname }} {{ p.description | cleanPaths }}\n{%- elif p.items and p.items.$ref -%}\n * @property {{ lb }}{{ name }}({{ version }}).{{ p.items.$ref }}[]{{ rb }} {{ pname }} {{ p.description | cleanPaths }}\n{%- else -%}\n * @property {{ lb }}{{ p.type }}{{ rb }} {{ pname }} {{ p.description | cleanPaths }}\n{%- endif -%}\n{%- endfor -%}\n{%- endif -%}\n */\n\n{%- endfor -%}\n\nmodule.exports = {{ Name }};\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/templates/method-partial.js":"{% set lb = \"{\" %}\n{% set rb = \"}\" %}\n{%- set pathParams = m.parameters|getPathParams -%}\n/**\n * {{ m.id }}\n *\n * {% if m.description %}@desc {{ m.description|oneLine|cleanComments|safe }}{% endif %}\n *\n{% if m.fragment -%}\n * @example\n {{ m.fragment|safe }}\n *\n{% endif -%}\n * @alias {{ m.id }}\n * @memberOf! {{ name }}({{ version }})\n *\n * @param {object{% if !m.parameterOrder && !m.request %}={% endif %}} params Parameters for request\n {% for pname, p in m.parameters -%}\n * @param {{ lb }}{{ p.type }}{% if ! p.required %}={% endif %}{{ rb }} params.{{ pname|getSafeParamName }} {{ p.description|oneLine|cleanComments|safe }}\n {% endfor -%}\n{% if m.supportsMediaUpload -%}\n{% if m.request -%}\n * @param  {object} params.resource Media resource metadata\n{% endif -%}\n * @param {object} params.media Media object\n * @param {string} params.media.mimeType Media mime-type\n * @param {string|object} params.media.body Media body contents\n{% elif m.request -%}\n{% if m.request.$ref -%}\n * @param {{ lb }}{{ name }}({{ version }}).{{ m.request.$ref }}{{ rb }} params.resource Request body data\n{% else -%}\n * @param {object} params.resource Request body data\n{% endif -%}\n{% endif -%}\n * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n * @param {callback} callback The callback that handles the response.\n * @return {object} Request object\n */\n{% if globalmethods %}this.{{ mname }} ={% else %}{{ mname }}:{% endif %} function (params, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options || (options = {});\n\n  var parameters = {\n    options: utils.extend({\n      url: {{ (rootUrl + servicePath + m.path)|buildurl }},\n      method: '{{ m.httpMethod }}'\n    }, options),\n    params: params,\n    {%- if m.mediaUpload.protocols.simple.path -%}mediaUrl: {{ [rootUrl, m.mediaUpload.protocols.simple.path]|join('')|buildurl }},{%- endif -%}\n    requiredParams: [{%- if m.parameterOrder.length -%}'{{ m.parameterOrder|join(\"', '\")|safe }}'{%- endif -%}],\n    pathParams: [{%- if pathParams.length -%}'{{ pathParams|join(\"', '\")|safe }}'{%- endif -%}],\n    context: self\n  };\n\n  return createAPIRequest(parameters, callback);\n}{%- if globalmethods -%};{%- elif not loop.last -%},\n{%- endif -%}\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/templates/resource-partial.js":"{% if r.methods %}\n{% for mname, m in methods -%}\n  {% include \"./method-partial.js\" with m %}\n{%- endfor -%}\n{%- endif -%}{%- if r.methods && r.resources -%},{%- endif -%}\n\n{% if r.resources %}\n{%- for rname, r in resources %}\n\n  {{ rname }}: {\n    {%- include \"./resource-partial.js\" with r -%}\n  }{%- if not loop.last -%},{%- endif -%}\n{%- endfor -%}\n{%- endif -%}\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/acceleratedmobilepageurl/v1.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Accelerated Mobile Pages (AMP) URL API\n *\n * This API contains a single method, batchGet. Call this method to retrieve the AMP URL (and equivalent AMP Cache URL) for given public URL(s).\n\n *\n * @example\n * var google = require('googleapis');\n * var acceleratedmobilepageurl = google.acceleratedmobilepageurl('v1');\n *\n * @namespace acceleratedmobilepageurl\n * @type {Function}\n * @version v1\n * @variation v1\n * @param {object=} options Options for Acceleratedmobilepageurl\n */\nfunction Acceleratedmobilepageurl(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.ampUrls = {\n\n    /**\n     * acceleratedmobilepageurl.ampUrls.batchGet\n     *\n     * @desc Returns AMP URL(s) and equivalent [AMP Cache URL(s)](/amp/cache/overview#amp-cache-url-format).\n     *\n     * @alias acceleratedmobilepageurl.ampUrls.batchGet\n     * @memberOf! acceleratedmobilepageurl(v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {acceleratedmobilepageurl(v1).BatchGetAmpUrlsRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    batchGet: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://acceleratedmobilepageurl.googleapis.com/v1/ampUrls:batchGet',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef BatchGetAmpUrlsRequest\n * @memberOf! acceleratedmobilepageurl(v1)\n * @type object\n* @property {string[]} urls List of URLs to look up for the paired AMP URLs.\nThe URLs are case-sensitive. Up to 50 URLs per lookup\n(see [Usage Limits](/amp/cache/reference/limits)).\n* @property {string} lookupStrategy The lookup_strategy being requested.\n*/\n/**\n * @typedef BatchGetAmpUrlsResponse\n * @memberOf! acceleratedmobilepageurl(v1)\n * @type object\n* @property {acceleratedmobilepageurl(v1).AmpUrl[]} ampUrls For each URL in BatchAmpUrlsRequest, the URL response. The response might\nnot be in the same order as URLs in the batch request.\nIf BatchAmpUrlsRequest contains duplicate URLs, AmpUrl is generated\nonly once.\n* @property {acceleratedmobilepageurl(v1).AmpUrlError[]} urlErrors The errors for requested URLs that have no AMP URL.\n*/\n/**\n * @typedef AmpUrl\n * @memberOf! acceleratedmobilepageurl(v1)\n * @type object\n* @property {string} originalUrl The original non-AMP URL.\n* @property {string} ampUrl The AMP URL pointing to the publisher&#39;s web server.\n* @property {string} cdnAmpUrl The [AMP Cache URL](/amp/cache/overview#amp-cache-url-format) pointing to\nthe cached document in the Google AMP Cache.\n*/\n/**\n * @typedef AmpUrlError\n * @memberOf! acceleratedmobilepageurl(v1)\n * @type object\n * @property {string} errorMessage An optional descriptive error message.\n * @property {string} errorCode The error code of an API call.\n * @property {string} originalUrl The original non-AMP URL.\n */\nmodule.exports = Acceleratedmobilepageurl;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/adexchangebuyer2/v2beta1.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Ad Exchange Buyer API II\n *\n * Accesses the latest features for managing Ad Exchange accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.\n *\n * @example\n * var google = require('googleapis');\n * var adexchangebuyer2 = google.adexchangebuyer2('v2beta1');\n *\n * @namespace adexchangebuyer2\n * @type {Function}\n * @version v2beta1\n * @variation v2beta1\n * @param {object=} options Options for Adexchangebuyer2\n */\nfunction Adexchangebuyer2(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.accounts = {\n\n    clients: {\n\n      /**\n       * adexchangebuyer2.accounts.clients.update\n       *\n       * @desc Updates an existing client buyer.\n       *\n       * @alias adexchangebuyer2.accounts.clients.update\n       * @memberOf! adexchangebuyer2(v2beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Unique numerical account ID for the buyer of which the client buyer is a customer; the sponsor buyer to update a client for. (required)\n       * @param {string} params.clientAccountId Unique numerical account ID of the client to update. (required)\n       * @param {adexchangebuyer2(v2beta1).Client} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/clients/{clientAccountId}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'clientAccountId'],\n          pathParams: ['accountId', 'clientAccountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adexchangebuyer2.accounts.clients.create\n       *\n       * @desc Creates a new client buyer.\n       *\n       * @alias adexchangebuyer2.accounts.clients.create\n       * @memberOf! adexchangebuyer2(v2beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Unique numerical account ID for the buyer of which the client buyer is a customer; the sponsor buyer to create a client for. (required)\n       * @param {adexchangebuyer2(v2beta1).Client} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/clients',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adexchangebuyer2.accounts.clients.get\n       *\n       * @desc Gets a client buyer with a given client account ID.\n       *\n       * @alias adexchangebuyer2.accounts.clients.get\n       * @memberOf! adexchangebuyer2(v2beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Numerical account ID of the client's sponsor buyer. (required)\n       * @param {string} params.clientAccountId Numerical account ID of the client buyer to retrieve. (required)\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/clients/{clientAccountId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'clientAccountId'],\n          pathParams: ['accountId', 'clientAccountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adexchangebuyer2.accounts.clients.list\n       *\n       * @desc Lists all the clients for the current sponsor buyer.\n       *\n       * @alias adexchangebuyer2.accounts.clients.list\n       * @memberOf! adexchangebuyer2(v2beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListClientsResponse.nextPageToken returned from the previous call to the accounts.clients.list method.\n       * @param {string} params.accountId Unique numerical account ID of the sponsor buyer to list the clients for.\n       * @param {integer=} params.pageSize Requested page size. The server may return fewer clients than requested. If unspecified, the server will pick an appropriate default.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/clients',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      invitations: {\n\n        /**\n         * adexchangebuyer2.accounts.clients.invitations.create\n         *\n         * @desc Creates and sends out an email invitation to access an Ad Exchange client buyer account.\n         *\n         * @alias adexchangebuyer2.accounts.clients.invitations.create\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId Numerical account ID of the client's sponsor buyer. (required)\n         * @param {string} params.clientAccountId Numerical account ID of the client buyer that the user should be associated with. (required)\n         * @param {adexchangebuyer2(v2beta1).ClientUserInvitation} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'clientAccountId'],\n            pathParams: ['accountId', 'clientAccountId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * adexchangebuyer2.accounts.clients.invitations.get\n         *\n         * @desc Retrieves an existing client user invitation.\n         *\n         * @alias adexchangebuyer2.accounts.clients.invitations.get\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId Numerical account ID of the client's sponsor buyer. (required)\n         * @param {string} params.clientAccountId Numerical account ID of the client buyer that the user invitation to be retrieved is associated with. (required)\n         * @param {string} params.invitationId Numerical identifier of the user invitation to retrieve. (required)\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        get: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations/{invitationId}',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'clientAccountId', 'invitationId'],\n            pathParams: ['accountId', 'clientAccountId', 'invitationId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * adexchangebuyer2.accounts.clients.invitations.list\n         *\n         * @desc Lists all the client users invitations for a client with a given account ID.\n         *\n         * @alias adexchangebuyer2.accounts.clients.invitations.list\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListClientUserInvitationsResponse.nextPageToken returned from the previous call to the clients.invitations.list method.\n         * @param {string} params.accountId Numerical account ID of the client's sponsor buyer. (required)\n         * @param {integer=} params.pageSize Requested page size. Server may return fewer clients than requested. If unspecified, server will pick an appropriate default.\n         * @param {string} params.clientAccountId Numerical account ID of the client buyer to list invitations for. (required) You must either specify a string representation of a numerical account identifier or the `-` character to list all the invitations for all the clients of a given sponsor buyer.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'clientAccountId'],\n            pathParams: ['accountId', 'clientAccountId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        }\n      },\n\n      users: {\n\n        /**\n         * adexchangebuyer2.accounts.clients.users.update\n         *\n         * @desc Updates an existing client user. Only the user status can be changed on update.\n         *\n         * @alias adexchangebuyer2.accounts.clients.users.update\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.userId Numerical identifier of the user to retrieve. (required)\n         * @param {string} params.accountId Numerical account ID of the client's sponsor buyer. (required)\n         * @param {string} params.clientAccountId Numerical account ID of the client buyer that the user to be retrieved is associated with. (required)\n         * @param {adexchangebuyer2(v2beta1).ClientUser} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        update: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}',\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'clientAccountId', 'userId'],\n            pathParams: ['userId', 'accountId', 'clientAccountId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * adexchangebuyer2.accounts.clients.users.list\n         *\n         * @desc Lists all the known client users for a specified sponsor buyer account ID.\n         *\n         * @alias adexchangebuyer2.accounts.clients.users.list\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListClientUsersResponse.nextPageToken returned from the previous call to the accounts.clients.users.list method.\n         * @param {string} params.accountId Numerical account ID of the sponsor buyer of the client to list users for. (required)\n         * @param {integer=} params.pageSize Requested page size. The server may return fewer clients than requested. If unspecified, the server will pick an appropriate default.\n         * @param {string} params.clientAccountId The account ID of the client buyer to list users for. (required) You must specify either a string representation of a numerical account identifier or the `-` character to list all the client users for all the clients of a given sponsor buyer.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'clientAccountId'],\n            pathParams: ['accountId', 'clientAccountId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * adexchangebuyer2.accounts.clients.users.get\n         *\n         * @desc Retrieves an existing client user.\n         *\n         * @alias adexchangebuyer2.accounts.clients.users.get\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.userId Numerical identifier of the user to retrieve. (required)\n         * @param {string} params.accountId Numerical account ID of the client's sponsor buyer. (required)\n         * @param {string} params.clientAccountId Numerical account ID of the client buyer that the user to be retrieved is associated with. (required)\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        get: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'clientAccountId', 'userId'],\n            pathParams: ['userId', 'accountId', 'clientAccountId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        }\n      }\n    },\n\n    creatives: {\n\n      /**\n       * adexchangebuyer2.accounts.creatives.create\n       *\n       * @desc Creates a creative.\n       *\n       * @alias adexchangebuyer2.accounts.creatives.create\n       * @memberOf! adexchangebuyer2(v2beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.duplicateIdMode Indicates if multiple creatives can share an ID or not. Default is NO_DUPLICATES (one ID per creative).\n       * @param {string} params.accountId The account that this creative belongs to. Can be used to filter the response of the creatives.list method.\n       * @param {adexchangebuyer2(v2beta1).Creative} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/creatives',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adexchangebuyer2.accounts.creatives.stopWatching\n       *\n       * @desc Stops watching a creative. Will stop push notifications being sent to the topics when the creative changes status.\n       *\n       * @alias adexchangebuyer2.accounts.creatives.stopWatching\n       * @memberOf! adexchangebuyer2(v2beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId The account of the creative to stop notifications for.\n       * @param {string} params.creativeId The creative ID of the creative to stop notifications for. Specify \"-\" to specify stopping account level notifications.\n       * @param {adexchangebuyer2(v2beta1).StopWatchingCreativeRequest} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      stopWatching: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/creatives/{creativeId}:stopWatching',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'creativeId'],\n          pathParams: ['accountId', 'creativeId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adexchangebuyer2.accounts.creatives.get\n       *\n       * @desc Gets a creative.\n       *\n       * @alias adexchangebuyer2.accounts.creatives.get\n       * @memberOf! adexchangebuyer2(v2beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.creativeId The ID of the creative to retrieve.\n       * @param {string} params.accountId The account the creative belongs to.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/creatives/{creativeId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'creativeId'],\n          pathParams: ['creativeId', 'accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adexchangebuyer2.accounts.creatives.watch\n       *\n       * @desc Watches a creative. Will result in push notifications being sent to the topic when the creative changes status.\n       *\n       * @alias adexchangebuyer2.accounts.creatives.watch\n       * @memberOf! adexchangebuyer2(v2beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.creativeId The creative ID to watch for status changes. Specify \"-\" to watch all creatives under the above account. If both creative-level and account-level notifications are sent, only a single notification will be sent to the creative-level notification topic.\n       * @param {string} params.accountId The account of the creative to watch.\n       * @param {adexchangebuyer2(v2beta1).WatchCreativeRequest} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      watch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/creatives/{creativeId}:watch',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'creativeId'],\n          pathParams: ['creativeId', 'accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adexchangebuyer2.accounts.creatives.update\n       *\n       * @desc Updates a creative.\n       *\n       * @alias adexchangebuyer2.accounts.creatives.update\n       * @memberOf! adexchangebuyer2(v2beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId The account that this creative belongs to. Can be used to filter the response of the creatives.list method.\n       * @param {string} params.creativeId The buyer-defined creative ID of this creative. Can be used to filter the response of the creatives.list method.\n       * @param {adexchangebuyer2(v2beta1).Creative} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/creatives/{creativeId}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'creativeId'],\n          pathParams: ['accountId', 'creativeId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adexchangebuyer2.accounts.creatives.list\n       *\n       * @desc Lists creatives.\n       *\n       * @alias adexchangebuyer2.accounts.creatives.list\n       * @memberOf! adexchangebuyer2(v2beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListCreativesResponse.next_page_token returned from the previous call to 'ListCreatives' method.\n       * @param {string} params.accountId The account to list the creatives from. Specify \"-\" to list all creatives the current user has access to.\n       * @param {integer=} params.pageSize Requested page size. The server may return fewer creatives than requested (due to timeout constraint) even if more are available via another call. If unspecified, server will pick an appropriate default. Acceptable values are 1 to 1000, inclusive.\n       * @param {string=} params.query An optional query string to filter creatives. If no filter is specified, all active creatives will be returned. Supported queries are: <ul> <li>accountId=<i>account_id_string</i> <li>creativeId=<i>creative_id_string</i> <li>dealsStatus: {approved, conditionally_approved, disapproved,                    not_checked} <li>openAuctionStatus: {approved, conditionally_approved, disapproved,                           not_checked} <li>attribute: {a numeric attribute from the list of attributes} <li>disapprovalReason: {a reason from DisapprovalReason </ul> Example: 'accountId=12345 AND (dealsStatus:disapproved AND disapprovalReason:unacceptable_content) OR attribute:47'\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/creatives',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      dealAssociations: {\n\n        /**\n         * adexchangebuyer2.accounts.creatives.dealAssociations.list\n         *\n         * @desc List all creative-deal associations.\n         *\n         * @alias adexchangebuyer2.accounts.creatives.dealAssociations.list\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.creativeId The creative ID to list the associations from. Specify \"-\" to list all creatives under the above account.\n         * @param {string=} params.pageToken A token identifying a page of results the server should return. Typically, this is the value of ListDealAssociationsResponse.next_page_token returned from the previous call to 'ListDealAssociations' method.\n         * @param {string} params.accountId The account to list the associations from. Specify \"-\" to list all creatives the current user has access to.\n         * @param {integer=} params.pageSize Requested page size. Server may return fewer associations than requested. If unspecified, server will pick an appropriate default.\n         * @param {string=} params.query An optional query string to filter deal associations. If no filter is specified, all associations will be returned. Supported queries are: <ul> <li>accountId=<i>account_id_string</i> <li>creativeId=<i>creative_id_string</i> <li>dealsId=<i>deals_id_string</i> <li>dealsStatus:{approved, conditionally_approved, disapproved,                   not_checked} <li>openAuctionStatus:{approved, conditionally_approved, disapproved,                          not_checked} </ul> Example: 'dealsId=12345 AND dealsStatus:disapproved'\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'creativeId'],\n            pathParams: ['creativeId', 'accountId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * adexchangebuyer2.accounts.creatives.dealAssociations.add\n         *\n         * @desc Associate an existing deal with a creative.\n         *\n         * @alias adexchangebuyer2.accounts.creatives.dealAssociations.add\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.creativeId The ID of the creative associated with the deal.\n         * @param {string} params.accountId The account the creative belongs to.\n         * @param {adexchangebuyer2(v2beta1).AddDealAssociationRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        add: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:add',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'creativeId'],\n            pathParams: ['creativeId', 'accountId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * adexchangebuyer2.accounts.creatives.dealAssociations.remove\n         *\n         * @desc Remove the association between a deal and a creative.\n         *\n         * @alias adexchangebuyer2.accounts.creatives.dealAssociations.remove\n         * @memberOf! adexchangebuyer2(v2beta1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.creativeId The ID of the creative associated with the deal.\n         * @param {string} params.accountId The account the creative belongs to.\n         * @param {adexchangebuyer2(v2beta1).RemoveDealAssociationRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        remove: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://adexchangebuyer.googleapis.com/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:remove',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'creativeId'],\n            pathParams: ['creativeId', 'accountId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        }\n      }\n    }\n  };\n}\n\n/**\n * @typedef AuctionContext\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n * @property {string[]} auctionTypes The auction types this restriction applies to.\n */\n/**\n * @typedef ListClientUserInvitationsResponse\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n* @property {string} nextPageToken A token to retrieve the next page of results.\nPass this value in the\nListClientUserInvitationsRequest.pageToken\nfield in the subsequent call to the\nclients.invitations.list\nmethod to retrieve the next\npage of results.\n* @property {adexchangebuyer2(v2beta1).ClientUserInvitation[]} invitations The returned list of client users.\n*/\n/**\n * @typedef ListClientUsersResponse\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n* @property {string} nextPageToken A token to retrieve the next page of results.\nPass this value in the\nListClientUsersRequest.pageToken\nfield in the subsequent call to the\nclients.invitations.list\nmethod to retrieve the next\npage of results.\n* @property {adexchangebuyer2(v2beta1).ClientUser[]} users The returned list of client users.\n*/\n/**\n * @typedef LocationContext\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n* @property {integer[]} geoCriteriaIds IDs representing the geo location for this context.\nPlease refer to the\n[geo-table.csv](https://storage.googleapis.com/adx-rtb-dictionaries/geo-table.csv)\nfile for different geo criteria IDs.\n*/\n/**\n * @typedef PlatformContext\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n * @property {string[]} platforms The platforms this restriction applies to.\n */\n/**\n * @typedef ClientUser\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n* @property {string} userId The unique numerical ID of the client user\nthat has accepted an invitation.\nThe value of this field is ignored in an update operation.\n* @property {string} email User&#39;s email address. The value of this field\nis ignored in an update operation.\n* @property {string} clientAccountId Numerical account ID of the client buyer\nwith which the user is associated; the\nbuyer must be a client of the current sponsor buyer.\nThe value of this field is ignored in an update operation.\n* @property {string} status The status of the client user.\n*/\n/**\n * @typedef CreativeDealAssociation\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n * @property {string} creativeId The ID of the creative associated with the deal.\n * @property {string} dealsId The externalDealId for the deal associated with the creative.\n * @property {string} accountId The account the creative belongs to.\n */\n/**\n * @typedef Creative\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n* @property {adexchangebuyer2(v2beta1).NativeContent} native A native creative.\n* @property {adexchangebuyer2(v2beta1).VideoContent} video A video creative.\n* @property {adexchangebuyer2(v2beta1).ServingRestriction[]} servingRestrictions @OutputOnly The granular status of this ad in specific contexts.\nA context here relates to where something ultimately serves (for example,\na physical location, a platform, an HTTPS vs HTTP request, or the type\nof auction).\n* @property {string} agencyId The agency ID for this creative.\n* @property {string[]} clickThroughUrls The set of destination URLs for the creative.\n* @property {integer[]} detectedSensitiveCategories @OutputOnly Detected sensitive categories, if any.\nSee the ad-sensitive-categories.txt file in the technical documentation for\na list of IDs. You should use these IDs along with the\nexcluded-sensitive-category field in the bid request to filter your bids.\n* @property {string} adChoicesDestinationUrl The link to AdChoices destination page.\n* @property {string[]} restrictedCategories All restricted categories for the ads that may be shown from this creative.\n* @property {adexchangebuyer2(v2beta1).Correction[]} corrections @OutputOnly Shows any corrections that were applied to this creative.\n* @property {integer} version @OutputOnly The version of this creative.\n* @property {integer[]} vendorIds All vendor IDs for the ads that may be shown from this creative.\nSee https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt\nfor possible values.\n* @property {string[]} impressionTrackingUrls The set of URLs to be called to record an impression.\n* @property {adexchangebuyer2(v2beta1).HtmlContent} html An HTML creative.\n* @property {string} dealsStatus @OutputOnly The top-level deals status of this creative.\nIf disapproved, an entry for &#39;auctionType=DIRECT_DEALS&#39; (or &#39;ALL&#39;) in\nserving_restrictions will also exist. Note\nthat this may be nuanced with other contextual restrictions, in which case,\nit may be preferable to read from serving_restrictions directly.\nCan be used to filter the response of the\ncreatives.list\nmethod.\n* @property {integer[]} detectedProductCategories @OutputOnly Detected product categories, if any.\nSee the ad-product-categories.txt file in the technical documentation\nfor a list of IDs.\n* @property {string} openAuctionStatus @OutputOnly The top-level open auction status of this creative.\nIf disapproved, an entry for &#39;auctionType = OPEN_AUCTION&#39; (or &#39;ALL&#39;) in\nserving_restrictions will also exist. Note\nthat this may be nuanced with other contextual restrictions, in which case,\nit may be preferable to read from serving_restrictions directly.\nCan be used to filter the response of the\ncreatives.list\nmethod.\n* @property {string} advertiserName The name of the company being advertised in the creative.\n* @property {string[]} detectedAdvertiserIds @OutputOnly Detected advertiser IDs, if any.\n* @property {string[]} detectedDomains @OutputOnly\nThe detected domains for this creative.\n* @property {adexchangebuyer2(v2beta1).FilteringStats} filteringStats @OutputOnly The filtering stats for this creative.\n* @property {string[]} attributes All attributes for the ads that may be shown from this creative.\nCan be used to filter the response of the\ncreatives.list\nmethod.\n* @property {string} apiUpdateTime @OutputOnly The last update timestamp of the creative via API.\n* @property {string[]} detectedLanguages @OutputOnly\nThe detected languages for this creative. The order is arbitrary. The codes\nare 2 or 5 characters and are documented at\nhttps://developers.google.com/adwords/api/docs/appendix/languagecodes.\n* @property {string} creativeId The buyer-defined creative ID of this creative.\nCan be used to filter the response of the\ncreatives.list\nmethod.\n* @property {string} accountId The account that this creative belongs to.\nCan be used to filter the response of the\ncreatives.list\nmethod.\n*/\n/**\n * @typedef FilteringStats\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n* @property {adexchangebuyer2(v2beta1).Reason[]} reasons The set of filtering reasons for this date.\n* @property {adexchangebuyer2(v2beta1).Date} date The day during which the data was collected.\nThe data is collected from 00:00:00 to 23:59:59 PT.\nDuring switches from PST to PDT and back, the day may\ncontain 23 or 25 hours of data instead of the usual 24.\n*/\n/**\n * @typedef RemoveDealAssociationRequest\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n * @property {adexchangebuyer2(v2beta1).CreativeDealAssociation} association The association between a creative and a deal that should be removed.\n */\n/**\n * @typedef Client\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n* @property {boolean} visibleToSeller Whether the client buyer will be visible to sellers.\n* @property {string} entityId Numerical identifier of the client entity.\nThe entity can be an advertiser, a brand, or an agency.\nThis identifier is unique among all the entities with the same type.\n\nA list of all known advertisers with their identifiers is available in the\n[advertisers.txt](https://storage.googleapis.com/adx-rtb-dictionaries/advertisers.txt)\nfile.\n\nA list of all known brands with their identifiers is available in the\n[brands.txt](https://storage.googleapis.com/adx-rtb-dictionaries/brands.txt)\nfile.\n\nA list of all known agencies with their identifiers is available in the\n[agencies.txt](https://storage.googleapis.com/adx-rtb-dictionaries/agencies.txt)\nfile.\n* @property {string} clientAccountId The globally-unique numerical ID of the client.\nThe value of this field is ignored in create and update operations.\n* @property {string} entityName The name of the entity. This field is automatically fetched based on\nthe type and ID.\nThe value of this field is ignored in create and update operations.\n* @property {string} status The status of the client buyer.\n* @property {string} entityType The type of the client entity: `ADVERTISER`, `BRAND`, or `AGENCY`.\n* @property {string} clientName Name used to represent this client to publishers.\nYou may have multiple clients that map to the same entity,\nbut for each client the combination of `clientName` and entity\nmust be unique.\nYou can specify this field as empty.\n* @property {string} role The role which is assigned to the client buyer. Each role implies a set of\npermissions granted to the client. Must be one of `CLIENT_DEAL_VIEWER`,\n`CLIENT_DEAL_NEGOTIATOR` or `CLIENT_DEAL_APPROVER`.\n*/\n/**\n * @typedef Correction\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n * @property {string[]} details Additional details about what was corrected.\n * @property {string} type The type of correction that was applied to the creative.\n * @property {adexchangebuyer2(v2beta1).ServingContext[]} contexts The contexts for the correction.\n */\n/**\n * @typedef ListDealAssociationsResponse\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n* @property {string} nextPageToken A token to retrieve the next page of results.\nPass this value in the\nListDealAssociationsRequest.page_token\nfield in the subsequent call to &#39;ListDealAssociation&#39; method to retrieve\nthe next page of results.\n* @property {adexchangebuyer2(v2beta1).CreativeDealAssociation[]} associations The list of associations.\n*/\n/**\n * @typedef AddDealAssociationRequest\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n * @property {adexchangebuyer2(v2beta1).CreativeDealAssociation} association The association between a creative and a deal that should be added.\n */\n/**\n * @typedef StopWatchingCreativeRequest\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n */\n/**\n * @typedef Disapproval\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n * @property {string[]} details Additional details about the reason for disapproval.\n * @property {string} reason The categorized reason for disapproval.\n */\n/**\n * @typedef ServingRestriction\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n* @property {adexchangebuyer2(v2beta1).ServingContext[]} contexts The contexts for the restriction.\n* @property {string} status The status of the creative in this context (for example, it has been\nexplicitly disapproved or is pending review).\n* @property {adexchangebuyer2(v2beta1).Disapproval[]} disapprovalReasons Any disapprovals bound to this restriction.\nOnly present if status=DISAPPROVED.\nCan be used to filter the response of the\ncreatives.list\nmethod.\n*/\n/**\n * @typedef Date\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n* @property {integer} month Month of year. Must be from 1 to 12.\n* @property {integer} year Year of date. Must be from 1 to 9999, or 0 if specifying a date without\na year.\n* @property {integer} day Day of month. Must be from 1 to 31 and valid for the year and month, or 0\nif specifying a year/month where the day is not significant.\n*/\n/**\n * @typedef Empty\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n */\n/**\n * @typedef WatchCreativeRequest\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n* @property {string} topic The Pub/Sub topic to publish notifications to.\nThis topic must already exist and must give permission to\nad-exchange-buyside-reports@google.com to write to the topic.\nThis should be the full resource name in\n&quot;projects/{project_id}/topics/{topic_id}&quot; format.\n*/\n/**\n * @typedef AppContext\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n * @property {string[]} appTypes The app types this restriction applies to.\n */\n/**\n * @typedef ListClientsResponse\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n* @property {string} nextPageToken A token to retrieve the next page of results.\nPass this value in the\nListClientsRequest.pageToken\nfield in the subsequent call to the\naccounts.clients.list method\nto retrieve the next page of results.\n* @property {adexchangebuyer2(v2beta1).Client[]} clients The returned list of clients.\n*/\n/**\n * @typedef NativeContent\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n * @property {adexchangebuyer2(v2beta1).Image} image A large image.\n * @property {string} clickTrackingUrl The URL to use for click tracking.\n * @property {string} advertiserName The name of the advertiser or sponsor, to be displayed in the ad creative.\n * @property {string} storeUrl The URL to the app store to purchase/download the promoted app.\n * @property {string} headline A short title for the ad.\n * @property {adexchangebuyer2(v2beta1).Image} appIcon The app icon, for app download ads.\n * @property {string} callToAction A label for the button that the user is supposed to click.\n * @property {string} body A long description of the ad.\n * @property {number} starRating The app rating in the app store. Must be in the range [0-5].\n * @property {string} videoUrl The URL to fetch a native video ad.\n * @property {adexchangebuyer2(v2beta1).Image} logo A smaller image, for the advertiser&#39;s logo.\n * @property {string} clickLinkUrl The URL that the browser/SDK will load when the user clicks the ad.\n * @property {string} priceDisplayText The price of the promoted app including currency info.\n */\n/**\n * @typedef SecurityContext\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n * @property {string[]} securities The security types in this context.\n */\n/**\n * @typedef HtmlContent\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n * @property {integer} width The width of the HTML snippet in pixels.\n * @property {string} snippet The HTML snippet that displays the ad when inserted in the web page.\n * @property {integer} height The height of the HTML snippet in pixels.\n */\n/**\n * @typedef ListCreativesResponse\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n* @property {string} nextPageToken A token to retrieve the next page of results.\nPass this value in the\nListCreativesRequest.page_token\nfield in the subsequent call to `ListCreatives` method to retrieve the next\npage of results.\n* @property {adexchangebuyer2(v2beta1).Creative[]} creatives The list of creatives.\n*/\n/**\n * @typedef ServingContext\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n* @property {adexchangebuyer2(v2beta1).AuctionContext} auctionType Matches impressions for a particular auction type.\n* @property {string} all Matches all contexts.\n* @property {adexchangebuyer2(v2beta1).AppContext} appType Matches impressions for a particular app type.\n* @property {adexchangebuyer2(v2beta1).SecurityContext} securityType Matches impressions for a particular security type.\n* @property {adexchangebuyer2(v2beta1).PlatformContext} platform Matches impressions coming from a particular platform.\n* @property {adexchangebuyer2(v2beta1).LocationContext} location Matches impressions coming from users *or* publishers in a specific\nlocation.\n*/\n/**\n * @typedef Image\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n * @property {integer} width Image width in pixels.\n * @property {string} url The URL of the image.\n * @property {integer} height Image height in pixels.\n */\n/**\n * @typedef Reason\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n* @property {integer} status The filtering status code. Please refer to the\n[creative-status-codes.txt](https://storage.googleapis.com/adx-rtb-dictionaries/creative-status-codes.txt)\nfile for different statuses.\n* @property {string} count The number of times the creative was filtered for the status. The\ncount is aggregated across all publishers on the exchange.\n*/\n/**\n * @typedef VideoContent\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n * @property {string} videoUrl The URL to fetch a video ad.\n */\n/**\n * @typedef ClientUserInvitation\n * @memberOf! adexchangebuyer2(v2beta1)\n * @type object\n* @property {string} invitationId The unique numerical ID of the invitation that is sent to the user.\nThe value of this field is ignored in create operations.\n* @property {string} email The email address to which the invitation is sent. Email\naddresses should be unique among all client users under each sponsor\nbuyer.\n* @property {string} clientAccountId Numerical account ID of the client buyer\nthat the invited user is associated with.\nThe value of this field is ignored in create operations.\n*/\nmodule.exports = Adexchangebuyer2;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/adexchangebuyer/v1.2.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Ad Exchange Buyer API\n *\n * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.\n *\n * @example\n * var google = require('googleapis');\n * var adexchangebuyer = google.adexchangebuyer('v1.2');\n *\n * @namespace adexchangebuyer\n * @type {Function}\n * @version v1.2\n * @variation v1.2\n * @param {object=} options Options for Adexchangebuyer\n */\nfunction Adexchangebuyer(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.accounts = {\n\n    /**\n     * adexchangebuyer.accounts.get\n     *\n     * @desc Gets one account by ID.\n     *\n     * @alias adexchangebuyer.accounts.get\n     * @memberOf! adexchangebuyer(v1.2)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.id The account id\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.2/accounts/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.accounts.list\n     *\n     * @desc Retrieves the authenticated user's list of accounts.\n     *\n     * @alias adexchangebuyer.accounts.list\n     * @memberOf! adexchangebuyer(v1.2)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.2/accounts',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.accounts.patch\n     *\n     * @desc Updates an existing account. This method supports patch semantics.\n     *\n     * @alias adexchangebuyer.accounts.patch\n     * @memberOf! adexchangebuyer(v1.2)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.id The account id\n     * @param {adexchangebuyer(v1.2).Account} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.2/accounts/{id}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.accounts.update\n     *\n     * @desc Updates an existing account.\n     *\n     * @alias adexchangebuyer.accounts.update\n     * @memberOf! adexchangebuyer(v1.2)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.id The account id\n     * @param {adexchangebuyer(v1.2).Account} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.2/accounts/{id}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.creatives = {\n\n    /**\n     * adexchangebuyer.creatives.get\n     *\n     * @desc Gets the status for a single creative. A creative will be available 30-40 minutes after submission.\n     *\n     * @alias adexchangebuyer.creatives.get\n     * @memberOf! adexchangebuyer(v1.2)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.accountId The id for the account that will serve this creative.\n     * @param {string} params.buyerCreativeId The buyer-specific id for this creative.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.2/creatives/{accountId}/{buyerCreativeId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'buyerCreativeId'],\n        pathParams: ['accountId', 'buyerCreativeId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.creatives.insert\n     *\n     * @desc Submit a new creative.\n     *\n     * @alias adexchangebuyer.creatives.insert\n     * @memberOf! adexchangebuyer(v1.2)\n     *\n     * @param {object} params Parameters for request\n     * @param {adexchangebuyer(v1.2).Creative} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.2/creatives',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.creatives.list\n     *\n     * @desc Retrieves a list of the authenticated user's active creatives. A creative will be available 30-40 minutes after submission.\n     *\n     * @alias adexchangebuyer.creatives.list\n     * @memberOf! adexchangebuyer(v1.2)\n     *\n     * @param {object=} params Parameters for request\n     * @param {integer=} params.maxResults Maximum number of entries returned on one result page. If not set, the default is 100. Optional.\n     * @param {string=} params.pageToken A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response. Optional.\n     * @param {string=} params.statusFilter When specified, only creatives having the given status are returned.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.2/creatives',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef Account\n * @memberOf! adexchangebuyer(v1.2)\n * @type object\n * @property {object[]} bidderLocation Your bidder locations that have distinct URLs.\n * @property {string} cookieMatchingNid The nid parameter value used in cookie match requests. Please contact your technical account manager if you need to change this.\n * @property {string} cookieMatchingUrl The base URL used in cookie match requests.\n * @property {integer} id Account id.\n * @property {string} kind Resource type.\n * @property {integer} maximumActiveCreatives The maximum number of active creatives that an account can have, where a creative is active if it was inserted or bid with in the last 30 days. Please contact your technical account manager if you need to change this.\n * @property {integer} maximumTotalQps The sum of all bidderLocation.maximumQps values cannot exceed this. Please contact your technical account manager if you need to change this.\n * @property {integer} numberActiveCreatives The number of creatives that this account inserted or bid with in the last 30 days.\n */\n/**\n * @typedef AccountsList\n * @memberOf! adexchangebuyer(v1.2)\n * @type object\n * @property {adexchangebuyer(v1.2).Account[]} items A list of accounts.\n * @property {string} kind Resource type.\n */\n/**\n * @typedef Creative\n * @memberOf! adexchangebuyer(v1.2)\n * @type object\n * @property {string} HTMLSnippet The HTML snippet that displays the ad when inserted in the web page. If set, videoURL should not be set.\n * @property {integer} accountId Account id.\n * @property {string[]} advertiserId Detected advertiser id, if any. Read-only. This field should not be set in requests.\n * @property {string} advertiserName The name of the company being advertised in the creative.\n * @property {string} agencyId The agency id for this creative.\n * @property {string} apiUploadTimestamp The last upload timestamp of this creative if it was uploaded via API. Read-only. The value of this field is generated, and will be ignored for uploads. (formatted RFC 3339 timestamp).\n * @property {integer[]} attribute All attributes for the ads that may be shown from this snippet.\n * @property {string} buyerCreativeId A buyer-specific id identifying the creative in this ad.\n * @property {string[]} clickThroughUrl The set of destination urls for the snippet.\n * @property {object[]} corrections Shows any corrections that were applied to this creative. Read-only. This field should not be set in requests.\n * @property {object[]} disapprovalReasons The reasons for disapproval, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue. Read-only. This field should not be set in requests.\n * @property {object} filteringReasons The filtering reasons for the creative. Read-only. This field should not be set in requests.\n * @property {integer} height Ad height.\n * @property {string[]} impressionTrackingUrl The set of urls to be called to record an impression.\n * @property {string} kind Resource type.\n * @property {integer[]} productCategories Detected product categories, if any. Read-only. This field should not be set in requests.\n * @property {integer[]} restrictedCategories All restricted categories for the ads that may be shown from this snippet.\n * @property {integer[]} sensitiveCategories Detected sensitive categories, if any. Read-only. This field should not be set in requests.\n * @property {string} status Creative serving status. Read-only. This field should not be set in requests.\n * @property {integer[]} vendorType All vendor types for the ads that may be shown from this snippet.\n * @property {integer} version The version for this creative. Read-only. This field should not be set in requests.\n * @property {string} videoURL The url to fetch a video ad. If set, HTMLSnippet should not be set.\n * @property {integer} width Ad width.\n */\n/**\n * @typedef CreativesList\n * @memberOf! adexchangebuyer(v1.2)\n * @type object\n * @property {adexchangebuyer(v1.2).Creative[]} items A list of creatives.\n * @property {string} kind Resource type.\n * @property {string} nextPageToken Continuation token used to page through creatives. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; value to this.\n */\nmodule.exports = Adexchangebuyer;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/adexchangebuyer/v1.3.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Ad Exchange Buyer API\n *\n * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.\n *\n * @example\n * var google = require('googleapis');\n * var adexchangebuyer = google.adexchangebuyer('v1.3');\n *\n * @namespace adexchangebuyer\n * @type {Function}\n * @version v1.3\n * @variation v1.3\n * @param {object=} options Options for Adexchangebuyer\n */\nfunction Adexchangebuyer(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.accounts = {\n\n    /**\n     * adexchangebuyer.accounts.get\n     *\n     * @desc Gets one account by ID.\n     *\n     * @alias adexchangebuyer.accounts.get\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.id The account id\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/accounts/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.accounts.list\n     *\n     * @desc Retrieves the authenticated user's list of accounts.\n     *\n     * @alias adexchangebuyer.accounts.list\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/accounts',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.accounts.patch\n     *\n     * @desc Updates an existing account. This method supports patch semantics.\n     *\n     * @alias adexchangebuyer.accounts.patch\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.id The account id\n     * @param {adexchangebuyer(v1.3).Account} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/accounts/{id}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.accounts.update\n     *\n     * @desc Updates an existing account.\n     *\n     * @alias adexchangebuyer.accounts.update\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.id The account id\n     * @param {adexchangebuyer(v1.3).Account} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/accounts/{id}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.billingInfo = {\n\n    /**\n     * adexchangebuyer.billingInfo.get\n     *\n     * @desc Returns the billing information for one account specified by account ID.\n     *\n     * @alias adexchangebuyer.billingInfo.get\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.accountId The account id.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/billinginfo/{accountId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.billingInfo.list\n     *\n     * @desc Retrieves a list of billing information for all accounts of the authenticated user.\n     *\n     * @alias adexchangebuyer.billingInfo.list\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/billinginfo',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.budget = {\n\n    /**\n     * adexchangebuyer.budget.get\n     *\n     * @desc Returns the budget information for the adgroup specified by the accountId and billingId.\n     *\n     * @alias adexchangebuyer.budget.get\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id to get the budget information for.\n     * @param {string} params.billingId The billing id to get the budget information for.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/billinginfo/{accountId}/{billingId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'billingId'],\n        pathParams: ['accountId', 'billingId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.budget.patch\n     *\n     * @desc Updates the budget amount for the budget of the adgroup specified by the accountId and billingId, with the budget amount in the request. This method supports patch semantics.\n     *\n     * @alias adexchangebuyer.budget.patch\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id associated with the budget being updated.\n     * @param {string} params.billingId The billing id associated with the budget being updated.\n     * @param {adexchangebuyer(v1.3).Budget} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/billinginfo/{accountId}/{billingId}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'billingId'],\n        pathParams: ['accountId', 'billingId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.budget.update\n     *\n     * @desc Updates the budget amount for the budget of the adgroup specified by the accountId and billingId, with the budget amount in the request.\n     *\n     * @alias adexchangebuyer.budget.update\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id associated with the budget being updated.\n     * @param {string} params.billingId The billing id associated with the budget being updated.\n     * @param {adexchangebuyer(v1.3).Budget} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/billinginfo/{accountId}/{billingId}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'billingId'],\n        pathParams: ['accountId', 'billingId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.creatives = {\n\n    /**\n     * adexchangebuyer.creatives.get\n     *\n     * @desc Gets the status for a single creative. A creative will be available 30-40 minutes after submission.\n     *\n     * @alias adexchangebuyer.creatives.get\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.accountId The id for the account that will serve this creative.\n     * @param {string} params.buyerCreativeId The buyer-specific id for this creative.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/creatives/{accountId}/{buyerCreativeId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'buyerCreativeId'],\n        pathParams: ['accountId', 'buyerCreativeId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.creatives.insert\n     *\n     * @desc Submit a new creative.\n     *\n     * @alias adexchangebuyer.creatives.insert\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object} params Parameters for request\n     * @param {adexchangebuyer(v1.3).Creative} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/creatives',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.creatives.list\n     *\n     * @desc Retrieves a list of the authenticated user's active creatives. A creative will be available 30-40 minutes after submission.\n     *\n     * @alias adexchangebuyer.creatives.list\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object=} params Parameters for request\n     * @param {integer=} params.accountId When specified, only creatives for the given account ids are returned.\n     * @param {string=} params.buyerCreativeId When specified, only creatives for the given buyer creative ids are returned.\n     * @param {integer=} params.maxResults Maximum number of entries returned on one result page. If not set, the default is 100. Optional.\n     * @param {string=} params.pageToken A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response. Optional.\n     * @param {string=} params.statusFilter When specified, only creatives having the given status are returned.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/creatives',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.directDeals = {\n\n    /**\n     * adexchangebuyer.directDeals.get\n     *\n     * @desc Gets one direct deal by ID.\n     *\n     * @alias adexchangebuyer.directDeals.get\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id The direct deal id\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/directdeals/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.directDeals.list\n     *\n     * @desc Retrieves the authenticated user's list of direct deals.\n     *\n     * @alias adexchangebuyer.directDeals.list\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/directdeals',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.performanceReport = {\n\n    /**\n     * adexchangebuyer.performanceReport.list\n     *\n     * @desc Retrieves the authenticated user's list of performance metrics.\n     *\n     * @alias adexchangebuyer.performanceReport.list\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id to get the reports.\n     * @param {string} params.endDateTime The end time of the report in ISO 8601 timestamp format using UTC.\n     * @param {integer=} params.maxResults Maximum number of entries returned on one result page. If not set, the default is 100. Optional.\n     * @param {string=} params.pageToken A continuation token, used to page through performance reports. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response. Optional.\n     * @param {string} params.startDateTime The start time of the report in ISO 8601 timestamp format using UTC.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/performancereport',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'endDateTime', 'startDateTime'],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.pretargetingConfig = {\n\n    /**\n     * adexchangebuyer.pretargetingConfig.delete\n     *\n     * @desc Deletes an existing pretargeting config.\n     *\n     * @alias adexchangebuyer.pretargetingConfig.delete\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id to delete the pretargeting config for.\n     * @param {string} params.configId The specific id of the configuration to delete.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/pretargetingconfigs/{accountId}/{configId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'configId'],\n        pathParams: ['accountId', 'configId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.pretargetingConfig.get\n     *\n     * @desc Gets a specific pretargeting configuration\n     *\n     * @alias adexchangebuyer.pretargetingConfig.get\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id to get the pretargeting config for.\n     * @param {string} params.configId The specific id of the configuration to retrieve.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/pretargetingconfigs/{accountId}/{configId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'configId'],\n        pathParams: ['accountId', 'configId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.pretargetingConfig.insert\n     *\n     * @desc Inserts a new pretargeting configuration.\n     *\n     * @alias adexchangebuyer.pretargetingConfig.insert\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id to insert the pretargeting config for.\n     * @param {adexchangebuyer(v1.3).PretargetingConfig} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/pretargetingconfigs/{accountId}',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.pretargetingConfig.list\n     *\n     * @desc Retrieves a list of the authenticated user's pretargeting configurations.\n     *\n     * @alias adexchangebuyer.pretargetingConfig.list\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id to get the pretargeting configs for.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/pretargetingconfigs/{accountId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.pretargetingConfig.patch\n     *\n     * @desc Updates an existing pretargeting config. This method supports patch semantics.\n     *\n     * @alias adexchangebuyer.pretargetingConfig.patch\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id to update the pretargeting config for.\n     * @param {string} params.configId The specific id of the configuration to update.\n     * @param {adexchangebuyer(v1.3).PretargetingConfig} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/pretargetingconfigs/{accountId}/{configId}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'configId'],\n        pathParams: ['accountId', 'configId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.pretargetingConfig.update\n     *\n     * @desc Updates an existing pretargeting config.\n     *\n     * @alias adexchangebuyer.pretargetingConfig.update\n     * @memberOf! adexchangebuyer(v1.3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id to update the pretargeting config for.\n     * @param {string} params.configId The specific id of the configuration to update.\n     * @param {adexchangebuyer(v1.3).PretargetingConfig} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.3/pretargetingconfigs/{accountId}/{configId}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'configId'],\n        pathParams: ['accountId', 'configId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef Account\n * @memberOf! adexchangebuyer(v1.3)\n * @type object\n * @property {object[]} bidderLocation Your bidder locations that have distinct URLs.\n * @property {string} cookieMatchingNid The nid parameter value used in cookie match requests. Please contact your technical account manager if you need to change this.\n * @property {string} cookieMatchingUrl The base URL used in cookie match requests.\n * @property {integer} id Account id.\n * @property {string} kind Resource type.\n * @property {integer} maximumActiveCreatives The maximum number of active creatives that an account can have, where a creative is active if it was inserted or bid with in the last 30 days. Please contact your technical account manager if you need to change this.\n * @property {integer} maximumTotalQps The sum of all bidderLocation.maximumQps values cannot exceed this. Please contact your technical account manager if you need to change this.\n * @property {integer} numberActiveCreatives The number of creatives that this account inserted or bid with in the last 30 days.\n */\n/**\n * @typedef AccountsList\n * @memberOf! adexchangebuyer(v1.3)\n * @type object\n * @property {adexchangebuyer(v1.3).Account[]} items A list of accounts.\n * @property {string} kind Resource type.\n */\n/**\n * @typedef BillingInfo\n * @memberOf! adexchangebuyer(v1.3)\n * @type object\n * @property {integer} accountId Account id.\n * @property {string} accountName Account name.\n * @property {string[]} billingId A list of adgroup IDs associated with this particular account. These IDs may show up as part of a realtime bidding BidRequest, which indicates a bid request for this account.\n * @property {string} kind Resource type.\n */\n/**\n * @typedef BillingInfoList\n * @memberOf! adexchangebuyer(v1.3)\n * @type object\n * @property {adexchangebuyer(v1.3).BillingInfo[]} items A list of billing info relevant for your account.\n * @property {string} kind Resource type.\n */\n/**\n * @typedef Budget\n * @memberOf! adexchangebuyer(v1.3)\n * @type object\n * @property {string} accountId The id of the account. This is required for get and update requests.\n * @property {string} billingId The billing id to determine which adgroup to provide budget information for. This is required for get and update requests.\n * @property {string} budgetAmount The daily budget amount in unit amount of the account currency to apply for the billingId provided. This is required for update requests.\n * @property {string} currencyCode The currency code for the buyer. This cannot be altered here.\n * @property {string} id The unique id that describes this item.\n * @property {string} kind The kind of the resource, i.e. &quot;adexchangebuyer#budget&quot;.\n */\n/**\n * @typedef Creative\n * @memberOf! adexchangebuyer(v1.3)\n * @type object\n * @property {string} HTMLSnippet The HTML snippet that displays the ad when inserted in the web page. If set, videoURL should not be set.\n * @property {integer} accountId Account id.\n * @property {string[]} advertiserId Detected advertiser id, if any. Read-only. This field should not be set in requests.\n * @property {string} advertiserName The name of the company being advertised in the creative.\n * @property {string} agencyId The agency id for this creative.\n * @property {string} apiUploadTimestamp The last upload timestamp of this creative if it was uploaded via API. Read-only. The value of this field is generated, and will be ignored for uploads. (formatted RFC 3339 timestamp).\n * @property {integer[]} attribute All attributes for the ads that may be shown from this snippet.\n * @property {string} buyerCreativeId A buyer-specific id identifying the creative in this ad.\n * @property {string[]} clickThroughUrl The set of destination urls for the snippet.\n * @property {object[]} corrections Shows any corrections that were applied to this creative. Read-only. This field should not be set in requests.\n * @property {object[]} disapprovalReasons The reasons for disapproval, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue. Read-only. This field should not be set in requests.\n * @property {object} filteringReasons The filtering reasons for the creative. Read-only. This field should not be set in requests.\n * @property {integer} height Ad height.\n * @property {string[]} impressionTrackingUrl The set of urls to be called to record an impression.\n * @property {string} kind Resource type.\n * @property {object} nativeAd If nativeAd is set, HTMLSnippet and videoURL should not be set.\n * @property {integer[]} productCategories Detected product categories, if any. Read-only. This field should not be set in requests.\n * @property {integer[]} restrictedCategories All restricted categories for the ads that may be shown from this snippet.\n * @property {integer[]} sensitiveCategories Detected sensitive categories, if any. Read-only. This field should not be set in requests.\n * @property {string} status Creative serving status. Read-only. This field should not be set in requests.\n * @property {integer[]} vendorType All vendor types for the ads that may be shown from this snippet.\n * @property {integer} version The version for this creative. Read-only. This field should not be set in requests.\n * @property {string} videoURL The URL to fetch a video ad. If set, HTMLSnippet and the nativeAd should not be set.\n * @property {integer} width Ad width.\n */\n/**\n * @typedef CreativesList\n * @memberOf! adexchangebuyer(v1.3)\n * @type object\n * @property {adexchangebuyer(v1.3).Creative[]} items A list of creatives.\n * @property {string} kind Resource type.\n * @property {string} nextPageToken Continuation token used to page through creatives. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; value to this.\n */\n/**\n * @typedef DirectDeal\n * @memberOf! adexchangebuyer(v1.3)\n * @type object\n * @property {integer} accountId The account id of the buyer this deal is for.\n * @property {string} advertiser The name of the advertiser this deal is for.\n * @property {boolean} allowsAlcohol Whether the publisher for this deal is eligible for alcohol ads.\n * @property {string} buyerAccountId The account id that this deal was negotiated for. It is either the buyer or the client that this deal was negotiated on behalf of.\n * @property {string} currencyCode The currency code that applies to the fixed_cpm value. If not set then assumed to be USD.\n * @property {string} dealTier The deal type such as programmatic reservation or fixed price and so on.\n * @property {string} endTime End time for when this deal stops being active. If not set then this deal is valid until manually disabled by the publisher. In seconds since the epoch.\n * @property {string} fixedCpm The fixed price for this direct deal. In cpm micros of currency according to currency_code. If set, then this deal is eligible for the fixed price tier of buying (highest priority, pay exactly the configured fixed price).\n * @property {string} id Deal id.\n * @property {string} kind Resource type.\n * @property {string} name Deal name.\n * @property {string} privateExchangeMinCpm The minimum price for this direct deal. In cpm micros of currency according to currency_code. If set, then this deal is eligible for the private exchange tier of buying (below fixed price priority, run as a second price auction).\n * @property {boolean} publisherBlocksOverriden If true, the publisher has opted to have their blocks ignored when a creative is bid with for this deal.\n * @property {string} sellerNetwork The name of the publisher offering this direct deal.\n * @property {string} startTime Start time for when this deal becomes active. If not set then this deal is active immediately upon creation. In seconds since the epoch.\n */\n/**\n * @typedef DirectDealsList\n * @memberOf! adexchangebuyer(v1.3)\n * @type object\n * @property {adexchangebuyer(v1.3).DirectDeal[]} directDeals A list of direct deals relevant for your account.\n * @property {string} kind Resource type.\n */\n/**\n * @typedef PerformanceReport\n * @memberOf! adexchangebuyer(v1.3)\n * @type object\n * @property {number} bidRate The number of bid responses with an ad.\n * @property {number} bidRequestRate The number of bid requests sent to your bidder.\n * @property {any[]} calloutStatusRate Rate of various prefiltering statuses per match. Please refer to the callout-status-codes.txt file for different statuses.\n * @property {any[]} cookieMatcherStatusRate Average QPS for cookie matcher operations.\n * @property {any[]} creativeStatusRate Rate of ads with a given status. Please refer to the creative-status-codes.txt file for different statuses.\n * @property {number} filteredBidRate The number of bid responses that were filtered due to a policy violation or other errors.\n * @property {any[]} hostedMatchStatusRate Average QPS for hosted match operations.\n * @property {number} inventoryMatchRate The number of potential queries based on your pretargeting settings.\n * @property {string} kind Resource type.\n * @property {number} latency50thPercentile The 50th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.\n * @property {number} latency85thPercentile The 85th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.\n * @property {number} latency95thPercentile The 95th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.\n * @property {number} noQuotaInRegion Rate of various quota account statuses per quota check.\n * @property {number} outOfQuota Rate of various quota account statuses per quota check.\n * @property {number} pixelMatchRequests Average QPS for pixel match requests from clients.\n * @property {number} pixelMatchResponses Average QPS for pixel match responses from clients.\n * @property {number} quotaConfiguredLimit The configured quota limits for this account.\n * @property {number} quotaThrottledLimit The throttled quota limits for this account.\n * @property {string} region The trading location of this data.\n * @property {number} successfulRequestRate The number of properly formed bid responses received by our servers within the deadline.\n * @property {string} timestamp The unix timestamp of the starting time of this performance data.\n * @property {number} unsuccessfulRequestRate The number of bid responses that were unsuccessful due to timeouts, incorrect formatting, etc.\n */\n/**\n * @typedef PerformanceReportList\n * @memberOf! adexchangebuyer(v1.3)\n * @type object\n * @property {string} kind Resource type.\n * @property {adexchangebuyer(v1.3).PerformanceReport[]} performanceReport A list of performance reports relevant for the account.\n */\n/**\n * @typedef PretargetingConfig\n * @memberOf! adexchangebuyer(v1.3)\n * @type object\n * @property {string} billingId The id for billing purposes, provided for reference. Leave this field blank for insert requests; the id will be generated automatically.\n * @property {string} configId The config id; generated automatically. Leave this field blank for insert requests.\n * @property {string} configName The name of the config. Must be unique. Required for all requests.\n * @property {string[]} creativeType List must contain exactly one of PRETARGETING_CREATIVE_TYPE_HTML or PRETARGETING_CREATIVE_TYPE_VIDEO.\n * @property {object[]} dimensions Requests which allow one of these (width, height) pairs will match. All pairs must be supported ad dimensions.\n * @property {string[]} excludedContentLabels Requests with any of these content labels will not match. Values are from content-labels.txt in the downloadable files section.\n * @property {string[]} excludedGeoCriteriaIds Requests containing any of these geo criteria ids will not match.\n * @property {object[]} excludedPlacements Requests containing any of these placements will not match.\n * @property {string[]} excludedUserLists Requests containing any of these users list ids will not match.\n * @property {string[]} excludedVerticals Requests containing any of these vertical ids will not match. Values are from the publisher-verticals.txt file in the downloadable files section.\n * @property {string[]} geoCriteriaIds Requests containing any of these geo criteria ids will match.\n * @property {boolean} isActive Whether this config is active. Required for all requests.\n * @property {string} kind The kind of the resource, i.e. &quot;adexchangebuyer#pretargetingConfig&quot;.\n * @property {string[]} languages Request containing any of these language codes will match.\n * @property {string[]} mobileCarriers Requests containing any of these mobile carrier ids will match. Values are from mobile-carriers.csv in the downloadable files section.\n * @property {string[]} mobileDevices Requests containing any of these mobile device ids will match. Values are from mobile-devices.csv in the downloadable files section.\n * @property {string[]} mobileOperatingSystemVersions Requests containing any of these mobile operating system version ids will match. Values are from mobile-os.csv in the downloadable files section.\n * @property {object[]} placements Requests containing any of these placements will match.\n * @property {string[]} platforms Requests matching any of these platforms will match. Possible values are PRETARGETING_PLATFORM_MOBILE, PRETARGETING_PLATFORM_DESKTOP, and PRETARGETING_PLATFORM_TABLET.\n * @property {string[]} supportedCreativeAttributes Creative attributes should be declared here if all creatives corresponding to this pretargeting configuration have that creative attribute. Values are from pretargetable-creative-attributes.txt in the downloadable files section.\n * @property {string[]} userLists Requests containing any of these user list ids will match.\n * @property {string[]} vendorTypes Requests that allow any of these vendor ids will match. Values are from vendors.txt in the downloadable files section.\n * @property {string[]} verticals Requests containing any of these vertical ids will match.\n */\n/**\n * @typedef PretargetingConfigList\n * @memberOf! adexchangebuyer(v1.3)\n * @type object\n * @property {adexchangebuyer(v1.3).PretargetingConfig[]} items A list of pretargeting configs\n * @property {string} kind Resource type.\n */\nmodule.exports = Adexchangebuyer;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/adexchangebuyer/v1.4.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Ad Exchange Buyer API\n *\n * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.\n *\n * @example\n * var google = require('googleapis');\n * var adexchangebuyer = google.adexchangebuyer('v1.4');\n *\n * @namespace adexchangebuyer\n * @type {Function}\n * @version v1.4\n * @variation v1.4\n * @param {object=} options Options for Adexchangebuyer\n */\nfunction Adexchangebuyer(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.accounts = {\n\n    /**\n     * adexchangebuyer.accounts.get\n     *\n     * @desc Gets one account by ID.\n     *\n     * @alias adexchangebuyer.accounts.get\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.id The account id\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/accounts/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.accounts.list\n     *\n     * @desc Retrieves the authenticated user's list of accounts.\n     *\n     * @alias adexchangebuyer.accounts.list\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/accounts',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.accounts.patch\n     *\n     * @desc Updates an existing account. This method supports patch semantics.\n     *\n     * @alias adexchangebuyer.accounts.patch\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.confirmUnsafeAccountChange Confirmation for erasing bidder and cookie matching urls.\n     * @param {integer} params.id The account id\n     * @param {adexchangebuyer(v1.4).Account} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/accounts/{id}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.accounts.update\n     *\n     * @desc Updates an existing account.\n     *\n     * @alias adexchangebuyer.accounts.update\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.confirmUnsafeAccountChange Confirmation for erasing bidder and cookie matching urls.\n     * @param {integer} params.id The account id\n     * @param {adexchangebuyer(v1.4).Account} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/accounts/{id}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.billingInfo = {\n\n    /**\n     * adexchangebuyer.billingInfo.get\n     *\n     * @desc Returns the billing information for one account specified by account ID.\n     *\n     * @alias adexchangebuyer.billingInfo.get\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.accountId The account id.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/billinginfo/{accountId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.billingInfo.list\n     *\n     * @desc Retrieves a list of billing information for all accounts of the authenticated user.\n     *\n     * @alias adexchangebuyer.billingInfo.list\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/billinginfo',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.budget = {\n\n    /**\n     * adexchangebuyer.budget.get\n     *\n     * @desc Returns the budget information for the adgroup specified by the accountId and billingId.\n     *\n     * @alias adexchangebuyer.budget.get\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id to get the budget information for.\n     * @param {string} params.billingId The billing id to get the budget information for.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/billinginfo/{accountId}/{billingId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'billingId'],\n        pathParams: ['accountId', 'billingId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.budget.patch\n     *\n     * @desc Updates the budget amount for the budget of the adgroup specified by the accountId and billingId, with the budget amount in the request. This method supports patch semantics.\n     *\n     * @alias adexchangebuyer.budget.patch\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id associated with the budget being updated.\n     * @param {string} params.billingId The billing id associated with the budget being updated.\n     * @param {adexchangebuyer(v1.4).Budget} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/billinginfo/{accountId}/{billingId}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'billingId'],\n        pathParams: ['accountId', 'billingId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.budget.update\n     *\n     * @desc Updates the budget amount for the budget of the adgroup specified by the accountId and billingId, with the budget amount in the request.\n     *\n     * @alias adexchangebuyer.budget.update\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id associated with the budget being updated.\n     * @param {string} params.billingId The billing id associated with the budget being updated.\n     * @param {adexchangebuyer(v1.4).Budget} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/billinginfo/{accountId}/{billingId}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'billingId'],\n        pathParams: ['accountId', 'billingId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.creatives = {\n\n    /**\n     * adexchangebuyer.creatives.addDeal\n     *\n     * @desc Add a deal id association for the creative.\n     *\n     * @alias adexchangebuyer.creatives.addDeal\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.accountId The id for the account that will serve this creative.\n     * @param {string} params.buyerCreativeId The buyer-specific id for this creative.\n     * @param {string} params.dealId The id of the deal id to associate with this creative.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    addDeal: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/creatives/{accountId}/{buyerCreativeId}/addDeal/{dealId}',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'buyerCreativeId', 'dealId'],\n        pathParams: ['accountId', 'buyerCreativeId', 'dealId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.creatives.get\n     *\n     * @desc Gets the status for a single creative. A creative will be available 30-40 minutes after submission.\n     *\n     * @alias adexchangebuyer.creatives.get\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.accountId The id for the account that will serve this creative.\n     * @param {string} params.buyerCreativeId The buyer-specific id for this creative.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/creatives/{accountId}/{buyerCreativeId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'buyerCreativeId'],\n        pathParams: ['accountId', 'buyerCreativeId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.creatives.insert\n     *\n     * @desc Submit a new creative.\n     *\n     * @alias adexchangebuyer.creatives.insert\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {adexchangebuyer(v1.4).Creative} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/creatives',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.creatives.list\n     *\n     * @desc Retrieves a list of the authenticated user's active creatives. A creative will be available 30-40 minutes after submission.\n     *\n     * @alias adexchangebuyer.creatives.list\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object=} params Parameters for request\n     * @param {integer=} params.accountId When specified, only creatives for the given account ids are returned.\n     * @param {string=} params.buyerCreativeId When specified, only creatives for the given buyer creative ids are returned.\n     * @param {string=} params.dealsStatusFilter When specified, only creatives having the given deals status are returned.\n     * @param {integer=} params.maxResults Maximum number of entries returned on one result page. If not set, the default is 100. Optional.\n     * @param {string=} params.openAuctionStatusFilter When specified, only creatives having the given open auction status are returned.\n     * @param {string=} params.pageToken A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response. Optional.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/creatives',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.creatives.listDeals\n     *\n     * @desc Lists the external deal ids associated with the creative.\n     *\n     * @alias adexchangebuyer.creatives.listDeals\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.accountId The id for the account that will serve this creative.\n     * @param {string} params.buyerCreativeId The buyer-specific id for this creative.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    listDeals: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/creatives/{accountId}/{buyerCreativeId}/listDeals',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'buyerCreativeId'],\n        pathParams: ['accountId', 'buyerCreativeId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.creatives.removeDeal\n     *\n     * @desc Remove a deal id associated with the creative.\n     *\n     * @alias adexchangebuyer.creatives.removeDeal\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.accountId The id for the account that will serve this creative.\n     * @param {string} params.buyerCreativeId The buyer-specific id for this creative.\n     * @param {string} params.dealId The id of the deal id to disassociate with this creative.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    removeDeal: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/creatives/{accountId}/{buyerCreativeId}/removeDeal/{dealId}',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'buyerCreativeId', 'dealId'],\n        pathParams: ['accountId', 'buyerCreativeId', 'dealId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.marketplacedeals = {\n\n    /**\n     * adexchangebuyer.marketplacedeals.delete\n     *\n     * @desc Delete the specified deals from the proposal\n     *\n     * @alias adexchangebuyer.marketplacedeals.delete\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.proposalId The proposalId to delete deals from.\n     * @param {adexchangebuyer(v1.4).DeleteOrderDealsRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/proposals/{proposalId}/deals/delete',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['proposalId'],\n        pathParams: ['proposalId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.marketplacedeals.insert\n     *\n     * @desc Add new deals for the specified proposal\n     *\n     * @alias adexchangebuyer.marketplacedeals.insert\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.proposalId proposalId for which deals need to be added.\n     * @param {adexchangebuyer(v1.4).AddOrderDealsRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/proposals/{proposalId}/deals/insert',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['proposalId'],\n        pathParams: ['proposalId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.marketplacedeals.list\n     *\n     * @desc List all the deals for a given proposal\n     *\n     * @alias adexchangebuyer.marketplacedeals.list\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.pqlQuery Query string to retrieve specific deals.\n     * @param {string} params.proposalId The proposalId to get deals for. To search across all proposals specify order_id = '-' as part of the URL.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/proposals/{proposalId}/deals',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['proposalId'],\n        pathParams: ['proposalId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.marketplacedeals.update\n     *\n     * @desc Replaces all the deals in the proposal with the passed in deals\n     *\n     * @alias adexchangebuyer.marketplacedeals.update\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.proposalId The proposalId to edit deals on.\n     * @param {adexchangebuyer(v1.4).EditAllOrderDealsRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/proposals/{proposalId}/deals/update',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['proposalId'],\n        pathParams: ['proposalId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.marketplacenotes = {\n\n    /**\n     * adexchangebuyer.marketplacenotes.insert\n     *\n     * @desc Add notes to the proposal\n     *\n     * @alias adexchangebuyer.marketplacenotes.insert\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.proposalId The proposalId to add notes for.\n     * @param {adexchangebuyer(v1.4).AddOrderNotesRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/proposals/{proposalId}/notes/insert',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['proposalId'],\n        pathParams: ['proposalId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.marketplacenotes.list\n     *\n     * @desc Get all the notes associated with a proposal\n     *\n     * @alias adexchangebuyer.marketplacenotes.list\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.pqlQuery Query string to retrieve specific notes. To search the text contents of notes, please use syntax like \"WHERE note.note = \"foo\" or \"WHERE note.note LIKE \"%bar%\"\n     * @param {string} params.proposalId The proposalId to get notes for. To search across all proposals specify order_id = '-' as part of the URL.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/proposals/{proposalId}/notes',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['proposalId'],\n        pathParams: ['proposalId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.marketplaceprivateauction = {\n\n    /**\n     * adexchangebuyer.marketplaceprivateauction.updateproposal\n     *\n     * @desc Update a given private auction proposal\n     *\n     * @alias adexchangebuyer.marketplaceprivateauction.updateproposal\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.privateAuctionId The private auction id to be updated.\n     * @param {adexchangebuyer(v1.4).UpdatePrivateAuctionProposalRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    updateproposal: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/privateauction/{privateAuctionId}/updateproposal',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['privateAuctionId'],\n        pathParams: ['privateAuctionId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.performanceReport = {\n\n    /**\n     * adexchangebuyer.performanceReport.list\n     *\n     * @desc Retrieves the authenticated user's list of performance metrics.\n     *\n     * @alias adexchangebuyer.performanceReport.list\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id to get the reports.\n     * @param {string} params.endDateTime The end time of the report in ISO 8601 timestamp format using UTC.\n     * @param {integer=} params.maxResults Maximum number of entries returned on one result page. If not set, the default is 100. Optional.\n     * @param {string=} params.pageToken A continuation token, used to page through performance reports. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response. Optional.\n     * @param {string} params.startDateTime The start time of the report in ISO 8601 timestamp format using UTC.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/performancereport',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'endDateTime', 'startDateTime'],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.pretargetingConfig = {\n\n    /**\n     * adexchangebuyer.pretargetingConfig.delete\n     *\n     * @desc Deletes an existing pretargeting config.\n     *\n     * @alias adexchangebuyer.pretargetingConfig.delete\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id to delete the pretargeting config for.\n     * @param {string} params.configId The specific id of the configuration to delete.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/pretargetingconfigs/{accountId}/{configId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'configId'],\n        pathParams: ['accountId', 'configId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.pretargetingConfig.get\n     *\n     * @desc Gets a specific pretargeting configuration\n     *\n     * @alias adexchangebuyer.pretargetingConfig.get\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id to get the pretargeting config for.\n     * @param {string} params.configId The specific id of the configuration to retrieve.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/pretargetingconfigs/{accountId}/{configId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'configId'],\n        pathParams: ['accountId', 'configId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.pretargetingConfig.insert\n     *\n     * @desc Inserts a new pretargeting configuration.\n     *\n     * @alias adexchangebuyer.pretargetingConfig.insert\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id to insert the pretargeting config for.\n     * @param {adexchangebuyer(v1.4).PretargetingConfig} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/pretargetingconfigs/{accountId}',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.pretargetingConfig.list\n     *\n     * @desc Retrieves a list of the authenticated user's pretargeting configurations.\n     *\n     * @alias adexchangebuyer.pretargetingConfig.list\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id to get the pretargeting configs for.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/pretargetingconfigs/{accountId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.pretargetingConfig.patch\n     *\n     * @desc Updates an existing pretargeting config. This method supports patch semantics.\n     *\n     * @alias adexchangebuyer.pretargetingConfig.patch\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id to update the pretargeting config for.\n     * @param {string} params.configId The specific id of the configuration to update.\n     * @param {adexchangebuyer(v1.4).PretargetingConfig} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/pretargetingconfigs/{accountId}/{configId}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'configId'],\n        pathParams: ['accountId', 'configId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.pretargetingConfig.update\n     *\n     * @desc Updates an existing pretargeting config.\n     *\n     * @alias adexchangebuyer.pretargetingConfig.update\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId The account id to update the pretargeting config for.\n     * @param {string} params.configId The specific id of the configuration to update.\n     * @param {adexchangebuyer(v1.4).PretargetingConfig} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/pretargetingconfigs/{accountId}/{configId}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['accountId', 'configId'],\n        pathParams: ['accountId', 'configId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.products = {\n\n    /**\n     * adexchangebuyer.products.get\n     *\n     * @desc Gets the requested product by id.\n     *\n     * @alias adexchangebuyer.products.get\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.productId The id for the product to get the head revision for.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/products/{productId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['productId'],\n        pathParams: ['productId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.products.search\n     *\n     * @desc Gets the requested product.\n     *\n     * @alias adexchangebuyer.products.search\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object=} params Parameters for request\n     * @param {string=} params.pqlQuery The pql query used to query for products.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    search: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/products/search',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.proposals = {\n\n    /**\n     * adexchangebuyer.proposals.get\n     *\n     * @desc Get a proposal given its id\n     *\n     * @alias adexchangebuyer.proposals.get\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.proposalId Id of the proposal to retrieve.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/proposals/{proposalId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['proposalId'],\n        pathParams: ['proposalId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.proposals.insert\n     *\n     * @desc Create the given list of proposals\n     *\n     * @alias adexchangebuyer.proposals.insert\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {adexchangebuyer(v1.4).CreateOrdersRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/proposals/insert',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.proposals.patch\n     *\n     * @desc Update the given proposal. This method supports patch semantics.\n     *\n     * @alias adexchangebuyer.proposals.patch\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.proposalId The proposal id to update.\n     * @param {string} params.revisionNumber The last known revision number to update. If the head revision in the marketplace database has since changed, an error will be thrown. The caller should then fetch the latest proposal at head revision and retry the update at that revision.\n     * @param {string} params.updateAction The proposed action to take on the proposal. This field is required and it must be set when updating a proposal.\n     * @param {adexchangebuyer(v1.4).Proposal} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/proposals/{proposalId}/{revisionNumber}/{updateAction}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['proposalId', 'revisionNumber', 'updateAction'],\n        pathParams: ['proposalId', 'revisionNumber', 'updateAction'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.proposals.search\n     *\n     * @desc Search for proposals using pql query\n     *\n     * @alias adexchangebuyer.proposals.search\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object=} params Parameters for request\n     * @param {string=} params.pqlQuery Query string to retrieve specific proposals.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    search: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/proposals/search',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.proposals.setupcomplete\n     *\n     * @desc Update the given proposal to indicate that setup has been completed.\n     *\n     * @alias adexchangebuyer.proposals.setupcomplete\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.proposalId The proposal id for which the setup is complete\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    setupcomplete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/proposals/{proposalId}/setupcomplete',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['proposalId'],\n        pathParams: ['proposalId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangebuyer.proposals.update\n     *\n     * @desc Update the given proposal\n     *\n     * @alias adexchangebuyer.proposals.update\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.proposalId The proposal id to update.\n     * @param {string} params.revisionNumber The last known revision number to update. If the head revision in the marketplace database has since changed, an error will be thrown. The caller should then fetch the latest proposal at head revision and retry the update at that revision.\n     * @param {string} params.updateAction The proposed action to take on the proposal. This field is required and it must be set when updating a proposal.\n     * @param {adexchangebuyer(v1.4).Proposal} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/proposals/{proposalId}/{revisionNumber}/{updateAction}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['proposalId', 'revisionNumber', 'updateAction'],\n        pathParams: ['proposalId', 'revisionNumber', 'updateAction'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.pubprofiles = {\n\n    /**\n     * adexchangebuyer.pubprofiles.list\n     *\n     * @desc Gets the requested publisher profile(s) by publisher accountId.\n     *\n     * @alias adexchangebuyer.pubprofiles.list\n     * @memberOf! adexchangebuyer(v1.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.accountId The accountId of the publisher to get profiles for.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangebuyer/v1.4/publisher/{accountId}/profiles',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef Account\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {object[]} bidderLocation Your bidder locations that have distinct URLs.\n * @property {string} cookieMatchingNid The nid parameter value used in cookie match requests. Please contact your technical account manager if you need to change this.\n * @property {string} cookieMatchingUrl The base URL used in cookie match requests.\n * @property {integer} id Account id.\n * @property {string} kind Resource type.\n * @property {integer} maximumActiveCreatives The maximum number of active creatives that an account can have, where a creative is active if it was inserted or bid with in the last 30 days. Please contact your technical account manager if you need to change this.\n * @property {integer} maximumTotalQps The sum of all bidderLocation.maximumQps values cannot exceed this. Please contact your technical account manager if you need to change this.\n * @property {integer} numberActiveCreatives The number of creatives that this account inserted or bid with in the last 30 days.\n */\n/**\n * @typedef AccountsList\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).Account[]} items A list of accounts.\n * @property {string} kind Resource type.\n */\n/**\n * @typedef AddOrderDealsRequest\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).MarketplaceDeal[]} deals The list of deals to add\n * @property {string} proposalRevisionNumber The last known proposal revision number.\n * @property {string} updateAction Indicates an optional action to take on the proposal\n */\n/**\n * @typedef AddOrderDealsResponse\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).MarketplaceDeal[]} deals List of deals added (in the same proposal as passed in the request)\n * @property {string} proposalRevisionNumber The updated revision number for the proposal.\n */\n/**\n * @typedef AddOrderNotesRequest\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).MarketplaceNote[]} notes The list of notes to add.\n */\n/**\n * @typedef AddOrderNotesResponse\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).MarketplaceNote[]} notes \n */\n/**\n * @typedef BillingInfo\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {integer} accountId Account id.\n * @property {string} accountName Account name.\n * @property {string[]} billingId A list of adgroup IDs associated with this particular account. These IDs may show up as part of a realtime bidding BidRequest, which indicates a bid request for this account.\n * @property {string} kind Resource type.\n */\n/**\n * @typedef BillingInfoList\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).BillingInfo[]} items A list of billing info relevant for your account.\n * @property {string} kind Resource type.\n */\n/**\n * @typedef Budget\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} accountId The id of the account. This is required for get and update requests.\n * @property {string} billingId The billing id to determine which adgroup to provide budget information for. This is required for get and update requests.\n * @property {string} budgetAmount The daily budget amount in unit amount of the account currency to apply for the billingId provided. This is required for update requests.\n * @property {string} currencyCode The currency code for the buyer. This cannot be altered here.\n * @property {string} id The unique id that describes this item.\n * @property {string} kind The kind of the resource, i.e. &quot;adexchangebuyer#budget&quot;.\n */\n/**\n * @typedef Buyer\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} accountId Adx account id of the buyer.\n */\n/**\n * @typedef ContactInformation\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} email Email address of the contact.\n * @property {string} name The name of the contact.\n */\n/**\n * @typedef CreateOrdersRequest\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).Proposal[]} proposals The list of proposals to create.\n * @property {string} webPropertyCode Web property id of the seller creating these orders\n */\n/**\n * @typedef CreateOrdersResponse\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).Proposal[]} proposals The list of proposals successfully created.\n */\n/**\n * @typedef Creative\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} HTMLSnippet The HTML snippet that displays the ad when inserted in the web page. If set, videoURL should not be set.\n * @property {integer} accountId Account id.\n * @property {string} adChoicesDestinationUrl The link to the Ad Preferences page. This is only supported for native ads.\n * @property {string[]} advertiserId Detected advertiser id, if any. Read-only. This field should not be set in requests.\n * @property {string} advertiserName The name of the company being advertised in the creative. The value provided must exist in the advertisers.txt file.\n * @property {string} agencyId The agency id for this creative.\n * @property {string} apiUploadTimestamp The last upload timestamp of this creative if it was uploaded via API. Read-only. The value of this field is generated, and will be ignored for uploads. (formatted RFC 3339 timestamp).\n * @property {integer[]} attribute List of buyer selectable attributes for the ads that may be shown from this snippet. Each attribute is represented by an integer as defined in  buyer-declarable-creative-attributes.txt.\n * @property {string} buyerCreativeId A buyer-specific id identifying the creative in this ad.\n * @property {string[]} clickThroughUrl The set of destination urls for the snippet.\n * @property {object[]} corrections Shows any corrections that were applied to this creative. Read-only. This field should not be set in requests.\n * @property {string} dealsStatus Top-level deals status. Read-only. This field should not be set in requests. If disapproved, an entry for auctionType=DIRECT_DEALS (or ALL) in servingRestrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case it may be preferable to read from servingRestrictions directly.\n * @property {string[]} detectedDomains Detected domains for this creative. Read-only. This field should not be set in requests.\n * @property {object} filteringReasons The filtering reasons for the creative. Read-only. This field should not be set in requests.\n * @property {integer} height Ad height.\n * @property {string[]} impressionTrackingUrl The set of urls to be called to record an impression.\n * @property {string} kind Resource type.\n * @property {string[]} languages Detected languages for this creative. Read-only. This field should not be set in requests.\n * @property {object} nativeAd If nativeAd is set, HTMLSnippet and the videoURL outside of nativeAd should not be set. (The videoURL inside nativeAd can be set.)\n * @property {string} openAuctionStatus Top-level open auction status. Read-only. This field should not be set in requests. If disapproved, an entry for auctionType=OPEN_AUCTION (or ALL) in servingRestrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case it may be preferable to read from ServingRestrictions directly.\n * @property {integer[]} productCategories Detected product categories, if any. Each category is represented by an integer as defined in  ad-product-categories.txt. Read-only. This field should not be set in requests.\n * @property {integer[]} restrictedCategories All restricted categories for the ads that may be shown from this snippet. Each category is represented by an integer as defined in the  ad-restricted-categories.txt.\n * @property {integer[]} sensitiveCategories Detected sensitive categories, if any. Each category is represented by an integer as defined in  ad-sensitive-categories.txt. Read-only. This field should not be set in requests.\n * @property {object[]} servingRestrictions The granular status of this ad in specific contexts. A context here relates to where something ultimately serves (for example, a physical location, a platform, an HTTPS vs HTTP request, or the type of auction). Read-only. This field should not be set in requests.\n * @property {integer[]} vendorType List of vendor types for the ads that may be shown from this snippet. Each vendor type is represented by an integer as defined in vendors.txt.\n * @property {integer} version The version for this creative. Read-only. This field should not be set in requests.\n * @property {string} videoURL The URL to fetch a video ad. If set, HTMLSnippet and the nativeAd should not be set. Note, this is different from resource.native_ad.video_url above.\n * @property {integer} width Ad width.\n */\n/**\n * @typedef CreativeDealIds\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {object[]} dealStatuses A list of external deal ids and ARC approval status.\n * @property {string} kind Resource type.\n */\n/**\n * @typedef CreativesList\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).Creative[]} items A list of creatives.\n * @property {string} kind Resource type.\n * @property {string} nextPageToken Continuation token used to page through creatives. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; value to this.\n */\n/**\n * @typedef DealServingMetadata\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {boolean} alcoholAdsAllowed True if alcohol ads are allowed for this deal (read-only). This field is only populated when querying for finalized orders using the method GetFinalizedOrderDeals\n * @property {adexchangebuyer(v1.4).DealServingMetadataDealPauseStatus} dealPauseStatus Tracks which parties (if any) have paused a deal. (readonly, except via PauseResumeOrderDeals action)\n */\n/**\n * @typedef DealServingMetadataDealPauseStatus\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} buyerPauseReason \n * @property {string} firstPausedBy If the deal is paused, records which party paused the deal first.\n * @property {boolean} hasBuyerPaused \n * @property {boolean} hasSellerPaused \n * @property {string} sellerPauseReason \n */\n/**\n * @typedef DealTerms\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} brandingType Visibilty of the URL in bid requests.\n * @property {string} crossListedExternalDealIdType Indicates that this ExternalDealId exists under at least two different AdxInventoryDeals. Currently, the only case that the same ExternalDealId will exist is programmatic cross sell case.\n * @property {string} description Description for the proposed terms of the deal.\n * @property {adexchangebuyer(v1.4).Price} estimatedGrossSpend Non-binding estimate of the estimated gross spend for this deal Can be set by buyer or seller.\n * @property {string} estimatedImpressionsPerDay Non-binding estimate of the impressions served per day Can be set by buyer or seller.\n * @property {adexchangebuyer(v1.4).DealTermsGuaranteedFixedPriceTerms} guaranteedFixedPriceTerms The terms for guaranteed fixed price deals.\n * @property {adexchangebuyer(v1.4).DealTermsNonGuaranteedAuctionTerms} nonGuaranteedAuctionTerms The terms for non-guaranteed auction deals.\n * @property {adexchangebuyer(v1.4).DealTermsNonGuaranteedFixedPriceTerms} nonGuaranteedFixedPriceTerms The terms for non-guaranteed fixed price deals.\n * @property {adexchangebuyer(v1.4).DealTermsRubiconNonGuaranteedTerms} rubiconNonGuaranteedTerms The terms for rubicon non-guaranteed deals.\n * @property {string} sellerTimeZone For deals with Cost Per Day billing, defines the timezone used to mark the boundaries of a day (buyer-readonly)\n */\n/**\n * @typedef DealTermsGuaranteedFixedPriceTerms\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).DealTermsGuaranteedFixedPriceTermsBillingInfo} billingInfo External billing info for this Deal. This field is relevant when external billing info such as price has a different currency code than DFP/AdX.\n * @property {adexchangebuyer(v1.4).PricePerBuyer[]} fixedPrices Fixed price for the specified buyer.\n * @property {string} guaranteedImpressions Guaranteed impressions as a percentage. This is the percentage of guaranteed looks that the buyer is guaranteeing to buy.\n * @property {string} guaranteedLooks Count of guaranteed looks. Required for deal, optional for product. For CPD deals, buyer changes to guaranteed_looks will be ignored.\n * @property {string} minimumDailyLooks Count of minimum daily looks for a CPD deal. For CPD deals, buyer should negotiate on this field instead of guaranteed_looks.\n */\n/**\n * @typedef DealTermsGuaranteedFixedPriceTermsBillingInfo\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} currencyConversionTimeMs The timestamp (in ms since epoch) when the original reservation price for the deal was first converted to DFP currency. This is used to convert the contracted price into advertiser&#39;s currency without discrepancy.\n * @property {string} dfpLineItemId The DFP line item id associated with this deal. For features like CPD, buyers can retrieve the DFP line item for billing reconciliation.\n * @property {string} originalContractedQuantity The original contracted quantity (# impressions) for this deal. To ensure delivery, sometimes the publisher will book the deal with a impression buffer, such that guaranteed_looks is greater than the contracted quantity. However clients are billed using the original contracted quantity.\n * @property {adexchangebuyer(v1.4).Price} price The original reservation price for the deal, if the currency code is different from the one used in negotiation.\n */\n/**\n * @typedef DealTermsNonGuaranteedAuctionTerms\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {boolean} autoOptimizePrivateAuction True if open auction buyers are allowed to compete with invited buyers in this private auction (buyer-readonly).\n * @property {adexchangebuyer(v1.4).PricePerBuyer[]} reservePricePerBuyers Reserve price for the specified buyer.\n */\n/**\n * @typedef DealTermsNonGuaranteedFixedPriceTerms\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).PricePerBuyer[]} fixedPrices Fixed price for the specified buyer.\n */\n/**\n * @typedef DealTermsRubiconNonGuaranteedTerms\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).Price} priorityPrice Optional price for Rubicon priority access in the auction.\n * @property {adexchangebuyer(v1.4).Price} standardPrice Optional price for Rubicon standard access in the auction.\n */\n/**\n * @typedef DeleteOrderDealsRequest\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string[]} dealIds List of deals to delete for a given proposal\n * @property {string} proposalRevisionNumber The last known proposal revision number.\n * @property {string} updateAction Indicates an optional action to take on the proposal\n */\n/**\n * @typedef DeleteOrderDealsResponse\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).MarketplaceDeal[]} deals List of deals deleted (in the same proposal as passed in the request)\n * @property {string} proposalRevisionNumber The updated revision number for the proposal.\n */\n/**\n * @typedef DeliveryControl\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} creativeBlockingLevel \n * @property {string} deliveryRateType \n * @property {adexchangebuyer(v1.4).DeliveryControlFrequencyCap[]} frequencyCaps \n */\n/**\n * @typedef DeliveryControlFrequencyCap\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {integer} maxImpressions \n * @property {integer} numTimeUnits \n * @property {string} timeUnitType \n */\n/**\n * @typedef Dimension\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} dimensionType \n * @property {adexchangebuyer(v1.4).DimensionDimensionValue[]} dimensionValues \n */\n/**\n * @typedef DimensionDimensionValue\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {integer} id Id of the dimension.\n * @property {string} name Name of the dimension mainly for debugging purposes, except for the case of CREATIVE_SIZE. For CREATIVE_SIZE, strings are used instead of ids.\n * @property {integer} percentage Percent of total impressions for a dimension type. e.g. {dimension_type: &#39;GENDER&#39;, [{dimension_value: {id: 1, name: &#39;MALE&#39;, percentage: 60}}]} Gender MALE is 60% of all impressions which have gender.\n */\n/**\n * @typedef EditAllOrderDealsRequest\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).MarketplaceDeal[]} deals List of deals to edit. Service may perform 3 different operations based on comparison of deals in this list vs deals already persisted in database: 1. Add new deal to proposal If a deal in this list does not exist in the proposal, the service will create a new deal and add it to the proposal. Validation will follow AddOrderDealsRequest. 2. Update existing deal in the proposal If a deal in this list already exist in the proposal, the service will update that existing deal to this new deal in the request. Validation will follow UpdateOrderDealsRequest. 3. Delete deals from the proposal (just need the id) If a existing deal in the proposal is not present in this list, the service will delete that deal from the proposal. Validation will follow DeleteOrderDealsRequest.\n * @property {adexchangebuyer(v1.4).Proposal} proposal If specified, also updates the proposal in the batch transaction. This is useful when the proposal and the deals need to be updated in one transaction.\n * @property {string} proposalRevisionNumber The last known revision number for the proposal.\n * @property {string} updateAction Indicates an optional action to take on the proposal\n */\n/**\n * @typedef EditAllOrderDealsResponse\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).MarketplaceDeal[]} deals List of all deals in the proposal after edit.\n * @property {string} orderRevisionNumber The latest revision number after the update has been applied.\n */\n/**\n * @typedef GetOffersResponse\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).Product[]} products The returned list of products.\n */\n/**\n * @typedef GetOrderDealsResponse\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).MarketplaceDeal[]} deals List of deals for the proposal\n */\n/**\n * @typedef GetOrderNotesResponse\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).MarketplaceNote[]} notes The list of matching notes. The notes for a proposal are ordered from oldest to newest. If the notes span multiple proposals, they will be grouped by proposal, with the notes for the most recently modified proposal appearing first.\n */\n/**\n * @typedef GetOrdersResponse\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).Proposal[]} proposals The list of matching proposals.\n */\n/**\n * @typedef GetPublisherProfilesByAccountIdResponse\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).PublisherProfileApiProto[]} profiles Profiles for the requested publisher\n */\n/**\n * @typedef MarketplaceDeal\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).PrivateData} buyerPrivateData Buyer private data (hidden from seller).\n * @property {string} creationTimeMs The time (ms since epoch) of the deal creation. (readonly)\n * @property {string} creativePreApprovalPolicy Specifies the creative pre-approval policy (buyer-readonly)\n * @property {string} creativeSafeFrameCompatibility Specifies whether the creative is safeFrame compatible (buyer-readonly)\n * @property {string} dealId A unique deal-id for the deal (readonly).\n * @property {adexchangebuyer(v1.4).DealServingMetadata} dealServingMetadata Metadata about the serving status of this deal (readonly, writes via custom actions)\n * @property {adexchangebuyer(v1.4).DeliveryControl} deliveryControl The set of fields around delivery control that are interesting for a buyer to see but are non-negotiable. These are set by the publisher. This message is assigned an id of 100 since some day we would want to model this as a protobuf extension.\n * @property {string} externalDealId The external deal id assigned to this deal once the deal is finalized. This is the deal-id that shows up in serving/reporting etc. (readonly)\n * @property {string} flightEndTimeMs Proposed flight end time of the deal (ms since epoch) This will generally be stored in a granularity of a second. (updatable)\n * @property {string} flightStartTimeMs Proposed flight start time of the deal (ms since epoch) This will generally be stored in a granularity of a second. (updatable)\n * @property {string} inventoryDescription Description for the deal terms. (buyer-readonly)\n * @property {boolean} isRfpTemplate Indicates whether the current deal is a RFP template. RFP template is created by buyer and not based on seller created products.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;adexchangebuyer#marketplaceDeal&quot;.\n * @property {string} lastUpdateTimeMs The time (ms since epoch) when the deal was last updated. (readonly)\n * @property {string} name The name of the deal. (updatable)\n * @property {string} productId The product-id from which this deal was created. (readonly, except on create)\n * @property {string} productRevisionNumber The revision number of the product that the deal was created from (readonly, except on create)\n * @property {string} programmaticCreativeSource Specifies the creative source for programmatic deals, PUBLISHER means creative is provided by seller and ADVERTISR means creative is provided by buyer. (buyer-readonly)\n * @property {string} proposalId \n * @property {adexchangebuyer(v1.4).ContactInformation[]} sellerContacts Optional Seller contact information for the deal (buyer-readonly)\n * @property {adexchangebuyer(v1.4).SharedTargeting[]} sharedTargetings The shared targeting visible to buyers and sellers. Each shared targeting entity is AND&#39;d together. (updatable)\n * @property {string} syndicationProduct The syndication product associated with the deal. (readonly, except on create)\n * @property {adexchangebuyer(v1.4).DealTerms} terms The negotiable terms of the deal. (updatable)\n * @property {string} webPropertyCode \n */\n/**\n * @typedef MarketplaceDealParty\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).Buyer} buyer The buyer/seller associated with the deal. One of buyer/seller is specified for a deal-party.\n * @property {adexchangebuyer(v1.4).Seller} seller The buyer/seller associated with the deal. One of buyer/seller is specified for a deal party.\n */\n/**\n * @typedef MarketplaceLabel\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} accountId The accountId of the party that created the label.\n * @property {string} createTimeMs The creation time (in ms since epoch) for the label.\n * @property {adexchangebuyer(v1.4).MarketplaceDealParty} deprecatedMarketplaceDealParty Information about the party that created the label.\n * @property {string} label The label to use.\n */\n/**\n * @typedef MarketplaceNote\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} creatorRole The role of the person (buyer/seller) creating the note. (readonly)\n * @property {string} dealId Notes can optionally be associated with a deal. (readonly, except on create)\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;adexchangebuyer#marketplaceNote&quot;.\n * @property {string} note The actual note to attach. (readonly, except on create)\n * @property {string} noteId The unique id for the note. (readonly)\n * @property {string} proposalId The proposalId that a note is attached to. (readonly)\n * @property {string} proposalRevisionNumber If the note is associated with a proposal revision number, then store that here. (readonly, except on create)\n * @property {string} timestampMs The timestamp (ms since epoch) that this note was created. (readonly)\n */\n/**\n * @typedef PerformanceReport\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {number} bidRate The number of bid responses with an ad.\n * @property {number} bidRequestRate The number of bid requests sent to your bidder.\n * @property {any[]} calloutStatusRate Rate of various prefiltering statuses per match. Please refer to the callout-status-codes.txt file for different statuses.\n * @property {any[]} cookieMatcherStatusRate Average QPS for cookie matcher operations.\n * @property {any[]} creativeStatusRate Rate of ads with a given status. Please refer to the creative-status-codes.txt file for different statuses.\n * @property {number} filteredBidRate The number of bid responses that were filtered due to a policy violation or other errors.\n * @property {any[]} hostedMatchStatusRate Average QPS for hosted match operations.\n * @property {number} inventoryMatchRate The number of potential queries based on your pretargeting settings.\n * @property {string} kind Resource type.\n * @property {number} latency50thPercentile The 50th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.\n * @property {number} latency85thPercentile The 85th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.\n * @property {number} latency95thPercentile The 95th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.\n * @property {number} noQuotaInRegion Rate of various quota account statuses per quota check.\n * @property {number} outOfQuota Rate of various quota account statuses per quota check.\n * @property {number} pixelMatchRequests Average QPS for pixel match requests from clients.\n * @property {number} pixelMatchResponses Average QPS for pixel match responses from clients.\n * @property {number} quotaConfiguredLimit The configured quota limits for this account.\n * @property {number} quotaThrottledLimit The throttled quota limits for this account.\n * @property {string} region The trading location of this data.\n * @property {number} successfulRequestRate The number of properly formed bid responses received by our servers within the deadline.\n * @property {string} timestamp The unix timestamp of the starting time of this performance data.\n * @property {number} unsuccessfulRequestRate The number of bid responses that were unsuccessful due to timeouts, incorrect formatting, etc.\n */\n/**\n * @typedef PerformanceReportList\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} kind Resource type.\n * @property {adexchangebuyer(v1.4).PerformanceReport[]} performanceReport A list of performance reports relevant for the account.\n */\n/**\n * @typedef PretargetingConfig\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} billingId The id for billing purposes, provided for reference. Leave this field blank for insert requests; the id will be generated automatically.\n * @property {string} configId The config id; generated automatically. Leave this field blank for insert requests.\n * @property {string} configName The name of the config. Must be unique. Required for all requests.\n * @property {string[]} creativeType List must contain exactly one of PRETARGETING_CREATIVE_TYPE_HTML or PRETARGETING_CREATIVE_TYPE_VIDEO.\n * @property {object[]} dimensions Requests which allow one of these (width, height) pairs will match. All pairs must be supported ad dimensions.\n * @property {string[]} excludedContentLabels Requests with any of these content labels will not match. Values are from content-labels.txt in the downloadable files section.\n * @property {string[]} excludedGeoCriteriaIds Requests containing any of these geo criteria ids will not match.\n * @property {object[]} excludedPlacements Requests containing any of these placements will not match.\n * @property {string[]} excludedUserLists Requests containing any of these users list ids will not match.\n * @property {string[]} excludedVerticals Requests containing any of these vertical ids will not match. Values are from the publisher-verticals.txt file in the downloadable files section.\n * @property {string[]} geoCriteriaIds Requests containing any of these geo criteria ids will match.\n * @property {boolean} isActive Whether this config is active. Required for all requests.\n * @property {string} kind The kind of the resource, i.e. &quot;adexchangebuyer#pretargetingConfig&quot;.\n * @property {string[]} languages Request containing any of these language codes will match.\n * @property {integer} minimumViewabilityDecile Requests where the predicted viewability is below the specified decile will not match. E.g. if the buyer sets this value to 5, requests from slots where the predicted viewability is below 50% will not match. If the predicted viewability is unknown this field will be ignored.\n * @property {string[]} mobileCarriers Requests containing any of these mobile carrier ids will match. Values are from mobile-carriers.csv in the downloadable files section.\n * @property {string[]} mobileDevices Requests containing any of these mobile device ids will match. Values are from mobile-devices.csv in the downloadable files section.\n * @property {string[]} mobileOperatingSystemVersions Requests containing any of these mobile operating system version ids will match. Values are from mobile-os.csv in the downloadable files section.\n * @property {object[]} placements Requests containing any of these placements will match.\n * @property {string[]} platforms Requests matching any of these platforms will match. Possible values are PRETARGETING_PLATFORM_MOBILE, PRETARGETING_PLATFORM_DESKTOP, and PRETARGETING_PLATFORM_TABLET.\n * @property {string[]} supportedCreativeAttributes Creative attributes should be declared here if all creatives corresponding to this pretargeting configuration have that creative attribute. Values are from pretargetable-creative-attributes.txt in the downloadable files section.\n * @property {string[]} userIdentifierDataRequired Requests containing the specified type of user data will match. Possible values are HOSTED_MATCH_DATA, which means the request is cookie-targetable and has a match in the buyer&#39;s hosted match table, and COOKIE_OR_IDFA, which means the request has either a targetable cookie or an iOS IDFA.\n * @property {string[]} userLists Requests containing any of these user list ids will match.\n * @property {string[]} vendorTypes Requests that allow any of these vendor ids will match. Values are from vendors.txt in the downloadable files section.\n * @property {string[]} verticals Requests containing any of these vertical ids will match.\n * @property {object[]} videoPlayerSizes Video requests satisfying any of these player size constraints will match.\n */\n/**\n * @typedef PretargetingConfigList\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).PretargetingConfig[]} items A list of pretargeting configs\n * @property {string} kind Resource type.\n */\n/**\n * @typedef Price\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {number} amountMicros The price value in micros.\n * @property {string} currencyCode The currency code for the price.\n * @property {number} expectedCpmMicros In case of CPD deals, the expected CPM in micros.\n * @property {string} pricingType The pricing type for the deal/product.\n */\n/**\n * @typedef PricePerBuyer\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} auctionTier Optional access type for this buyer.\n * @property {adexchangebuyer(v1.4).Buyer} buyer The buyer who will pay this price. If unset, all buyers can pay this price (if the advertisers match, and there&#39;s no more specific rule matching the buyer).\n * @property {adexchangebuyer(v1.4).Price} price The specified price\n */\n/**\n * @typedef PrivateData\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} referenceId \n * @property {string} referencePayload \n */\n/**\n * @typedef Product\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} creationTimeMs Creation time in ms. since epoch (readonly)\n * @property {adexchangebuyer(v1.4).ContactInformation[]} creatorContacts Optional contact information for the creator of this product. (buyer-readonly)\n * @property {adexchangebuyer(v1.4).DeliveryControl} deliveryControl The set of fields around delivery control that are interesting for a buyer to see but are non-negotiable. These are set by the publisher. This message is assigned an id of 100 since some day we would want to model this as a protobuf extension.\n * @property {string} flightEndTimeMs The proposed end time for the deal (ms since epoch) (buyer-readonly)\n * @property {string} flightStartTimeMs Inventory availability dates. (times are in ms since epoch) The granularity is generally in the order of seconds. (buyer-readonly)\n * @property {boolean} hasCreatorSignedOff If the creator has already signed off on the product, then the buyer can finalize the deal by accepting the product as is. When copying to a proposal, if any of the terms are changed, then auto_finalize is automatically set to false.\n * @property {string} inventorySource What exchange will provide this inventory (readonly, except on create).\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;adexchangebuyer#product&quot;.\n * @property {adexchangebuyer(v1.4).MarketplaceLabel[]} labels Optional List of labels for the product (optional, buyer-readonly).\n * @property {string} lastUpdateTimeMs Time of last update in ms. since epoch (readonly)\n * @property {string} legacyOfferId Optional legacy offer id if this offer is a preferred deal offer.\n * @property {string} marketplacePublisherProfileId Marketplace publisher profile Id. This Id differs from the regular publisher_profile_id in that 1. This is a new id, the old Id will be deprecated in 2017. 2. This id uniquely identifies a publisher profile by itself.\n * @property {string} name The name for this product as set by the seller. (buyer-readonly)\n * @property {string} privateAuctionId Optional private auction id if this offer is a private auction offer.\n * @property {string} productId The unique id for the product (readonly)\n * @property {string} publisherProfileId Id of the publisher profile for a given seller. A (seller.account_id, publisher_profile_id) pair uniquely identifies a publisher profile. Buyers can call the PublisherProfiles::List endpoint to get a list of publisher profiles for a given seller.\n * @property {adexchangebuyer(v1.4).PublisherProvidedForecast} publisherProvidedForecast Publisher self-provided forecast information.\n * @property {string} revisionNumber The revision number of the product. (readonly)\n * @property {adexchangebuyer(v1.4).Seller} seller Information about the seller that created this product (readonly, except on create)\n * @property {adexchangebuyer(v1.4).SharedTargeting[]} sharedTargetings Targeting that is shared between the buyer and the seller. Each targeting criteria has a specified key and for each key there is a list of inclusion value or exclusion values. (buyer-readonly)\n * @property {string} state The state of the product. (buyer-readonly)\n * @property {string} syndicationProduct The syndication product associated with the deal. (readonly, except on create)\n * @property {adexchangebuyer(v1.4).DealTerms} terms The negotiable terms of the deal (buyer-readonly)\n * @property {string} webPropertyCode The web property code for the seller. This field is meant to be copied over as is when creating deals.\n */\n/**\n * @typedef Proposal\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).Buyer} billedBuyer Reference to the buyer that will get billed for this proposal. (readonly)\n * @property {adexchangebuyer(v1.4).Buyer} buyer Reference to the buyer on the proposal. (readonly, except on create)\n * @property {adexchangebuyer(v1.4).ContactInformation[]} buyerContacts Optional contact information of the buyer. (seller-readonly)\n * @property {adexchangebuyer(v1.4).PrivateData} buyerPrivateData Private data for buyer. (hidden from seller).\n * @property {string[]} dbmAdvertiserIds IDs of DBM advertisers permission to this proposal.\n * @property {boolean} hasBuyerSignedOff When an proposal is in an accepted state, indicates whether the buyer has signed off. Once both sides have signed off on a deal, the proposal can be finalized by the seller. (seller-readonly)\n * @property {boolean} hasSellerSignedOff When an proposal is in an accepted state, indicates whether the buyer has signed off Once both sides have signed off on a deal, the proposal can be finalized by the seller. (buyer-readonly)\n * @property {string} inventorySource What exchange will provide this inventory (readonly, except on create).\n * @property {boolean} isRenegotiating True if the proposal is being renegotiated (readonly).\n * @property {boolean} isSetupComplete True, if the buyside inventory setup is complete for this proposal. (readonly, except via OrderSetupCompleted action)\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;adexchangebuyer#proposal&quot;.\n * @property {adexchangebuyer(v1.4).MarketplaceLabel[]} labels List of labels associated with the proposal. (readonly)\n * @property {string} lastUpdaterOrCommentorRole The role of the last user that either updated the proposal or left a comment. (readonly)\n * @property {string} name The name for the proposal (updatable)\n * @property {string} negotiationId Optional negotiation id if this proposal is a preferred deal proposal.\n * @property {string} originatorRole Indicates whether the buyer/seller created the proposal.(readonly)\n * @property {string} privateAuctionId Optional private auction id if this proposal is a private auction proposal.\n * @property {string} proposalId The unique id of the proposal. (readonly).\n * @property {string} proposalState The current state of the proposal. (readonly)\n * @property {string} revisionNumber The revision number for the proposal (readonly).\n * @property {string} revisionTimeMs The time (ms since epoch) when the proposal was last revised (readonly).\n * @property {adexchangebuyer(v1.4).Seller} seller Reference to the seller on the proposal. (readonly, except on create)\n * @property {adexchangebuyer(v1.4).ContactInformation[]} sellerContacts Optional contact information of the seller (buyer-readonly).\n */\n/**\n * @typedef PublisherProfileApiProto\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} accountId The account id of the seller.\n * @property {string} audience Publisher provided info on its audience.\n * @property {string} buyerPitchStatement A pitch statement for the buyer\n * @property {string} directContact Direct contact for the publisher profile.\n * @property {string} exchange Exchange where this publisher profile is from. E.g. AdX, Rubicon etc...\n * @property {string} googlePlusLink Link to publisher&#39;s Google+ page.\n * @property {boolean} isParent True, if this is the parent profile, which represents all domains owned by the publisher.\n * @property {boolean} isPublished True, if this profile is published. Deprecated for state.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;adexchangebuyer#publisherProfileApiProto&quot;.\n * @property {string} logoUrl The url to the logo for the publisher.\n * @property {string} mediaKitLink The url for additional marketing and sales materials.\n * @property {string} name \n * @property {string} overview Publisher provided overview.\n * @property {integer} profileId The pair of (seller.account_id, profile_id) uniquely identifies a publisher profile for a given publisher.\n * @property {string} programmaticContact Programmatic contact for the publisher profile.\n * @property {string[]} publisherDomains The list of domains represented in this publisher profile. Empty if this is a parent profile.\n * @property {string} publisherProfileId Unique Id for publisher profile.\n * @property {adexchangebuyer(v1.4).PublisherProvidedForecast} publisherProvidedForecast Publisher provided forecasting information.\n * @property {string} rateCardInfoLink Link to publisher rate card\n * @property {string} samplePageLink Link for a sample content page.\n * @property {adexchangebuyer(v1.4).Seller} seller Seller of the publisher profile.\n * @property {string} state State of the publisher profile.\n * @property {string[]} topHeadlines Publisher provided key metrics and rankings.\n */\n/**\n * @typedef PublisherProvidedForecast\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).Dimension[]} dimensions Publisher provided dimensions. E.g. geo, sizes etc...\n * @property {string} weeklyImpressions Publisher provided weekly impressions.\n * @property {string} weeklyUniques Publisher provided weekly uniques.\n */\n/**\n * @typedef Seller\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} accountId The unique id for the seller. The seller fills in this field. The seller account id is then available to buyer in the product.\n * @property {string} subAccountId Optional sub-account id for the seller.\n */\n/**\n * @typedef SharedTargeting\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).TargetingValue[]} exclusions The list of values to exclude from targeting. Each value is AND&#39;d together.\n * @property {adexchangebuyer(v1.4).TargetingValue[]} inclusions The list of value to include as part of the targeting. Each value is OR&#39;d together.\n * @property {string} key The key representing the shared targeting criterion.\n */\n/**\n * @typedef TargetingValue\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).TargetingValueCreativeSize} creativeSizeValue The creative size value to exclude/include.\n * @property {adexchangebuyer(v1.4).TargetingValueDayPartTargeting} dayPartTargetingValue The daypart targeting to include / exclude. Filled in when the key is GOOG_DAYPART_TARGETING.\n * @property {string} longValue The long value to exclude/include.\n * @property {string} stringValue The string value to exclude/include.\n */\n/**\n * @typedef TargetingValueCreativeSize\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).TargetingValueSize[]} companionSizes For video size type, the list of companion sizes.\n * @property {string} creativeSizeType The Creative size type.\n * @property {adexchangebuyer(v1.4).TargetingValueSize} size For regular or video creative size type, specifies the size of the creative.\n * @property {string} skippableAdType The skippable ad type for video size.\n */\n/**\n * @typedef TargetingValueDayPartTargeting\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {adexchangebuyer(v1.4).TargetingValueDayPartTargetingDayPart[]} dayParts \n * @property {string} timeZoneType \n */\n/**\n * @typedef TargetingValueDayPartTargetingDayPart\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} dayOfWeek \n * @property {integer} endHour \n * @property {integer} endMinute \n * @property {integer} startHour \n * @property {integer} startMinute \n */\n/**\n * @typedef TargetingValueSize\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {integer} height The height of the creative.\n * @property {integer} width The width of the creative.\n */\n/**\n * @typedef UpdatePrivateAuctionProposalRequest\n * @memberOf! adexchangebuyer(v1.4)\n * @type object\n * @property {string} externalDealId The externalDealId of the deal to be updated.\n * @property {adexchangebuyer(v1.4).MarketplaceNote} note Optional note to be added.\n * @property {string} proposalRevisionNumber The current revision number of the proposal to be updated.\n * @property {string} updateAction The proposed action on the private auction proposal.\n */\nmodule.exports = Adexchangebuyer;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/adexchangeseller/v1.1.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Ad Exchange Seller API\n *\n * Accesses the inventory of Ad Exchange seller users and generates reports.\n *\n * @example\n * var google = require('googleapis');\n * var adexchangeseller = google.adexchangeseller('v1.1');\n *\n * @namespace adexchangeseller\n * @type {Function}\n * @version v1.1\n * @variation v1.1\n * @param {object=} options Options for Adexchangeseller\n */\nfunction Adexchangeseller(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.accounts = {\n\n    /**\n     * adexchangeseller.accounts.get\n     *\n     * @desc Get information about the selected Ad Exchange account.\n     *\n     * @alias adexchangeseller.accounts.get\n     * @memberOf! adexchangeseller(v1.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId Account to get information about. Tip: 'myaccount' is a valid ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangeseller/v1.1/accounts/{accountId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.adclients = {\n\n    /**\n     * adexchangeseller.adclients.list\n     *\n     * @desc List all ad clients in this Ad Exchange account.\n     *\n     * @alias adexchangeseller.adclients.list\n     * @memberOf! adexchangeseller(v1.1)\n     *\n     * @param {object=} params Parameters for request\n     * @param {integer=} params.maxResults The maximum number of ad clients to include in the response, used for paging.\n     * @param {string=} params.pageToken A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangeseller/v1.1/adclients',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.adunits = {\n\n    /**\n     * adexchangeseller.adunits.get\n     *\n     * @desc Gets the specified ad unit in the specified ad client.\n     *\n     * @alias adexchangeseller.adunits.get\n     * @memberOf! adexchangeseller(v1.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client for which to get the ad unit.\n     * @param {string} params.adUnitId Ad unit to retrieve.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangeseller/v1.1/adclients/{adClientId}/adunits/{adUnitId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId', 'adUnitId'],\n        pathParams: ['adClientId', 'adUnitId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangeseller.adunits.list\n     *\n     * @desc List all ad units in the specified ad client for this Ad Exchange account.\n     *\n     * @alias adexchangeseller.adunits.list\n     * @memberOf! adexchangeseller(v1.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client for which to list ad units.\n     * @param {boolean=} params.includeInactive Whether to include inactive ad units. Default: true.\n     * @param {integer=} params.maxResults The maximum number of ad units to include in the response, used for paging.\n     * @param {string=} params.pageToken A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangeseller/v1.1/adclients/{adClientId}/adunits',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    customchannels: {\n\n      /**\n       * adexchangeseller.adunits.customchannels.list\n       *\n       * @desc List all custom channels which the specified ad unit belongs to.\n       *\n       * @alias adexchangeseller.adunits.customchannels.list\n       * @memberOf! adexchangeseller(v1.1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.adClientId Ad client which contains the ad unit.\n       * @param {string} params.adUnitId Ad unit for which to list custom channels.\n       * @param {integer=} params.maxResults The maximum number of custom channels to include in the response, used for paging.\n       * @param {string=} params.pageToken A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adexchangeseller/v1.1/adclients/{adClientId}/adunits/{adUnitId}/customchannels',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['adClientId', 'adUnitId'],\n          pathParams: ['adClientId', 'adUnitId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n\n  self.alerts = {\n\n    /**\n     * adexchangeseller.alerts.list\n     *\n     * @desc List the alerts for this Ad Exchange account.\n     *\n     * @alias adexchangeseller.alerts.list\n     * @memberOf! adexchangeseller(v1.1)\n     *\n     * @param {object=} params Parameters for request\n     * @param {string=} params.locale The locale to use for translating alert messages. The account locale will be used if this is not supplied. The AdSense default (English) will be used if the supplied locale is invalid or unsupported.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangeseller/v1.1/alerts',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.customchannels = {\n\n    /**\n     * adexchangeseller.customchannels.get\n     *\n     * @desc Get the specified custom channel from the specified ad client.\n     *\n     * @alias adexchangeseller.customchannels.get\n     * @memberOf! adexchangeseller(v1.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client which contains the custom channel.\n     * @param {string} params.customChannelId Custom channel to retrieve.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangeseller/v1.1/adclients/{adClientId}/customchannels/{customChannelId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId', 'customChannelId'],\n        pathParams: ['adClientId', 'customChannelId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangeseller.customchannels.list\n     *\n     * @desc List all custom channels in the specified ad client for this Ad Exchange account.\n     *\n     * @alias adexchangeseller.customchannels.list\n     * @memberOf! adexchangeseller(v1.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client for which to list custom channels.\n     * @param {integer=} params.maxResults The maximum number of custom channels to include in the response, used for paging.\n     * @param {string=} params.pageToken A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangeseller/v1.1/adclients/{adClientId}/customchannels',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    adunits: {\n\n      /**\n       * adexchangeseller.customchannels.adunits.list\n       *\n       * @desc List all ad units in the specified custom channel.\n       *\n       * @alias adexchangeseller.customchannels.adunits.list\n       * @memberOf! adexchangeseller(v1.1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.adClientId Ad client which contains the custom channel.\n       * @param {string} params.customChannelId Custom channel for which to list ad units.\n       * @param {boolean=} params.includeInactive Whether to include inactive ad units. Default: true.\n       * @param {integer=} params.maxResults The maximum number of ad units to include in the response, used for paging.\n       * @param {string=} params.pageToken A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adexchangeseller/v1.1/adclients/{adClientId}/customchannels/{customChannelId}/adunits',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['adClientId', 'customChannelId'],\n          pathParams: ['adClientId', 'customChannelId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n\n  self.metadata = {\n\n    dimensions: {\n\n      /**\n       * adexchangeseller.metadata.dimensions.list\n       *\n       * @desc List the metadata for the dimensions available to this AdExchange account.\n       *\n       * @alias adexchangeseller.metadata.dimensions.list\n       * @memberOf! adexchangeseller(v1.1)\n       *\n       * @param {object=} params Parameters for request\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adexchangeseller/v1.1/metadata/dimensions',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    metrics: {\n\n      /**\n       * adexchangeseller.metadata.metrics.list\n       *\n       * @desc List the metadata for the metrics available to this AdExchange account.\n       *\n       * @alias adexchangeseller.metadata.metrics.list\n       * @memberOf! adexchangeseller(v1.1)\n       *\n       * @param {object=} params Parameters for request\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adexchangeseller/v1.1/metadata/metrics',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n\n  self.preferreddeals = {\n\n    /**\n     * adexchangeseller.preferreddeals.get\n     *\n     * @desc Get information about the selected Ad Exchange Preferred Deal.\n     *\n     * @alias adexchangeseller.preferreddeals.get\n     * @memberOf! adexchangeseller(v1.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.dealId Preferred deal to get information about.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangeseller/v1.1/preferreddeals/{dealId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['dealId'],\n        pathParams: ['dealId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangeseller.preferreddeals.list\n     *\n     * @desc List the preferred deals for this Ad Exchange account.\n     *\n     * @alias adexchangeseller.preferreddeals.list\n     * @memberOf! adexchangeseller(v1.1)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangeseller/v1.1/preferreddeals',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.reports = {\n\n    /**\n     * adexchangeseller.reports.generate\n     *\n     * @desc Generate an Ad Exchange report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \"alt=csv\" as a query parameter.\n     *\n     * @alias adexchangeseller.reports.generate\n     * @memberOf! adexchangeseller(v1.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.dimension Dimensions to base the report on.\n     * @param {string} params.endDate End of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n     * @param {string=} params.filter Filters to be run on the report.\n     * @param {string=} params.locale Optional locale to use for translating report output to a local language. Defaults to \"en_US\" if not specified.\n     * @param {integer=} params.maxResults The maximum number of rows of report data to return.\n     * @param {string=} params.metric Numeric columns to include in the report.\n     * @param {string=} params.sort The name of a dimension or metric to sort the resulting report on, optionally prefixed with \"+\" to sort ascending or \"-\" to sort descending. If no prefix is specified, the column is sorted ascending.\n     * @param {string} params.startDate Start of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n     * @param {integer=} params.startIndex Index of the first row of report data to return.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    generate: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangeseller/v1.1/reports',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['startDate', 'endDate'],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    saved: {\n\n      /**\n       * adexchangeseller.reports.saved.generate\n       *\n       * @desc Generate an Ad Exchange report based on the saved report ID sent in the query parameters.\n       *\n       * @alias adexchangeseller.reports.saved.generate\n       * @memberOf! adexchangeseller(v1.1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.locale Optional locale to use for translating report output to a local language. Defaults to \"en_US\" if not specified.\n       * @param {integer=} params.maxResults The maximum number of rows of report data to return.\n       * @param {string} params.savedReportId The saved report to retrieve.\n       * @param {integer=} params.startIndex Index of the first row of report data to return.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      generate: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adexchangeseller/v1.1/reports/{savedReportId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['savedReportId'],\n          pathParams: ['savedReportId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adexchangeseller.reports.saved.list\n       *\n       * @desc List all saved reports in this Ad Exchange account.\n       *\n       * @alias adexchangeseller.reports.saved.list\n       * @memberOf! adexchangeseller(v1.1)\n       *\n       * @param {object=} params Parameters for request\n       * @param {integer=} params.maxResults The maximum number of saved reports to include in the response, used for paging.\n       * @param {string=} params.pageToken A continuation token, used to page through saved reports. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adexchangeseller/v1.1/reports/saved',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n\n  self.urlchannels = {\n\n    /**\n     * adexchangeseller.urlchannels.list\n     *\n     * @desc List all URL channels in the specified ad client for this Ad Exchange account.\n     *\n     * @alias adexchangeseller.urlchannels.list\n     * @memberOf! adexchangeseller(v1.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client for which to list URL channels.\n     * @param {integer=} params.maxResults The maximum number of URL channels to include in the response, used for paging.\n     * @param {string=} params.pageToken A continuation token, used to page through URL channels. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangeseller/v1.1/adclients/{adClientId}/urlchannels',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef Account\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n * @property {string} id Unique identifier of this account.\n * @property {string} kind Kind of resource this is, in this case adexchangeseller#account.\n * @property {string} name Name of this account.\n */\n/**\n * @typedef AdClient\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n * @property {boolean} arcOptIn Whether this ad client is opted in to ARC.\n * @property {string} id Unique identifier of this ad client.\n * @property {string} kind Kind of resource this is, in this case adexchangeseller#adClient.\n * @property {string} productCode This ad client&#39;s product code, which corresponds to the PRODUCT_CODE report dimension.\n * @property {boolean} supportsReporting Whether this ad client supports being reported on.\n */\n/**\n * @typedef AdClients\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n * @property {string} etag ETag of this response for caching purposes.\n * @property {adexchangeseller(v1.1).AdClient[]} items The ad clients returned in this list response.\n * @property {string} kind Kind of list this is, in this case adexchangeseller#adClients.\n * @property {string} nextPageToken Continuation token used to page through ad clients. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; value to this.\n */\n/**\n * @typedef AdUnit\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n* @property {string} code Identity code of this ad unit, not necessarily unique across ad clients.\n* @property {string} id Unique identifier of this ad unit. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.\n* @property {string} kind Kind of resource this is, in this case adexchangeseller#adUnit.\n* @property {string} name Name of this ad unit.\n* @property {string} status Status of this ad unit. Possible values are:\nNEW: Indicates that the ad unit was created within the last seven days and does not yet have any activity associated with it.\n\nACTIVE: Indicates that there has been activity on this ad unit in the last seven days.\n\nINACTIVE: Indicates that there has been no activity on this ad unit in the last seven days.\n*/\n/**\n * @typedef AdUnits\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n * @property {string} etag ETag of this response for caching purposes.\n * @property {adexchangeseller(v1.1).AdUnit[]} items The ad units returned in this list response.\n * @property {string} kind Kind of list this is, in this case adexchangeseller#adUnits.\n * @property {string} nextPageToken Continuation token used to page through ad units. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; value to this.\n */\n/**\n * @typedef Alert\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n * @property {string} id Unique identifier of this alert. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.\n * @property {string} kind Kind of resource this is, in this case adexchangeseller#alert.\n * @property {string} message The localized alert message.\n * @property {string} severity Severity of this alert. Possible values: INFO, WARNING, SEVERE.\n * @property {string} type Type of this alert. Possible values: SELF_HOLD, MIGRATED_TO_BILLING3, ADDRESS_PIN_VERIFICATION, PHONE_PIN_VERIFICATION, CORPORATE_ENTITY, GRAYLISTED_PUBLISHER, API_HOLD.\n */\n/**\n * @typedef Alerts\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n * @property {adexchangeseller(v1.1).Alert[]} items The alerts returned in this list response.\n * @property {string} kind Kind of list this is, in this case adexchangeseller#alerts.\n */\n/**\n * @typedef CustomChannel\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n * @property {string} code Code of this custom channel, not necessarily unique across ad clients.\n * @property {string} id Unique identifier of this custom channel. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.\n * @property {string} kind Kind of resource this is, in this case adexchangeseller#customChannel.\n * @property {string} name Name of this custom channel.\n * @property {object} targetingInfo The targeting information of this custom channel, if activated.\n */\n/**\n * @typedef CustomChannels\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n * @property {string} etag ETag of this response for caching purposes.\n * @property {adexchangeseller(v1.1).CustomChannel[]} items The custom channels returned in this list response.\n * @property {string} kind Kind of list this is, in this case adexchangeseller#customChannels.\n * @property {string} nextPageToken Continuation token used to page through custom channels. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; value to this.\n */\n/**\n * @typedef Metadata\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n * @property {adexchangeseller(v1.1).ReportingMetadataEntry[]} items \n * @property {string} kind Kind of list this is, in this case adexchangeseller#metadata.\n */\n/**\n * @typedef PreferredDeal\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n * @property {string} advertiserName The name of the advertiser this deal is for.\n * @property {string} buyerNetworkName The name of the buyer network this deal is for.\n * @property {string} currencyCode The currency code that applies to the fixed_cpm value. If not set then assumed to be USD.\n * @property {string} endTime Time when this deal stops being active in seconds since the epoch (GMT). If not set then this deal is valid until manually disabled by the publisher.\n * @property {string} fixedCpm The fixed price for this preferred deal. In cpm micros of currency according to currencyCode. If set, then this preferred deal is eligible for the fixed price tier of buying (highest priority, pay exactly the configured fixed price).\n * @property {string} id Unique identifier of this preferred deal.\n * @property {string} kind Kind of resource this is, in this case adexchangeseller#preferredDeal.\n * @property {string} startTime Time when this deal becomes active in seconds since the epoch (GMT). If not set then this deal is active immediately upon creation.\n */\n/**\n * @typedef PreferredDeals\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n * @property {adexchangeseller(v1.1).PreferredDeal[]} items The preferred deals returned in this list response.\n * @property {string} kind Kind of list this is, in this case adexchangeseller#preferredDeals.\n */\n/**\n * @typedef Report\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n * @property {string[]} averages The averages of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.\n * @property {object[]} headers The header information of the columns requested in the report. This is a list of headers; one for each dimension in the request, followed by one for each metric in the request.\n * @property {string} kind Kind this is, in this case adexchangeseller#report.\n * @property {array[]} rows The output rows of the report. Each row is a list of cells; one for each dimension in the request, followed by one for each metric in the request. The dimension cells contain strings, and the metric cells contain numbers.\n * @property {string} totalMatchedRows The total number of rows matched by the report request. Fewer rows may be returned in the response due to being limited by the row count requested or the report row limit.\n * @property {string[]} totals The totals of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.\n * @property {string[]} warnings Any warnings associated with generation of the report.\n */\n/**\n * @typedef ReportingMetadataEntry\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n * @property {string[]} compatibleDimensions For metrics this is a list of dimension IDs which the metric is compatible with, for dimensions it is a list of compatibility groups the dimension belongs to.\n * @property {string[]} compatibleMetrics The names of the metrics the dimension or metric this reporting metadata entry describes is compatible with.\n * @property {string} id Unique identifier of this reporting metadata entry, corresponding to the name of the appropriate dimension or metric.\n * @property {string} kind Kind of resource this is, in this case adexchangeseller#reportingMetadataEntry.\n * @property {string[]} requiredDimensions The names of the dimensions which the dimension or metric this reporting metadata entry describes requires to also be present in order for the report to be valid. Omitting these will not cause an error or warning, but may result in data which cannot be correctly interpreted.\n * @property {string[]} requiredMetrics The names of the metrics which the dimension or metric this reporting metadata entry describes requires to also be present in order for the report to be valid. Omitting these will not cause an error or warning, but may result in data which cannot be correctly interpreted.\n * @property {string[]} supportedProducts The codes of the projects supported by the dimension or metric this reporting metadata entry describes.\n */\n/**\n * @typedef SavedReport\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n * @property {string} id Unique identifier of this saved report.\n * @property {string} kind Kind of resource this is, in this case adexchangeseller#savedReport.\n * @property {string} name This saved report&#39;s name.\n */\n/**\n * @typedef SavedReports\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n * @property {string} etag ETag of this response for caching purposes.\n * @property {adexchangeseller(v1.1).SavedReport[]} items The saved reports returned in this list response.\n * @property {string} kind Kind of list this is, in this case adexchangeseller#savedReports.\n * @property {string} nextPageToken Continuation token used to page through saved reports. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; value to this.\n */\n/**\n * @typedef UrlChannel\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n * @property {string} id Unique identifier of this URL channel. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.\n * @property {string} kind Kind of resource this is, in this case adexchangeseller#urlChannel.\n * @property {string} urlPattern URL Pattern of this URL channel. Does not include &quot;http://&quot; or &quot;https://&quot;. Example: www.example.com/home\n */\n/**\n * @typedef UrlChannels\n * @memberOf! adexchangeseller(v1.1)\n * @type object\n * @property {string} etag ETag of this response for caching purposes.\n * @property {adexchangeseller(v1.1).UrlChannel[]} items The URL channels returned in this list response.\n * @property {string} kind Kind of list this is, in this case adexchangeseller#urlChannels.\n * @property {string} nextPageToken Continuation token used to page through URL channels. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; value to this.\n */\nmodule.exports = Adexchangeseller;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/adexchangeseller/v2.0.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Ad Exchange Seller API\n *\n * Accesses the inventory of Ad Exchange seller users and generates reports.\n *\n * @example\n * var google = require('googleapis');\n * var adexchangeseller = google.adexchangeseller('v2.0');\n *\n * @namespace adexchangeseller\n * @type {Function}\n * @version v2.0\n * @variation v2.0\n * @param {object=} options Options for Adexchangeseller\n */\nfunction Adexchangeseller(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.accounts = {\n\n    /**\n     * adexchangeseller.accounts.get\n     *\n     * @desc Get information about the selected Ad Exchange account.\n     *\n     * @alias adexchangeseller.accounts.get\n     * @memberOf! adexchangeseller(v2.0)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId Account to get information about. Tip: 'myaccount' is a valid ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangeseller/v2.0/accounts/{accountId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adexchangeseller.accounts.list\n     *\n     * @desc List all accounts available to this Ad Exchange account.\n     *\n     * @alias adexchangeseller.accounts.list\n     * @memberOf! adexchangeseller(v2.0)\n     *\n     * @param {object=} params Parameters for request\n     * @param {integer=} params.maxResults The maximum number of accounts to include in the response, used for paging.\n     * @param {string=} params.pageToken A continuation token, used to page through accounts. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adexchangeseller/v2.0/accounts',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    adclients: {\n\n      /**\n       * adexchangeseller.accounts.adclients.list\n       *\n       * @desc List all ad clients in this Ad Exchange account.\n       *\n       * @alias adexchangeseller.accounts.adclients.list\n       * @memberOf! adexchangeseller(v2.0)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account to which the ad client belongs.\n       * @param {integer=} params.maxResults The maximum number of ad clients to include in the response, used for paging.\n       * @param {string=} params.pageToken A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adexchangeseller/v2.0/accounts/{accountId}/adclients',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    alerts: {\n\n      /**\n       * adexchangeseller.accounts.alerts.list\n       *\n       * @desc List the alerts for this Ad Exchange account.\n       *\n       * @alias adexchangeseller.accounts.alerts.list\n       * @memberOf! adexchangeseller(v2.0)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account owning the alerts.\n       * @param {string=} params.locale The locale to use for translating alert messages. The account locale will be used if this is not supplied. The AdSense default (English) will be used if the supplied locale is invalid or unsupported.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adexchangeseller/v2.0/accounts/{accountId}/alerts',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    customchannels: {\n\n      /**\n       * adexchangeseller.accounts.customchannels.get\n       *\n       * @desc Get the specified custom channel from the specified ad client.\n       *\n       * @alias adexchangeseller.accounts.customchannels.get\n       * @memberOf! adexchangeseller(v2.0)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account to which the ad client belongs.\n       * @param {string} params.adClientId Ad client which contains the custom channel.\n       * @param {string} params.customChannelId Custom channel to retrieve.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adexchangeseller/v2.0/accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId', 'customChannelId'],\n          pathParams: ['accountId', 'adClientId', 'customChannelId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adexchangeseller.accounts.customchannels.list\n       *\n       * @desc List all custom channels in the specified ad client for this Ad Exchange account.\n       *\n       * @alias adexchangeseller.accounts.customchannels.list\n       * @memberOf! adexchangeseller(v2.0)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account to which the ad client belongs.\n       * @param {string} params.adClientId Ad client for which to list custom channels.\n       * @param {integer=} params.maxResults The maximum number of custom channels to include in the response, used for paging.\n       * @param {string=} params.pageToken A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adexchangeseller/v2.0/accounts/{accountId}/adclients/{adClientId}/customchannels',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId'],\n          pathParams: ['accountId', 'adClientId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    metadata: {\n\n      dimensions: {\n\n        /**\n         * adexchangeseller.accounts.metadata.dimensions.list\n         *\n         * @desc List the metadata for the dimensions available to this AdExchange account.\n         *\n         * @alias adexchangeseller.accounts.metadata.dimensions.list\n         * @memberOf! adexchangeseller(v2.0)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId Account with visibility to the dimensions.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://www.googleapis.com/adexchangeseller/v2.0/accounts/{accountId}/metadata/dimensions',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId'],\n            pathParams: ['accountId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        }\n      },\n\n      metrics: {\n\n        /**\n         * adexchangeseller.accounts.metadata.metrics.list\n         *\n         * @desc List the metadata for the metrics available to this AdExchange account.\n         *\n         * @alias adexchangeseller.accounts.metadata.metrics.list\n         * @memberOf! adexchangeseller(v2.0)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId Account with visibility to the metrics.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://www.googleapis.com/adexchangeseller/v2.0/accounts/{accountId}/metadata/metrics',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId'],\n            pathParams: ['accountId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        }\n      }\n    },\n\n    preferreddeals: {\n\n      /**\n       * adexchangeseller.accounts.preferreddeals.get\n       *\n       * @desc Get information about the selected Ad Exchange Preferred Deal.\n       *\n       * @alias adexchangeseller.accounts.preferreddeals.get\n       * @memberOf! adexchangeseller(v2.0)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account owning the deal.\n       * @param {string} params.dealId Preferred deal to get information about.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adexchangeseller/v2.0/accounts/{accountId}/preferreddeals/{dealId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'dealId'],\n          pathParams: ['accountId', 'dealId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adexchangeseller.accounts.preferreddeals.list\n       *\n       * @desc List the preferred deals for this Ad Exchange account.\n       *\n       * @alias adexchangeseller.accounts.preferreddeals.list\n       * @memberOf! adexchangeseller(v2.0)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account owning the deals.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adexchangeseller/v2.0/accounts/{accountId}/preferreddeals',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    reports: {\n\n      /**\n       * adexchangeseller.accounts.reports.generate\n       *\n       * @desc Generate an Ad Exchange report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \"alt=csv\" as a query parameter.\n       *\n       * @alias adexchangeseller.accounts.reports.generate\n       * @memberOf! adexchangeseller(v2.0)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account which owns the generated report.\n       * @param {string=} params.dimension Dimensions to base the report on.\n       * @param {string} params.endDate End of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n       * @param {string=} params.filter Filters to be run on the report.\n       * @param {string=} params.locale Optional locale to use for translating report output to a local language. Defaults to \"en_US\" if not specified.\n       * @param {integer=} params.maxResults The maximum number of rows of report data to return.\n       * @param {string=} params.metric Numeric columns to include in the report.\n       * @param {string=} params.sort The name of a dimension or metric to sort the resulting report on, optionally prefixed with \"+\" to sort ascending or \"-\" to sort descending. If no prefix is specified, the column is sorted ascending.\n       * @param {string} params.startDate Start of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n       * @param {integer=} params.startIndex Index of the first row of report data to return.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      generate: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adexchangeseller/v2.0/accounts/{accountId}/reports',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'startDate', 'endDate'],\n          pathParams: ['accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      saved: {\n\n        /**\n         * adexchangeseller.accounts.reports.saved.generate\n         *\n         * @desc Generate an Ad Exchange report based on the saved report ID sent in the query parameters.\n         *\n         * @alias adexchangeseller.accounts.reports.saved.generate\n         * @memberOf! adexchangeseller(v2.0)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId Account owning the saved report.\n         * @param {string=} params.locale Optional locale to use for translating report output to a local language. Defaults to \"en_US\" if not specified.\n         * @param {integer=} params.maxResults The maximum number of rows of report data to return.\n         * @param {string} params.savedReportId The saved report to retrieve.\n         * @param {integer=} params.startIndex Index of the first row of report data to return.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        generate: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://www.googleapis.com/adexchangeseller/v2.0/accounts/{accountId}/reports/{savedReportId}',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId', 'savedReportId'],\n            pathParams: ['accountId', 'savedReportId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * adexchangeseller.accounts.reports.saved.list\n         *\n         * @desc List all saved reports in this Ad Exchange account.\n         *\n         * @alias adexchangeseller.accounts.reports.saved.list\n         * @memberOf! adexchangeseller(v2.0)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.accountId Account owning the saved reports.\n         * @param {integer=} params.maxResults The maximum number of saved reports to include in the response, used for paging.\n         * @param {string=} params.pageToken A continuation token, used to page through saved reports. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://www.googleapis.com/adexchangeseller/v2.0/accounts/{accountId}/reports/saved',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['accountId'],\n            pathParams: ['accountId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        }\n      }\n    },\n\n    urlchannels: {\n\n      /**\n       * adexchangeseller.accounts.urlchannels.list\n       *\n       * @desc List all URL channels in the specified ad client for this Ad Exchange account.\n       *\n       * @alias adexchangeseller.accounts.urlchannels.list\n       * @memberOf! adexchangeseller(v2.0)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account to which the ad client belongs.\n       * @param {string} params.adClientId Ad client for which to list URL channels.\n       * @param {integer=} params.maxResults The maximum number of URL channels to include in the response, used for paging.\n       * @param {string=} params.pageToken A continuation token, used to page through URL channels. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adexchangeseller/v2.0/accounts/{accountId}/adclients/{adClientId}/urlchannels',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId'],\n          pathParams: ['accountId', 'adClientId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\n/**\n * @typedef Account\n * @memberOf! adexchangeseller(v2.0)\n * @type object\n * @property {string} id Unique identifier of this account.\n * @property {string} kind Kind of resource this is, in this case adexchangeseller#account.\n * @property {string} name Name of this account.\n */\n/**\n * @typedef Accounts\n * @memberOf! adexchangeseller(v2.0)\n * @type object\n * @property {string} etag ETag of this response for caching purposes.\n * @property {adexchangeseller(v2.0).Account[]} items The accounts returned in this list response.\n * @property {string} kind Kind of list this is, in this case adexchangeseller#accounts.\n * @property {string} nextPageToken Continuation token used to page through accounts. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; value to this.\n */\n/**\n * @typedef AdClient\n * @memberOf! adexchangeseller(v2.0)\n * @type object\n * @property {boolean} arcOptIn Whether this ad client is opted in to ARC.\n * @property {string} id Unique identifier of this ad client.\n * @property {string} kind Kind of resource this is, in this case adexchangeseller#adClient.\n * @property {string} productCode This ad client&#39;s product code, which corresponds to the PRODUCT_CODE report dimension.\n * @property {boolean} supportsReporting Whether this ad client supports being reported on.\n */\n/**\n * @typedef AdClients\n * @memberOf! adexchangeseller(v2.0)\n * @type object\n * @property {string} etag ETag of this response for caching purposes.\n * @property {adexchangeseller(v2.0).AdClient[]} items The ad clients returned in this list response.\n * @property {string} kind Kind of list this is, in this case adexchangeseller#adClients.\n * @property {string} nextPageToken Continuation token used to page through ad clients. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; value to this.\n */\n/**\n * @typedef Alert\n * @memberOf! adexchangeseller(v2.0)\n * @type object\n * @property {string} id Unique identifier of this alert. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.\n * @property {string} kind Kind of resource this is, in this case adexchangeseller#alert.\n * @property {string} message The localized alert message.\n * @property {string} severity Severity of this alert. Possible values: INFO, WARNING, SEVERE.\n * @property {string} type Type of this alert. Possible values: SELF_HOLD, MIGRATED_TO_BILLING3, ADDRESS_PIN_VERIFICATION, PHONE_PIN_VERIFICATION, CORPORATE_ENTITY, GRAYLISTED_PUBLISHER, API_HOLD.\n */\n/**\n * @typedef Alerts\n * @memberOf! adexchangeseller(v2.0)\n * @type object\n * @property {adexchangeseller(v2.0).Alert[]} items The alerts returned in this list response.\n * @property {string} kind Kind of list this is, in this case adexchangeseller#alerts.\n */\n/**\n * @typedef CustomChannel\n * @memberOf! adexchangeseller(v2.0)\n * @type object\n * @property {string} code Code of this custom channel, not necessarily unique across ad clients.\n * @property {string} id Unique identifier of this custom channel. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.\n * @property {string} kind Kind of resource this is, in this case adexchangeseller#customChannel.\n * @property {string} name Name of this custom channel.\n * @property {object} targetingInfo The targeting information of this custom channel, if activated.\n */\n/**\n * @typedef CustomChannels\n * @memberOf! adexchangeseller(v2.0)\n * @type object\n * @property {string} etag ETag of this response for caching purposes.\n * @property {adexchangeseller(v2.0).CustomChannel[]} items The custom channels returned in this list response.\n * @property {string} kind Kind of list this is, in this case adexchangeseller#customChannels.\n * @property {string} nextPageToken Continuation token used to page through custom channels. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; value to this.\n */\n/**\n * @typedef Metadata\n * @memberOf! adexchangeseller(v2.0)\n * @type object\n * @property {adexchangeseller(v2.0).ReportingMetadataEntry[]} items \n * @property {string} kind Kind of list this is, in this case adexchangeseller#metadata.\n */\n/**\n * @typedef PreferredDeal\n * @memberOf! adexchangeseller(v2.0)\n * @type object\n * @property {string} advertiserName The name of the advertiser this deal is for.\n * @property {string} buyerNetworkName The name of the buyer network this deal is for.\n * @property {string} currencyCode The currency code that applies to the fixed_cpm value. If not set then assumed to be USD.\n * @property {string} endTime Time when this deal stops being active in seconds since the epoch (GMT). If not set then this deal is valid until manually disabled by the publisher.\n * @property {string} fixedCpm The fixed price for this preferred deal. In cpm micros of currency according to currencyCode. If set, then this preferred deal is eligible for the fixed price tier of buying (highest priority, pay exactly the configured fixed price).\n * @property {string} id Unique identifier of this preferred deal.\n * @property {string} kind Kind of resource this is, in this case adexchangeseller#preferredDeal.\n * @property {string} startTime Time when this deal becomes active in seconds since the epoch (GMT). If not set then this deal is active immediately upon creation.\n */\n/**\n * @typedef PreferredDeals\n * @memberOf! adexchangeseller(v2.0)\n * @type object\n * @property {adexchangeseller(v2.0).PreferredDeal[]} items The preferred deals returned in this list response.\n * @property {string} kind Kind of list this is, in this case adexchangeseller#preferredDeals.\n */\n/**\n * @typedef Report\n * @memberOf! adexchangeseller(v2.0)\n * @type object\n * @property {string[]} averages The averages of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.\n * @property {object[]} headers The header information of the columns requested in the report. This is a list of headers; one for each dimension in the request, followed by one for each metric in the request.\n * @property {string} kind Kind this is, in this case adexchangeseller#report.\n * @property {array[]} rows The output rows of the report. Each row is a list of cells; one for each dimension in the request, followed by one for each metric in the request. The dimension cells contain strings, and the metric cells contain numbers.\n * @property {string} totalMatchedRows The total number of rows matched by the report request. Fewer rows may be returned in the response due to being limited by the row count requested or the report row limit.\n * @property {string[]} totals The totals of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.\n * @property {string[]} warnings Any warnings associated with generation of the report.\n */\n/**\n * @typedef ReportingMetadataEntry\n * @memberOf! adexchangeseller(v2.0)\n * @type object\n * @property {string[]} compatibleDimensions For metrics this is a list of dimension IDs which the metric is compatible with, for dimensions it is a list of compatibility groups the dimension belongs to.\n * @property {string[]} compatibleMetrics The names of the metrics the dimension or metric this reporting metadata entry describes is compatible with.\n * @property {string} id Unique identifier of this reporting metadata entry, corresponding to the name of the appropriate dimension or metric.\n * @property {string} kind Kind of resource this is, in this case adexchangeseller#reportingMetadataEntry.\n * @property {string[]} requiredDimensions The names of the dimensions which the dimension or metric this reporting metadata entry describes requires to also be present in order for the report to be valid. Omitting these will not cause an error or warning, but may result in data which cannot be correctly interpreted.\n * @property {string[]} requiredMetrics The names of the metrics which the dimension or metric this reporting metadata entry describes requires to also be present in order for the report to be valid. Omitting these will not cause an error or warning, but may result in data which cannot be correctly interpreted.\n * @property {string[]} supportedProducts The codes of the projects supported by the dimension or metric this reporting metadata entry describes.\n */\n/**\n * @typedef SavedReport\n * @memberOf! adexchangeseller(v2.0)\n * @type object\n * @property {string} id Unique identifier of this saved report.\n * @property {string} kind Kind of resource this is, in this case adexchangeseller#savedReport.\n * @property {string} name This saved report&#39;s name.\n */\n/**\n * @typedef SavedReports\n * @memberOf! adexchangeseller(v2.0)\n * @type object\n * @property {string} etag ETag of this response for caching purposes.\n * @property {adexchangeseller(v2.0).SavedReport[]} items The saved reports returned in this list response.\n * @property {string} kind Kind of list this is, in this case adexchangeseller#savedReports.\n * @property {string} nextPageToken Continuation token used to page through saved reports. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; value to this.\n */\n/**\n * @typedef UrlChannel\n * @memberOf! adexchangeseller(v2.0)\n * @type object\n * @property {string} id Unique identifier of this URL channel. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.\n * @property {string} kind Kind of resource this is, in this case adexchangeseller#urlChannel.\n * @property {string} urlPattern URL Pattern of this URL channel. Does not include &quot;http://&quot; or &quot;https://&quot;. Example: www.example.com/home\n */\n/**\n * @typedef UrlChannels\n * @memberOf! adexchangeseller(v2.0)\n * @type object\n * @property {string} etag ETag of this response for caching purposes.\n * @property {adexchangeseller(v2.0).UrlChannel[]} items The URL channels returned in this list response.\n * @property {string} kind Kind of list this is, in this case adexchangeseller#urlChannels.\n * @property {string} nextPageToken Continuation token used to page through URL channels. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; value to this.\n */\nmodule.exports = Adexchangeseller;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/admin/datatransfer_v1.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Admin Data Transfer API\n *\n * Transfers user data from one user to another.\n *\n * @example\n * var google = require('googleapis');\n * var admin = google.admin('datatransfer_v1');\n *\n * @namespace admin\n * @type {Function}\n * @version datatransfer_v1\n * @variation datatransfer_v1\n * @param {object=} options Options for Admin\n */\nfunction Admin(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.applications = {\n\n    /**\n     * datatransfer.applications.get\n     *\n     * @desc Retrieves information about an application for the given application ID.\n     *\n     * @alias datatransfer.applications.get\n     * @memberOf! admin(datatransfer_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.applicationId ID of the application resource to be retrieved.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/datatransfer/v1/applications/{applicationId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['applicationId'],\n        pathParams: ['applicationId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * datatransfer.applications.list\n     *\n     * @desc Lists the applications available for data transfer for a customer.\n     *\n     * @alias datatransfer.applications.list\n     * @memberOf! admin(datatransfer_v1)\n     *\n     * @param {object=} params Parameters for request\n     * @param {string=} params.customerId Immutable ID of the Google Apps account.\n     * @param {integer=} params.maxResults Maximum number of results to return. Default is 100.\n     * @param {string=} params.pageToken Token to specify next page in the list.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/datatransfer/v1/applications',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.transfers = {\n\n    /**\n     * datatransfer.transfers.get\n     *\n     * @desc Retrieves a data transfer request by its resource ID.\n     *\n     * @alias datatransfer.transfers.get\n     * @memberOf! admin(datatransfer_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.dataTransferId ID of the resource to be retrieved. This is returned in the response from the insert method.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/datatransfer/v1/transfers/{dataTransferId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['dataTransferId'],\n        pathParams: ['dataTransferId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * datatransfer.transfers.insert\n     *\n     * @desc Inserts a data transfer request.\n     *\n     * @alias datatransfer.transfers.insert\n     * @memberOf! admin(datatransfer_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {admin(datatransfer_v1).DataTransfer} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/datatransfer/v1/transfers',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * datatransfer.transfers.list\n     *\n     * @desc Lists the transfers for a customer by source user, destination user, or status.\n     *\n     * @alias datatransfer.transfers.list\n     * @memberOf! admin(datatransfer_v1)\n     *\n     * @param {object=} params Parameters for request\n     * @param {string=} params.customerId Immutable ID of the Google Apps account.\n     * @param {integer=} params.maxResults Maximum number of results to return. Default is 100.\n     * @param {string=} params.newOwnerUserId Destination user's profile ID.\n     * @param {string=} params.oldOwnerUserId Source user's profile ID.\n     * @param {string=} params.pageToken Token to specify the next page in the list.\n     * @param {string=} params.status Status of the transfer.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/datatransfer/v1/transfers',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef Application\n * @memberOf! admin(datatransfer_v1)\n * @type object\n * @property {string} etag Etag of the resource.\n * @property {string} id The application&#39;s ID.\n * @property {string} kind Identifies the resource as a DataTransfer Application Resource.\n * @property {string} name The application&#39;s name.\n * @property {admin(datatransfer_v1).ApplicationTransferParam[]} transferParams The list of all possible transfer parameters for this application. These parameters can be used to select the data of the user in this application to be transfered.\n */\n/**\n * @typedef ApplicationDataTransfer\n * @memberOf! admin(datatransfer_v1)\n * @type object\n * @property {string} applicationId The application&#39;s ID.\n * @property {admin(datatransfer_v1).ApplicationTransferParam[]} applicationTransferParams The transfer parameters for the application. These parameters are used to select the data which will get transfered in context of this application.\n * @property {string} applicationTransferStatus Current status of transfer for this application. (Read-only)\n */\n/**\n * @typedef ApplicationTransferParam\n * @memberOf! admin(datatransfer_v1)\n * @type object\n * @property {string} key The type of the transfer parameter. eg: &#39;PRIVACY_LEVEL&#39;\n * @property {string[]} value The value of the coressponding transfer parameter. eg: &#39;PRIVATE&#39; or &#39;SHARED&#39;\n */\n/**\n * @typedef ApplicationsListResponse\n * @memberOf! admin(datatransfer_v1)\n * @type object\n * @property {admin(datatransfer_v1).Application[]} applications List of applications that support data transfer and are also installed for the customer.\n * @property {string} etag ETag of the resource.\n * @property {string} kind Identifies the resource as a collection of Applications.\n * @property {string} nextPageToken Continuation token which will be used to specify next page in list API.\n */\n/**\n * @typedef DataTransfer\n * @memberOf! admin(datatransfer_v1)\n * @type object\n * @property {admin(datatransfer_v1).ApplicationDataTransfer[]} applicationDataTransfers List of per application data transfer resources. It contains data transfer details of the applications associated with this transfer resource. Note that this list is also used to specify the applications for which data transfer has to be done at the time of the transfer resource creation.\n * @property {string} etag ETag of the resource.\n * @property {string} id The transfer&#39;s ID (Read-only).\n * @property {string} kind Identifies the resource as a DataTransfer request.\n * @property {string} newOwnerUserId ID of the user to whom the data is being transfered.\n * @property {string} oldOwnerUserId ID of the user whose data is being transfered.\n * @property {string} overallTransferStatusCode Overall transfer status (Read-only).\n * @property {string} requestTime The time at which the data transfer was requested (Read-only).\n */\n/**\n * @typedef DataTransfersListResponse\n * @memberOf! admin(datatransfer_v1)\n * @type object\n * @property {admin(datatransfer_v1).DataTransfer[]} dataTransfers List of data transfer requests.\n * @property {string} etag ETag of the resource.\n * @property {string} kind Identifies the resource as a collection of data transfer requests.\n * @property {string} nextPageToken Continuation token which will be used to specify next page in list API.\n */\nmodule.exports = Admin;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/admin/directory_v1.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Admin Directory API\n *\n * The Admin SDK Directory API lets you view and manage enterprise resources such as users and groups, administrative notifications, security features, and more.\n *\n * @example\n * var google = require('googleapis');\n * var admin = google.admin('directory_v1');\n *\n * @namespace admin\n * @type {Function}\n * @version directory_v1\n * @variation directory_v1\n * @param {object=} options Options for Admin\n */\nfunction Admin(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.asps = {\n\n    /**\n     * directory.asps.delete\n     *\n     * @desc Delete an ASP issued by a user.\n     *\n     * @alias directory.asps.delete\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.codeId The unique ID of the ASP to be deleted.\n     * @param {string} params.userKey Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/asps/{codeId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['userKey', 'codeId'],\n        pathParams: ['codeId', 'userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.asps.get\n     *\n     * @desc Get information about an ASP issued by a user.\n     *\n     * @alias directory.asps.get\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.codeId The unique ID of the ASP.\n     * @param {string} params.userKey Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/asps/{codeId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['userKey', 'codeId'],\n        pathParams: ['codeId', 'userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.asps.list\n     *\n     * @desc List the ASPs issued by a user.\n     *\n     * @alias directory.asps.list\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.userKey Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/asps',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.channels = {\n\n    /**\n     * admin.channels.stop\n     *\n     * @desc Stop watching resources through this channel\n     *\n     * @alias admin.channels.stop\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {admin(directory_v1).Channel} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    stop: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/admin/directory_v1/channels/stop',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.chromeosdevices = {\n\n    /**\n     * directory.chromeosdevices.action\n     *\n     * @desc Take action on Chrome OS Device\n     *\n     * @alias directory.chromeosdevices.action\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {string} params.resourceId Immutable id of Chrome OS Device\n     * @param {admin(directory_v1).ChromeOsDeviceAction} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    action: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['customerId', 'resourceId'],\n        pathParams: ['customerId', 'resourceId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.chromeosdevices.get\n     *\n     * @desc Retrieve Chrome OS Device\n     *\n     * @alias directory.chromeosdevices.get\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {string} params.deviceId Immutable id of Chrome OS Device\n     * @param {string=} params.projection Restrict information returned to a set of selected fields.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customerId', 'deviceId'],\n        pathParams: ['customerId', 'deviceId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.chromeosdevices.list\n     *\n     * @desc Retrieve all Chrome OS Devices of a customer (paginated)\n     *\n     * @alias directory.chromeosdevices.list\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {integer=} params.maxResults Maximum number of results to return. Default is 100\n     * @param {string=} params.orderBy Column to use for sorting results\n     * @param {string=} params.pageToken Token to specify next page in the list\n     * @param {string=} params.projection Restrict information returned to a set of selected fields.\n     * @param {string=} params.query Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?hl=en&answer=1698333\n     * @param {string=} params.sortOrder Whether to return results in ascending or descending order. Only of use when orderBy is also used\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/devices/chromeos',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.chromeosdevices.patch\n     *\n     * @desc Update Chrome OS Device. This method supports patch semantics.\n     *\n     * @alias directory.chromeosdevices.patch\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {string} params.deviceId Immutable id of Chrome OS Device\n     * @param {string=} params.projection Restrict information returned to a set of selected fields.\n     * @param {admin(directory_v1).ChromeOsDevice} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['customerId', 'deviceId'],\n        pathParams: ['customerId', 'deviceId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.chromeosdevices.update\n     *\n     * @desc Update Chrome OS Device\n     *\n     * @alias directory.chromeosdevices.update\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {string} params.deviceId Immutable id of Chrome OS Device\n     * @param {string=} params.projection Restrict information returned to a set of selected fields.\n     * @param {admin(directory_v1).ChromeOsDevice} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['customerId', 'deviceId'],\n        pathParams: ['customerId', 'deviceId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.customers = {\n\n    /**\n     * directory.customers.get\n     *\n     * @desc Retrieves a customer.\n     *\n     * @alias directory.customers.get\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerKey Id of the customer to be retrieved\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customers/{customerKey}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customerKey'],\n        pathParams: ['customerKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.customers.patch\n     *\n     * @desc Updates a customer. This method supports patch semantics.\n     *\n     * @alias directory.customers.patch\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerKey Id of the customer to be updated\n     * @param {admin(directory_v1).Customer} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customers/{customerKey}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['customerKey'],\n        pathParams: ['customerKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.customers.update\n     *\n     * @desc Updates a customer.\n     *\n     * @alias directory.customers.update\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerKey Id of the customer to be updated\n     * @param {admin(directory_v1).Customer} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customers/{customerKey}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['customerKey'],\n        pathParams: ['customerKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.domainAliases = {\n\n    /**\n     * directory.domainAliases.delete\n     *\n     * @desc Deletes a Domain Alias of the customer.\n     *\n     * @alias directory.domainAliases.delete\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable id of the Google Apps account.\n     * @param {string} params.domainAliasName Name of domain alias to be retrieved.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['customer', 'domainAliasName'],\n        pathParams: ['customer', 'domainAliasName'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.domainAliases.get\n     *\n     * @desc Retrieves a domain alias of the customer.\n     *\n     * @alias directory.domainAliases.get\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable id of the Google Apps account.\n     * @param {string} params.domainAliasName Name of domain alias to be retrieved.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customer', 'domainAliasName'],\n        pathParams: ['customer', 'domainAliasName'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.domainAliases.insert\n     *\n     * @desc Inserts a Domain alias of the customer.\n     *\n     * @alias directory.domainAliases.insert\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable id of the Google Apps account.\n     * @param {admin(directory_v1).DomainAlias} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/domainaliases',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.domainAliases.list\n     *\n     * @desc Lists the domain aliases of the customer.\n     *\n     * @alias directory.domainAliases.list\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable id of the Google Apps account.\n     * @param {string=} params.parentDomainName Name of the parent domain for which domain aliases are to be fetched.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/domainaliases',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.domains = {\n\n    /**\n     * directory.domains.delete\n     *\n     * @desc Deletes a domain of the customer.\n     *\n     * @alias directory.domains.delete\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable id of the Google Apps account.\n     * @param {string} params.domainName Name of domain to be deleted\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/domains/{domainName}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['customer', 'domainName'],\n        pathParams: ['customer', 'domainName'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.domains.get\n     *\n     * @desc Retrieves a domain of the customer.\n     *\n     * @alias directory.domains.get\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable id of the Google Apps account.\n     * @param {string} params.domainName Name of domain to be retrieved\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/domains/{domainName}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customer', 'domainName'],\n        pathParams: ['customer', 'domainName'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.domains.insert\n     *\n     * @desc Inserts a domain of the customer.\n     *\n     * @alias directory.domains.insert\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable id of the Google Apps account.\n     * @param {admin(directory_v1).Domains} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/domains',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.domains.list\n     *\n     * @desc Lists the domains of the customer.\n     *\n     * @alias directory.domains.list\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable id of the Google Apps account.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/domains',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.groups = {\n\n    /**\n     * directory.groups.delete\n     *\n     * @desc Delete Group\n     *\n     * @alias directory.groups.delete\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupKey Email or immutable Id of the group\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/groups/{groupKey}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.groups.get\n     *\n     * @desc Retrieve Group\n     *\n     * @alias directory.groups.get\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupKey Email or immutable Id of the group\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/groups/{groupKey}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.groups.insert\n     *\n     * @desc Create Group\n     *\n     * @alias directory.groups.insert\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {admin(directory_v1).Group} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/groups',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.groups.list\n     *\n     * @desc Retrieve all groups in a domain (paginated)\n     *\n     * @alias directory.groups.list\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object=} params Parameters for request\n     * @param {string=} params.customer Immutable id of the Google Apps account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain.\n     * @param {string=} params.domain Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.\n     * @param {integer=} params.maxResults Maximum number of results to return. Default is 200\n     * @param {string=} params.pageToken Token to specify next page in the list\n     * @param {string=} params.userKey Email or immutable Id of the user if only those groups are to be listed, the given user is a member of. If Id, it should match with id of user object\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/groups',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.groups.patch\n     *\n     * @desc Update Group. This method supports patch semantics.\n     *\n     * @alias directory.groups.patch\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupKey Email or immutable Id of the group. If Id, it should match with id of group object\n     * @param {admin(directory_v1).Group} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/groups/{groupKey}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.groups.update\n     *\n     * @desc Update Group\n     *\n     * @alias directory.groups.update\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupKey Email or immutable Id of the group. If Id, it should match with id of group object\n     * @param {admin(directory_v1).Group} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/groups/{groupKey}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    aliases: {\n\n      /**\n       * directory.groups.aliases.delete\n       *\n       * @desc Remove a alias for the group\n       *\n       * @alias directory.groups.aliases.delete\n       * @memberOf! admin(directory_v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.alias The alias to be removed\n       * @param {string} params.groupKey Email or immutable Id of the group\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/admin/directory/v1/groups/{groupKey}/aliases/{alias}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['groupKey', 'alias'],\n          pathParams: ['alias', 'groupKey'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * directory.groups.aliases.insert\n       *\n       * @desc Add a alias for the group\n       *\n       * @alias directory.groups.aliases.insert\n       * @memberOf! admin(directory_v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.groupKey Email or immutable Id of the group\n       * @param {admin(directory_v1).Alias} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/admin/directory/v1/groups/{groupKey}/aliases',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * directory.groups.aliases.list\n       *\n       * @desc List all aliases for a group\n       *\n       * @alias directory.groups.aliases.list\n       * @memberOf! admin(directory_v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.groupKey Email or immutable Id of the group\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/admin/directory/v1/groups/{groupKey}/aliases',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n\n  self.members = {\n\n    /**\n     * directory.members.delete\n     *\n     * @desc Remove membership.\n     *\n     * @alias directory.members.delete\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupKey Email or immutable Id of the group\n     * @param {string} params.memberKey Email or immutable Id of the member\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/groups/{groupKey}/members/{memberKey}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['groupKey', 'memberKey'],\n        pathParams: ['groupKey', 'memberKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.members.get\n     *\n     * @desc Retrieve Group Member\n     *\n     * @alias directory.members.get\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupKey Email or immutable Id of the group\n     * @param {string} params.memberKey Email or immutable Id of the member\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/groups/{groupKey}/members/{memberKey}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['groupKey', 'memberKey'],\n        pathParams: ['groupKey', 'memberKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.members.insert\n     *\n     * @desc Add user to the specified group.\n     *\n     * @alias directory.members.insert\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupKey Email or immutable Id of the group\n     * @param {admin(directory_v1).Member} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/groups/{groupKey}/members',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.members.list\n     *\n     * @desc Retrieve all members in a group (paginated)\n     *\n     * @alias directory.members.list\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupKey Email or immutable Id of the group\n     * @param {integer=} params.maxResults Maximum number of results to return. Default is 200\n     * @param {string=} params.pageToken Token to specify next page in the list\n     * @param {string=} params.roles Comma separated role values to filter list results on.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/groups/{groupKey}/members',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.members.patch\n     *\n     * @desc Update membership of a user in the specified group. This method supports patch semantics.\n     *\n     * @alias directory.members.patch\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupKey Email or immutable Id of the group. If Id, it should match with id of group object\n     * @param {string} params.memberKey Email or immutable Id of the user. If Id, it should match with id of member object\n     * @param {admin(directory_v1).Member} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/groups/{groupKey}/members/{memberKey}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['groupKey', 'memberKey'],\n        pathParams: ['groupKey', 'memberKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.members.update\n     *\n     * @desc Update membership of a user in the specified group.\n     *\n     * @alias directory.members.update\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupKey Email or immutable Id of the group. If Id, it should match with id of group object\n     * @param {string} params.memberKey Email or immutable Id of the user. If Id, it should match with id of member object\n     * @param {admin(directory_v1).Member} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/groups/{groupKey}/members/{memberKey}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['groupKey', 'memberKey'],\n        pathParams: ['groupKey', 'memberKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.mobiledevices = {\n\n    /**\n     * directory.mobiledevices.action\n     *\n     * @desc Take action on Mobile Device\n     *\n     * @alias directory.mobiledevices.action\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {string} params.resourceId Immutable id of Mobile Device\n     * @param {admin(directory_v1).MobileDeviceAction} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    action: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['customerId', 'resourceId'],\n        pathParams: ['customerId', 'resourceId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.mobiledevices.delete\n     *\n     * @desc Delete Mobile Device\n     *\n     * @alias directory.mobiledevices.delete\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {string} params.resourceId Immutable id of Mobile Device\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['customerId', 'resourceId'],\n        pathParams: ['customerId', 'resourceId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.mobiledevices.get\n     *\n     * @desc Retrieve Mobile Device\n     *\n     * @alias directory.mobiledevices.get\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {string=} params.projection Restrict information returned to a set of selected fields.\n     * @param {string} params.resourceId Immutable id of Mobile Device\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customerId', 'resourceId'],\n        pathParams: ['customerId', 'resourceId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.mobiledevices.list\n     *\n     * @desc Retrieve all Mobile Devices of a customer (paginated)\n     *\n     * @alias directory.mobiledevices.list\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {integer=} params.maxResults Maximum number of results to return. Default is 100\n     * @param {string=} params.orderBy Column to use for sorting results\n     * @param {string=} params.pageToken Token to specify next page in the list\n     * @param {string=} params.projection Restrict information returned to a set of selected fields.\n     * @param {string=} params.query Search string in the format given at http://support.google.com/a/bin/answer.py?hl=en&answer=1408863#search\n     * @param {string=} params.sortOrder Whether to return results in ascending or descending order. Only of use when orderBy is also used\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/devices/mobile',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.notifications = {\n\n    /**\n     * directory.notifications.delete\n     *\n     * @desc Deletes a notification\n     *\n     * @alias directory.notifications.delete\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer The unique ID for the customer's Google account. The customerId is also returned as part of the Users resource.\n     * @param {string} params.notificationId The unique ID of the notification.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/notifications/{notificationId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['customer', 'notificationId'],\n        pathParams: ['customer', 'notificationId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.notifications.get\n     *\n     * @desc Retrieves a notification.\n     *\n     * @alias directory.notifications.get\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer The unique ID for the customer's Google account. The customerId is also returned as part of the Users resource.\n     * @param {string} params.notificationId The unique ID of the notification.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/notifications/{notificationId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customer', 'notificationId'],\n        pathParams: ['customer', 'notificationId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.notifications.list\n     *\n     * @desc Retrieves a list of notifications.\n     *\n     * @alias directory.notifications.list\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer The unique ID for the customer's Google account.\n     * @param {string=} params.language The ISO 639-1 code of the language notifications are returned in. The default is English (en).\n     * @param {integer=} params.maxResults Maximum number of notifications to return per page. The default is 100.\n     * @param {string=} params.pageToken The token to specify the page of results to retrieve.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/notifications',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.notifications.patch\n     *\n     * @desc Updates a notification. This method supports patch semantics.\n     *\n     * @alias directory.notifications.patch\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer The unique ID for the customer's Google account.\n     * @param {string} params.notificationId The unique ID of the notification.\n     * @param {admin(directory_v1).Notification} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/notifications/{notificationId}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['customer', 'notificationId'],\n        pathParams: ['customer', 'notificationId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.notifications.update\n     *\n     * @desc Updates a notification.\n     *\n     * @alias directory.notifications.update\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer The unique ID for the customer's Google account.\n     * @param {string} params.notificationId The unique ID of the notification.\n     * @param {admin(directory_v1).Notification} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/notifications/{notificationId}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['customer', 'notificationId'],\n        pathParams: ['customer', 'notificationId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.orgunits = {\n\n    /**\n     * directory.orgunits.delete\n     *\n     * @desc Remove Organization Unit\n     *\n     * @alias directory.orgunits.delete\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {string} params.orgUnitPath Full path of the organization unit or its Id\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/orgunits/{orgUnitPath}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['customerId', 'orgUnitPath'],\n        pathParams: ['customerId', 'orgUnitPath'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.orgunits.get\n     *\n     * @desc Retrieve Organization Unit\n     *\n     * @alias directory.orgunits.get\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {string} params.orgUnitPath Full path of the organization unit or its Id\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/orgunits/{orgUnitPath}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customerId', 'orgUnitPath'],\n        pathParams: ['customerId', 'orgUnitPath'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.orgunits.insert\n     *\n     * @desc Add Organization Unit\n     *\n     * @alias directory.orgunits.insert\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {admin(directory_v1).OrgUnit} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/orgunits',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.orgunits.list\n     *\n     * @desc Retrieve all Organization Units\n     *\n     * @alias directory.orgunits.list\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {string=} params.orgUnitPath the URL-encoded organization unit's path or its Id\n     * @param {string=} params.type Whether to return all sub-organizations or just immediate children\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/orgunits',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.orgunits.patch\n     *\n     * @desc Update Organization Unit. This method supports patch semantics.\n     *\n     * @alias directory.orgunits.patch\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {string} params.orgUnitPath Full path of the organization unit or its Id\n     * @param {admin(directory_v1).OrgUnit} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/orgunits/{orgUnitPath}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['customerId', 'orgUnitPath'],\n        pathParams: ['customerId', 'orgUnitPath'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.orgunits.update\n     *\n     * @desc Update Organization Unit\n     *\n     * @alias directory.orgunits.update\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {string} params.orgUnitPath Full path of the organization unit or its Id\n     * @param {admin(directory_v1).OrgUnit} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/orgunits/{orgUnitPath}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['customerId', 'orgUnitPath'],\n        pathParams: ['customerId', 'orgUnitPath'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.privileges = {\n\n    /**\n     * directory.privileges.list\n     *\n     * @desc Retrieves a paginated list of all privileges for a customer.\n     *\n     * @alias directory.privileges.list\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable ID of the Google Apps account.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/roles/ALL/privileges',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.resources = {\n\n    calendars: {\n\n      /**\n       * directory.resources.calendars.delete\n       *\n       * @desc Deletes a calendar resource.\n       *\n       * @alias directory.resources.calendars.delete\n       * @memberOf! admin(directory_v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.calendarResourceId The unique ID of the calendar resource to delete.\n       * @param {string} params.customer The unique ID for the customer's Google account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'calendarResourceId'],\n          pathParams: ['calendarResourceId', 'customer'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * directory.resources.calendars.get\n       *\n       * @desc Retrieves a calendar resource.\n       *\n       * @alias directory.resources.calendars.get\n       * @memberOf! admin(directory_v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.calendarResourceId The unique ID of the calendar resource to retrieve.\n       * @param {string} params.customer The unique ID for the customer's Google account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'calendarResourceId'],\n          pathParams: ['calendarResourceId', 'customer'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * directory.resources.calendars.insert\n       *\n       * @desc Inserts a calendar resource.\n       *\n       * @alias directory.resources.calendars.insert\n       * @memberOf! admin(directory_v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.customer The unique ID for the customer's Google account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.\n       * @param {admin(directory_v1).CalendarResource} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/resources/calendars',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * directory.resources.calendars.list\n       *\n       * @desc Retrieves a list of calendar resources for an account.\n       *\n       * @alias directory.resources.calendars.list\n       * @memberOf! admin(directory_v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.customer The unique ID for the customer's Google account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.\n       * @param {integer=} params.maxResults Maximum number of results to return.\n       * @param {string=} params.pageToken Token to specify the next page in the list.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/resources/calendars',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * directory.resources.calendars.patch\n       *\n       * @desc Updates a calendar resource. This method supports patch semantics.\n       *\n       * @alias directory.resources.calendars.patch\n       * @memberOf! admin(directory_v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.calendarResourceId The unique ID of the calendar resource to update.\n       * @param {string} params.customer The unique ID for the customer's Google account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.\n       * @param {admin(directory_v1).CalendarResource} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'calendarResourceId'],\n          pathParams: ['calendarResourceId', 'customer'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * directory.resources.calendars.update\n       *\n       * @desc Updates a calendar resource.\n       *\n       * @alias directory.resources.calendars.update\n       * @memberOf! admin(directory_v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.calendarResourceId The unique ID of the calendar resource to update.\n       * @param {string} params.customer The unique ID for the customer's Google account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.\n       * @param {admin(directory_v1).CalendarResource} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'calendarResourceId'],\n          pathParams: ['calendarResourceId', 'customer'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n\n  self.roleAssignments = {\n\n    /**\n     * directory.roleAssignments.delete\n     *\n     * @desc Deletes a role assignment.\n     *\n     * @alias directory.roleAssignments.delete\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable ID of the Google Apps account.\n     * @param {string} params.roleAssignmentId Immutable ID of the role assignment.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['customer', 'roleAssignmentId'],\n        pathParams: ['customer', 'roleAssignmentId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.roleAssignments.get\n     *\n     * @desc Retrieve a role assignment.\n     *\n     * @alias directory.roleAssignments.get\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable ID of the Google Apps account.\n     * @param {string} params.roleAssignmentId Immutable ID of the role assignment.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customer', 'roleAssignmentId'],\n        pathParams: ['customer', 'roleAssignmentId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.roleAssignments.insert\n     *\n     * @desc Creates a role assignment.\n     *\n     * @alias directory.roleAssignments.insert\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable ID of the Google Apps account.\n     * @param {admin(directory_v1).RoleAssignment} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/roleassignments',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.roleAssignments.list\n     *\n     * @desc Retrieves a paginated list of all roleAssignments.\n     *\n     * @alias directory.roleAssignments.list\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable ID of the Google Apps account.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Token to specify the next page in the list.\n     * @param {string=} params.roleId Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.\n     * @param {string=} params.userKey The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/roleassignments',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.roles = {\n\n    /**\n     * directory.roles.delete\n     *\n     * @desc Deletes a role.\n     *\n     * @alias directory.roles.delete\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable ID of the Google Apps account.\n     * @param {string} params.roleId Immutable ID of the role.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/roles/{roleId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['customer', 'roleId'],\n        pathParams: ['customer', 'roleId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.roles.get\n     *\n     * @desc Retrieves a role.\n     *\n     * @alias directory.roles.get\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable ID of the Google Apps account.\n     * @param {string} params.roleId Immutable ID of the role.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/roles/{roleId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customer', 'roleId'],\n        pathParams: ['customer', 'roleId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.roles.insert\n     *\n     * @desc Creates a role.\n     *\n     * @alias directory.roles.insert\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable ID of the Google Apps account.\n     * @param {admin(directory_v1).Role} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/roles',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.roles.list\n     *\n     * @desc Retrieves a paginated list of all the roles in a domain.\n     *\n     * @alias directory.roles.list\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable id of the Google Apps account.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Token to specify the next page in the list.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/roles',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.roles.patch\n     *\n     * @desc Updates a role. This method supports patch semantics.\n     *\n     * @alias directory.roles.patch\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable ID of the Google Apps account.\n     * @param {string} params.roleId Immutable ID of the role.\n     * @param {admin(directory_v1).Role} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/roles/{roleId}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['customer', 'roleId'],\n        pathParams: ['customer', 'roleId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.roles.update\n     *\n     * @desc Updates a role.\n     *\n     * @alias directory.roles.update\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customer Immutable ID of the Google Apps account.\n     * @param {string} params.roleId Immutable ID of the role.\n     * @param {admin(directory_v1).Role} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customer}/roles/{roleId}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['customer', 'roleId'],\n        pathParams: ['customer', 'roleId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.schemas = {\n\n    /**\n     * directory.schemas.delete\n     *\n     * @desc Delete schema\n     *\n     * @alias directory.schemas.delete\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {string} params.schemaKey Name or immutable Id of the schema\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['customerId', 'schemaKey'],\n        pathParams: ['customerId', 'schemaKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.schemas.get\n     *\n     * @desc Retrieve schema\n     *\n     * @alias directory.schemas.get\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {string} params.schemaKey Name or immutable Id of the schema\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customerId', 'schemaKey'],\n        pathParams: ['customerId', 'schemaKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.schemas.insert\n     *\n     * @desc Create schema.\n     *\n     * @alias directory.schemas.insert\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {admin(directory_v1).Schema} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/schemas',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.schemas.list\n     *\n     * @desc Retrieve all schemas for a customer\n     *\n     * @alias directory.schemas.list\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/schemas',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.schemas.patch\n     *\n     * @desc Update schema. This method supports patch semantics.\n     *\n     * @alias directory.schemas.patch\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {string} params.schemaKey Name or immutable Id of the schema.\n     * @param {admin(directory_v1).Schema} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['customerId', 'schemaKey'],\n        pathParams: ['customerId', 'schemaKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.schemas.update\n     *\n     * @desc Update schema\n     *\n     * @alias directory.schemas.update\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.customerId Immutable id of the Google Apps account\n     * @param {string} params.schemaKey Name or immutable Id of the schema.\n     * @param {admin(directory_v1).Schema} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['customerId', 'schemaKey'],\n        pathParams: ['customerId', 'schemaKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.tokens = {\n\n    /**\n     * directory.tokens.delete\n     *\n     * @desc Delete all access tokens issued by a user for an application.\n     *\n     * @alias directory.tokens.delete\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.clientId The Client ID of the application the token is issued to.\n     * @param {string} params.userKey Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/tokens/{clientId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['userKey', 'clientId'],\n        pathParams: ['clientId', 'userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.tokens.get\n     *\n     * @desc Get information about an access token issued by a user.\n     *\n     * @alias directory.tokens.get\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.clientId The Client ID of the application the token is issued to.\n     * @param {string} params.userKey Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/tokens/{clientId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['userKey', 'clientId'],\n        pathParams: ['clientId', 'userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.tokens.list\n     *\n     * @desc Returns the set of tokens specified user has issued to 3rd party applications.\n     *\n     * @alias directory.tokens.list\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.userKey Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/tokens',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.users = {\n\n    /**\n     * directory.users.delete\n     *\n     * @desc Delete user\n     *\n     * @alias directory.users.delete\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.userKey Email or immutable Id of the user\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.users.get\n     *\n     * @desc retrieve user\n     *\n     * @alias directory.users.get\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.customFieldMask Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.\n     * @param {string=} params.projection What subset of fields to fetch for this user.\n     * @param {string} params.userKey Email or immutable Id of the user\n     * @param {string=} params.viewType Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.users.insert\n     *\n     * @desc create user.\n     *\n     * @alias directory.users.insert\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {admin(directory_v1).User} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.users.list\n     *\n     * @desc Retrieve either deleted users or all users in a domain (paginated)\n     *\n     * @alias directory.users.list\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object=} params Parameters for request\n     * @param {string=} params.customFieldMask Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.\n     * @param {string=} params.customer Immutable id of the Google Apps account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.\n     * @param {string=} params.domain Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\n     * @param {string=} params.event Event on which subscription is intended (if subscribing)\n     * @param {integer=} params.maxResults Maximum number of results to return. Default is 100. Max allowed is 500\n     * @param {string=} params.orderBy Column to use for sorting results\n     * @param {string=} params.pageToken Token to specify next page in the list\n     * @param {string=} params.projection What subset of fields to fetch for this user.\n     * @param {string=} params.query Query string search. Should be of the form \"\". Complete documentation is at https://developers.google.com/admin-sdk/directory/v1/guides/search-users\n     * @param {string=} params.showDeleted If set to true retrieves the list of deleted users. Default is false\n     * @param {string=} params.sortOrder Whether to return results in ascending or descending order.\n     * @param {string=} params.viewType Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.users.makeAdmin\n     *\n     * @desc change admin status of a user\n     *\n     * @alias directory.users.makeAdmin\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.userKey Email or immutable Id of the user as admin\n     * @param {admin(directory_v1).UserMakeAdmin} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    makeAdmin: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/makeAdmin',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.users.patch\n     *\n     * @desc update user. This method supports patch semantics.\n     *\n     * @alias directory.users.patch\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.userKey Email or immutable Id of the user. If Id, it should match with id of user object\n     * @param {admin(directory_v1).User} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.users.undelete\n     *\n     * @desc Undelete a deleted user\n     *\n     * @alias directory.users.undelete\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.userKey The immutable id of the user\n     * @param {admin(directory_v1).UserUndelete} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    undelete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/undelete',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.users.update\n     *\n     * @desc update user\n     *\n     * @alias directory.users.update\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.userKey Email or immutable Id of the user. If Id, it should match with id of user object\n     * @param {admin(directory_v1).User} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.users.watch\n     *\n     * @desc Watch for changes in users list\n     *\n     * @alias directory.users.watch\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.customFieldMask Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.\n     * @param {string=} params.customer Immutable id of the Google Apps account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.\n     * @param {string=} params.domain Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\n     * @param {string=} params.event Event on which subscription is intended (if subscribing)\n     * @param {integer=} params.maxResults Maximum number of results to return. Default is 100. Max allowed is 500\n     * @param {string=} params.orderBy Column to use for sorting results\n     * @param {string=} params.pageToken Token to specify next page in the list\n     * @param {string=} params.projection What subset of fields to fetch for this user.\n     * @param {string=} params.query Query string search. Should be of the form \"\". Complete documentation is at https://developers.google.com/admin-sdk/directory/v1/guides/search-users\n     * @param {string=} params.showDeleted If set to true retrieves the list of deleted users. Default is false\n     * @param {string=} params.sortOrder Whether to return results in ascending or descending order.\n     * @param {string=} params.viewType Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.\n     * @param {admin(directory_v1).Channel} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    watch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users/watch',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    aliases: {\n\n      /**\n       * directory.users.aliases.delete\n       *\n       * @desc Remove a alias for the user\n       *\n       * @alias directory.users.aliases.delete\n       * @memberOf! admin(directory_v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.alias The alias to be removed\n       * @param {string} params.userKey Email or immutable Id of the user\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/aliases/{alias}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['userKey', 'alias'],\n          pathParams: ['alias', 'userKey'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * directory.users.aliases.insert\n       *\n       * @desc Add a alias for the user\n       *\n       * @alias directory.users.aliases.insert\n       * @memberOf! admin(directory_v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.userKey Email or immutable Id of the user\n       * @param {admin(directory_v1).Alias} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/aliases',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * directory.users.aliases.list\n       *\n       * @desc List all aliases for a user\n       *\n       * @alias directory.users.aliases.list\n       * @memberOf! admin(directory_v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.event Event on which subscription is intended (if subscribing)\n       * @param {string} params.userKey Email or immutable Id of the user\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/aliases',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * directory.users.aliases.watch\n       *\n       * @desc Watch for changes in user aliases list\n       *\n       * @alias directory.users.aliases.watch\n       * @memberOf! admin(directory_v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.event Event on which subscription is intended (if subscribing)\n       * @param {string} params.userKey Email or immutable Id of the user\n       * @param {admin(directory_v1).Channel} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      watch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/aliases/watch',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    photos: {\n\n      /**\n       * directory.users.photos.delete\n       *\n       * @desc Remove photos for the user\n       *\n       * @alias directory.users.photos.delete\n       * @memberOf! admin(directory_v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.userKey Email or immutable Id of the user\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/photos/thumbnail',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * directory.users.photos.get\n       *\n       * @desc Retrieve photo of a user\n       *\n       * @alias directory.users.photos.get\n       * @memberOf! admin(directory_v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.userKey Email or immutable Id of the user\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/photos/thumbnail',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * directory.users.photos.patch\n       *\n       * @desc Add a photo for the user. This method supports patch semantics.\n       *\n       * @alias directory.users.photos.patch\n       * @memberOf! admin(directory_v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.userKey Email or immutable Id of the user\n       * @param {admin(directory_v1).UserPhoto} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/photos/thumbnail',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * directory.users.photos.update\n       *\n       * @desc Add a photo for the user\n       *\n       * @alias directory.users.photos.update\n       * @memberOf! admin(directory_v1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.userKey Email or immutable Id of the user\n       * @param {admin(directory_v1).UserPhoto} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/photos/thumbnail',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n\n  self.verificationCodes = {\n\n    /**\n     * directory.verificationCodes.generate\n     *\n     * @desc Generate new backup verification codes for the user.\n     *\n     * @alias directory.verificationCodes.generate\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.userKey Email or immutable Id of the user\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    generate: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/verificationCodes/generate',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.verificationCodes.invalidate\n     *\n     * @desc Invalidate the current backup verification codes for the user.\n     *\n     * @alias directory.verificationCodes.invalidate\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.userKey Email or immutable Id of the user\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    invalidate: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/verificationCodes/invalidate',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * directory.verificationCodes.list\n     *\n     * @desc Returns the current set of valid backup verification codes for the specified user.\n     *\n     * @alias directory.verificationCodes.list\n     * @memberOf! admin(directory_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.userKey Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/directory/v1/users/{userKey}/verificationCodes',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef Alias\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} alias A alias email\n * @property {string} etag ETag of the resource.\n * @property {string} id Unique id of the group (Read-only) Unique id of the user (Read-only)\n * @property {string} kind Kind of resource this is.\n * @property {string} primaryEmail Group&#39;s primary email (Read-only) User&#39;s primary email (Read-only)\n */\n/**\n * @typedef Aliases\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {any[]} aliases List of alias objects.\n * @property {string} etag ETag of the resource.\n * @property {string} kind Kind of resource this is.\n */\n/**\n * @typedef Asp\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {integer} codeId The unique ID of the ASP.\n * @property {string} creationTime The time when the ASP was created. Expressed in Unix time format.\n * @property {string} etag ETag of the ASP.\n * @property {string} kind The type of the API resource. This is always admin#directory#asp.\n * @property {string} lastTimeUsed The time when the ASP was last used. Expressed in Unix time format.\n * @property {string} name The name of the application that the user, represented by their userId, entered when the ASP was created.\n * @property {string} userKey The unique ID of the user who issued the ASP.\n */\n/**\n * @typedef Asps\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {admin(directory_v1).Asp[]} items A list of ASP resources.\n * @property {string} kind The type of the API resource. This is always admin#directory#aspList.\n */\n/**\n * @typedef CalendarResource\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etags ETag of the resource.\n * @property {string} kind The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.\n * @property {string} resourceDescription The brief description of the calendar resource.\n * @property {string} resourceEmail The read-only email ID for the calendar resource. Generated as part of creating a new calendar resource.\n * @property {string} resourceId The unique ID for the calendar resource.\n * @property {string} resourceName The name of the calendar resource. For example, Training Room 1A\n * @property {string} resourceType The type of the calendar resource. Used for grouping resources in the calendar user interface.\n */\n/**\n * @typedef CalendarResources\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {admin(directory_v1).CalendarResource[]} items The CalendarResources in this page of results.\n * @property {string} kind Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList.\n * @property {string} nextPageToken The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.\n */\n/**\n * @typedef Channel\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} address The address where notifications are delivered for this channel.\n * @property {string} expiration Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.\n * @property {string} id A UUID or similar unique string that identifies this channel.\n * @property {string} kind Identifies this as a notification channel used to watch for changes to a resource. Value: the fixed string &quot;api#channel&quot;.\n * @property {object} params Additional parameters controlling delivery channel behavior. Optional.\n * @property {boolean} payload A Boolean value to indicate whether payload is wanted. Optional.\n * @property {string} resourceId An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.\n * @property {string} resourceUri A version-specific identifier for the watched resource.\n * @property {string} token An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.\n * @property {string} type The type of delivery mechanism used for this channel.\n */\n/**\n * @typedef ChromeOsDevice\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {object[]} activeTimeRanges List of active time ranges (Read-only)\n * @property {string} annotatedAssetId AssetId specified during enrollment or through later annotation\n * @property {string} annotatedLocation Address or location of the device as noted by the administrator\n * @property {string} annotatedUser User of the device\n * @property {string} bootMode Chromebook boot mode (Read-only)\n * @property {string} deviceId Unique identifier of Chrome OS Device (Read-only)\n * @property {string} etag ETag of the resource.\n * @property {string} ethernetMacAddress Chromebook Mac Address on ethernet network interface (Read-only)\n * @property {string} firmwareVersion Chromebook firmware version (Read-only)\n * @property {string} kind Kind of resource this is.\n * @property {string} lastEnrollmentTime Date and time the device was last enrolled (Read-only)\n * @property {string} lastSync Date and time the device was last synchronized with the policy settings in the Google Apps administrator control panel (Read-only)\n * @property {string} macAddress Chromebook Mac Address on wifi network interface (Read-only)\n * @property {string} meid Mobile Equipment identifier for the 3G mobile card in the Chromebook (Read-only)\n * @property {string} model Chromebook Model (Read-only)\n * @property {string} notes Notes added by the administrator\n * @property {string} orderNumber Chromebook order number (Read-only)\n * @property {string} orgUnitPath OrgUnit of the device\n * @property {string} osVersion Chromebook Os Version (Read-only)\n * @property {string} platformVersion Chromebook platform version (Read-only)\n * @property {object[]} recentUsers List of recent device users, in descending order by last login time (Read-only)\n * @property {string} serialNumber Chromebook serial number (Read-only)\n * @property {string} status status of the device (Read-only)\n * @property {string} supportEndDate Final date the device will be supported (Read-only)\n * @property {boolean} willAutoRenew Will Chromebook auto renew after support end date (Read-only)\n */\n/**\n * @typedef ChromeOsDeviceAction\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} action Action to be taken on the ChromeOs Device\n * @property {string} deprovisionReason \n */\n/**\n * @typedef ChromeOsDevices\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {admin(directory_v1).ChromeOsDevice[]} chromeosdevices List of Chrome OS Device objects.\n * @property {string} etag ETag of the resource.\n * @property {string} kind Kind of resource this is.\n * @property {string} nextPageToken Token used to access next page of this result.\n */\n/**\n * @typedef Customer\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} alternateEmail The customer&#39;s secondary contact email address. This email address cannot be on the same domain as the customerDomain\n * @property {string} customerCreationTime The customer&#39;s creation time (Readonly)\n * @property {string} customerDomain The customer&#39;s primary domain name string. Do not include the www prefix when creating a new customer.\n * @property {string} etag ETag of the resource.\n * @property {string} id The unique ID for the customer&#39;s Google account. (Readonly)\n * @property {string} kind Identifies the resource as a customer. Value: admin#directory#customer\n * @property {string} language The customer&#39;s ISO 639-2 language code. The default value is en-US\n * @property {string} phoneNumber The customer&#39;s contact phone number in E.164 format.\n * @property {admin(directory_v1).CustomerPostalAddress} postalAddress The customer&#39;s postal address information.\n */\n/**\n * @typedef CustomerPostalAddress\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} addressLine1 A customer&#39;s physical address. The address can be composed of one to three lines.\n * @property {string} addressLine2 Address line 2 of the address.\n * @property {string} addressLine3 Address line 3 of the address.\n * @property {string} contactName The customer contact&#39;s name.\n * @property {string} countryCode This is a required property. For countryCode information see the ISO 3166 country code elements.\n * @property {string} locality Name of the locality. An example of a locality value is the city of San Francisco.\n * @property {string} organizationName The company or company division name.\n * @property {string} postalCode The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http://portablecontacts.net/draft-spec.html#address_element.\n * @property {string} region Name of the region. An example of a region value is NY for the state of New York.\n */\n/**\n * @typedef DomainAlias\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} creationTime The creation time of the domain alias. (Read-only).\n * @property {string} domainAliasName The domain alias name.\n * @property {string} etag ETag of the resource.\n * @property {string} kind Kind of resource this is.\n * @property {string} parentDomainName The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.\n * @property {boolean} verified Indicates the verification state of a domain alias. (Read-only)\n */\n/**\n * @typedef DomainAliases\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {admin(directory_v1).DomainAlias[]} domainAliases List of domain alias objects.\n * @property {string} etag ETag of the resource.\n * @property {string} kind Kind of resource this is.\n */\n/**\n * @typedef Domains\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} creationTime Creation time of the domain. (Read-only).\n * @property {admin(directory_v1).DomainAlias[]} domainAliases List of domain alias objects. (Read-only)\n * @property {string} domainName The domain name of the customer.\n * @property {string} etag ETag of the resource.\n * @property {boolean} isPrimary Indicates if the domain is a primary domain (Read-only).\n * @property {string} kind Kind of resource this is.\n * @property {boolean} verified Indicates the verification state of a domain. (Read-only).\n */\n/**\n * @typedef Domains2\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {admin(directory_v1).Domains[]} domains List of domain objects.\n * @property {string} etag ETag of the resource.\n * @property {string} kind Kind of resource this is.\n */\n/**\n * @typedef Group\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {boolean} adminCreated Is the group created by admin (Read-only) *\n * @property {string[]} aliases List of aliases (Read-only)\n * @property {string} description Description of the group\n * @property {string} directMembersCount Group direct members count\n * @property {string} email Email of Group\n * @property {string} etag ETag of the resource.\n * @property {string} id Unique identifier of Group (Read-only)\n * @property {string} kind Kind of resource this is.\n * @property {string} name Group name\n * @property {string[]} nonEditableAliases List of non editable aliases (Read-only)\n */\n/**\n * @typedef Groups\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {admin(directory_v1).Group[]} groups List of group objects.\n * @property {string} kind Kind of resource this is.\n * @property {string} nextPageToken Token used to access next page of this result.\n */\n/**\n * @typedef Member\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} email Email of member (Read-only)\n * @property {string} etag ETag of the resource.\n * @property {string} id Unique identifier of customer member (Read-only) Unique identifier of group (Read-only) Unique identifier of member (Read-only)\n * @property {string} kind Kind of resource this is.\n * @property {string} role Role of member\n * @property {string} status Status of member (Immutable)\n * @property {string} type Type of member (Immutable)\n */\n/**\n * @typedef Members\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {string} kind Kind of resource this is.\n * @property {admin(directory_v1).Member[]} members List of member objects.\n * @property {string} nextPageToken Token used to access next page of this result.\n */\n/**\n * @typedef MobileDevice\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {boolean} adbStatus Adb (USB debugging) enabled or disabled on device (Read-only)\n * @property {object[]} applications List of applications installed on Mobile Device\n * @property {string} basebandVersion Mobile Device Baseband version (Read-only)\n * @property {string} bootloaderVersion Mobile Device Bootloader version (Read-only)\n * @property {string} brand Mobile Device Brand (Read-only)\n * @property {string} buildNumber Mobile Device Build number (Read-only)\n * @property {string} defaultLanguage The default locale used on the Mobile Device (Read-only)\n * @property {boolean} developerOptionsStatus Developer options enabled or disabled on device (Read-only)\n * @property {string} deviceCompromisedStatus Mobile Device compromised status (Read-only)\n * @property {string} deviceId Mobile Device serial number (Read-only)\n * @property {string} devicePasswordStatus DevicePasswordStatus (Read-only)\n * @property {string[]} email List of owner user&#39;s email addresses (Read-only)\n * @property {string} encryptionStatus Mobile Device Encryption Status (Read-only)\n * @property {string} etag ETag of the resource.\n * @property {string} firstSync Date and time the device was first synchronized with the policy settings in the Google Apps administrator control panel (Read-only)\n * @property {string} hardware Mobile Device Hardware (Read-only)\n * @property {string} hardwareId Mobile Device Hardware Id (Read-only)\n * @property {string} imei Mobile Device IMEI number (Read-only)\n * @property {string} kernelVersion Mobile Device Kernel version (Read-only)\n * @property {string} kind Kind of resource this is.\n * @property {string} lastSync Date and time the device was last synchronized with the policy settings in the Google Apps administrator control panel (Read-only)\n * @property {boolean} managedAccountIsOnOwnerProfile Boolean indicating if this account is on owner/primary profile or not (Read-only)\n * @property {string} manufacturer Mobile Device manufacturer (Read-only)\n * @property {string} meid Mobile Device MEID number (Read-only)\n * @property {string} model Name of the model of the device\n * @property {string[]} name List of owner user&#39;s names (Read-only)\n * @property {string} networkOperator Mobile Device mobile or network operator (if available) (Read-only)\n * @property {string} os Name of the mobile operating system\n * @property {string[]} otherAccountsInfo List of accounts added on device (Read-only)\n * @property {string} privilege DMAgentPermission (Read-only)\n * @property {string} releaseVersion Mobile Device release version version (Read-only)\n * @property {string} resourceId Unique identifier of Mobile Device (Read-only)\n * @property {string} securityPatchLevel Mobile Device Security patch level (Read-only)\n * @property {string} serialNumber Mobile Device SSN or Serial Number (Read-only)\n * @property {string} status Status of the device (Read-only)\n * @property {boolean} supportsWorkProfile Work profile supported on device (Read-only)\n * @property {string} type The type of device (Read-only)\n * @property {boolean} unknownSourcesStatus Unknown sources enabled or disabled on device (Read-only)\n * @property {string} userAgent Mobile Device user agent\n * @property {string} wifiMacAddress Mobile Device WiFi MAC address (Read-only)\n */\n/**\n * @typedef MobileDeviceAction\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} action Action to be taken on the Mobile Device\n */\n/**\n * @typedef MobileDevices\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {string} kind Kind of resource this is.\n * @property {admin(directory_v1).MobileDevice[]} mobiledevices List of Mobile Device objects.\n * @property {string} nextPageToken Token used to access next page of this result.\n */\n/**\n * @typedef Notification\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} body Body of the notification (Read-only)\n * @property {string} etag ETag of the resource.\n * @property {string} fromAddress Address from which the notification is received (Read-only)\n * @property {boolean} isUnread Boolean indicating whether the notification is unread or not.\n * @property {string} kind The type of the resource.\n * @property {string} notificationId \n * @property {string} sendTime Time at which notification was sent (Read-only)\n * @property {string} subject Subject of the notification (Read-only)\n */\n/**\n * @typedef Notifications\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {admin(directory_v1).Notification[]} items List of notifications in this page.\n * @property {string} kind The type of the resource.\n * @property {string} nextPageToken Token for fetching the next page of notifications.\n * @property {integer} unreadNotificationsCount Number of unread notification for the domain.\n */\n/**\n * @typedef OrgUnit\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {boolean} blockInheritance Should block inheritance\n * @property {string} description Description of OrgUnit\n * @property {string} etag ETag of the resource.\n * @property {string} kind Kind of resource this is.\n * @property {string} name Name of OrgUnit\n * @property {string} orgUnitId Id of OrgUnit\n * @property {string} orgUnitPath Path of OrgUnit\n * @property {string} parentOrgUnitId Id of parent OrgUnit\n * @property {string} parentOrgUnitPath Path of parent OrgUnit\n */\n/**\n * @typedef OrgUnits\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {string} kind Kind of resource this is.\n * @property {admin(directory_v1).OrgUnit[]} organizationUnits List of user objects.\n */\n/**\n * @typedef Privilege\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {admin(directory_v1).Privilege[]} childPrivileges A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.\n * @property {string} etag ETag of the resource.\n * @property {boolean} isOuScopable If the privilege can be restricted to an organization unit.\n * @property {string} kind The type of the API resource. This is always admin#directory#privilege.\n * @property {string} privilegeName The name of the privilege.\n * @property {string} serviceId The obfuscated ID of the service this privilege is for.\n * @property {string} serviceName The name of the service this privilege is for.\n */\n/**\n * @typedef Privileges\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {admin(directory_v1).Privilege[]} items A list of Privilege resources.\n * @property {string} kind The type of the API resource. This is always admin#directory#privileges.\n */\n/**\n * @typedef Role\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {boolean} isSuperAdminRole Returns true if the role is a super admin role.\n * @property {boolean} isSystemRole Returns true if this is a pre-defined system role.\n * @property {string} kind The type of the API resource. This is always admin#directory#role.\n * @property {string} roleDescription A short description of the role.\n * @property {string} roleId ID of the role.\n * @property {string} roleName Name of the role.\n * @property {object[]} rolePrivileges The set of privileges that are granted to this role.\n */\n/**\n * @typedef RoleAssignment\n * @memberOf! admin(directory_v1)\n * @type object\n* @property {string} assignedTo The unique ID of the user this role is assigned to.\n* @property {string} etag ETag of the resource.\n* @property {string} kind The type of the API resource. This is always admin#directory#roleAssignment.\n* @property {string} orgUnitId If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.\n* @property {string} roleAssignmentId ID of this roleAssignment.\n* @property {string} roleId The ID of the role that is assigned.\n* @property {string} scopeType The scope in which this role is assigned. Possible values are: \n- CUSTOMER\n- ORG_UNIT\n*/\n/**\n * @typedef RoleAssignments\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {admin(directory_v1).RoleAssignment[]} items A list of RoleAssignment resources.\n * @property {string} kind The type of the API resource. This is always admin#directory#roleAssignments.\n * @property {string} nextPageToken \n */\n/**\n * @typedef Roles\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {admin(directory_v1).Role[]} items A list of Role resources.\n * @property {string} kind The type of the API resource. This is always admin#directory#roles.\n * @property {string} nextPageToken \n */\n/**\n * @typedef Schema\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {admin(directory_v1).SchemaFieldSpec[]} fields Fields of Schema\n * @property {string} kind Kind of resource this is.\n * @property {string} schemaId Unique identifier of Schema (Read-only)\n * @property {string} schemaName Schema name\n */\n/**\n * @typedef SchemaFieldSpec\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {string} fieldId Unique identifier of Field (Read-only)\n * @property {string} fieldName Name of the field.\n * @property {string} fieldType Type of the field.\n * @property {boolean} indexed Boolean specifying whether the field is indexed or not.\n * @property {string} kind Kind of resource this is.\n * @property {boolean} multiValued Boolean specifying whether this is a multi-valued field or not.\n * @property {object} numericIndexingSpec Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.\n * @property {string} readAccessType Read ACLs on the field specifying who can view values of this field. Valid values are &quot;ALL_DOMAIN_USERS&quot; and &quot;ADMINS_AND_SELF&quot;.\n */\n/**\n * @typedef Schemas\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {string} kind Kind of resource this is.\n * @property {admin(directory_v1).Schema[]} schemas List of UserSchema objects.\n */\n/**\n * @typedef Token\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {boolean} anonymous Whether the application is registered with Google. The value is true if the application has an anonymous Client ID.\n * @property {string} clientId The Client ID of the application the token is issued to.\n * @property {string} displayText The displayable name of the application the token is issued to.\n * @property {string} etag ETag of the resource.\n * @property {string} kind The type of the API resource. This is always admin#directory#token.\n * @property {boolean} nativeApp Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device.\n * @property {string[]} scopes A list of authorization scopes the application is granted.\n * @property {string} userKey The unique ID of the user that issued the token.\n */\n/**\n * @typedef Tokens\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {admin(directory_v1).Token[]} items A list of Token resources.\n * @property {string} kind The type of the API resource. This is always admin#directory#tokenList.\n */\n/**\n * @typedef User\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {any} addresses \n * @property {boolean} agreedToTerms Indicates if user has agreed to terms (Read-only)\n * @property {string[]} aliases List of aliases (Read-only)\n * @property {boolean} changePasswordAtNextLogin Boolean indicating if the user should change password in next login\n * @property {string} creationTime User&#39;s Google account creation time. (Read-only)\n * @property {object} customSchemas Custom fields of the user.\n * @property {string} customerId CustomerId of User (Read-only)\n * @property {string} deletionTime \n * @property {any} emails \n * @property {string} etag ETag of the resource.\n * @property {any} externalIds \n * @property {string} hashFunction Hash function name for password. Supported are MD5, SHA-1 and crypt\n * @property {string} id Unique identifier of User (Read-only)\n * @property {any} ims \n * @property {boolean} includeInGlobalAddressList Boolean indicating if user is included in Global Address List\n * @property {boolean} ipWhitelisted Boolean indicating if ip is whitelisted\n * @property {boolean} isAdmin Boolean indicating if the user is admin (Read-only)\n * @property {boolean} isDelegatedAdmin Boolean indicating if the user is delegated admin (Read-only)\n * @property {boolean} isEnforcedIn2Sv Is 2-step verification enforced (Read-only)\n * @property {boolean} isEnrolledIn2Sv Is enrolled in 2-step verification (Read-only)\n * @property {boolean} isMailboxSetup Is mailbox setup (Read-only)\n * @property {string} kind Kind of resource this is.\n * @property {string} lastLoginTime User&#39;s last login time. (Read-only)\n * @property {admin(directory_v1).UserName} name User&#39;s name\n * @property {string[]} nonEditableAliases List of non editable aliases (Read-only)\n * @property {any} notes \n * @property {string} orgUnitPath OrgUnit of User\n * @property {any} organizations \n * @property {string} password User&#39;s password\n * @property {any} phones \n * @property {any} posixAccounts \n * @property {string} primaryEmail username of User\n * @property {any} relations \n * @property {any} sshPublicKeys \n * @property {boolean} suspended Indicates if user is suspended\n * @property {string} suspensionReason Suspension reason if user is suspended (Read-only)\n * @property {string} thumbnailPhotoEtag ETag of the user&#39;s photo (Read-only)\n * @property {string} thumbnailPhotoUrl Photo Url of the user (Read-only)\n * @property {any} websites \n */\n/**\n * @typedef UserAbout\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} contentType About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.\n * @property {string} value Actual value of notes.\n */\n/**\n * @typedef UserAddress\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} country Country.\n * @property {string} countryCode Country code.\n * @property {string} customType Custom type.\n * @property {string} extendedAddress Extended Address.\n * @property {string} formatted Formatted address.\n * @property {string} locality Locality.\n * @property {string} poBox Other parts of address.\n * @property {string} postalCode Postal code.\n * @property {boolean} primary If this is user&#39;s primary address. Only one entry could be marked as primary.\n * @property {string} region Region.\n * @property {boolean} sourceIsStructured User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses, but any values will eventually be clobbered.\n * @property {string} streetAddress Street.\n * @property {string} type Each entry can have a type which indicates standard values of that entry. For example address could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.\n */\n/**\n * @typedef UserCustomProperties\n * @memberOf! admin(directory_v1)\n * @type object\n */\n/**\n * @typedef UserEmail\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} address Email id of the user.\n * @property {string} customType Custom Type.\n * @property {boolean} primary If this is user&#39;s primary email. Only one entry could be marked as primary.\n * @property {string} type Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.\n */\n/**\n * @typedef UserExternalId\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} customType Custom type.\n * @property {string} type The type of the Id.\n * @property {string} value The value of the id.\n */\n/**\n * @typedef UserIm\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} customProtocol Custom protocol.\n * @property {string} customType Custom type.\n * @property {string} im Instant messenger id.\n * @property {boolean} primary If this is user&#39;s primary im. Only one entry could be marked as primary.\n * @property {string} protocol Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type, it can take a CUSTOM value and specify the custom name in customProtocol field.\n * @property {string} type Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.\n */\n/**\n * @typedef UserMakeAdmin\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {boolean} status Boolean indicating new admin status of the user\n */\n/**\n * @typedef UserName\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} familyName Last Name\n * @property {string} fullName Full Name\n * @property {string} givenName First Name\n */\n/**\n * @typedef UserOrganization\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} costCenter The cost center of the users department.\n * @property {string} customType Custom type.\n * @property {string} department Department within the organization.\n * @property {string} description Description of the organization.\n * @property {string} domain The domain to which the organization belongs to.\n * @property {string} location Location of the organization. This need not be fully qualified address.\n * @property {string} name Name of the organization\n * @property {boolean} primary If it user&#39;s primary organization.\n * @property {string} symbol Symbol of the organization.\n * @property {string} title Title (designation) of the user in the organization.\n * @property {string} type Each entry can have a type which indicates standard types of that entry. For example organization could be of school, work etc. In addition to the standard type, an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.\n */\n/**\n * @typedef UserPhone\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} customType Custom Type.\n * @property {boolean} primary If this is user&#39;s primary phone or not.\n * @property {string} type Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax, work, mobile etc. In addition to the standard type, an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.\n * @property {string} value Phone number.\n */\n/**\n * @typedef UserPhoto\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {integer} height Height in pixels of the photo\n * @property {string} id Unique identifier of User (Read-only)\n * @property {string} kind Kind of resource this is.\n * @property {string} mimeType Mime Type of the photo\n * @property {string} photoData Base64 encoded photo data\n * @property {string} primaryEmail Primary email of User (Read-only)\n * @property {integer} width Width in pixels of the photo\n */\n/**\n * @typedef UserPosixAccount\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} gecos The GECOS (user information) entry for this account.\n * @property {integer} gid The default group ID.\n * @property {string} homeDirectory The path to the home directory for this account.\n * @property {boolean} primary If this is user&#39;s primary account within the SystemId.\n * @property {string} shell The path to the login shell for this account.\n * @property {string} systemId System identifier for which account Username or Uid apply to.\n * @property {integer} uid The user ID.\n * @property {string} username The username of the account.\n */\n/**\n * @typedef UserRelation\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} customType Custom Type.\n * @property {string} type The relation of the user. Some of the possible values are mother, father, sister, brother, manager, assistant, partner.\n * @property {string} value The name of the relation.\n */\n/**\n * @typedef UserSshPublicKey\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} expirationTimeUsec An expiration time in microseconds since epoch.\n * @property {string} fingerprint A SHA-256 fingerprint of the SSH public key. (Read-only)\n * @property {string} key An SSH public key.\n */\n/**\n * @typedef UserUndelete\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} orgUnitPath OrgUnit of User\n */\n/**\n * @typedef UserWebsite\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} customType Custom Type.\n * @property {boolean} primary If this is user&#39;s primary website or not.\n * @property {string} type Each entry can have a type which indicates standard types of that entry. For example website could be of home, work, blog etc. In addition to the standard type, an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.\n * @property {string} value Website.\n */\n/**\n * @typedef Users\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {string} kind Kind of resource this is.\n * @property {string} nextPageToken Token used to access next page of this result.\n * @property {string} trigger_event Event that triggered this response (only used in case of Push Response)\n * @property {admin(directory_v1).User[]} users List of user objects.\n */\n/**\n * @typedef VerificationCode\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {string} kind The type of the resource. This is always admin#directory#verificationCode.\n * @property {string} userId The obfuscated unique ID of the user.\n * @property {string} verificationCode A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.\n */\n/**\n * @typedef VerificationCodes\n * @memberOf! admin(directory_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {admin(directory_v1).VerificationCode[]} items A list of verification code resources.\n * @property {string} kind The type of the resource. This is always admin#directory#verificationCodesList.\n */\nmodule.exports = Admin;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/admin/reports_v1.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Admin Reports API\n *\n * Fetches reports for the administrators of G Suite customers about the usage, collaboration, security, and risk for their users.\n *\n * @example\n * var google = require('googleapis');\n * var admin = google.admin('reports_v1');\n *\n * @namespace admin\n * @type {Function}\n * @version reports_v1\n * @variation reports_v1\n * @param {object=} options Options for Admin\n */\nfunction Admin(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.activities = {\n\n    /**\n     * reports.activities.list\n     *\n     * @desc Retrieves a list of activities for a specific customer and application.\n     *\n     * @alias reports.activities.list\n     * @memberOf! admin(reports_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.actorIpAddress IP Address of host where the event was performed. Supports both IPv4 and IPv6 addresses.\n     * @param {string} params.applicationName Application name for which the events are to be retrieved.\n     * @param {string=} params.customerId Represents the customer for which the data is to be fetched.\n     * @param {string=} params.endTime Return events which occurred at or before this time.\n     * @param {string=} params.eventName Name of the event being queried.\n     * @param {string=} params.filters Event parameters in the form [parameter1 name][operator][parameter1 value],[parameter2 name][operator][parameter2 value],...\n     * @param {integer=} params.maxResults Number of activity records to be shown in each page.\n     * @param {string=} params.pageToken Token to specify next page.\n     * @param {string=} params.startTime Return events which occurred at or after this time.\n     * @param {string} params.userKey Represents the profile id or the user email for which the data should be filtered. When 'all' is specified as the userKey, it returns usageReports for all users.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/reports/v1/activity/users/{userKey}/applications/{applicationName}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['userKey', 'applicationName'],\n        pathParams: ['applicationName', 'userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * reports.activities.watch\n     *\n     * @desc Push changes to activities\n     *\n     * @alias reports.activities.watch\n     * @memberOf! admin(reports_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.actorIpAddress IP Address of host where the event was performed. Supports both IPv4 and IPv6 addresses.\n     * @param {string} params.applicationName Application name for which the events are to be retrieved.\n     * @param {string=} params.customerId Represents the customer for which the data is to be fetched.\n     * @param {string=} params.endTime Return events which occurred at or before this time.\n     * @param {string=} params.eventName Name of the event being queried.\n     * @param {string=} params.filters Event parameters in the form [parameter1 name][operator][parameter1 value],[parameter2 name][operator][parameter2 value],...\n     * @param {integer=} params.maxResults Number of activity records to be shown in each page.\n     * @param {string=} params.pageToken Token to specify next page.\n     * @param {string=} params.startTime Return events which occurred at or after this time.\n     * @param {string} params.userKey Represents the profile id or the user email for which the data should be filtered. When 'all' is specified as the userKey, it returns usageReports for all users.\n     * @param {admin(reports_v1).Channel} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    watch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/reports/v1/activity/users/{userKey}/applications/{applicationName}/watch',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['userKey', 'applicationName'],\n        pathParams: ['applicationName', 'userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.channels = {\n\n    /**\n     * admin.channels.stop\n     *\n     * @desc Stop watching resources through this channel\n     *\n     * @alias admin.channels.stop\n     * @memberOf! admin(reports_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {admin(reports_v1).Channel} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    stop: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/reports/v1/admin/reports_v1/channels/stop',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.customerUsageReports = {\n\n    /**\n     * reports.customerUsageReports.get\n     *\n     * @desc Retrieves a report which is a collection of properties / statistics for a specific customer.\n     *\n     * @alias reports.customerUsageReports.get\n     * @memberOf! admin(reports_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.customerId Represents the customer for which the data is to be fetched.\n     * @param {string} params.date Represents the date in yyyy-mm-dd format for which the data is to be fetched.\n     * @param {string=} params.pageToken Token to specify next page.\n     * @param {string=} params.parameters Represents the application name, parameter name pairs to fetch in csv as app_name1:param_name1, app_name2:param_name2.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/reports/v1/usage/dates/{date}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['date'],\n        pathParams: ['date'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.userUsageReport = {\n\n    /**\n     * reports.userUsageReport.get\n     *\n     * @desc Retrieves a report which is a collection of properties / statistics for a set of users.\n     *\n     * @alias reports.userUsageReport.get\n     * @memberOf! admin(reports_v1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.customerId Represents the customer for which the data is to be fetched.\n     * @param {string} params.date Represents the date in yyyy-mm-dd format for which the data is to be fetched.\n     * @param {string=} params.filters Represents the set of filters including parameter operator value.\n     * @param {integer=} params.maxResults Maximum number of results to return. Maximum allowed is 1000\n     * @param {string=} params.pageToken Token to specify next page.\n     * @param {string=} params.parameters Represents the application name, parameter name pairs to fetch in csv as app_name1:param_name1, app_name2:param_name2.\n     * @param {string} params.userKey Represents the profile id or the user email for which the data should be filtered.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/admin/reports/v1/usage/users/{userKey}/dates/{date}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['userKey', 'date'],\n        pathParams: ['date', 'userKey'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef Activities\n * @memberOf! admin(reports_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {admin(reports_v1).Activity[]} items Each record in read response.\n * @property {string} kind Kind of list response this is.\n * @property {string} nextPageToken Token for retrieving the next page\n */\n/**\n * @typedef Activity\n * @memberOf! admin(reports_v1)\n * @type object\n * @property {object} actor User doing the action.\n * @property {string} etag ETag of the entry.\n * @property {object[]} events Activity events.\n * @property {object} id Unique identifier for each activity record.\n * @property {string} ipAddress IP Address of the user doing the action.\n * @property {string} kind Kind of resource this is.\n * @property {string} ownerDomain Domain of source customer.\n */\n/**\n * @typedef Channel\n * @memberOf! admin(reports_v1)\n * @type object\n * @property {string} address The address where notifications are delivered for this channel.\n * @property {string} expiration Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.\n * @property {string} id A UUID or similar unique string that identifies this channel.\n * @property {string} kind Identifies this as a notification channel used to watch for changes to a resource. Value: the fixed string &quot;api#channel&quot;.\n * @property {object} params Additional parameters controlling delivery channel behavior. Optional.\n * @property {boolean} payload A Boolean value to indicate whether payload is wanted. Optional.\n * @property {string} resourceId An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.\n * @property {string} resourceUri A version-specific identifier for the watched resource.\n * @property {string} token An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.\n * @property {string} type The type of delivery mechanism used for this channel.\n */\n/**\n * @typedef UsageReport\n * @memberOf! admin(reports_v1)\n * @type object\n * @property {string} date The date to which the record belongs.\n * @property {object} entity Information about the type of the item.\n * @property {string} etag ETag of the resource.\n * @property {string} kind The kind of object.\n * @property {object[]} parameters Parameter value pairs for various applications.\n */\n/**\n * @typedef UsageReports\n * @memberOf! admin(reports_v1)\n * @type object\n * @property {string} etag ETag of the resource.\n * @property {string} kind The kind of object.\n * @property {string} nextPageToken Token for retrieving the next page\n * @property {admin(reports_v1).UsageReport[]} usageReports Various application parameter records.\n * @property {object[]} warnings Warnings if any.\n */\nmodule.exports = Admin;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/adsensehost/v4.1.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * AdSense Host API\n *\n * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.\n *\n * @example\n * var google = require('googleapis');\n * var adsensehost = google.adsensehost('v4.1');\n *\n * @namespace adsensehost\n * @type {Function}\n * @version v4.1\n * @variation v4.1\n * @param {object=} options Options for Adsensehost\n */\nfunction Adsensehost(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.accounts = {\n\n    /**\n     * adsensehost.accounts.get\n     *\n     * @desc Get information about the selected associated AdSense account.\n     *\n     * @alias adsensehost.accounts.get\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.accountId Account to get information about.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adsensehost/v4.1/accounts/{accountId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adsensehost.accounts.list\n     *\n     * @desc List hosted accounts associated with this AdSense account by ad client id.\n     *\n     * @alias adsensehost.accounts.list\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.filterAdClientId Ad clients to list accounts for.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adsensehost/v4.1/accounts',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['filterAdClientId'],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    adclients: {\n\n      /**\n       * adsensehost.accounts.adclients.get\n       *\n       * @desc Get information about one of the ad clients in the specified publisher's AdSense account.\n       *\n       * @alias adsensehost.accounts.adclients.get\n       * @memberOf! adsensehost(v4.1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account which contains the ad client.\n       * @param {string} params.adClientId Ad client to get.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId'],\n          pathParams: ['accountId', 'adClientId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adsensehost.accounts.adclients.list\n       *\n       * @desc List all hosted ad clients in the specified hosted account.\n       *\n       * @alias adsensehost.accounts.adclients.list\n       * @memberOf! adsensehost(v4.1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account for which to list ad clients.\n       * @param {integer=} params.maxResults The maximum number of ad clients to include in the response, used for paging.\n       * @param {string=} params.pageToken A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adsensehost/v4.1/accounts/{accountId}/adclients',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    adunits: {\n\n      /**\n       * adsensehost.accounts.adunits.delete\n       *\n       * @desc Delete the specified ad unit from the specified publisher AdSense account.\n       *\n       * @alias adsensehost.accounts.adunits.delete\n       * @memberOf! adsensehost(v4.1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account which contains the ad unit.\n       * @param {string} params.adClientId Ad client for which to get ad unit.\n       * @param {string} params.adUnitId Ad unit to delete.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId', 'adUnitId'],\n          pathParams: ['accountId', 'adClientId', 'adUnitId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adsensehost.accounts.adunits.get\n       *\n       * @desc Get the specified host ad unit in this AdSense account.\n       *\n       * @alias adsensehost.accounts.adunits.get\n       * @memberOf! adsensehost(v4.1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account which contains the ad unit.\n       * @param {string} params.adClientId Ad client for which to get ad unit.\n       * @param {string} params.adUnitId Ad unit to get.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId', 'adUnitId'],\n          pathParams: ['accountId', 'adClientId', 'adUnitId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adsensehost.accounts.adunits.getAdCode\n       *\n       * @desc Get ad code for the specified ad unit, attaching the specified host custom channels.\n       *\n       * @alias adsensehost.accounts.adunits.getAdCode\n       * @memberOf! adsensehost(v4.1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account which contains the ad client.\n       * @param {string} params.adClientId Ad client with contains the ad unit.\n       * @param {string} params.adUnitId Ad unit to get the code for.\n       * @param {string=} params.hostCustomChannelId Host custom channel to attach to the ad code.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      getAdCode: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId', 'adUnitId'],\n          pathParams: ['accountId', 'adClientId', 'adUnitId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adsensehost.accounts.adunits.insert\n       *\n       * @desc Insert the supplied ad unit into the specified publisher AdSense account.\n       *\n       * @alias adsensehost.accounts.adunits.insert\n       * @memberOf! adsensehost(v4.1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account which will contain the ad unit.\n       * @param {string} params.adClientId Ad client into which to insert the ad unit.\n       * @param {adsensehost(v4.1).AdUnit} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId'],\n          pathParams: ['accountId', 'adClientId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adsensehost.accounts.adunits.list\n       *\n       * @desc List all ad units in the specified publisher's AdSense account.\n       *\n       * @alias adsensehost.accounts.adunits.list\n       * @memberOf! adsensehost(v4.1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account which contains the ad client.\n       * @param {string} params.adClientId Ad client for which to list ad units.\n       * @param {boolean=} params.includeInactive Whether to include inactive ad units. Default: true.\n       * @param {integer=} params.maxResults The maximum number of ad units to include in the response, used for paging.\n       * @param {string=} params.pageToken A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId'],\n          pathParams: ['accountId', 'adClientId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adsensehost.accounts.adunits.patch\n       *\n       * @desc Update the supplied ad unit in the specified publisher AdSense account. This method supports patch semantics.\n       *\n       * @alias adsensehost.accounts.adunits.patch\n       * @memberOf! adsensehost(v4.1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account which contains the ad client.\n       * @param {string} params.adClientId Ad client which contains the ad unit.\n       * @param {string} params.adUnitId Ad unit to get.\n       * @param {adsensehost(v4.1).AdUnit} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId', 'adUnitId'],\n          pathParams: ['accountId', 'adClientId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * adsensehost.accounts.adunits.update\n       *\n       * @desc Update the supplied ad unit in the specified publisher AdSense account.\n       *\n       * @alias adsensehost.accounts.adunits.update\n       * @memberOf! adsensehost(v4.1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account which contains the ad client.\n       * @param {string} params.adClientId Ad client which contains the ad unit.\n       * @param {adsensehost(v4.1).AdUnit} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adsensehost/v4.1/accounts/{accountId}/adclients/{adClientId}/adunits',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'adClientId'],\n          pathParams: ['accountId', 'adClientId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    reports: {\n\n      /**\n       * adsensehost.accounts.reports.generate\n       *\n       * @desc Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \"alt=csv\" as a query parameter.\n       *\n       * @alias adsensehost.accounts.reports.generate\n       * @memberOf! adsensehost(v4.1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Hosted account upon which to report.\n       * @param {string=} params.dimension Dimensions to base the report on.\n       * @param {string} params.endDate End of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n       * @param {string=} params.filter Filters to be run on the report.\n       * @param {string=} params.locale Optional locale to use for translating report output to a local language. Defaults to \"en_US\" if not specified.\n       * @param {integer=} params.maxResults The maximum number of rows of report data to return.\n       * @param {string=} params.metric Numeric columns to include in the report.\n       * @param {string=} params.sort The name of a dimension or metric to sort the resulting report on, optionally prefixed with \"+\" to sort ascending or \"-\" to sort descending. If no prefix is specified, the column is sorted ascending.\n       * @param {string} params.startDate Start of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n       * @param {integer=} params.startIndex Index of the first row of report data to return.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      generate: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/adsensehost/v4.1/accounts/{accountId}/reports',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'startDate', 'endDate'],\n          pathParams: ['accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n\n  self.adclients = {\n\n    /**\n     * adsensehost.adclients.get\n     *\n     * @desc Get information about one of the ad clients in the Host AdSense account.\n     *\n     * @alias adsensehost.adclients.get\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client to get.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adsensehost/v4.1/adclients/{adClientId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adsensehost.adclients.list\n     *\n     * @desc List all host ad clients in this AdSense account.\n     *\n     * @alias adsensehost.adclients.list\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object=} params Parameters for request\n     * @param {integer=} params.maxResults The maximum number of ad clients to include in the response, used for paging.\n     * @param {string=} params.pageToken A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adsensehost/v4.1/adclients',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.associationsessions = {\n\n    /**\n     * adsensehost.associationsessions.start\n     *\n     * @desc Create an association session for initiating an association with an AdSense user.\n     *\n     * @alias adsensehost.associationsessions.start\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.productCode Products to associate with the user.\n     * @param {string=} params.userLocale The preferred locale of the user.\n     * @param {string=} params.websiteLocale The locale of the user's hosted website.\n     * @param {string} params.websiteUrl The URL of the user's hosted website.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    start: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adsensehost/v4.1/associationsessions/start',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['productCode', 'websiteUrl'],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adsensehost.associationsessions.verify\n     *\n     * @desc Verify an association session after the association callback returns from AdSense signup.\n     *\n     * @alias adsensehost.associationsessions.verify\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.token The token returned to the association callback URL.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    verify: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adsensehost/v4.1/associationsessions/verify',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['token'],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.customchannels = {\n\n    /**\n     * adsensehost.customchannels.delete\n     *\n     * @desc Delete a specific custom channel from the host AdSense account.\n     *\n     * @alias adsensehost.customchannels.delete\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client from which to delete the custom channel.\n     * @param {string} params.customChannelId Custom channel to delete.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adsensehost/v4.1/adclients/{adClientId}/customchannels/{customChannelId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId', 'customChannelId'],\n        pathParams: ['adClientId', 'customChannelId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adsensehost.customchannels.get\n     *\n     * @desc Get a specific custom channel from the host AdSense account.\n     *\n     * @alias adsensehost.customchannels.get\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client from which to get the custom channel.\n     * @param {string} params.customChannelId Custom channel to get.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adsensehost/v4.1/adclients/{adClientId}/customchannels/{customChannelId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId', 'customChannelId'],\n        pathParams: ['adClientId', 'customChannelId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adsensehost.customchannels.insert\n     *\n     * @desc Add a new custom channel to the host AdSense account.\n     *\n     * @alias adsensehost.customchannels.insert\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client to which the new custom channel will be added.\n     * @param {adsensehost(v4.1).CustomChannel} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adsensehost/v4.1/adclients/{adClientId}/customchannels',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adsensehost.customchannels.list\n     *\n     * @desc List all host custom channels in this AdSense account.\n     *\n     * @alias adsensehost.customchannels.list\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client for which to list custom channels.\n     * @param {integer=} params.maxResults The maximum number of custom channels to include in the response, used for paging.\n     * @param {string=} params.pageToken A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adsensehost/v4.1/adclients/{adClientId}/customchannels',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adsensehost.customchannels.patch\n     *\n     * @desc Update a custom channel in the host AdSense account. This method supports patch semantics.\n     *\n     * @alias adsensehost.customchannels.patch\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client in which the custom channel will be updated.\n     * @param {string} params.customChannelId Custom channel to get.\n     * @param {adsensehost(v4.1).CustomChannel} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adsensehost/v4.1/adclients/{adClientId}/customchannels',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId', 'customChannelId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adsensehost.customchannels.update\n     *\n     * @desc Update a custom channel in the host AdSense account.\n     *\n     * @alias adsensehost.customchannels.update\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client in which the custom channel will be updated.\n     * @param {adsensehost(v4.1).CustomChannel} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adsensehost/v4.1/adclients/{adClientId}/customchannels',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.reports = {\n\n    /**\n     * adsensehost.reports.generate\n     *\n     * @desc Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \"alt=csv\" as a query parameter.\n     *\n     * @alias adsensehost.reports.generate\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.dimension Dimensions to base the report on.\n     * @param {string} params.endDate End of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n     * @param {string=} params.filter Filters to be run on the report.\n     * @param {string=} params.locale Optional locale to use for translating report output to a local language. Defaults to \"en_US\" if not specified.\n     * @param {integer=} params.maxResults The maximum number of rows of report data to return.\n     * @param {string=} params.metric Numeric columns to include in the report.\n     * @param {string=} params.sort The name of a dimension or metric to sort the resulting report on, optionally prefixed with \"+\" to sort ascending or \"-\" to sort descending. If no prefix is specified, the column is sorted ascending.\n     * @param {string} params.startDate Start of the date range to report on in \"YYYY-MM-DD\" format, inclusive.\n     * @param {integer=} params.startIndex Index of the first row of report data to return.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    generate: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adsensehost/v4.1/reports',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['startDate', 'endDate'],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.urlchannels = {\n\n    /**\n     * adsensehost.urlchannels.delete\n     *\n     * @desc Delete a URL channel from the host AdSense account.\n     *\n     * @alias adsensehost.urlchannels.delete\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client from which to delete the URL channel.\n     * @param {string} params.urlChannelId URL channel to delete.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adsensehost/v4.1/adclients/{adClientId}/urlchannels/{urlChannelId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId', 'urlChannelId'],\n        pathParams: ['adClientId', 'urlChannelId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adsensehost.urlchannels.insert\n     *\n     * @desc Add a new URL channel to the host AdSense account.\n     *\n     * @alias adsensehost.urlchannels.insert\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client to which the new URL channel will be added.\n     * @param {adsensehost(v4.1).UrlChannel} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adsensehost/v4.1/adclients/{adClientId}/urlchannels',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * adsensehost.urlchannels.list\n     *\n     * @desc List all host URL channels in the host AdSense account.\n     *\n     * @alias adsensehost.urlchannels.list\n     * @memberOf! adsensehost(v4.1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.adClientId Ad client for which to list URL channels.\n     * @param {integer=} params.maxResults The maximum number of URL channels to include in the response, used for paging.\n     * @param {string=} params.pageToken A continuation token, used to page through URL channels. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/adsensehost/v4.1/adclients/{adClientId}/urlchannels',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef Account\n * @memberOf! adsensehost(v4.1)\n * @type object\n * @property {string} id Unique identifier of this account.\n * @property {string} kind Kind of resource this is, in this case adsensehost#account.\n * @property {string} name Name of this account.\n * @property {string} status Approval status of this account. One of: PENDING, APPROVED, DISABLED.\n */\n/**\n * @typedef Accounts\n * @memberOf! adsensehost(v4.1)\n * @type object\n * @property {string} etag ETag of this response for caching purposes.\n * @property {adsensehost(v4.1).Account[]} items The accounts returned in this list response.\n * @property {string} kind Kind of list this is, in this case adsensehost#accounts.\n */\n/**\n * @typedef AdClient\n * @memberOf! adsensehost(v4.1)\n * @type object\n * @property {boolean} arcOptIn Whether this ad client is opted in to ARC.\n * @property {string} id Unique identifier of this ad client.\n * @property {string} kind Kind of resource this is, in this case adsensehost#adClient.\n * @property {string} productCode This ad client&#39;s product code, which corresponds to the PRODUCT_CODE report dimension.\n * @property {boolean} supportsReporting Whether this ad client supports being reported on.\n */\n/**\n * @typedef AdClients\n * @memberOf! adsensehost(v4.1)\n * @type object\n * @property {string} etag ETag of this response for caching purposes.\n * @property {adsensehost(v4.1).AdClient[]} items The ad clients returned in this list response.\n * @property {string} kind Kind of list this is, in this case adsensehost#adClients.\n * @property {string} nextPageToken Continuation token used to page through ad clients. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; value to this.\n */\n/**\n * @typedef AdCode\n * @memberOf! adsensehost(v4.1)\n * @type object\n * @property {string} adCode The ad code snippet.\n * @property {string} kind Kind this is, in this case adsensehost#adCode.\n */\n/**\n * @typedef AdStyle\n * @memberOf! adsensehost(v4.1)\n * @type object\n * @property {object} colors The colors included in the style. These are represented as six hexadecimal characters, similar to HTML color codes, but without the leading hash.\n * @property {string} corners The style of the corners in the ad (deprecated: never populated, ignored).\n * @property {object} font The font which is included in the style.\n * @property {string} kind Kind this is, in this case adsensehost#adStyle.\n */\n/**\n * @typedef AdUnit\n * @memberOf! adsensehost(v4.1)\n * @type object\n* @property {string} code Identity code of this ad unit, not necessarily unique across ad clients.\n* @property {object} contentAdsSettings Settings specific to content ads (AFC) and highend mobile content ads (AFMC - deprecated).\n* @property {adsensehost(v4.1).AdStyle} customStyle Custom style information specific to this ad unit.\n* @property {string} id Unique identifier of this ad unit. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.\n* @property {string} kind Kind of resource this is, in this case adsensehost#adUnit.\n* @property {object} mobileContentAdsSettings Settings specific to WAP mobile content ads (AFMC - deprecated).\n* @property {string} name Name of this ad unit.\n* @property {string} status Status of this ad unit. Possible values are:\nNEW: Indicates that the ad unit was created within the last seven days and does not yet have any activity associated with it.\n\nACTIVE: Indicates that there has been activity on this ad unit in the last seven days.\n\nINACTIVE: Indicates that there has been no activity on this ad unit in the last seven days.\n*/\n/**\n * @typedef AdUnits\n * @memberOf! adsensehost(v4.1)\n * @type object\n * @property {string} etag ETag of this response for caching purposes.\n * @property {adsensehost(v4.1).AdUnit[]} items The ad units returned in this list response.\n * @property {string} kind Kind of list this is, in this case adsensehost#adUnits.\n * @property {string} nextPageToken Continuation token used to page through ad units. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; value to this.\n */\n/**\n * @typedef AssociationSession\n * @memberOf! adsensehost(v4.1)\n * @type object\n * @property {string} accountId Hosted account id of the associated publisher after association. Present if status is ACCEPTED.\n * @property {string} id Unique identifier of this association session.\n * @property {string} kind Kind of resource this is, in this case adsensehost#associationSession.\n * @property {string[]} productCodes The products to associate with the user. Options: AFC, AFG, AFV, AFS (deprecated), AFMC (deprecated)\n * @property {string} redirectUrl Redirect URL of this association session. Used to redirect users into the AdSense association flow.\n * @property {string} status Status of the completed association, available once the association callback token has been verified. One of ACCEPTED, REJECTED, or ERROR.\n * @property {string} userLocale The preferred locale of the user themselves when going through the AdSense association flow.\n * @property {string} websiteLocale The locale of the user&#39;s hosted website.\n * @property {string} websiteUrl The URL of the user&#39;s hosted website.\n */\n/**\n * @typedef CustomChannel\n * @memberOf! adsensehost(v4.1)\n * @type object\n * @property {string} code Code of this custom channel, not necessarily unique across ad clients.\n * @property {string} id Unique identifier of this custom channel. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.\n * @property {string} kind Kind of resource this is, in this case adsensehost#customChannel.\n * @property {string} name Name of this custom channel.\n */\n/**\n * @typedef CustomChannels\n * @memberOf! adsensehost(v4.1)\n * @type object\n * @property {string} etag ETag of this response for caching purposes.\n * @property {adsensehost(v4.1).CustomChannel[]} items The custom channels returned in this list response.\n * @property {string} kind Kind of list this is, in this case adsensehost#customChannels.\n * @property {string} nextPageToken Continuation token used to page through custom channels. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; value to this.\n */\n/**\n * @typedef Report\n * @memberOf! adsensehost(v4.1)\n * @type object\n * @property {string[]} averages The averages of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.\n * @property {object[]} headers The header information of the columns requested in the report. This is a list of headers; one for each dimension in the request, followed by one for each metric in the request.\n * @property {string} kind Kind this is, in this case adsensehost#report.\n * @property {array[]} rows The output rows of the report. Each row is a list of cells; one for each dimension in the request, followed by one for each metric in the request. The dimension cells contain strings, and the metric cells contain numbers.\n * @property {string} totalMatchedRows The total number of rows matched by the report request. Fewer rows may be returned in the response due to being limited by the row count requested or the report row limit.\n * @property {string[]} totals The totals of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.\n * @property {string[]} warnings Any warnings associated with generation of the report.\n */\n/**\n * @typedef UrlChannel\n * @memberOf! adsensehost(v4.1)\n * @type object\n * @property {string} id Unique identifier of this URL channel. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.\n * @property {string} kind Kind of resource this is, in this case adsensehost#urlChannel.\n * @property {string} urlPattern URL Pattern of this URL channel. Does not include &quot;http://&quot; or &quot;https://&quot;. Example: www.example.com/home\n */\n/**\n * @typedef UrlChannels\n * @memberOf! adsensehost(v4.1)\n * @type object\n * @property {string} etag ETag of this response for caching purposes.\n * @property {adsensehost(v4.1).UrlChannel[]} items The URL channels returned in this list response.\n * @property {string} kind Kind of list this is, in this case adsensehost#urlChannels.\n * @property {string} nextPageToken Continuation token used to page through URL channels. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; value to this.\n */\nmodule.exports = Adsensehost;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/analyticsreporting/v4.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Google Analytics Reporting API\n *\n * Accesses Analytics report data.\n *\n * @example\n * var google = require('googleapis');\n * var analyticsreporting = google.analyticsreporting('v4');\n *\n * @namespace analyticsreporting\n * @type {Function}\n * @version v4\n * @variation v4\n * @param {object=} options Options for Analyticsreporting\n */\nfunction Analyticsreporting(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.reports = {\n\n    /**\n     * analyticsreporting.reports.batchGet\n     *\n     * @desc Returns the Analytics data.\n     *\n     * @alias analyticsreporting.reports.batchGet\n     * @memberOf! analyticsreporting(v4)\n     *\n     * @param {object} params Parameters for request\n     * @param {analyticsreporting(v4).GetReportsRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    batchGet: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://analyticsreporting.googleapis.com/v4/reports:batchGet',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef DateRange\n * @memberOf! analyticsreporting(v4)\n * @type object\n * @property {string} endDate The end date for the query in the format `YYYY-MM-DD`.\n * @property {string} startDate The start date for the query in the format `YYYY-MM-DD`.\n */\n/**\n * @typedef MetricFilter\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {string} operator Is the metric `EQUAL`, `LESS_THAN` or `GREATER_THAN` the\ncomparisonValue, the default is `EQUAL`. If the operator is\n`IS_MISSING`, checks if the metric is missing and would ignore the\ncomparisonValue.\n* @property {boolean} not Logical `NOT` operator. If this boolean is set to true, then the matching\nmetric values will be excluded in the report. The default is false.\n* @property {string} metricName The metric that will be filtered on. A metricFilter must contain a metric\nname. A metric name can be an alias earlier defined as a metric or it can\nalso be a metric expression.\n* @property {string} comparisonValue The value to compare against.\n*/\n/**\n * @typedef ReportRequest\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {analyticsreporting(v4).Pivot[]} pivots The pivot definitions. Requests can have a maximum of 2 pivots.\n* @property {boolean} includeEmptyRows If set to false, the response does not include rows if all the retrieved\nmetrics are equal to zero. The default is false which will exclude these\nrows.\n* @property {analyticsreporting(v4).MetricFilterClause[]} metricFilterClauses The metric filter clauses. They are logically combined with the `AND`\noperator.  Metric filters look at only the first date range and not the\ncomparing date range. Note that filtering on metrics occurs after the\nmetrics are aggregated.\n* @property {integer} pageSize Page size is for paging and specifies the maximum number of returned rows.\nPage size should be &gt;= 0. A query returns the default of 1,000 rows.\nThe Analytics Core Reporting API returns a maximum of 10,000 rows per\nrequest, no matter how many you ask for. It can also return fewer rows\nthan requested, if there aren&#39;t as many dimension segments as you expect.\nFor instance, there are fewer than 300 possible values for `ga:country`,\nso when segmenting only by country, you can&#39;t get more than 300 rows,\neven if you set `pageSize` to a higher value.\n* @property {boolean} hideTotals If set to true, hides the total of all metrics for all the matching rows,\nfor every date range. The default false and will return the totals.\n* @property {boolean} hideValueRanges If set to true, hides the minimum and maximum across all matching rows.\nThe default is false and the value ranges are returned.\n* @property {analyticsreporting(v4).CohortGroup} cohortGroup Cohort group associated with this request. If there is a cohort group\nin the request the `ga:cohort` dimension must be present.\nEvery [ReportRequest](#ReportRequest) within a `batchGet` method must\ncontain the same `cohortGroup` definition.\n* @property {string} filtersExpression Dimension or metric filters that restrict the data returned for your\nrequest. To use the `filtersExpression`, supply a dimension or metric on\nwhich to filter, followed by the filter expression. For example, the\nfollowing expression selects `ga:browser` dimension which starts with\nFirefox; `ga:browser=~^Firefox`. For more information on dimensions\nand metric filters, see\n[Filters reference](https://developers.google.com/analytics/devguides/reporting/core/v3/reference#filters).\n* @property {string} viewId The Analytics\n[view ID](https://support.google.com/analytics/answer/1009618)\nfrom which to retrieve data. Every [ReportRequest](#ReportRequest)\nwithin a `batchGet` method must contain the same `viewId`.\n* @property {analyticsreporting(v4).Metric[]} metrics The metrics requested.\nRequests must specify at least one metric. Requests can have a\ntotal of 10 metrics.\n* @property {analyticsreporting(v4).DimensionFilterClause[]} dimensionFilterClauses The dimension filter clauses for filtering Dimension Values. They are\nlogically combined with the `AND` operator. Note that filtering occurs\nbefore any dimensions are aggregated, so that the returned metrics\nrepresent the total for only the relevant dimensions.\n* @property {analyticsreporting(v4).OrderBy[]} orderBys Sort order on output rows. To compare two rows, the elements of the\nfollowing are applied in order until a difference is found.  All date\nranges in the output get the same row order.\n* @property {analyticsreporting(v4).Segment[]} segments Segment the data returned for the request. A segment definition helps look\nat a subset of the segment request. A request can contain up to four\nsegments. Every [ReportRequest](#ReportRequest) within a\n`batchGet` method must contain the same `segments` definition. Requests\nwith segments must have the `ga:segment` dimension.\n* @property {string} samplingLevel The desired report\n[sample](https://support.google.com/analytics/answer/2637192) size.\nIf the the `samplingLevel` field is unspecified the `DEFAULT` sampling\nlevel is used. Every [ReportRequest](#ReportRequest) within a\n`batchGet` method must contain the same `samplingLevel` definition. See\n[developer guide](/analytics/devguides/reporting/core/v4/basics#sampling)\n for details.\n* @property {analyticsreporting(v4).Dimension[]} dimensions The dimensions requested.\nRequests can have a total of 7 dimensions.\n* @property {analyticsreporting(v4).DateRange[]} dateRanges Date ranges in the request. The request can have a maximum of 2 date\nranges. The response will contain a set of metric values for each\ncombination of the dimensions for each date range in the request. So, if\nthere are two date ranges, there will be two set of metric values, one for\nthe original date range and one for the second date range.\nThe `reportRequest.dateRanges` field should not be specified for cohorts\nor Lifetime value requests.\nIf a date range is not provided, the default date range is (startDate:\ncurrent date - 7 days, endDate: current date - 1 day). Every\n[ReportRequest](#ReportRequest) within a `batchGet` method must\ncontain the same `dateRanges` definition.\n* @property {string} pageToken A continuation token to get the next page of the results. Adding this to\nthe request will return the rows after the pageToken. The pageToken should\nbe the value returned in the nextPageToken parameter in the response to\nthe GetReports request.\n*/\n/**\n * @typedef Dimension\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {string[]} histogramBuckets If non-empty, we place dimension values into buckets after string to\nint64. Dimension values that are not the string representation of an\nintegral value will be converted to zero.  The bucket values have to be in\nincreasing order.  Each bucket is closed on the lower end, and open on the\nupper end. The &quot;first&quot; bucket includes all values less than the first\nboundary, the &quot;last&quot; bucket includes all values up to infinity. Dimension\nvalues that fall in a bucket get transformed to a new dimension value. For\nexample, if one gives a list of &quot;0, 1, 3, 4, 7&quot;, then we return the\nfollowing buckets:\n\n- bucket #1: values &lt; 0, dimension value &quot;&lt;0&quot;\n- bucket #2: values in [0,1), dimension value &quot;0&quot;\n- bucket #3: values in [1,3), dimension value &quot;1-2&quot;\n- bucket #4: values in [3,4), dimension value &quot;3&quot;\n- bucket #5: values in [4,7), dimension value &quot;4-6&quot;\n- bucket #6: values &gt;= 7, dimension value &quot;7+&quot;\n\nNOTE: If you are applying histogram mutation on any dimension, and using\nthat dimension in sort, you will want to use the sort type\n`HISTOGRAM_BUCKET` for that purpose. Without that the dimension values\nwill be sorted according to dictionary\n(lexicographic) order. For example the ascending dictionary order is:\n\n   &quot;&lt;50&quot;, &quot;1001+&quot;, &quot;121-1000&quot;, &quot;50-120&quot;\n\nAnd the ascending `HISTOGRAM_BUCKET` order is:\n\n   &quot;&lt;50&quot;, &quot;50-120&quot;, &quot;121-1000&quot;, &quot;1001+&quot;\n\nThe client has to explicitly request `&quot;orderType&quot;: &quot;HISTOGRAM_BUCKET&quot;`\nfor a histogram-mutated dimension.\n* @property {string} name Name of the dimension to fetch, for example `ga:browser`.\n*/\n/**\n * @typedef SimpleSegment\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {analyticsreporting(v4).OrFiltersForSegment[]} orFiltersForSegment A list of segment filters groups which are combined with logical `AND`\noperator.\n*/\n/**\n * @typedef DynamicSegment\n * @memberOf! analyticsreporting(v4)\n * @type object\n * @property {analyticsreporting(v4).SegmentDefinition} sessionSegment Session Segment to select sessions to include in the segment.\n * @property {string} name The name of the dynamic segment.\n * @property {analyticsreporting(v4).SegmentDefinition} userSegment User Segment to select users to include in the segment.\n */\n/**\n * @typedef ColumnHeader\n * @memberOf! analyticsreporting(v4)\n * @type object\n * @property {string[]} dimensions The dimension names in the response.\n * @property {analyticsreporting(v4).MetricHeader} metricHeader Metric headers for the metrics in the response.\n */\n/**\n * @typedef SegmentFilterClause\n * @memberOf! analyticsreporting(v4)\n * @type object\n * @property {boolean} not Matches the complement (`!`) of the filter.\n * @property {analyticsreporting(v4).SegmentDimensionFilter} dimensionFilter Dimension Filter for the segment definition.\n * @property {analyticsreporting(v4).SegmentMetricFilter} metricFilter Metric Filter for the segment definition.\n */\n/**\n * @typedef MetricFilterClause\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {string} operator The operator for combining multiple metric filters. If unspecified, it is\ntreated as an `OR`.\n* @property {analyticsreporting(v4).MetricFilter[]} filters The repeated set of filters. They are logically combined based on the\noperator specified.\n*/\n/**\n * @typedef Cohort\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {string} name A unique name for the cohort. If not defined name will be auto-generated\nwith values cohort_[1234...].\n* @property {analyticsreporting(v4).DateRange} dateRange This is used for `FIRST_VISIT_DATE` cohort, the cohort selects users\nwhose first visit date is between start date and end date defined in the\nDateRange. The date ranges should be aligned for cohort requests. If the\nrequest contains `ga:cohortNthDay` it should be exactly one day long,\nif `ga:cohortNthWeek` it should be aligned to the week boundary (starting\nat Sunday and ending Saturday), and for `ga:cohortNthMonth` the date range\nshould be aligned to the month (starting at the first and ending on the\nlast day of the month).\nFor LTV requests there are no such restrictions.\nYou do not need to supply a date range for the\n`reportsRequest.dateRanges` field.\n* @property {string} type Type of the cohort. The only supported type as of now is\n`FIRST_VISIT_DATE`. If this field is unspecified the cohort is treated\nas `FIRST_VISIT_DATE` type cohort.\n*/\n/**\n * @typedef ReportRow\n * @memberOf! analyticsreporting(v4)\n * @type object\n * @property {string[]} dimensions List of requested dimensions.\n * @property {analyticsreporting(v4).DateRangeValues[]} metrics List of metrics for each requested DateRange.\n */\n/**\n * @typedef OrFiltersForSegment\n * @memberOf! analyticsreporting(v4)\n * @type object\n * @property {analyticsreporting(v4).SegmentFilterClause[]} segmentFilterClauses List of segment filters to be combined with a `OR` operator.\n */\n/**\n * @typedef MetricHeader\n * @memberOf! analyticsreporting(v4)\n * @type object\n * @property {analyticsreporting(v4).PivotHeader[]} pivotHeaders Headers for the pivots in the response.\n * @property {analyticsreporting(v4).MetricHeaderEntry[]} metricHeaderEntries Headers for the metrics in the response.\n */\n/**\n * @typedef DimensionFilterClause\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {string} operator The operator for combining multiple dimension filters. If unspecified, it\nis treated as an `OR`.\n* @property {analyticsreporting(v4).DimensionFilter[]} filters The repeated set of filters. They are logically combined based on the\noperator specified.\n*/\n/**\n * @typedef GetReportsResponse\n * @memberOf! analyticsreporting(v4)\n * @type object\n * @property {analyticsreporting(v4).Report[]} reports Responses corresponding to each of the request.\n */\n/**\n * @typedef SequenceSegment\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {analyticsreporting(v4).SegmentSequenceStep[]} segmentSequenceSteps The list of steps in the sequence.\n* @property {boolean} firstStepShouldMatchFirstHit If set, first step condition must match the first hit of the visitor (in\nthe date range).\n*/\n/**\n * @typedef SegmentMetricFilter\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {string} operator Specifies is the operation to perform to compare the metric. The default\nis `EQUAL`.\n* @property {string} metricName The metric that will be filtered on. A `metricFilter` must contain a\nmetric name.\n* @property {string} scope Scope for a metric defines the level at which that metric is defined.  The\nspecified metric scope must be equal to or greater than its primary scope\nas defined in the data model. The primary scope is defined by if the\nsegment is selecting users or sessions.\n* @property {string} maxComparisonValue Max comparison value is only used for `BETWEEN` operator.\n* @property {string} comparisonValue The value to compare against. If the operator is `BETWEEN`, this value is\ntreated as minimum comparison value.\n*/\n/**\n * @typedef DateRangeValues\n * @memberOf! analyticsreporting(v4)\n * @type object\n * @property {string[]} values Each value corresponds to each Metric in the request.\n * @property {analyticsreporting(v4).PivotValueRegion[]} pivotValueRegions The values of each pivot region.\n */\n/**\n * @typedef CohortGroup\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {analyticsreporting(v4).Cohort[]} cohorts The definition for the cohort.\n* @property {boolean} lifetimeValue Enable Life Time Value (LTV).  LTV measures lifetime value for users\nacquired through different channels.\nPlease see:\n[Cohort Analysis](https://support.google.com/analytics/answer/6074676) and\n[Lifetime Value](https://support.google.com/analytics/answer/6182550)\nIf the value of lifetimeValue is false:\n\n- The metric values are similar to the values in the web interface cohort\n  report.\n- The cohort definition date ranges must be aligned to the calendar week\n  and month. i.e. while requesting `ga:cohortNthWeek` the `startDate` in\n  the cohort definition should be a Sunday and the `endDate` should be the\n  following Saturday, and for `ga:cohortNthMonth`, the `startDate`\n  should be the 1st of the month and `endDate` should be the last day\n  of the month.\n\nWhen the lifetimeValue is true:\n\n- The metric values will correspond to the values in the web interface\n  LifeTime value report.\n- The Lifetime Value report shows you how user value (Revenue) and\n  engagement (Appviews, Goal Completions, Sessions, and Session Duration)\n  grow during the 90 days after a user is acquired.\n- The metrics are calculated as a cumulative average per user per the time\n  increment.\n- The cohort definition date ranges need not be aligned to the calendar\n  week and month boundaries.\n- The `viewId` must be an\n  [app view ID](https://support.google.com/analytics/answer/2649553#WebVersusAppViews)\n*/\n/**\n * @typedef GetReportsRequest\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {analyticsreporting(v4).ReportRequest[]} reportRequests Requests, each request will have a separate response.\nThere can be a maximum of 5 requests. All requests should have the same\n`dateRanges`, `viewId`, `segments`, `samplingLevel`, and `cohortGroup`.\n*/\n/**\n * @typedef Pivot\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {integer} startGroup If k metrics were requested, then the response will contain some\ndata-dependent multiple of k columns in the report.  E.g., if you pivoted\non the dimension `ga:browser` then you&#39;d get k columns for &quot;Firefox&quot;, k\ncolumns for &quot;IE&quot;, k columns for &quot;Chrome&quot;, etc. The ordering of the groups\nof columns is determined by descending order of &quot;total&quot; for the first of\nthe k values.  Ties are broken by lexicographic ordering of the first\npivot dimension, then lexicographic ordering of the second pivot\ndimension, and so on.  E.g., if the totals for the first value for\nFirefox, IE, and Chrome were 8, 2, 8, respectively, the order of columns\nwould be Chrome, Firefox, IE.\n\nThe following let you choose which of the groups of k columns are\nincluded in the response.\n* @property {analyticsreporting(v4).Metric[]} metrics The pivot metrics. Pivot metrics are part of the\nrestriction on total number of metrics allowed in the request.\n* @property {analyticsreporting(v4).Dimension[]} dimensions A list of dimensions to show as pivot columns. A Pivot can have a maximum\nof 4 dimensions. Pivot dimensions are part of the restriction on the\ntotal number of dimensions allowed in the request.\n* @property {analyticsreporting(v4).DimensionFilterClause[]} dimensionFilterClauses DimensionFilterClauses are logically combined with an `AND` operator: only\ndata that is included by all these DimensionFilterClauses contributes to\nthe values in this pivot region. Dimension filters can be used to restrict\nthe columns shown in the pivot region. For example if you have\n`ga:browser` as the requested dimension in the pivot region, and you\nspecify key filters to restrict `ga:browser` to only &quot;IE&quot; or &quot;Firefox&quot;,\nthen only those two browsers would show up as columns.\n* @property {integer} maxGroupCount Specifies the maximum number of groups to return.\nThe default value is 10, also the maximum value is 1,000.\n*/\n/**\n * @typedef PivotHeaderEntry\n * @memberOf! analyticsreporting(v4)\n * @type object\n * @property {string[]} dimensionValues The values for the dimensions in the pivot.\n * @property {string[]} dimensionNames The name of the dimensions in the pivot response.\n * @property {analyticsreporting(v4).MetricHeaderEntry} metric The metric header for the metric in the pivot.\n */\n/**\n * @typedef SegmentFilter\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {analyticsreporting(v4).SequenceSegment} sequenceSegment Sequence conditions consist of one or more steps, where each step is\ndefined by one or more dimension/metric conditions. Multiple steps can\nbe combined with special sequence operators.\n* @property {boolean} not If true, match the complement of simple or sequence segment.\nFor example, to match all visits not from &quot;New York&quot;, we can define the\nsegment as follows:\n\n      &quot;sessionSegment&quot;: {\n        &quot;segmentFilters&quot;: [{\n          &quot;simpleSegment&quot; :{\n            &quot;orFiltersForSegment&quot;: [{\n              &quot;segmentFilterClauses&quot;:[{\n                &quot;dimensionFilter&quot;: {\n                  &quot;dimensionName&quot;: &quot;ga:city&quot;,\n                  &quot;expressions&quot;: [&quot;New York&quot;]\n                }\n              }]\n            }]\n          },\n          &quot;not&quot;: &quot;True&quot;\n        }]\n      },\n* @property {analyticsreporting(v4).SimpleSegment} simpleSegment A Simple segment conditions consist of one or more dimension/metric\nconditions that can be combined\n*/\n/**\n * @typedef SegmentDefinition\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {analyticsreporting(v4).SegmentFilter[]} segmentFilters A segment is defined by a set of segment filters which are combined\ntogether with a logical `AND` operation.\n*/\n/**\n * @typedef MetricHeaderEntry\n * @memberOf! analyticsreporting(v4)\n * @type object\n * @property {string} name The name of the header.\n * @property {string} type The type of the metric, for example `INTEGER`.\n */\n/**\n * @typedef ReportData\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {integer} rowCount Total number of matching rows for this query.\n* @property {analyticsreporting(v4).ReportRow[]} rows There&#39;s one ReportRow for every unique combination of dimensions.\n* @property {boolean} isDataGolden Indicates if response to this request is golden or not. Data is\ngolden when the exact same request will not produce any new results if\nasked at a later point in time.\n* @property {string} dataLastRefreshed The last time the data in the report was refreshed. All the hits received\nbefore this timestamp are included in the calculation of the report.\n* @property {analyticsreporting(v4).DateRangeValues[]} maximums Minimum and maximum values seen over all matching rows. These are both\nempty when `hideValueRanges` in the request is false, or when\nrowCount is zero.\n* @property {string[]} samplingSpaceSizes If the results are\n[sampled](https://support.google.com/analytics/answer/2637192),\nthis returns the total number of\nsamples present, one entry per date range. If the results are not sampled\nthis field will not be defined. See\n[developer guide](/analytics/devguides/reporting/core/v4/basics#sampling)\nfor details.\n* @property {analyticsreporting(v4).DateRangeValues[]} minimums Minimum and maximum values seen over all matching rows. These are both\nempty when `hideValueRanges` in the request is false, or when\nrowCount is zero.\n* @property {analyticsreporting(v4).DateRangeValues[]} totals For each requested date range, for the set of all rows that match\nthe query, every requested value format gets a total. The total\nfor a value format is computed by first totaling the metrics\nmentioned in the value format and then evaluating the value\nformat as a scalar expression.  E.g., The &quot;totals&quot; for\n`3 / (ga:sessions + 2)` we compute\n`3 / ((sum of all relevant ga:sessions) + 2)`.\nTotals are computed before pagination.\n* @property {string[]} samplesReadCounts If the results are\n[sampled](https://support.google.com/analytics/answer/2637192),\nthis returns the total number of samples read, one entry per date range.\nIf the results are not sampled this field will not be defined. See\n[developer guide](/analytics/devguides/reporting/core/v4/basics#sampling)\nfor details.\n*/\n/**\n * @typedef DimensionFilter\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {string} dimensionName The dimension to filter on. A DimensionFilter must contain a dimension.\n* @property {string} operator How to match the dimension to the expression. The default is REGEXP.\n* @property {boolean} not Logical `NOT` operator. If this boolean is set to true, then the matching\ndimension values will be excluded in the report. The default is false.\n* @property {string[]} expressions Strings or regular expression to match against. Only the first value of\nthe list is used for comparison unless the operator is `IN_LIST`.\nIf `IN_LIST` operator, then the entire list is used to filter the\ndimensions as explained in the description of the `IN_LIST` operator.\n* @property {boolean} caseSensitive Should the match be case sensitive? Default is false.\n*/\n/**\n * @typedef SegmentDimensionFilter\n * @memberOf! analyticsreporting(v4)\n * @type object\n * @property {string} dimensionName Name of the dimension for which the filter is being applied.\n * @property {string} operator The operator to use to match the dimension with the expressions.\n * @property {string[]} expressions The list of expressions, only the first element is used for all operators\n * @property {boolean} caseSensitive Should the match be case sensitive, ignored for `IN_LIST` operator.\n * @property {string} minComparisonValue Minimum comparison values for `BETWEEN` match type.\n * @property {string} maxComparisonValue Maximum comparison values for `BETWEEN` match type.\n */\n/**\n * @typedef OrderBy\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {string} fieldName The field which to sort by. The default sort order is ascending. Example:\n`ga:browser`.\nNote, that you can only specify one field for sort here. For example,\n`ga:browser, ga:city` is not valid.\n* @property {string} orderType The order type. The default orderType is `VALUE`.\n* @property {string} sortOrder The sorting order for the field.\n*/\n/**\n * @typedef Segment\n * @memberOf! analyticsreporting(v4)\n * @type object\n * @property {analyticsreporting(v4).DynamicSegment} dynamicSegment A dynamic segment definition in the request.\n * @property {string} segmentId The segment ID of a built-in or custom segment, for example `gaid::-3`.\n */\n/**\n * @typedef SegmentSequenceStep\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {analyticsreporting(v4).OrFiltersForSegment[]} orFiltersForSegment A sequence is specified with a list of Or grouped filters which are\ncombined with `AND` operator.\n* @property {string} matchType Specifies if the step immediately precedes or can be any time before the\nnext step.\n*/\n/**\n * @typedef Metric\n * @memberOf! analyticsreporting(v4)\n * @type object\n* @property {string} alias An alias for the metric expression is an alternate name for the\nexpression. The alias can be used for filtering and sorting. This field\nis optional and is useful if the expression is not a single metric but\na complex expression which cannot be used in filtering and sorting.\nThe alias is also used in the response column header.\n* @property {string} expression A metric expression in the request. An expression is constructed from one\nor more metrics and numbers. Accepted operators include: Plus (+), Minus\n(-), Negation (Unary -), Divided by (/), Multiplied by (*), Parenthesis,\nPositive cardinal numbers (0-9), can include decimals and is limited to\n1024 characters. Example `ga:totalRefunds/ga:users`, in most cases the\nmetric expression is just a single metric name like `ga:users`.\nAdding mixed `MetricType` (E.g., `CURRENCY` + `PERCENTAGE`) metrics\nwill result in unexpected results.\n* @property {string} formattingType Specifies how the metric expression should be formatted, for example\n`INTEGER`.\n*/\n/**\n * @typedef PivotValueRegion\n * @memberOf! analyticsreporting(v4)\n * @type object\n * @property {string[]} values The values of the metrics in each of the pivot regions.\n */\n/**\n * @typedef Report\n * @memberOf! analyticsreporting(v4)\n * @type object\n * @property {analyticsreporting(v4).ColumnHeader} columnHeader The column headers.\n * @property {analyticsreporting(v4).ReportData} data Response data.\n * @property {string} nextPageToken Page token to retrieve the next page of results in the list.\n */\n/**\n * @typedef PivotHeader\n * @memberOf! analyticsreporting(v4)\n * @type object\n * @property {analyticsreporting(v4).PivotHeaderEntry[]} pivotHeaderEntries A single pivot section header.\n * @property {integer} totalPivotGroupsCount The total number of groups for this pivot.\n */\nmodule.exports = Analyticsreporting;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/analytics/v2.4.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Google Analytics API\n *\n * Views and manages your Google Analytics data.\n *\n * @example\n * var google = require('googleapis');\n * var analytics = google.analytics('v2.4');\n *\n * @namespace analytics\n * @type {Function}\n * @version v2.4\n * @variation v2.4\n * @param {object=} options Options for Analytics\n */\nfunction Analytics(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.data = {\n\n    /**\n     * analytics.data.get\n     *\n     * @desc Returns Analytics report data for a view (profile).\n     *\n     * @alias analytics.data.get\n     * @memberOf! analytics(v2.4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.dimensions A comma-separated list of Analytics dimensions. E.g., 'ga:browser,ga:city'.\n     * @param {string} params.end-date End date for fetching report data. All requests should specify an end date formatted as YYYY-MM-DD.\n     * @param {string=} params.filters A comma-separated list of dimension or metric filters to be applied to the report data.\n     * @param {string} params.ids Unique table ID for retrieving report data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.\n     * @param {integer=} params.max-results The maximum number of entries to include in this feed.\n     * @param {string} params.metrics A comma-separated list of Analytics metrics. E.g., 'ga:sessions,ga:pageviews'. At least one metric must be specified to retrieve a valid Analytics report.\n     * @param {string=} params.segment An Analytics advanced segment to be applied to the report data.\n     * @param {string=} params.sort A comma-separated list of dimensions or metrics that determine the sort order for the report data.\n     * @param {string} params.start-date Start date for fetching report data. All requests should specify a start date formatted as YYYY-MM-DD.\n     * @param {integer=} params.start-index An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/analytics/v2.4/data',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['ids', 'start-date', 'end-date', 'metrics'],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.management = {\n\n    accounts: {\n\n      /**\n       * analytics.management.accounts.list\n       *\n       * @desc Lists all accounts to which the user has access.\n       *\n       * @alias analytics.management.accounts.list\n       * @memberOf! analytics(v2.4)\n       *\n       * @param {object=} params Parameters for request\n       * @param {integer=} params.max-results The maximum number of accounts to include in this response.\n       * @param {integer=} params.start-index An index of the first account to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v2.4/management/accounts',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    goals: {\n\n      /**\n       * analytics.management.goals.list\n       *\n       * @desc Lists goals to which the user has access.\n       *\n       * @alias analytics.management.goals.list\n       * @memberOf! analytics(v2.4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to retrieve goals for. Can either be a specific account ID or '~all', which refers to all the accounts that user has access to.\n       * @param {integer=} params.max-results The maximum number of goals to include in this response.\n       * @param {string} params.profileId View (Profile) ID to retrieve goals for. Can either be a specific view (profile) ID or '~all', which refers to all the views (profiles) that user has access to.\n       * @param {integer=} params.start-index An index of the first goal to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {string} params.webPropertyId Web property ID to retrieve goals for. Can either be a specific web property ID or '~all', which refers to all the web properties that user has access to.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v2.4/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n          pathParams: ['accountId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    profiles: {\n\n      /**\n       * analytics.management.profiles.list\n       *\n       * @desc Lists views (profiles) to which the user has access.\n       *\n       * @alias analytics.management.profiles.list\n       * @memberOf! analytics(v2.4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID for the views (profiles) to retrieve. Can either be a specific account ID or '~all', which refers to all the accounts to which the user has access.\n       * @param {integer=} params.max-results The maximum number of views (profiles) to include in this response.\n       * @param {integer=} params.start-index An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {string} params.webPropertyId Web property ID for the views (profiles) to retrieve. Can either be a specific web property ID or '~all', which refers to all the web properties to which the user has access.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v2.4/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId'],\n          pathParams: ['accountId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    segments: {\n\n      /**\n       * analytics.management.segments.list\n       *\n       * @desc Lists advanced segments to which the user has access.\n       *\n       * @alias analytics.management.segments.list\n       * @memberOf! analytics(v2.4)\n       *\n       * @param {object=} params Parameters for request\n       * @param {integer=} params.max-results The maximum number of advanced segments to include in this response.\n       * @param {integer=} params.start-index An index of the first advanced segment to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v2.4/management/segments',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    webproperties: {\n\n      /**\n       * analytics.management.webproperties.list\n       *\n       * @desc Lists web properties to which the user has access.\n       *\n       * @alias analytics.management.webproperties.list\n       * @memberOf! analytics(v2.4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to retrieve web properties for. Can either be a specific account ID or '~all', which refers to all the accounts that user has access to.\n       * @param {integer=} params.max-results The maximum number of web properties to include in this response.\n       * @param {integer=} params.start-index An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v2.4/management/accounts/{accountId}/webproperties',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\nmodule.exports = Analytics;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/analytics/v3.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Google Analytics API\n *\n * Views and manages your Google Analytics data.\n *\n * @example\n * var google = require('googleapis');\n * var analytics = google.analytics('v3');\n *\n * @namespace analytics\n * @type {Function}\n * @version v3\n * @variation v3\n * @param {object=} options Options for Analytics\n */\nfunction Analytics(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.data = {\n\n    ga: {\n\n      /**\n       * analytics.data.ga.get\n       *\n       * @desc Returns Analytics data for a view (profile).\n       *\n       * @alias analytics.data.ga.get\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.dimensions A comma-separated list of Analytics dimensions. E.g., 'ga:browser,ga:city'.\n       * @param {string} params.end-date End date for fetching Analytics data. Request can should specify an end date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is yesterday.\n       * @param {string=} params.filters A comma-separated list of dimension or metric filters to be applied to Analytics data.\n       * @param {string} params.ids Unique table ID for retrieving Analytics data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.\n       * @param {boolean=} params.include-empty-rows The response will include empty rows if this parameter is set to true, the default is true\n       * @param {integer=} params.max-results The maximum number of entries to include in this feed.\n       * @param {string} params.metrics A comma-separated list of Analytics metrics. E.g., 'ga:sessions,ga:pageviews'. At least one metric must be specified.\n       * @param {string=} params.output The selected format for the response. Default format is JSON.\n       * @param {string=} params.samplingLevel The desired sampling level.\n       * @param {string=} params.segment An Analytics segment to be applied to data.\n       * @param {string=} params.sort A comma-separated list of dimensions or metrics that determine the sort order for Analytics data.\n       * @param {string} params.start-date Start date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo.\n       * @param {integer=} params.start-index An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/data/ga',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['ids', 'start-date', 'end-date', 'metrics'],\n          pathParams: [],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    mcf: {\n\n      /**\n       * analytics.data.mcf.get\n       *\n       * @desc Returns Analytics Multi-Channel Funnels data for a view (profile).\n       *\n       * @alias analytics.data.mcf.get\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.dimensions A comma-separated list of Multi-Channel Funnels dimensions. E.g., 'mcf:source,mcf:medium'.\n       * @param {string} params.end-date End date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo.\n       * @param {string=} params.filters A comma-separated list of dimension or metric filters to be applied to the Analytics data.\n       * @param {string} params.ids Unique table ID for retrieving Analytics data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.\n       * @param {integer=} params.max-results The maximum number of entries to include in this feed.\n       * @param {string} params.metrics A comma-separated list of Multi-Channel Funnels metrics. E.g., 'mcf:totalConversions,mcf:totalConversionValue'. At least one metric must be specified.\n       * @param {string=} params.samplingLevel The desired sampling level.\n       * @param {string=} params.sort A comma-separated list of dimensions or metrics that determine the sort order for the Analytics data.\n       * @param {string} params.start-date Start date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo.\n       * @param {integer=} params.start-index An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/data/mcf',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['ids', 'start-date', 'end-date', 'metrics'],\n          pathParams: [],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    realtime: {\n\n      /**\n       * analytics.data.realtime.get\n       *\n       * @desc Returns real time data for a view (profile).\n       *\n       * @alias analytics.data.realtime.get\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.dimensions A comma-separated list of real time dimensions. E.g., 'rt:medium,rt:city'.\n       * @param {string=} params.filters A comma-separated list of dimension or metric filters to be applied to real time data.\n       * @param {string} params.ids Unique table ID for retrieving real time data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.\n       * @param {integer=} params.max-results The maximum number of entries to include in this feed.\n       * @param {string} params.metrics A comma-separated list of real time metrics. E.g., 'rt:activeUsers'. At least one metric must be specified.\n       * @param {string=} params.sort A comma-separated list of dimensions or metrics that determine the sort order for real time data.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/data/realtime',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['ids', 'metrics'],\n          pathParams: [],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n\n  self.management = {\n\n    accountSummaries: {\n\n      /**\n       * analytics.management.accountSummaries.list\n       *\n       * @desc Lists account summaries (lightweight tree comprised of accounts/properties/profiles) to which the user has access.\n       *\n       * @alias analytics.management.accountSummaries.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object=} params Parameters for request\n       * @param {integer=} params.max-results The maximum number of account summaries to include in this response, where the largest acceptable value is 1000.\n       * @param {integer=} params.start-index An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accountSummaries',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    accountUserLinks: {\n\n      /**\n       * analytics.management.accountUserLinks.delete\n       *\n       * @desc Removes a user from the given account.\n       *\n       * @alias analytics.management.accountUserLinks.delete\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to delete the user link for.\n       * @param {string} params.linkId Link ID to delete the user link for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/entityUserLinks/{linkId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'linkId'],\n          pathParams: ['accountId', 'linkId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.accountUserLinks.insert\n       *\n       * @desc Adds a new user to the given account.\n       *\n       * @alias analytics.management.accountUserLinks.insert\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to create the user link for.\n       * @param {analytics(v3).EntityUserLink} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/entityUserLinks',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.accountUserLinks.list\n       *\n       * @desc Lists account-user links for a given account.\n       *\n       * @alias analytics.management.accountUserLinks.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to retrieve the user links for.\n       * @param {integer=} params.max-results The maximum number of account-user links to include in this response.\n       * @param {integer=} params.start-index An index of the first account-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/entityUserLinks',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.accountUserLinks.update\n       *\n       * @desc Updates permissions for an existing user on the given account.\n       *\n       * @alias analytics.management.accountUserLinks.update\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to update the account-user link for.\n       * @param {string} params.linkId Link ID to update the account-user link for.\n       * @param {analytics(v3).EntityUserLink} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/entityUserLinks/{linkId}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'linkId'],\n          pathParams: ['accountId', 'linkId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    accounts: {\n\n      /**\n       * analytics.management.accounts.list\n       *\n       * @desc Lists all accounts to which the user has access.\n       *\n       * @alias analytics.management.accounts.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object=} params Parameters for request\n       * @param {integer=} params.max-results The maximum number of accounts to include in this response.\n       * @param {integer=} params.start-index An index of the first account to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    customDataSources: {\n\n      /**\n       * analytics.management.customDataSources.list\n       *\n       * @desc List custom data sources to which the user has access.\n       *\n       * @alias analytics.management.customDataSources.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account Id for the custom data sources to retrieve.\n       * @param {integer=} params.max-results The maximum number of custom data sources to include in this response.\n       * @param {integer=} params.start-index A 1-based index of the first custom data source to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {string} params.webPropertyId Web property Id for the custom data sources to retrieve.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId'],\n          pathParams: ['accountId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    customDimensions: {\n\n      /**\n       * analytics.management.customDimensions.get\n       *\n       * @desc Get a custom dimension to which the user has access.\n       *\n       * @alias analytics.management.customDimensions.get\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID for the custom dimension to retrieve.\n       * @param {string} params.customDimensionId The ID of the custom dimension to retrieve.\n       * @param {string} params.webPropertyId Web property ID for the custom dimension to retrieve.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'customDimensionId'],\n          pathParams: ['accountId', 'customDimensionId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.customDimensions.insert\n       *\n       * @desc Create a new custom dimension.\n       *\n       * @alias analytics.management.customDimensions.insert\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID for the custom dimension to create.\n       * @param {string} params.webPropertyId Web property ID for the custom dimension to create.\n       * @param {analytics(v3).CustomDimension} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId'],\n          pathParams: ['accountId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.customDimensions.list\n       *\n       * @desc Lists custom dimensions to which the user has access.\n       *\n       * @alias analytics.management.customDimensions.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID for the custom dimensions to retrieve.\n       * @param {integer=} params.max-results The maximum number of custom dimensions to include in this response.\n       * @param {integer=} params.start-index An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {string} params.webPropertyId Web property ID for the custom dimensions to retrieve.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId'],\n          pathParams: ['accountId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.customDimensions.patch\n       *\n       * @desc Updates an existing custom dimension. This method supports patch semantics.\n       *\n       * @alias analytics.management.customDimensions.patch\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID for the custom dimension to update.\n       * @param {string} params.customDimensionId Custom dimension ID for the custom dimension to update.\n       * @param {boolean=} params.ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom dimension being linked to a custom data source / data set.\n       * @param {string} params.webPropertyId Web property ID for the custom dimension to update.\n       * @param {analytics(v3).CustomDimension} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'customDimensionId'],\n          pathParams: ['accountId', 'customDimensionId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.customDimensions.update\n       *\n       * @desc Updates an existing custom dimension.\n       *\n       * @alias analytics.management.customDimensions.update\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID for the custom dimension to update.\n       * @param {string} params.customDimensionId Custom dimension ID for the custom dimension to update.\n       * @param {boolean=} params.ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom dimension being linked to a custom data source / data set.\n       * @param {string} params.webPropertyId Web property ID for the custom dimension to update.\n       * @param {analytics(v3).CustomDimension} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'customDimensionId'],\n          pathParams: ['accountId', 'customDimensionId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    customMetrics: {\n\n      /**\n       * analytics.management.customMetrics.get\n       *\n       * @desc Get a custom metric to which the user has access.\n       *\n       * @alias analytics.management.customMetrics.get\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID for the custom metric to retrieve.\n       * @param {string} params.customMetricId The ID of the custom metric to retrieve.\n       * @param {string} params.webPropertyId Web property ID for the custom metric to retrieve.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'customMetricId'],\n          pathParams: ['accountId', 'customMetricId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.customMetrics.insert\n       *\n       * @desc Create a new custom metric.\n       *\n       * @alias analytics.management.customMetrics.insert\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID for the custom metric to create.\n       * @param {string} params.webPropertyId Web property ID for the custom dimension to create.\n       * @param {analytics(v3).CustomMetric} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId'],\n          pathParams: ['accountId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.customMetrics.list\n       *\n       * @desc Lists custom metrics to which the user has access.\n       *\n       * @alias analytics.management.customMetrics.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID for the custom metrics to retrieve.\n       * @param {integer=} params.max-results The maximum number of custom metrics to include in this response.\n       * @param {integer=} params.start-index An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {string} params.webPropertyId Web property ID for the custom metrics to retrieve.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId'],\n          pathParams: ['accountId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.customMetrics.patch\n       *\n       * @desc Updates an existing custom metric. This method supports patch semantics.\n       *\n       * @alias analytics.management.customMetrics.patch\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID for the custom metric to update.\n       * @param {string} params.customMetricId Custom metric ID for the custom metric to update.\n       * @param {boolean=} params.ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom metric being linked to a custom data source / data set.\n       * @param {string} params.webPropertyId Web property ID for the custom metric to update.\n       * @param {analytics(v3).CustomMetric} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'customMetricId'],\n          pathParams: ['accountId', 'customMetricId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.customMetrics.update\n       *\n       * @desc Updates an existing custom metric.\n       *\n       * @alias analytics.management.customMetrics.update\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID for the custom metric to update.\n       * @param {string} params.customMetricId Custom metric ID for the custom metric to update.\n       * @param {boolean=} params.ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom metric being linked to a custom data source / data set.\n       * @param {string} params.webPropertyId Web property ID for the custom metric to update.\n       * @param {analytics(v3).CustomMetric} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'customMetricId'],\n          pathParams: ['accountId', 'customMetricId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    experiments: {\n\n      /**\n       * analytics.management.experiments.delete\n       *\n       * @desc Delete an experiment.\n       *\n       * @alias analytics.management.experiments.delete\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to which the experiment belongs\n       * @param {string} params.experimentId ID of the experiment to delete\n       * @param {string} params.profileId View (Profile) ID to which the experiment belongs\n       * @param {string} params.webPropertyId Web property ID to which the experiment belongs\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'experimentId'],\n          pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.experiments.get\n       *\n       * @desc Returns an experiment to which the user has access.\n       *\n       * @alias analytics.management.experiments.get\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to retrieve the experiment for.\n       * @param {string} params.experimentId Experiment ID to retrieve the experiment for.\n       * @param {string} params.profileId View (Profile) ID to retrieve the experiment for.\n       * @param {string} params.webPropertyId Web property ID to retrieve the experiment for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'experimentId'],\n          pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.experiments.insert\n       *\n       * @desc Create a new experiment.\n       *\n       * @alias analytics.management.experiments.insert\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to create the experiment for.\n       * @param {string} params.profileId View (Profile) ID to create the experiment for.\n       * @param {string} params.webPropertyId Web property ID to create the experiment for.\n       * @param {analytics(v3).Experiment} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n          pathParams: ['accountId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.experiments.list\n       *\n       * @desc Lists experiments to which the user has access.\n       *\n       * @alias analytics.management.experiments.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to retrieve experiments for.\n       * @param {integer=} params.max-results The maximum number of experiments to include in this response.\n       * @param {string} params.profileId View (Profile) ID to retrieve experiments for.\n       * @param {integer=} params.start-index An index of the first experiment to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {string} params.webPropertyId Web property ID to retrieve experiments for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n          pathParams: ['accountId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.experiments.patch\n       *\n       * @desc Update an existing experiment. This method supports patch semantics.\n       *\n       * @alias analytics.management.experiments.patch\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID of the experiment to update.\n       * @param {string} params.experimentId Experiment ID of the experiment to update.\n       * @param {string} params.profileId View (Profile) ID of the experiment to update.\n       * @param {string} params.webPropertyId Web property ID of the experiment to update.\n       * @param {analytics(v3).Experiment} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'experimentId'],\n          pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.experiments.update\n       *\n       * @desc Update an existing experiment.\n       *\n       * @alias analytics.management.experiments.update\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID of the experiment to update.\n       * @param {string} params.experimentId Experiment ID of the experiment to update.\n       * @param {string} params.profileId View (Profile) ID of the experiment to update.\n       * @param {string} params.webPropertyId Web property ID of the experiment to update.\n       * @param {analytics(v3).Experiment} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'experimentId'],\n          pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    filters: {\n\n      /**\n       * analytics.management.filters.delete\n       *\n       * @desc Delete a filter.\n       *\n       * @alias analytics.management.filters.delete\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to delete the filter for.\n       * @param {string} params.filterId ID of the filter to be deleted.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/filters/{filterId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'filterId'],\n          pathParams: ['accountId', 'filterId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.filters.get\n       *\n       * @desc Returns a filters to which the user has access.\n       *\n       * @alias analytics.management.filters.get\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to retrieve filters for.\n       * @param {string} params.filterId Filter ID to retrieve filters for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/filters/{filterId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'filterId'],\n          pathParams: ['accountId', 'filterId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.filters.insert\n       *\n       * @desc Create a new filter.\n       *\n       * @alias analytics.management.filters.insert\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to create filter for.\n       * @param {analytics(v3).Filter} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/filters',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.filters.list\n       *\n       * @desc Lists all filters for an account\n       *\n       * @alias analytics.management.filters.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to retrieve filters for.\n       * @param {integer=} params.max-results The maximum number of filters to include in this response.\n       * @param {integer=} params.start-index An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/filters',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.filters.patch\n       *\n       * @desc Updates an existing filter. This method supports patch semantics.\n       *\n       * @alias analytics.management.filters.patch\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to which the filter belongs.\n       * @param {string} params.filterId ID of the filter to be updated.\n       * @param {analytics(v3).Filter} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/filters/{filterId}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'filterId'],\n          pathParams: ['accountId', 'filterId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.filters.update\n       *\n       * @desc Updates an existing filter.\n       *\n       * @alias analytics.management.filters.update\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to which the filter belongs.\n       * @param {string} params.filterId ID of the filter to be updated.\n       * @param {analytics(v3).Filter} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/filters/{filterId}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'filterId'],\n          pathParams: ['accountId', 'filterId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    goals: {\n\n      /**\n       * analytics.management.goals.get\n       *\n       * @desc Gets a goal to which the user has access.\n       *\n       * @alias analytics.management.goals.get\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to retrieve the goal for.\n       * @param {string} params.goalId Goal ID to retrieve the goal for.\n       * @param {string} params.profileId View (Profile) ID to retrieve the goal for.\n       * @param {string} params.webPropertyId Web property ID to retrieve the goal for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'goalId'],\n          pathParams: ['accountId', 'goalId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.goals.insert\n       *\n       * @desc Create a new goal.\n       *\n       * @alias analytics.management.goals.insert\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to create the goal for.\n       * @param {string} params.profileId View (Profile) ID to create the goal for.\n       * @param {string} params.webPropertyId Web property ID to create the goal for.\n       * @param {analytics(v3).Goal} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n          pathParams: ['accountId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.goals.list\n       *\n       * @desc Lists goals to which the user has access.\n       *\n       * @alias analytics.management.goals.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to retrieve goals for. Can either be a specific account ID or '~all', which refers to all the accounts that user has access to.\n       * @param {integer=} params.max-results The maximum number of goals to include in this response.\n       * @param {string} params.profileId View (Profile) ID to retrieve goals for. Can either be a specific view (profile) ID or '~all', which refers to all the views (profiles) that user has access to.\n       * @param {integer=} params.start-index An index of the first goal to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {string} params.webPropertyId Web property ID to retrieve goals for. Can either be a specific web property ID or '~all', which refers to all the web properties that user has access to.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n          pathParams: ['accountId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.goals.patch\n       *\n       * @desc Updates an existing goal. This method supports patch semantics.\n       *\n       * @alias analytics.management.goals.patch\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to update the goal.\n       * @param {string} params.goalId Index of the goal to be updated.\n       * @param {string} params.profileId View (Profile) ID to update the goal.\n       * @param {string} params.webPropertyId Web property ID to update the goal.\n       * @param {analytics(v3).Goal} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'goalId'],\n          pathParams: ['accountId', 'goalId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.goals.update\n       *\n       * @desc Updates an existing goal.\n       *\n       * @alias analytics.management.goals.update\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to update the goal.\n       * @param {string} params.goalId Index of the goal to be updated.\n       * @param {string} params.profileId View (Profile) ID to update the goal.\n       * @param {string} params.webPropertyId Web property ID to update the goal.\n       * @param {analytics(v3).Goal} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'goalId'],\n          pathParams: ['accountId', 'goalId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    profileFilterLinks: {\n\n      /**\n       * analytics.management.profileFilterLinks.delete\n       *\n       * @desc Delete a profile filter link.\n       *\n       * @alias analytics.management.profileFilterLinks.delete\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to which the profile filter link belongs.\n       * @param {string} params.linkId ID of the profile filter link to delete.\n       * @param {string} params.profileId Profile ID to which the filter link belongs.\n       * @param {string} params.webPropertyId Web property Id to which the profile filter link belongs.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n          pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.profileFilterLinks.get\n       *\n       * @desc Returns a single profile filter link.\n       *\n       * @alias analytics.management.profileFilterLinks.get\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to retrieve profile filter link for.\n       * @param {string} params.linkId ID of the profile filter link.\n       * @param {string} params.profileId Profile ID to retrieve filter link for.\n       * @param {string} params.webPropertyId Web property Id to retrieve profile filter link for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n          pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.profileFilterLinks.insert\n       *\n       * @desc Create a new profile filter link.\n       *\n       * @alias analytics.management.profileFilterLinks.insert\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to create profile filter link for.\n       * @param {string} params.profileId Profile ID to create filter link for.\n       * @param {string} params.webPropertyId Web property Id to create profile filter link for.\n       * @param {analytics(v3).ProfileFilterLink} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n          pathParams: ['accountId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.profileFilterLinks.list\n       *\n       * @desc Lists all profile filter links for a profile.\n       *\n       * @alias analytics.management.profileFilterLinks.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to retrieve profile filter links for.\n       * @param {integer=} params.max-results The maximum number of profile filter links to include in this response.\n       * @param {string} params.profileId Profile ID to retrieve filter links for. Can either be a specific profile ID or '~all', which refers to all the profiles that user has access to.\n       * @param {integer=} params.start-index An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {string} params.webPropertyId Web property Id for profile filter links for. Can either be a specific web property ID or '~all', which refers to all the web properties that user has access to.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n          pathParams: ['accountId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.profileFilterLinks.patch\n       *\n       * @desc Update an existing profile filter link. This method supports patch semantics.\n       *\n       * @alias analytics.management.profileFilterLinks.patch\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to which profile filter link belongs.\n       * @param {string} params.linkId ID of the profile filter link to be updated.\n       * @param {string} params.profileId Profile ID to which filter link belongs\n       * @param {string} params.webPropertyId Web property Id to which profile filter link belongs\n       * @param {analytics(v3).ProfileFilterLink} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n          pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.profileFilterLinks.update\n       *\n       * @desc Update an existing profile filter link.\n       *\n       * @alias analytics.management.profileFilterLinks.update\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to which profile filter link belongs.\n       * @param {string} params.linkId ID of the profile filter link to be updated.\n       * @param {string} params.profileId Profile ID to which filter link belongs\n       * @param {string} params.webPropertyId Web property Id to which profile filter link belongs\n       * @param {analytics(v3).ProfileFilterLink} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n          pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    profileUserLinks: {\n\n      /**\n       * analytics.management.profileUserLinks.delete\n       *\n       * @desc Removes a user from the given view (profile).\n       *\n       * @alias analytics.management.profileUserLinks.delete\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to delete the user link for.\n       * @param {string} params.linkId Link ID to delete the user link for.\n       * @param {string} params.profileId View (Profile) ID to delete the user link for.\n       * @param {string} params.webPropertyId Web Property ID to delete the user link for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n          pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.profileUserLinks.insert\n       *\n       * @desc Adds a new user to the given view (profile).\n       *\n       * @alias analytics.management.profileUserLinks.insert\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to create the user link for.\n       * @param {string} params.profileId View (Profile) ID to create the user link for.\n       * @param {string} params.webPropertyId Web Property ID to create the user link for.\n       * @param {analytics(v3).EntityUserLink} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n          pathParams: ['accountId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.profileUserLinks.list\n       *\n       * @desc Lists profile-user links for a given view (profile).\n       *\n       * @alias analytics.management.profileUserLinks.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID which the given view (profile) belongs to.\n       * @param {integer=} params.max-results The maximum number of profile-user links to include in this response.\n       * @param {string} params.profileId View (Profile) ID to retrieve the profile-user links for. Can either be a specific profile ID or '~all', which refers to all the profiles that user has access to.\n       * @param {integer=} params.start-index An index of the first profile-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {string} params.webPropertyId Web Property ID which the given view (profile) belongs to. Can either be a specific web property ID or '~all', which refers to all the web properties that user has access to.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n          pathParams: ['accountId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.profileUserLinks.update\n       *\n       * @desc Updates permissions for an existing user on the given view (profile).\n       *\n       * @alias analytics.management.profileUserLinks.update\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to update the user link for.\n       * @param {string} params.linkId Link ID to update the user link for.\n       * @param {string} params.profileId View (Profile ID) to update the user link for.\n       * @param {string} params.webPropertyId Web Property ID to update the user link for.\n       * @param {analytics(v3).EntityUserLink} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n          pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    profiles: {\n\n      /**\n       * analytics.management.profiles.delete\n       *\n       * @desc Deletes a view (profile).\n       *\n       * @alias analytics.management.profiles.delete\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to delete the view (profile) for.\n       * @param {string} params.profileId ID of the view (profile) to be deleted.\n       * @param {string} params.webPropertyId Web property ID to delete the view (profile) for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n          pathParams: ['accountId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.profiles.get\n       *\n       * @desc Gets a view (profile) to which the user has access.\n       *\n       * @alias analytics.management.profiles.get\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to retrieve the view (profile) for.\n       * @param {string} params.profileId View (Profile) ID to retrieve the view (profile) for.\n       * @param {string} params.webPropertyId Web property ID to retrieve the view (profile) for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n          pathParams: ['accountId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.profiles.insert\n       *\n       * @desc Create a new view (profile).\n       *\n       * @alias analytics.management.profiles.insert\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to create the view (profile) for.\n       * @param {string} params.webPropertyId Web property ID to create the view (profile) for.\n       * @param {analytics(v3).Profile} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId'],\n          pathParams: ['accountId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.profiles.list\n       *\n       * @desc Lists views (profiles) to which the user has access.\n       *\n       * @alias analytics.management.profiles.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID for the view (profiles) to retrieve. Can either be a specific account ID or '~all', which refers to all the accounts to which the user has access.\n       * @param {integer=} params.max-results The maximum number of views (profiles) to include in this response.\n       * @param {integer=} params.start-index An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {string} params.webPropertyId Web property ID for the views (profiles) to retrieve. Can either be a specific web property ID or '~all', which refers to all the web properties to which the user has access.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId'],\n          pathParams: ['accountId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.profiles.patch\n       *\n       * @desc Updates an existing view (profile). This method supports patch semantics.\n       *\n       * @alias analytics.management.profiles.patch\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to which the view (profile) belongs\n       * @param {string} params.profileId ID of the view (profile) to be updated.\n       * @param {string} params.webPropertyId Web property ID to which the view (profile) belongs\n       * @param {analytics(v3).Profile} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n          pathParams: ['accountId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.profiles.update\n       *\n       * @desc Updates an existing view (profile).\n       *\n       * @alias analytics.management.profiles.update\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to which the view (profile) belongs\n       * @param {string} params.profileId ID of the view (profile) to be updated.\n       * @param {string} params.webPropertyId Web property ID to which the view (profile) belongs\n       * @param {analytics(v3).Profile} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n          pathParams: ['accountId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    remarketingAudience: {\n\n      /**\n       * analytics.management.remarketingAudience.delete\n       *\n       * @desc Delete a remarketing audience.\n       *\n       * @alias analytics.management.remarketingAudience.delete\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to which the remarketing audience belongs.\n       * @param {string} params.remarketingAudienceId The ID of the remarketing audience to delete.\n       * @param {string} params.webPropertyId Web property ID to which the remarketing audience belongs.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],\n          pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.remarketingAudience.get\n       *\n       * @desc Gets a remarketing audience to which the user has access.\n       *\n       * @alias analytics.management.remarketingAudience.get\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId The account ID of the remarketing audience to retrieve.\n       * @param {string} params.remarketingAudienceId The ID of the remarketing audience to retrieve.\n       * @param {string} params.webPropertyId The web property ID of the remarketing audience to retrieve.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],\n          pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.remarketingAudience.insert\n       *\n       * @desc Creates a new remarketing audience.\n       *\n       * @alias analytics.management.remarketingAudience.insert\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId The account ID for which to create the remarketing audience.\n       * @param {string} params.webPropertyId Web property ID for which to create the remarketing audience.\n       * @param {analytics(v3).RemarketingAudience} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId'],\n          pathParams: ['accountId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.remarketingAudience.list\n       *\n       * @desc Lists remarketing audiences to which the user has access.\n       *\n       * @alias analytics.management.remarketingAudience.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId The account ID of the remarketing audiences to retrieve.\n       * @param {integer=} params.max-results The maximum number of remarketing audiences to include in this response.\n       * @param {integer=} params.start-index An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {string=} params.type \n       * @param {string} params.webPropertyId The web property ID of the remarketing audiences to retrieve.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId'],\n          pathParams: ['accountId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.remarketingAudience.patch\n       *\n       * @desc Updates an existing remarketing audience. This method supports patch semantics.\n       *\n       * @alias analytics.management.remarketingAudience.patch\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId The account ID of the remarketing audience to update.\n       * @param {string} params.remarketingAudienceId The ID of the remarketing audience to update.\n       * @param {string} params.webPropertyId The web property ID of the remarketing audience to update.\n       * @param {analytics(v3).RemarketingAudience} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],\n          pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.remarketingAudience.update\n       *\n       * @desc Updates an existing remarketing audience.\n       *\n       * @alias analytics.management.remarketingAudience.update\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId The account ID of the remarketing audience to update.\n       * @param {string} params.remarketingAudienceId The ID of the remarketing audience to update.\n       * @param {string} params.webPropertyId The web property ID of the remarketing audience to update.\n       * @param {analytics(v3).RemarketingAudience} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],\n          pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    segments: {\n\n      /**\n       * analytics.management.segments.list\n       *\n       * @desc Lists segments to which the user has access.\n       *\n       * @alias analytics.management.segments.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object=} params Parameters for request\n       * @param {integer=} params.max-results The maximum number of segments to include in this response.\n       * @param {integer=} params.start-index An index of the first segment to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/segments',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    unsampledReports: {\n\n      /**\n       * analytics.management.unsampledReports.delete\n       *\n       * @desc Deletes an unsampled report.\n       *\n       * @alias analytics.management.unsampledReports.delete\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to delete the unsampled report for.\n       * @param {string} params.profileId View (Profile) ID to delete the unsampled report for.\n       * @param {string} params.unsampledReportId ID of the unsampled report to be deleted.\n       * @param {string} params.webPropertyId Web property ID to delete the unsampled reports for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'unsampledReportId'],\n          pathParams: ['accountId', 'profileId', 'unsampledReportId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.unsampledReports.get\n       *\n       * @desc Returns a single unsampled report.\n       *\n       * @alias analytics.management.unsampledReports.get\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to retrieve unsampled report for.\n       * @param {string} params.profileId View (Profile) ID to retrieve unsampled report for.\n       * @param {string} params.unsampledReportId ID of the unsampled report to retrieve.\n       * @param {string} params.webPropertyId Web property ID to retrieve unsampled reports for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId', 'unsampledReportId'],\n          pathParams: ['accountId', 'profileId', 'unsampledReportId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.unsampledReports.insert\n       *\n       * @desc Create a new unsampled report.\n       *\n       * @alias analytics.management.unsampledReports.insert\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to create the unsampled report for.\n       * @param {string} params.profileId View (Profile) ID to create the unsampled report for.\n       * @param {string} params.webPropertyId Web property ID to create the unsampled report for.\n       * @param {analytics(v3).UnsampledReport} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n          pathParams: ['accountId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.unsampledReports.list\n       *\n       * @desc Lists unsampled reports to which the user has access.\n       *\n       * @alias analytics.management.unsampledReports.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to retrieve unsampled reports for. Must be a specific account ID, ~all is not supported.\n       * @param {integer=} params.max-results The maximum number of unsampled reports to include in this response.\n       * @param {string} params.profileId View (Profile) ID to retrieve unsampled reports for. Must be a specific view (profile) ID, ~all is not supported.\n       * @param {integer=} params.start-index An index of the first unsampled report to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {string} params.webPropertyId Web property ID to retrieve unsampled reports for. Must be a specific web property ID, ~all is not supported.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n          pathParams: ['accountId', 'profileId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    uploads: {\n\n      /**\n       * analytics.management.uploads.deleteUploadData\n       *\n       * @desc Delete data associated with a previous upload.\n       *\n       * @alias analytics.management.uploads.deleteUploadData\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account Id for the uploads to be deleted.\n       * @param {string} params.customDataSourceId Custom data source Id for the uploads to be deleted.\n       * @param {string} params.webPropertyId Web property Id for the uploads to be deleted.\n       * @param {analytics(v3).AnalyticsDataimportDeleteUploadDataRequest} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      deleteUploadData: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/deleteUploadData',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId'],\n          pathParams: ['accountId', 'customDataSourceId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.uploads.get\n       *\n       * @desc List uploads to which the user has access.\n       *\n       * @alias analytics.management.uploads.get\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account Id for the upload to retrieve.\n       * @param {string} params.customDataSourceId Custom data source Id for upload to retrieve.\n       * @param {string} params.uploadId Upload Id to retrieve.\n       * @param {string} params.webPropertyId Web property Id for the upload to retrieve.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads/{uploadId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId', 'uploadId'],\n          pathParams: ['accountId', 'customDataSourceId', 'uploadId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.uploads.list\n       *\n       * @desc List uploads to which the user has access.\n       *\n       * @alias analytics.management.uploads.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account Id for the uploads to retrieve.\n       * @param {string} params.customDataSourceId Custom data source Id for uploads to retrieve.\n       * @param {integer=} params.max-results The maximum number of uploads to include in this response.\n       * @param {integer=} params.start-index A 1-based index of the first upload to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {string} params.webPropertyId Web property Id for the uploads to retrieve.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId'],\n          pathParams: ['accountId', 'customDataSourceId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.uploads.uploadData\n       *\n       * @desc Upload data for a custom data source.\n       *\n       * @alias analytics.management.uploads.uploadData\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account Id associated with the upload.\n       * @param {string} params.customDataSourceId Custom data source Id to which the data being uploaded belongs.\n       * @param {string} params.webPropertyId Web property UA-string associated with the upload.\n       * @param {object} params.media Media object\n       * @param {string} params.media.mimeType Media mime-type\n       * @param {string|object} params.media.body Media body contents\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      uploadData: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads',\n            method: 'POST'\n          }, options),\n          params: params,\n          mediaUrl: 'https://www.googleapis.com/upload/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads',\n          requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId'],\n          pathParams: ['accountId', 'customDataSourceId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    webPropertyAdWordsLinks: {\n\n      /**\n       * analytics.management.webPropertyAdWordsLinks.delete\n       *\n       * @desc Deletes a web property-AdWords link.\n       *\n       * @alias analytics.management.webPropertyAdWordsLinks.delete\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId ID of the account which the given web property belongs to.\n       * @param {string} params.webPropertyAdWordsLinkId Web property AdWords link ID.\n       * @param {string} params.webPropertyId Web property ID to delete the AdWords link for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'webPropertyAdWordsLinkId'],\n          pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.webPropertyAdWordsLinks.get\n       *\n       * @desc Returns a web property-AdWords link to which the user has access.\n       *\n       * @alias analytics.management.webPropertyAdWordsLinks.get\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId ID of the account which the given web property belongs to.\n       * @param {string} params.webPropertyAdWordsLinkId Web property-AdWords link ID.\n       * @param {string} params.webPropertyId Web property ID to retrieve the AdWords link for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'webPropertyAdWordsLinkId'],\n          pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.webPropertyAdWordsLinks.insert\n       *\n       * @desc Creates a webProperty-AdWords link.\n       *\n       * @alias analytics.management.webPropertyAdWordsLinks.insert\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId ID of the Google Analytics account to create the link for.\n       * @param {string} params.webPropertyId Web property ID to create the link for.\n       * @param {analytics(v3).EntityAdWordsLink} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId'],\n          pathParams: ['accountId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.webPropertyAdWordsLinks.list\n       *\n       * @desc Lists webProperty-AdWords links for a given web property.\n       *\n       * @alias analytics.management.webPropertyAdWordsLinks.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId ID of the account which the given web property belongs to.\n       * @param {integer=} params.max-results The maximum number of webProperty-AdWords links to include in this response.\n       * @param {integer=} params.start-index An index of the first webProperty-AdWords link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {string} params.webPropertyId Web property ID to retrieve the AdWords links for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId'],\n          pathParams: ['accountId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.webPropertyAdWordsLinks.patch\n       *\n       * @desc Updates an existing webProperty-AdWords link. This method supports patch semantics.\n       *\n       * @alias analytics.management.webPropertyAdWordsLinks.patch\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId ID of the account which the given web property belongs to.\n       * @param {string} params.webPropertyAdWordsLinkId Web property-AdWords link ID.\n       * @param {string} params.webPropertyId Web property ID to retrieve the AdWords link for.\n       * @param {analytics(v3).EntityAdWordsLink} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'webPropertyAdWordsLinkId'],\n          pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.webPropertyAdWordsLinks.update\n       *\n       * @desc Updates an existing webProperty-AdWords link.\n       *\n       * @alias analytics.management.webPropertyAdWordsLinks.update\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId ID of the account which the given web property belongs to.\n       * @param {string} params.webPropertyAdWordsLinkId Web property-AdWords link ID.\n       * @param {string} params.webPropertyId Web property ID to retrieve the AdWords link for.\n       * @param {analytics(v3).EntityAdWordsLink} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'webPropertyAdWordsLinkId'],\n          pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    webproperties: {\n\n      /**\n       * analytics.management.webproperties.get\n       *\n       * @desc Gets a web property to which the user has access.\n       *\n       * @alias analytics.management.webproperties.get\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to retrieve the web property for.\n       * @param {string} params.webPropertyId ID to retrieve the web property for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId'],\n          pathParams: ['accountId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.webproperties.insert\n       *\n       * @desc Create a new property if the account has fewer than 20 properties. Web properties are visible in the Google Analytics interface only if they have at least one profile.\n       *\n       * @alias analytics.management.webproperties.insert\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to create the web property for.\n       * @param {analytics(v3).Webproperty} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.webproperties.list\n       *\n       * @desc Lists web properties to which the user has access.\n       *\n       * @alias analytics.management.webproperties.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to retrieve web properties for. Can either be a specific account ID or '~all', which refers to all the accounts that user has access to.\n       * @param {integer=} params.max-results The maximum number of web properties to include in this response.\n       * @param {integer=} params.start-index An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId'],\n          pathParams: ['accountId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.webproperties.patch\n       *\n       * @desc Updates an existing web property. This method supports patch semantics.\n       *\n       * @alias analytics.management.webproperties.patch\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to which the web property belongs\n       * @param {string} params.webPropertyId Web property ID\n       * @param {analytics(v3).Webproperty} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId'],\n          pathParams: ['accountId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.webproperties.update\n       *\n       * @desc Updates an existing web property.\n       *\n       * @alias analytics.management.webproperties.update\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to which the web property belongs\n       * @param {string} params.webPropertyId Web property ID\n       * @param {analytics(v3).Webproperty} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId'],\n          pathParams: ['accountId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    webpropertyUserLinks: {\n\n      /**\n       * analytics.management.webpropertyUserLinks.delete\n       *\n       * @desc Removes a user from the given web property.\n       *\n       * @alias analytics.management.webpropertyUserLinks.delete\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to delete the user link for.\n       * @param {string} params.linkId Link ID to delete the user link for.\n       * @param {string} params.webPropertyId Web Property ID to delete the user link for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'linkId'],\n          pathParams: ['accountId', 'linkId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.webpropertyUserLinks.insert\n       *\n       * @desc Adds a new user to the given web property.\n       *\n       * @alias analytics.management.webpropertyUserLinks.insert\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to create the user link for.\n       * @param {string} params.webPropertyId Web Property ID to create the user link for.\n       * @param {analytics(v3).EntityUserLink} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      insert: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId'],\n          pathParams: ['accountId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.webpropertyUserLinks.list\n       *\n       * @desc Lists webProperty-user links for a given web property.\n       *\n       * @alias analytics.management.webpropertyUserLinks.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID which the given web property belongs to.\n       * @param {integer=} params.max-results The maximum number of webProperty-user Links to include in this response.\n       * @param {integer=} params.start-index An index of the first webProperty-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.\n       * @param {string} params.webPropertyId Web Property ID for the webProperty-user links to retrieve. Can either be a specific web property ID or '~all', which refers to all the web properties that user has access to.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId'],\n          pathParams: ['accountId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * analytics.management.webpropertyUserLinks.update\n       *\n       * @desc Updates permissions for an existing user on the given web property.\n       *\n       * @alias analytics.management.webpropertyUserLinks.update\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.accountId Account ID to update the account-user link for.\n       * @param {string} params.linkId Link ID to update the account-user link for.\n       * @param {string} params.webPropertyId Web property ID to update the account-user link for.\n       * @param {analytics(v3).EntityUserLink} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['accountId', 'webPropertyId', 'linkId'],\n          pathParams: ['accountId', 'linkId', 'webPropertyId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n\n  self.metadata = {\n\n    columns: {\n\n      /**\n       * analytics.metadata.columns.list\n       *\n       * @desc Lists all columns for a report type\n       *\n       * @alias analytics.metadata.columns.list\n       * @memberOf! analytics(v3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.reportType Report type. Allowed Values: 'ga'. Where 'ga' corresponds to the Core Reporting API\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/analytics/v3/metadata/{reportType}/columns',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['reportType'],\n          pathParams: ['reportType'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n\n  self.provisioning = {\n\n    /**\n     * analytics.provisioning.createAccountTicket\n     *\n     * @desc Creates an account ticket.\n     *\n     * @alias analytics.provisioning.createAccountTicket\n     * @memberOf! analytics(v3)\n     *\n     * @param {object} params Parameters for request\n     * @param {analytics(v3).AccountTicket} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    createAccountTicket: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/analytics/v3/provisioning/createAccountTicket',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef Account\n * @memberOf! analytics(v3)\n * @type object\n * @property {object} childLink Child link for an account entry. Points to the list of web properties for this account.\n * @property {string} created Time the account was created.\n * @property {string} id Account ID.\n * @property {string} kind Resource type for Analytics account.\n * @property {string} name Account name.\n * @property {object} permissions Permissions the user has for this account.\n * @property {string} selfLink Link for this account.\n * @property {boolean} starred Indicates whether this account is starred or not.\n * @property {string} updated Time the account was last modified.\n */\n/**\n * @typedef AccountRef\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} href Link for this account.\n * @property {string} id Account ID.\n * @property {string} kind Analytics account reference.\n * @property {string} name Account name.\n */\n/**\n * @typedef AccountSummaries\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).AccountSummary[]} items A list of AccountSummaries.\n * @property {integer} itemsPerPage The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Collection type.\n * @property {string} nextLink Link to next page for this AccountSummary collection.\n * @property {string} previousLink Link to previous page for this AccountSummary collection.\n * @property {integer} startIndex The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.\n * @property {integer} totalResults The total number of results for the query, regardless of the number of results in the response.\n * @property {string} username Email ID of the authenticated user\n */\n/**\n * @typedef AccountSummary\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} id Account ID.\n * @property {string} kind Resource type for Analytics AccountSummary.\n * @property {string} name Account name.\n * @property {boolean} starred Indicates whether this account is starred or not.\n * @property {analytics(v3).WebPropertySummary[]} webProperties List of web properties under this account.\n */\n/**\n * @typedef AccountTicket\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).Account} account Account for this ticket.\n * @property {string} id Account ticket ID used to access the account ticket.\n * @property {string} kind Resource type for account ticket.\n * @property {analytics(v3).Profile} profile View (Profile) for the account.\n * @property {string} redirectUri Redirect URI where the user will be sent after accepting Terms of Service. Must be configured in APIs console as a callback URL.\n * @property {analytics(v3).Webproperty} webproperty Web property for the account.\n */\n/**\n * @typedef Accounts\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).Account[]} items A list of accounts.\n * @property {integer} itemsPerPage The maximum number of entries the response can contain, regardless of the actual number of entries returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Collection type.\n * @property {string} nextLink Next link for this account collection.\n * @property {string} previousLink Previous link for this account collection.\n * @property {integer} startIndex The starting index of the entries, which is 1 by default or otherwise specified by the start-index query parameter.\n * @property {integer} totalResults The total number of results for the query, regardless of the number of results in the response.\n * @property {string} username Email ID of the authenticated user\n */\n/**\n * @typedef AdWordsAccount\n * @memberOf! analytics(v3)\n * @type object\n * @property {boolean} autoTaggingEnabled True if auto-tagging is enabled on the AdWords account. Read-only after the insert operation.\n * @property {string} customerId Customer ID. This field is required when creating an AdWords link.\n * @property {string} kind Resource type for AdWords account.\n */\n/**\n * @typedef AnalyticsDataimportDeleteUploadDataRequest\n * @memberOf! analytics(v3)\n * @type object\n * @property {string[]} customDataImportUids A list of upload UIDs.\n */\n/**\n * @typedef Column\n * @memberOf! analytics(v3)\n * @type object\n * @property {object} attributes Map of attribute name and value for this column.\n * @property {string} id Column id.\n * @property {string} kind Resource type for Analytics column.\n */\n/**\n * @typedef Columns\n * @memberOf! analytics(v3)\n * @type object\n * @property {string[]} attributeNames List of attributes names returned by columns.\n * @property {string} etag Etag of collection. This etag can be compared with the last response etag to check if response has changed.\n * @property {analytics(v3).Column[]} items List of columns for a report type.\n * @property {string} kind Collection type.\n * @property {integer} totalResults Total number of columns returned in the response.\n */\n/**\n * @typedef CustomDataSource\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} accountId Account ID to which this custom data source belongs.\n * @property {object} childLink \n * @property {string} created Time this custom data source was created.\n * @property {string} description Description of custom data source.\n * @property {string} id Custom data source ID.\n * @property {string} importBehavior \n * @property {string} kind Resource type for Analytics custom data source.\n * @property {string} name Name of this custom data source.\n * @property {object} parentLink Parent link for this custom data source. Points to the web property to which this custom data source belongs.\n * @property {string[]} profilesLinked IDs of views (profiles) linked to the custom data source.\n * @property {string} selfLink Link for this Analytics custom data source.\n * @property {string} type Type of the custom data source.\n * @property {string} updated Time this custom data source was last modified.\n * @property {string} uploadType \n * @property {string} webPropertyId Web property ID of the form UA-XXXXX-YY to which this custom data source belongs.\n */\n/**\n * @typedef CustomDataSources\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).CustomDataSource[]} items Collection of custom data sources.\n * @property {integer} itemsPerPage The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Collection type.\n * @property {string} nextLink Link to next page for this custom data source collection.\n * @property {string} previousLink Link to previous page for this custom data source collection.\n * @property {integer} startIndex The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.\n * @property {integer} totalResults The total number of results for the query, regardless of the number of results in the response.\n * @property {string} username Email ID of the authenticated user\n */\n/**\n * @typedef CustomDimension\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} accountId Account ID.\n * @property {boolean} active Boolean indicating whether the custom dimension is active.\n * @property {string} created Time the custom dimension was created.\n * @property {string} id Custom dimension ID.\n * @property {integer} index Index of the custom dimension.\n * @property {string} kind Kind value for a custom dimension. Set to &quot;analytics#customDimension&quot;. It is a read-only field.\n * @property {string} name Name of the custom dimension.\n * @property {object} parentLink Parent link for the custom dimension. Points to the property to which the custom dimension belongs.\n * @property {string} scope Scope of the custom dimension: HIT, SESSION, USER or PRODUCT.\n * @property {string} selfLink Link for the custom dimension\n * @property {string} updated Time the custom dimension was last modified.\n * @property {string} webPropertyId Property ID.\n */\n/**\n * @typedef CustomDimensions\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).CustomDimension[]} items Collection of custom dimensions.\n * @property {integer} itemsPerPage The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Collection type.\n * @property {string} nextLink Link to next page for this custom dimension collection.\n * @property {string} previousLink Link to previous page for this custom dimension collection.\n * @property {integer} startIndex The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.\n * @property {integer} totalResults The total number of results for the query, regardless of the number of results in the response.\n * @property {string} username Email ID of the authenticated user\n */\n/**\n * @typedef CustomMetric\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} accountId Account ID.\n * @property {boolean} active Boolean indicating whether the custom metric is active.\n * @property {string} created Time the custom metric was created.\n * @property {string} id Custom metric ID.\n * @property {integer} index Index of the custom metric.\n * @property {string} kind Kind value for a custom metric. Set to &quot;analytics#customMetric&quot;. It is a read-only field.\n * @property {string} max_value Max value of custom metric.\n * @property {string} min_value Min value of custom metric.\n * @property {string} name Name of the custom metric.\n * @property {object} parentLink Parent link for the custom metric. Points to the property to which the custom metric belongs.\n * @property {string} scope Scope of the custom metric: HIT or PRODUCT.\n * @property {string} selfLink Link for the custom metric\n * @property {string} type Data type of custom metric.\n * @property {string} updated Time the custom metric was last modified.\n * @property {string} webPropertyId Property ID.\n */\n/**\n * @typedef CustomMetrics\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).CustomMetric[]} items Collection of custom metrics.\n * @property {integer} itemsPerPage The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Collection type.\n * @property {string} nextLink Link to next page for this custom metric collection.\n * @property {string} previousLink Link to previous page for this custom metric collection.\n * @property {integer} startIndex The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.\n * @property {integer} totalResults The total number of results for the query, regardless of the number of results in the response.\n * @property {string} username Email ID of the authenticated user\n */\n/**\n * @typedef EntityAdWordsLink\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).AdWordsAccount[]} adWordsAccounts A list of AdWords client accounts. These cannot be MCC accounts. This field is required when creating an AdWords link. It cannot be empty.\n * @property {object} entity Web property being linked.\n * @property {string} id Entity AdWords link ID\n * @property {string} kind Resource type for entity AdWords link.\n * @property {string} name Name of the link. This field is required when creating an AdWords link.\n * @property {string[]} profileIds IDs of linked Views (Profiles) represented as strings.\n * @property {string} selfLink URL link for this Google Analytics - Google AdWords link.\n */\n/**\n * @typedef EntityAdWordsLinks\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).EntityAdWordsLink[]} items A list of entity AdWords links.\n * @property {integer} itemsPerPage The maximum number of entries the response can contain, regardless of the actual number of entries returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Collection type.\n * @property {string} nextLink Next link for this AdWords link collection.\n * @property {string} previousLink Previous link for this AdWords link collection.\n * @property {integer} startIndex The starting index of the entries, which is 1 by default or otherwise specified by the start-index query parameter.\n * @property {integer} totalResults The total number of results for the query, regardless of the number of results in the response.\n */\n/**\n * @typedef EntityUserLink\n * @memberOf! analytics(v3)\n * @type object\n * @property {object} entity Entity for this link. It can be an account, a web property, or a view (profile).\n * @property {string} id Entity user link ID\n * @property {string} kind Resource type for entity user link.\n * @property {object} permissions Permissions the user has for this entity.\n * @property {string} selfLink Self link for this resource.\n * @property {analytics(v3).UserRef} userRef User reference.\n */\n/**\n * @typedef EntityUserLinks\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).EntityUserLink[]} items A list of entity user links.\n * @property {integer} itemsPerPage The maximum number of entries the response can contain, regardless of the actual number of entries returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Collection type.\n * @property {string} nextLink Next link for this account collection.\n * @property {string} previousLink Previous link for this account collection.\n * @property {integer} startIndex The starting index of the entries, which is 1 by default or otherwise specified by the start-index query parameter.\n * @property {integer} totalResults The total number of results for the query, regardless of the number of results in the response.\n */\n/**\n * @typedef Experiment\n * @memberOf! analytics(v3)\n * @type object\n* @property {string} accountId Account ID to which this experiment belongs. This field is read-only.\n* @property {string} created Time the experiment was created. This field is read-only.\n* @property {string} description Notes about this experiment.\n* @property {boolean} editableInGaUi If true, the end user will be able to edit the experiment via the Google Analytics user interface.\n* @property {string} endTime The ending time of the experiment (the time the status changed from RUNNING to ENDED). This field is present only if the experiment has ended. This field is read-only.\n* @property {boolean} equalWeighting Boolean specifying whether to distribute traffic evenly across all variations. If the value is False, content experiments follows the default behavior of adjusting traffic dynamically based on variation performance. Optional -- defaults to False. This field may not be changed for an experiment whose status is ENDED.\n* @property {string} id Experiment ID. Required for patch and update. Disallowed for create.\n* @property {string} internalWebPropertyId Internal ID for the web property to which this experiment belongs. This field is read-only.\n* @property {string} kind Resource type for an Analytics experiment. This field is read-only.\n* @property {integer} minimumExperimentLengthInDays An integer number in [3, 90]. Specifies the minimum length of the experiment. Can be changed for a running experiment. This field may not be changed for an experiments whose status is ENDED.\n* @property {string} name Experiment name. This field may not be changed for an experiment whose status is ENDED. This field is required when creating an experiment.\n* @property {string} objectiveMetric The metric that the experiment is optimizing. Valid values: &quot;ga:goal(n)Completions&quot;, &quot;ga:adsenseAdsClicks&quot;, &quot;ga:adsenseAdsViewed&quot;, &quot;ga:adsenseRevenue&quot;, &quot;ga:bounces&quot;, &quot;ga:pageviews&quot;, &quot;ga:sessionDuration&quot;, &quot;ga:transactions&quot;, &quot;ga:transactionRevenue&quot;. This field is required if status is &quot;RUNNING&quot; and servingFramework is one of &quot;REDIRECT&quot; or &quot;API&quot;.\n* @property {string} optimizationType Whether the objectiveMetric should be minimized or maximized. Possible values: &quot;MAXIMUM&quot;, &quot;MINIMUM&quot;. Optional--defaults to &quot;MAXIMUM&quot;. Cannot be specified without objectiveMetric. Cannot be modified when status is &quot;RUNNING&quot; or &quot;ENDED&quot;.\n* @property {object} parentLink Parent link for an experiment. Points to the view (profile) to which this experiment belongs.\n* @property {string} profileId View (Profile) ID to which this experiment belongs. This field is read-only.\n* @property {string} reasonExperimentEnded Why the experiment ended. Possible values: &quot;STOPPED_BY_USER&quot;, &quot;WINNER_FOUND&quot;, &quot;EXPERIMENT_EXPIRED&quot;, &quot;ENDED_WITH_NO_WINNER&quot;, &quot;GOAL_OBJECTIVE_CHANGED&quot;. &quot;ENDED_WITH_NO_WINNER&quot; means that the experiment didn&#39;t expire but no winner was projected to be found. If the experiment status is changed via the API to ENDED this field is set to STOPPED_BY_USER. This field is read-only.\n* @property {boolean} rewriteVariationUrlsAsOriginal Boolean specifying whether variations URLS are rewritten to match those of the original. This field may not be changed for an experiments whose status is ENDED.\n* @property {string} selfLink Link for this experiment. This field is read-only.\n* @property {string} servingFramework The framework used to serve the experiment variations and evaluate the results. One of:  \n- REDIRECT: Google Analytics redirects traffic to different variation pages, reports the chosen variation and evaluates the results.\n- API: Google Analytics chooses and reports the variation to serve and evaluates the results; the caller is responsible for serving the selected variation.\n- EXTERNAL: The variations will be served externally and the chosen variation reported to Google Analytics. The caller is responsible for serving the selected variation and evaluating the results.\n* @property {string} snippet The snippet of code to include on the control page(s). This field is read-only.\n* @property {string} startTime The starting time of the experiment (the time the status changed from READY_TO_RUN to RUNNING). This field is present only if the experiment has started. This field is read-only.\n* @property {string} status Experiment status. Possible values: &quot;DRAFT&quot;, &quot;READY_TO_RUN&quot;, &quot;RUNNING&quot;, &quot;ENDED&quot;. Experiments can be created in the &quot;DRAFT&quot;, &quot;READY_TO_RUN&quot; or &quot;RUNNING&quot; state. This field is required when creating an experiment.\n* @property {number} trafficCoverage A floating-point number in (0, 1]. Specifies the fraction of the traffic that participates in the experiment. Can be changed for a running experiment. This field may not be changed for an experiments whose status is ENDED.\n* @property {string} updated Time the experiment was last modified. This field is read-only.\n* @property {object[]} variations Array of variations. The first variation in the array is the original. The number of variations may not change once an experiment is in the RUNNING state. At least two variations are required before status can be set to RUNNING.\n* @property {string} webPropertyId Web property ID to which this experiment belongs. The web property ID is of the form UA-XXXXX-YY. This field is read-only.\n* @property {number} winnerConfidenceLevel A floating-point number in (0, 1). Specifies the necessary confidence level to choose a winner. This field may not be changed for an experiments whose status is ENDED.\n* @property {boolean} winnerFound Boolean specifying whether a winner has been found for this experiment. This field is read-only.\n*/\n/**\n * @typedef Experiments\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).Experiment[]} items A list of experiments.\n * @property {integer} itemsPerPage The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Collection type.\n * @property {string} nextLink Link to next page for this experiment collection.\n * @property {string} previousLink Link to previous page for this experiment collection.\n * @property {integer} startIndex The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.\n * @property {integer} totalResults The total number of results for the query, regardless of the number of resources in the result.\n * @property {string} username Email ID of the authenticated user\n */\n/**\n * @typedef Filter\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} accountId Account ID to which this filter belongs.\n * @property {object} advancedDetails Details for the filter of the type ADVANCED.\n * @property {string} created Time this filter was created.\n * @property {analytics(v3).FilterExpression} excludeDetails Details for the filter of the type EXCLUDE.\n * @property {string} id Filter ID.\n * @property {analytics(v3).FilterExpression} includeDetails Details for the filter of the type INCLUDE.\n * @property {string} kind Resource type for Analytics filter.\n * @property {object} lowercaseDetails Details for the filter of the type LOWER.\n * @property {string} name Name of this filter.\n * @property {object} parentLink Parent link for this filter. Points to the account to which this filter belongs.\n * @property {object} searchAndReplaceDetails Details for the filter of the type SEARCH_AND_REPLACE.\n * @property {string} selfLink Link for this filter.\n * @property {string} type Type of this filter. Possible values are INCLUDE, EXCLUDE, LOWERCASE, UPPERCASE, SEARCH_AND_REPLACE and ADVANCED.\n * @property {string} updated Time this filter was last modified.\n * @property {object} uppercaseDetails Details for the filter of the type UPPER.\n */\n/**\n * @typedef FilterExpression\n * @memberOf! analytics(v3)\n * @type object\n* @property {boolean} caseSensitive Determines if the filter is case sensitive.\n* @property {string} expressionValue Filter expression value\n* @property {string} field Field to filter. Possible values:  \n- Content and Traffic  \n- PAGE_REQUEST_URI, \n- PAGE_HOSTNAME, \n- PAGE_TITLE, \n- REFERRAL, \n- COST_DATA_URI (Campaign target URL), \n- HIT_TYPE, \n- INTERNAL_SEARCH_TERM, \n- INTERNAL_SEARCH_TYPE, \n- SOURCE_PROPERTY_TRACKING_ID,   \n- Campaign or AdGroup  \n- CAMPAIGN_SOURCE, \n- CAMPAIGN_MEDIUM, \n- CAMPAIGN_NAME, \n- CAMPAIGN_AD_GROUP, \n- CAMPAIGN_TERM, \n- CAMPAIGN_CONTENT, \n- CAMPAIGN_CODE, \n- CAMPAIGN_REFERRAL_PATH,   \n- E-Commerce  \n- TRANSACTION_COUNTRY, \n- TRANSACTION_REGION, \n- TRANSACTION_CITY, \n- TRANSACTION_AFFILIATION (Store or order location), \n- ITEM_NAME, \n- ITEM_CODE, \n- ITEM_VARIATION, \n- TRANSACTION_ID, \n- TRANSACTION_CURRENCY_CODE, \n- PRODUCT_ACTION_TYPE,   \n- Audience/Users  \n- BROWSER, \n- BROWSER_VERSION, \n- BROWSER_SIZE, \n- PLATFORM, \n- PLATFORM_VERSION, \n- LANGUAGE, \n- SCREEN_RESOLUTION, \n- SCREEN_COLORS, \n- JAVA_ENABLED (Boolean Field), \n- FLASH_VERSION, \n- GEO_SPEED (Connection speed), \n- VISITOR_TYPE, \n- GEO_ORGANIZATION (ISP organization), \n- GEO_DOMAIN, \n- GEO_IP_ADDRESS, \n- GEO_IP_VERSION,   \n- Location  \n- GEO_COUNTRY, \n- GEO_REGION, \n- GEO_CITY,   \n- Event  \n- EVENT_CATEGORY, \n- EVENT_ACTION, \n- EVENT_LABEL,   \n- Other  \n- CUSTOM_FIELD_1, \n- CUSTOM_FIELD_2, \n- USER_DEFINED_VALUE,   \n- Application  \n- APP_ID, \n- APP_INSTALLER_ID, \n- APP_NAME, \n- APP_VERSION, \n- SCREEN, \n- IS_APP (Boolean Field), \n- IS_FATAL_EXCEPTION (Boolean Field), \n- EXCEPTION_DESCRIPTION,   \n- Mobile device  \n- IS_MOBILE (Boolean Field, Deprecated. Use DEVICE_CATEGORY=mobile), \n- IS_TABLET (Boolean Field, Deprecated. Use DEVICE_CATEGORY=tablet), \n- DEVICE_CATEGORY, \n- MOBILE_HAS_QWERTY_KEYBOARD (Boolean Field), \n- MOBILE_HAS_NFC_SUPPORT (Boolean Field), \n- MOBILE_HAS_CELLULAR_RADIO (Boolean Field), \n- MOBILE_HAS_WIFI_SUPPORT (Boolean Field), \n- MOBILE_BRAND_NAME, \n- MOBILE_MODEL_NAME, \n- MOBILE_MARKETING_NAME, \n- MOBILE_POINTING_METHOD,   \n- Social  \n- SOCIAL_NETWORK, \n- SOCIAL_ACTION, \n- SOCIAL_ACTION_TARGET,   \n- Custom dimension  \n- CUSTOM_DIMENSION (See accompanying field index),\n* @property {integer} fieldIndex The Index of the custom dimension. Set only if the field is a is CUSTOM_DIMENSION.\n* @property {string} kind Kind value for filter expression\n* @property {string} matchType Match type for this filter. Possible values are BEGINS_WITH, EQUAL, ENDS_WITH, CONTAINS, or MATCHES. GEO_DOMAIN, GEO_IP_ADDRESS, PAGE_REQUEST_URI, or PAGE_HOSTNAME filters can use any match type; all other filters must use MATCHES.\n*/\n/**\n * @typedef FilterRef\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} accountId Account ID to which this filter belongs.\n * @property {string} href Link for this filter.\n * @property {string} id Filter ID.\n * @property {string} kind Kind value for filter reference.\n * @property {string} name Name of this filter.\n */\n/**\n * @typedef Filters\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).Filter[]} items A list of filters.\n * @property {integer} itemsPerPage The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1,000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Collection type.\n * @property {string} nextLink Link to next page for this filter collection.\n * @property {string} previousLink Link to previous page for this filter collection.\n * @property {integer} startIndex The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.\n * @property {integer} totalResults The total number of results for the query, regardless of the number of results in the response.\n * @property {string} username Email ID of the authenticated user\n */\n/**\n * @typedef GaData\n * @memberOf! analytics(v3)\n * @type object\n * @property {object[]} columnHeaders Column headers that list dimension names followed by the metric names. The order of dimensions and metrics is same as specified in the request.\n * @property {boolean} containsSampledData Determines if Analytics data contains samples.\n * @property {string} dataLastRefreshed The last refreshed time in seconds for Analytics data.\n * @property {object} dataTable \n * @property {string} id Unique ID for this data response.\n * @property {integer} itemsPerPage The maximum number of rows the response can contain, regardless of the actual number of rows returned. Its value ranges from 1 to 10,000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Resource type.\n * @property {string} nextLink Link to next page for this Analytics data query.\n * @property {string} previousLink Link to previous page for this Analytics data query.\n * @property {object} profileInfo Information for the view (profile), for which the Analytics data was requested.\n * @property {object} query Analytics data request query parameters.\n * @property {array[]} rows Analytics data rows, where each row contains a list of dimension values followed by the metric values. The order of dimensions and metrics is same as specified in the request.\n * @property {string} sampleSize The number of samples used to calculate the result.\n * @property {string} sampleSpace Total size of the sample space from which the samples were selected.\n * @property {string} selfLink Link to this page.\n * @property {integer} totalResults The total number of rows for the query, regardless of the number of rows in the response.\n * @property {object} totalsForAllResults Total values for the requested metrics over all the results, not just the results returned in this response. The order of the metric totals is same as the metric order specified in the request.\n */\n/**\n * @typedef Goal\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} accountId Account ID to which this goal belongs.\n * @property {boolean} active Determines whether this goal is active.\n * @property {string} created Time this goal was created.\n * @property {object} eventDetails Details for the goal of the type EVENT.\n * @property {string} id Goal ID.\n * @property {string} internalWebPropertyId Internal ID for the web property to which this goal belongs.\n * @property {string} kind Resource type for an Analytics goal.\n * @property {string} name Goal name.\n * @property {object} parentLink Parent link for a goal. Points to the view (profile) to which this goal belongs.\n * @property {string} profileId View (Profile) ID to which this goal belongs.\n * @property {string} selfLink Link for this goal.\n * @property {string} type Goal type. Possible values are URL_DESTINATION, VISIT_TIME_ON_SITE, VISIT_NUM_PAGES, AND EVENT.\n * @property {string} updated Time this goal was last modified.\n * @property {object} urlDestinationDetails Details for the goal of the type URL_DESTINATION.\n * @property {number} value Goal value.\n * @property {object} visitNumPagesDetails Details for the goal of the type VISIT_NUM_PAGES.\n * @property {object} visitTimeOnSiteDetails Details for the goal of the type VISIT_TIME_ON_SITE.\n * @property {string} webPropertyId Web property ID to which this goal belongs. The web property ID is of the form UA-XXXXX-YY.\n */\n/**\n * @typedef Goals\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).Goal[]} items A list of goals.\n * @property {integer} itemsPerPage The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Collection type.\n * @property {string} nextLink Link to next page for this goal collection.\n * @property {string} previousLink Link to previous page for this goal collection.\n * @property {integer} startIndex The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.\n * @property {integer} totalResults The total number of results for the query, regardless of the number of resources in the result.\n * @property {string} username Email ID of the authenticated user\n */\n/**\n * @typedef IncludeConditions\n * @memberOf! analytics(v3)\n * @type object\n * @property {integer} daysToLookBack The look-back window lets you specify a time frame for evaluating the behavior that qualifies users for your audience. For example, if your filters include users from Central Asia, and Transactions Greater than 2, and you set the look-back window to 14 days, then any user from Central Asia whose cumulative transactions exceed 2 during the last 14 days is added to the audience.\n * @property {boolean} isSmartList Boolean indicating whether this segment is a smart list. https://support.google.com/analytics/answer/4628577\n * @property {string} kind Resource type for include conditions.\n * @property {integer} membershipDurationDays Number of days (in the range 1 to 540) a user remains in the audience.\n * @property {string} segment The segment condition that will cause a user to be added to an audience.\n */\n/**\n * @typedef LinkedForeignAccount\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} accountId Account ID to which this linked foreign account belongs.\n * @property {boolean} eligibleForSearch Boolean indicating whether this is eligible for search.\n * @property {string} id Entity ad account link ID.\n * @property {string} internalWebPropertyId Internal ID for the web property to which this linked foreign account belongs.\n * @property {string} kind Resource type for linked foreign account.\n * @property {string} linkedAccountId The foreign account ID. For example the an AdWords `linkedAccountId` has the following format XXX-XXX-XXXX.\n * @property {string} remarketingAudienceId Remarketing audience ID to which this linked foreign account belongs.\n * @property {string} status The status of this foreign account link.\n * @property {string} type The type of the foreign account. For example `ADWORDS_LINKS`.\n * @property {string} webPropertyId Web property ID of the form UA-XXXXX-YY to which this linked foreign account belongs.\n */\n/**\n * @typedef McfData\n * @memberOf! analytics(v3)\n * @type object\n * @property {object[]} columnHeaders Column headers that list dimension names followed by the metric names. The order of dimensions and metrics is same as specified in the request.\n * @property {boolean} containsSampledData Determines if the Analytics data contains sampled data.\n * @property {string} id Unique ID for this data response.\n * @property {integer} itemsPerPage The maximum number of rows the response can contain, regardless of the actual number of rows returned. Its value ranges from 1 to 10,000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Resource type.\n * @property {string} nextLink Link to next page for this Analytics data query.\n * @property {string} previousLink Link to previous page for this Analytics data query.\n * @property {object} profileInfo Information for the view (profile), for which the Analytics data was requested.\n * @property {object} query Analytics data request query parameters.\n * @property {array[]} rows Analytics data rows, where each row contains a list of dimension values followed by the metric values. The order of dimensions and metrics is same as specified in the request.\n * @property {string} sampleSize The number of samples used to calculate the result.\n * @property {string} sampleSpace Total size of the sample space from which the samples were selected.\n * @property {string} selfLink Link to this page.\n * @property {integer} totalResults The total number of rows for the query, regardless of the number of rows in the response.\n * @property {object} totalsForAllResults Total values for the requested metrics over all the results, not just the results returned in this response. The order of the metric totals is same as the metric order specified in the request.\n */\n/**\n * @typedef Profile\n * @memberOf! analytics(v3)\n * @type object\n* @property {string} accountId Account ID to which this view (profile) belongs.\n* @property {boolean} botFilteringEnabled Indicates whether bot filtering is enabled for this view (profile).\n* @property {object} childLink Child link for this view (profile). Points to the list of goals for this view (profile).\n* @property {string} created Time this view (profile) was created.\n* @property {string} currency The currency type associated with this view (profile), defaults to USD. The supported values are:\nUSD, JPY, EUR, GBP, AUD, KRW, BRL, CNY, DKK, RUB, SEK, NOK, PLN, TRY, TWD, HKD, THB, IDR, ARS, MXN, VND, PHP, INR, CHF, CAD, CZK, NZD, HUF, BGN, LTL, ZAR, UAH, AED, BOB, CLP, COP, EGP, HRK, ILS, MAD, MYR, PEN, PKR, RON, RSD, SAR, SGD, VEF, LVL\n* @property {string} defaultPage Default page for this view (profile).\n* @property {boolean} eCommerceTracking Indicates whether ecommerce tracking is enabled for this view (profile).\n* @property {boolean} enhancedECommerceTracking Indicates whether enhanced ecommerce tracking is enabled for this view (profile). This property can only be enabled if ecommerce tracking is enabled.\n* @property {string} excludeQueryParameters The query parameters that are excluded from this view (profile).\n* @property {string} id View (Profile) ID.\n* @property {string} internalWebPropertyId Internal ID for the web property to which this view (profile) belongs.\n* @property {string} kind Resource type for Analytics view (profile).\n* @property {string} name Name of this view (profile).\n* @property {object} parentLink Parent link for this view (profile). Points to the web property to which this view (profile) belongs.\n* @property {object} permissions Permissions the user has for this view (profile).\n* @property {string} selfLink Link for this view (profile).\n* @property {string} siteSearchCategoryParameters Site search category parameters for this view (profile).\n* @property {string} siteSearchQueryParameters The site search query parameters for this view (profile).\n* @property {boolean} starred Indicates whether this view (profile) is starred or not.\n* @property {boolean} stripSiteSearchCategoryParameters Whether or not Analytics will strip search category parameters from the URLs in your reports.\n* @property {boolean} stripSiteSearchQueryParameters Whether or not Analytics will strip search query parameters from the URLs in your reports.\n* @property {string} timezone Time zone for which this view (profile) has been configured. Time zones are identified by strings from the TZ database.\n* @property {string} type View (Profile) type. Supported types: WEB or APP.\n* @property {string} updated Time this view (profile) was last modified.\n* @property {string} webPropertyId Web property ID of the form UA-XXXXX-YY to which this view (profile) belongs.\n* @property {string} websiteUrl Website URL for this view (profile).\n*/\n/**\n * @typedef ProfileFilterLink\n * @memberOf! analytics(v3)\n * @type object\n* @property {analytics(v3).FilterRef} filterRef Filter for this link.\n* @property {string} id Profile filter link ID.\n* @property {string} kind Resource type for Analytics filter.\n* @property {analytics(v3).ProfileRef} profileRef View (Profile) for this link.\n* @property {integer} rank The rank of this profile filter link relative to the other filters linked to the same profile.\nFor readonly (i.e., list and get) operations, the rank always starts at 1.\nFor write (i.e., create, update, or delete) operations, you may specify a value between 0 and 255 inclusively, [0, 255]. In order to insert a link at the end of the list, either don&#39;t specify a rank or set a rank to a number greater than the largest rank in the list. In order to insert a link to the beginning of the list specify a rank that is less than or equal to 1. The new link will move all existing filters with the same or lower rank down the list. After the link is inserted/updated/deleted all profile filter links will be renumbered starting at 1.\n* @property {string} selfLink Link for this profile filter link.\n*/\n/**\n * @typedef ProfileFilterLinks\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).ProfileFilterLink[]} items A list of profile filter links.\n * @property {integer} itemsPerPage The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1,000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Collection type.\n * @property {string} nextLink Link to next page for this profile filter link collection.\n * @property {string} previousLink Link to previous page for this profile filter link collection.\n * @property {integer} startIndex The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.\n * @property {integer} totalResults The total number of results for the query, regardless of the number of results in the response.\n * @property {string} username Email ID of the authenticated user\n */\n/**\n * @typedef ProfileRef\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} accountId Account ID to which this view (profile) belongs.\n * @property {string} href Link for this view (profile).\n * @property {string} id View (Profile) ID.\n * @property {string} internalWebPropertyId Internal ID for the web property to which this view (profile) belongs.\n * @property {string} kind Analytics view (profile) reference.\n * @property {string} name Name of this view (profile).\n * @property {string} webPropertyId Web property ID of the form UA-XXXXX-YY to which this view (profile) belongs.\n */\n/**\n * @typedef ProfileSummary\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} id View (profile) ID.\n * @property {string} kind Resource type for Analytics ProfileSummary.\n * @property {string} name View (profile) name.\n * @property {boolean} starred Indicates whether this view (profile) is starred or not.\n * @property {string} type View (Profile) type. Supported types: WEB or APP.\n */\n/**\n * @typedef Profiles\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).Profile[]} items A list of views (profiles).\n * @property {integer} itemsPerPage The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Collection type.\n * @property {string} nextLink Link to next page for this view (profile) collection.\n * @property {string} previousLink Link to previous page for this view (profile) collection.\n * @property {integer} startIndex The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.\n * @property {integer} totalResults The total number of results for the query, regardless of the number of results in the response.\n * @property {string} username Email ID of the authenticated user\n */\n/**\n * @typedef RealtimeData\n * @memberOf! analytics(v3)\n * @type object\n * @property {object[]} columnHeaders Column headers that list dimension names followed by the metric names. The order of dimensions and metrics is same as specified in the request.\n * @property {string} id Unique ID for this data response.\n * @property {string} kind Resource type.\n * @property {object} profileInfo Information for the view (profile), for which the real time data was requested.\n * @property {object} query Real time data request query parameters.\n * @property {array[]} rows Real time data rows, where each row contains a list of dimension values followed by the metric values. The order of dimensions and metrics is same as specified in the request.\n * @property {string} selfLink Link to this page.\n * @property {integer} totalResults The total number of rows for the query, regardless of the number of rows in the response.\n * @property {object} totalsForAllResults Total values for the requested metrics over all the results, not just the results returned in this response. The order of the metric totals is same as the metric order specified in the request.\n */\n/**\n * @typedef RemarketingAudience\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} accountId Account ID to which this remarketing audience belongs.\n * @property {object} audienceDefinition The simple audience definition that will cause a user to be added to an audience.\n * @property {string} audienceType The type of audience, either SIMPLE or STATE_BASED.\n * @property {string} created Time this remarketing audience was created.\n * @property {string} description The description of this remarketing audience.\n * @property {string} id Remarketing Audience ID.\n * @property {string} internalWebPropertyId Internal ID for the web property to which this remarketing audience belongs.\n * @property {string} kind Collection type.\n * @property {analytics(v3).LinkedForeignAccount[]} linkedAdAccounts The linked ad accounts associated with this remarketing audience. A remarketing audience can have only one linkedAdAccount currently.\n * @property {string[]} linkedViews The views (profiles) that this remarketing audience is linked to.\n * @property {string} name The name of this remarketing audience.\n * @property {object} stateBasedAudienceDefinition A state based audience definition that will cause a user to be added or removed from an audience.\n * @property {string} updated Time this remarketing audience was last modified.\n * @property {string} webPropertyId Web property ID of the form UA-XXXXX-YY to which this remarketing audience belongs.\n */\n/**\n * @typedef RemarketingAudiences\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).RemarketingAudience[]} items A list of remarketing audiences.\n * @property {integer} itemsPerPage The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Collection type.\n * @property {string} nextLink Link to next page for this remarketing audience collection.\n * @property {string} previousLink Link to previous page for this view (profile) collection.\n * @property {integer} startIndex The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.\n * @property {integer} totalResults The total number of results for the query, regardless of the number of results in the response.\n * @property {string} username Email ID of the authenticated user\n */\n/**\n * @typedef Segment\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} created Time the segment was created.\n * @property {string} definition Segment definition.\n * @property {string} id Segment ID.\n * @property {string} kind Resource type for Analytics segment.\n * @property {string} name Segment name.\n * @property {string} segmentId Segment ID. Can be used with the &#39;segment&#39; parameter in Core Reporting API.\n * @property {string} selfLink Link for this segment.\n * @property {string} type Type for a segment. Possible values are &quot;BUILT_IN&quot; or &quot;CUSTOM&quot;.\n * @property {string} updated Time the segment was last modified.\n */\n/**\n * @typedef Segments\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).Segment[]} items A list of segments.\n * @property {integer} itemsPerPage The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Collection type for segments.\n * @property {string} nextLink Link to next page for this segment collection.\n * @property {string} previousLink Link to previous page for this segment collection.\n * @property {integer} startIndex The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.\n * @property {integer} totalResults The total number of results for the query, regardless of the number of results in the response.\n * @property {string} username Email ID of the authenticated user\n */\n/**\n * @typedef UnsampledReport\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} accountId Account ID to which this unsampled report belongs.\n * @property {object} cloudStorageDownloadDetails Download details for a file stored in Google Cloud Storage.\n * @property {string} created Time this unsampled report was created.\n * @property {string} dimensions The dimensions for the unsampled report.\n * @property {string} downloadType The type of download you need to use for the report data file. Possible values include `GOOGLE_DRIVE` and `GOOGLE_CLOUD_STORAGE`. If the value is `GOOGLE_DRIVE`, see the `driveDownloadDetails` field. If the value is `GOOGLE_CLOUD_STORAGE`, see the `cloudStorageDownloadDetails` field.\n * @property {object} driveDownloadDetails Download details for a file stored in Google Drive.\n * @property {string} end-date The end date for the unsampled report.\n * @property {string} filters The filters for the unsampled report.\n * @property {string} id Unsampled report ID.\n * @property {string} kind Resource type for an Analytics unsampled report.\n * @property {string} metrics The metrics for the unsampled report.\n * @property {string} profileId View (Profile) ID to which this unsampled report belongs.\n * @property {string} segment The segment for the unsampled report.\n * @property {string} selfLink Link for this unsampled report.\n * @property {string} start-date The start date for the unsampled report.\n * @property {string} status Status of this unsampled report. Possible values are PENDING, COMPLETED, or FAILED.\n * @property {string} title Title of the unsampled report.\n * @property {string} updated Time this unsampled report was last modified.\n * @property {string} webPropertyId Web property ID to which this unsampled report belongs. The web property ID is of the form UA-XXXXX-YY.\n */\n/**\n * @typedef UnsampledReports\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).UnsampledReport[]} items A list of unsampled reports.\n * @property {integer} itemsPerPage The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Collection type.\n * @property {string} nextLink Link to next page for this unsampled report collection.\n * @property {string} previousLink Link to previous page for this unsampled report collection.\n * @property {integer} startIndex The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.\n * @property {integer} totalResults The total number of results for the query, regardless of the number of resources in the result.\n * @property {string} username Email ID of the authenticated user\n */\n/**\n * @typedef Upload\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} accountId Account Id to which this upload belongs.\n * @property {string} customDataSourceId Custom data source Id to which this data import belongs.\n * @property {string[]} errors Data import errors collection.\n * @property {string} id A unique ID for this upload.\n * @property {string} kind Resource type for Analytics upload.\n * @property {string} status Upload status. Possible values: PENDING, COMPLETED, FAILED, DELETING, DELETED.\n */\n/**\n * @typedef Uploads\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).Upload[]} items A list of uploads.\n * @property {integer} itemsPerPage The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Collection type.\n * @property {string} nextLink Link to next page for this upload collection.\n * @property {string} previousLink Link to previous page for this upload collection.\n * @property {integer} startIndex The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.\n * @property {integer} totalResults The total number of results for the query, regardless of the number of resources in the result.\n */\n/**\n * @typedef UserRef\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} email Email ID of this user.\n * @property {string} id User ID.\n * @property {string} kind \n */\n/**\n * @typedef WebPropertyRef\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} accountId Account ID to which this web property belongs.\n * @property {string} href Link for this web property.\n * @property {string} id Web property ID of the form UA-XXXXX-YY.\n * @property {string} internalWebPropertyId Internal ID for this web property.\n * @property {string} kind Analytics web property reference.\n * @property {string} name Name of this web property.\n */\n/**\n * @typedef WebPropertySummary\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} id Web property ID of the form UA-XXXXX-YY.\n * @property {string} internalWebPropertyId Internal ID for this web property.\n * @property {string} kind Resource type for Analytics WebPropertySummary.\n * @property {string} level Level for this web property. Possible values are STANDARD or PREMIUM.\n * @property {string} name Web property name.\n * @property {analytics(v3).ProfileSummary[]} profiles List of profiles under this web property.\n * @property {boolean} starred Indicates whether this web property is starred or not.\n * @property {string} websiteUrl Website url for this web property.\n */\n/**\n * @typedef Webproperties\n * @memberOf! analytics(v3)\n * @type object\n * @property {analytics(v3).Webproperty[]} items A list of web properties.\n * @property {integer} itemsPerPage The maximum number of resources the response can contain, regardless of the actual number of resources returned. Its value ranges from 1 to 1000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.\n * @property {string} kind Collection type.\n * @property {string} nextLink Link to next page for this web property collection.\n * @property {string} previousLink Link to previous page for this web property collection.\n * @property {integer} startIndex The starting index of the resources, which is 1 by default or otherwise specified by the start-index query parameter.\n * @property {integer} totalResults The total number of results for the query, regardless of the number of results in the response.\n * @property {string} username Email ID of the authenticated user\n */\n/**\n * @typedef Webproperty\n * @memberOf! analytics(v3)\n * @type object\n * @property {string} accountId Account ID to which this web property belongs.\n * @property {object} childLink Child link for this web property. Points to the list of views (profiles) for this web property.\n * @property {string} created Time this web property was created.\n * @property {string} defaultProfileId Default view (profile) ID.\n * @property {string} id Web property ID of the form UA-XXXXX-YY.\n * @property {string} industryVertical The industry vertical/category selected for this web property.\n * @property {string} internalWebPropertyId Internal ID for this web property.\n * @property {string} kind Resource type for Analytics WebProperty.\n * @property {string} level Level for this web property. Possible values are STANDARD or PREMIUM.\n * @property {string} name Name of this web property.\n * @property {object} parentLink Parent link for this web property. Points to the account to which this web property belongs.\n * @property {object} permissions Permissions the user has for this web property.\n * @property {integer} profileCount View (Profile) count for this web property.\n * @property {string} selfLink Link for this web property.\n * @property {boolean} starred Indicates whether this web property is starred or not.\n * @property {string} updated Time this web property was last modified.\n * @property {string} websiteUrl Website url for this web property.\n */\nmodule.exports = Analytics;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/androidpublisher/v2.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Google Play Developer API\n *\n * Lets Android application developers access their Google Play accounts.\n *\n * @example\n * var google = require('googleapis');\n * var androidpublisher = google.androidpublisher('v2');\n *\n * @namespace androidpublisher\n * @type {Function}\n * @version v2\n * @variation v2\n * @param {object=} options Options for Androidpublisher\n */\nfunction Androidpublisher(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.edits = {\n\n    /**\n     * androidpublisher.edits.commit\n     *\n     * @desc Commits/applies the changes made in this edit back to the app.\n     *\n     * @alias androidpublisher.edits.commit\n     * @memberOf! androidpublisher(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.editId Unique identifier for this edit.\n     * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    commit: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}:commit',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * androidpublisher.edits.delete\n     *\n     * @desc Deletes an edit for an app. Creating a new edit will automatically delete any of your previous edits so this method need only be called if you want to preemptively abandon an edit.\n     *\n     * @alias androidpublisher.edits.delete\n     * @memberOf! androidpublisher(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.editId Unique identifier for this edit.\n     * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * androidpublisher.edits.get\n     *\n     * @desc Returns information about the edit specified. Calls will fail if the edit is no long active (e.g. has been deleted, superseded or expired).\n     *\n     * @alias androidpublisher.edits.get\n     * @memberOf! androidpublisher(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.editId Unique identifier for this edit.\n     * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * androidpublisher.edits.insert\n     *\n     * @desc Creates a new edit for an app, populated with the app's current state.\n     *\n     * @alias androidpublisher.edits.insert\n     * @memberOf! androidpublisher(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n     * @param {androidpublisher(v2).AppEdit} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * androidpublisher.edits.validate\n     *\n     * @desc Checks that the edit can be successfully committed. The edit's changes are not applied to the live app.\n     *\n     * @alias androidpublisher.edits.validate\n     * @memberOf! androidpublisher(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.editId Unique identifier for this edit.\n     * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    validate: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}:validate',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    apklistings: {\n\n      /**\n       * androidpublisher.edits.apklistings.delete\n       *\n       * @desc Deletes the APK-specific localized listing for a specified APK and language code.\n       *\n       * @alias androidpublisher.edits.apklistings.delete\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer} params.apkVersionCode The APK version code whose APK-specific listings should be read or modified.\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.language The language code (a BCP-47 language tag) of the APK-specific localized listing to read or modify. For example, to select Austrian German, pass \"de-AT\".\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'apkVersionCode', 'language'],\n          pathParams: ['apkVersionCode', 'editId', 'language', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.apklistings.deleteall\n       *\n       * @desc Deletes all the APK-specific localized listings for a specified APK.\n       *\n       * @alias androidpublisher.edits.apklistings.deleteall\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer} params.apkVersionCode The APK version code whose APK-specific listings should be read or modified.\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      deleteall: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'apkVersionCode'],\n          pathParams: ['apkVersionCode', 'editId', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.apklistings.get\n       *\n       * @desc Fetches the APK-specific localized listing for a specified APK and language code.\n       *\n       * @alias androidpublisher.edits.apklistings.get\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer} params.apkVersionCode The APK version code whose APK-specific listings should be read or modified.\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.language The language code (a BCP-47 language tag) of the APK-specific localized listing to read or modify. For example, to select Austrian German, pass \"de-AT\".\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'apkVersionCode', 'language'],\n          pathParams: ['apkVersionCode', 'editId', 'language', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.apklistings.list\n       *\n       * @desc Lists all the APK-specific localized listings for a specified APK.\n       *\n       * @alias androidpublisher.edits.apklistings.list\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer} params.apkVersionCode The APK version code whose APK-specific listings should be read or modified.\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'apkVersionCode'],\n          pathParams: ['apkVersionCode', 'editId', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.apklistings.patch\n       *\n       * @desc Updates or creates the APK-specific localized listing for a specified APK and language code. This method supports patch semantics.\n       *\n       * @alias androidpublisher.edits.apklistings.patch\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer} params.apkVersionCode The APK version code whose APK-specific listings should be read or modified.\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.language The language code (a BCP-47 language tag) of the APK-specific localized listing to read or modify. For example, to select Austrian German, pass \"de-AT\".\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {androidpublisher(v2).ApkListing} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'apkVersionCode', 'language'],\n          pathParams: ['apkVersionCode', 'editId', 'language', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.apklistings.update\n       *\n       * @desc Updates or creates the APK-specific localized listing for a specified APK and language code.\n       *\n       * @alias androidpublisher.edits.apklistings.update\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer} params.apkVersionCode The APK version code whose APK-specific listings should be read or modified.\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.language The language code (a BCP-47 language tag) of the APK-specific localized listing to read or modify. For example, to select Austrian German, pass \"de-AT\".\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {androidpublisher(v2).ApkListing} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'apkVersionCode', 'language'],\n          pathParams: ['apkVersionCode', 'editId', 'language', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    apks: {\n\n      /**\n       * androidpublisher.edits.apks.addexternallyhosted\n       *\n       * @desc Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to enterprises using Google Play for Work whose application is configured to restrict distribution to the enterprise domain.\n       *\n       * @alias androidpublisher.edits.apks.addexternallyhosted\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {androidpublisher(v2).ApksAddExternallyHostedRequest} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      addexternallyhosted: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/externallyHosted',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId'],\n          pathParams: ['editId', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.apks.list\n       *\n       * \n       *\n       * @alias androidpublisher.edits.apks.list\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId'],\n          pathParams: ['editId', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.apks.upload\n       *\n       * \n       *\n       * @alias androidpublisher.edits.apks.upload\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} params.media Media object\n       * @param {string} params.media.mimeType Media mime-type\n       * @param {string|object} params.media.body Media body contents\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      upload: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks',\n            method: 'POST'\n          }, options),\n          params: params,\n          mediaUrl: 'https://www.googleapis.com/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks',\n          requiredParams: ['packageName', 'editId'],\n          pathParams: ['editId', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    deobfuscationfiles: {\n\n      /**\n       * androidpublisher.edits.deobfuscationfiles.upload\n       *\n       * @desc Uploads the deobfuscation file of the specified APK. If a deobfuscation file already exists, it will be replaced.\n       *\n       * @alias androidpublisher.edits.deobfuscationfiles.upload\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer} params.apkVersionCode The version code of the APK whose deobfuscation file is being uploaded.\n       * @param {string} params.deobfuscationFileType \n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier of the Android app for which the deobfuscatiuon files are being uploaded; for example, \"com.spiffygame\".\n       * @param {object} params.media Media object\n       * @param {string} params.media.mimeType Media mime-type\n       * @param {string|object} params.media.body Media body contents\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      upload: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}',\n            method: 'POST'\n          }, options),\n          params: params,\n          mediaUrl: 'https://www.googleapis.com/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}',\n          requiredParams: ['packageName', 'editId', 'apkVersionCode', 'deobfuscationFileType'],\n          pathParams: ['apkVersionCode', 'deobfuscationFileType', 'editId', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    details: {\n\n      /**\n       * androidpublisher.edits.details.get\n       *\n       * @desc Fetches app details for this edit. This includes the default language and developer support contact information.\n       *\n       * @alias androidpublisher.edits.details.get\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/details',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId'],\n          pathParams: ['editId', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.details.patch\n       *\n       * @desc Updates app details for this edit. This method supports patch semantics.\n       *\n       * @alias androidpublisher.edits.details.patch\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {androidpublisher(v2).AppDetails} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/details',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId'],\n          pathParams: ['editId', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.details.update\n       *\n       * @desc Updates app details for this edit.\n       *\n       * @alias androidpublisher.edits.details.update\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {androidpublisher(v2).AppDetails} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/details',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId'],\n          pathParams: ['editId', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    expansionfiles: {\n\n      /**\n       * androidpublisher.edits.expansionfiles.get\n       *\n       * @desc Fetches the Expansion File configuration for the APK specified.\n       *\n       * @alias androidpublisher.edits.expansionfiles.get\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer} params.apkVersionCode The version code of the APK whose Expansion File configuration is being read or modified.\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.expansionFileType \n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n          pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.expansionfiles.patch\n       *\n       * @desc Updates the APK's Expansion File configuration to reference another APK's Expansion Files. To add a new Expansion File use the Upload method. This method supports patch semantics.\n       *\n       * @alias androidpublisher.edits.expansionfiles.patch\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer} params.apkVersionCode The version code of the APK whose Expansion File configuration is being read or modified.\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.expansionFileType \n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {androidpublisher(v2).ExpansionFile} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n          pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.expansionfiles.update\n       *\n       * @desc Updates the APK's Expansion File configuration to reference another APK's Expansion Files. To add a new Expansion File use the Upload method.\n       *\n       * @alias androidpublisher.edits.expansionfiles.update\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer} params.apkVersionCode The version code of the APK whose Expansion File configuration is being read or modified.\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.expansionFileType \n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {androidpublisher(v2).ExpansionFile} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n          pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.expansionfiles.upload\n       *\n       * @desc Uploads and attaches a new Expansion File to the APK specified.\n       *\n       * @alias androidpublisher.edits.expansionfiles.upload\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer} params.apkVersionCode The version code of the APK whose Expansion File configuration is being read or modified.\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.expansionFileType \n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} params.media Media object\n       * @param {string} params.media.mimeType Media mime-type\n       * @param {string|object} params.media.body Media body contents\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      upload: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}',\n            method: 'POST'\n          }, options),\n          params: params,\n          mediaUrl: 'https://www.googleapis.com/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}',\n          requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n          pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    images: {\n\n      /**\n       * androidpublisher.edits.images.delete\n       *\n       * @desc Deletes the image (specified by id) from the edit.\n       *\n       * @alias androidpublisher.edits.images.delete\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.imageId Unique identifier an image within the set of images attached to this edit.\n       * @param {string} params.imageType \n       * @param {string} params.language The language code (a BCP-47 language tag) of the localized listing whose images are to read or modified. For example, to select Austrian German, pass \"de-AT\".\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}/{imageId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'language', 'imageType', 'imageId'],\n          pathParams: ['editId', 'imageId', 'imageType', 'language', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.images.deleteall\n       *\n       * @desc Deletes all images for the specified language and image type.\n       *\n       * @alias androidpublisher.edits.images.deleteall\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.imageType \n       * @param {string} params.language The language code (a BCP-47 language tag) of the localized listing whose images are to read or modified. For example, to select Austrian German, pass \"de-AT\".\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      deleteall: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n          pathParams: ['editId', 'imageType', 'language', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.images.list\n       *\n       * @desc Lists all images for the specified language and image type.\n       *\n       * @alias androidpublisher.edits.images.list\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.imageType \n       * @param {string} params.language The language code (a BCP-47 language tag) of the localized listing whose images are to read or modified. For example, to select Austrian German, pass \"de-AT\".\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n          pathParams: ['editId', 'imageType', 'language', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.images.upload\n       *\n       * @desc Uploads a new image and adds it to the list of images for the specified language and image type.\n       *\n       * @alias androidpublisher.edits.images.upload\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.imageType \n       * @param {string} params.language The language code (a BCP-47 language tag) of the localized listing whose images are to read or modified. For example, to select Austrian German, pass \"de-AT\".\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} params.media Media object\n       * @param {string} params.media.mimeType Media mime-type\n       * @param {string|object} params.media.body Media body contents\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      upload: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}',\n            method: 'POST'\n          }, options),\n          params: params,\n          mediaUrl: 'https://www.googleapis.com/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}',\n          requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n          pathParams: ['editId', 'imageType', 'language', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    listings: {\n\n      /**\n       * androidpublisher.edits.listings.delete\n       *\n       * @desc Deletes the specified localized store listing from an edit.\n       *\n       * @alias androidpublisher.edits.listings.delete\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.language The language code (a BCP-47 language tag) of the localized listing to read or modify. For example, to select Austrian German, pass \"de-AT\".\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'language'],\n          pathParams: ['editId', 'language', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.listings.deleteall\n       *\n       * @desc Deletes all localized listings from an edit.\n       *\n       * @alias androidpublisher.edits.listings.deleteall\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      deleteall: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId'],\n          pathParams: ['editId', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.listings.get\n       *\n       * @desc Fetches information about a localized store listing.\n       *\n       * @alias androidpublisher.edits.listings.get\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.language The language code (a BCP-47 language tag) of the localized listing to read or modify. For example, to select Austrian German, pass \"de-AT\".\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'language'],\n          pathParams: ['editId', 'language', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.listings.list\n       *\n       * @desc Returns all of the localized store listings attached to this edit.\n       *\n       * @alias androidpublisher.edits.listings.list\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId'],\n          pathParams: ['editId', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.listings.patch\n       *\n       * @desc Creates or updates a localized store listing. This method supports patch semantics.\n       *\n       * @alias androidpublisher.edits.listings.patch\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.language The language code (a BCP-47 language tag) of the localized listing to read or modify. For example, to select Austrian German, pass \"de-AT\".\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {androidpublisher(v2).Listing} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'language'],\n          pathParams: ['editId', 'language', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.listings.update\n       *\n       * @desc Creates or updates a localized store listing.\n       *\n       * @alias androidpublisher.edits.listings.update\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.language The language code (a BCP-47 language tag) of the localized listing to read or modify. For example, to select Austrian German, pass \"de-AT\".\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {androidpublisher(v2).Listing} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'language'],\n          pathParams: ['editId', 'language', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    testers: {\n\n      /**\n       * androidpublisher.edits.testers.get\n       *\n       * \n       *\n       * @alias androidpublisher.edits.testers.get\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {string} params.track \n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/testers/{track}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'track'],\n          pathParams: ['editId', 'packageName', 'track'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.testers.patch\n       *\n       * \n       *\n       * @alias androidpublisher.edits.testers.patch\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {string} params.track \n       * @param {androidpublisher(v2).Testers} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/testers/{track}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'track'],\n          pathParams: ['editId', 'packageName', 'track'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.testers.update\n       *\n       * \n       *\n       * @alias androidpublisher.edits.testers.update\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {string} params.track \n       * @param {androidpublisher(v2).Testers} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/testers/{track}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'track'],\n          pathParams: ['editId', 'packageName', 'track'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    tracks: {\n\n      /**\n       * androidpublisher.edits.tracks.get\n       *\n       * @desc Fetches the track configuration for the specified track type. Includes the APK version codes that are in this track.\n       *\n       * @alias androidpublisher.edits.tracks.get\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {string} params.track The track type to read or modify.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/tracks/{track}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'track'],\n          pathParams: ['editId', 'packageName', 'track'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.tracks.list\n       *\n       * @desc Lists all the track configurations for this edit.\n       *\n       * @alias androidpublisher.edits.tracks.list\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/tracks',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId'],\n          pathParams: ['editId', 'packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.tracks.patch\n       *\n       * @desc Updates the track configuration for the specified track type. When halted, the rollout track cannot be updated without adding new APKs, and adding new APKs will cause it to resume. This method supports patch semantics.\n       *\n       * @alias androidpublisher.edits.tracks.patch\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {string} params.track The track type to read or modify.\n       * @param {androidpublisher(v2).Track} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/tracks/{track}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'track'],\n          pathParams: ['editId', 'packageName', 'track'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.edits.tracks.update\n       *\n       * @desc Updates the track configuration for the specified track type. When halted, the rollout track cannot be updated without adding new APKs, and adding new APKs will cause it to resume.\n       *\n       * @alias androidpublisher.edits.tracks.update\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.editId Unique identifier for this edit.\n       * @param {string} params.packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".\n       * @param {string} params.track The track type to read or modify.\n       * @param {androidpublisher(v2).Track} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/edits/{editId}/tracks/{track}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'editId', 'track'],\n          pathParams: ['editId', 'packageName', 'track'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n\n  self.entitlements = {\n\n    /**\n     * androidpublisher.entitlements.list\n     *\n     * @desc Lists the user's current inapp item or subscription entitlements\n     *\n     * @alias androidpublisher.entitlements.list\n     * @memberOf! androidpublisher(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer=} params.maxResults \n     * @param {string} params.packageName The package name of the application the inapp product was sold in (for example, 'com.some.thing').\n     * @param {string=} params.productId The product id of the inapp product (for example, 'sku1'). This can be used to restrict the result set.\n     * @param {integer=} params.startIndex \n     * @param {string=} params.token \n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/entitlements',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.inappproducts = {\n\n    /**\n     * androidpublisher.inappproducts.batch\n     *\n     * \n     *\n     * @alias androidpublisher.inappproducts.batch\n     * @memberOf! androidpublisher(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {androidpublisher(v2).InappproductsBatchRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    batch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/androidpublisher/v2/applications/inappproducts/batch',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * androidpublisher.inappproducts.delete\n     *\n     * @desc Delete an in-app product for an app.\n     *\n     * @alias androidpublisher.inappproducts.delete\n     * @memberOf! androidpublisher(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.packageName Unique identifier for the Android app with the in-app product; for example, \"com.spiffygame\".\n     * @param {string} params.sku Unique identifier for the in-app product.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/inappproducts/{sku}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['packageName', 'sku'],\n        pathParams: ['packageName', 'sku'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * androidpublisher.inappproducts.get\n     *\n     * @desc Returns information about the in-app product specified.\n     *\n     * @alias androidpublisher.inappproducts.get\n     * @memberOf! androidpublisher(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.packageName \n     * @param {string} params.sku Unique identifier for the in-app product.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/inappproducts/{sku}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['packageName', 'sku'],\n        pathParams: ['packageName', 'sku'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * androidpublisher.inappproducts.insert\n     *\n     * @desc Creates a new in-app product for an app.\n     *\n     * @alias androidpublisher.inappproducts.insert\n     * @memberOf! androidpublisher(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.autoConvertMissingPrices If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on the default price. Defaults to false.\n     * @param {string} params.packageName Unique identifier for the Android app; for example, \"com.spiffygame\".\n     * @param {androidpublisher(v2).InAppProduct} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/inappproducts',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * androidpublisher.inappproducts.list\n     *\n     * @desc List all the in-app products for an Android app, both subscriptions and managed in-app products..\n     *\n     * @alias androidpublisher.inappproducts.list\n     * @memberOf! androidpublisher(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer=} params.maxResults \n     * @param {string} params.packageName Unique identifier for the Android app with in-app products; for example, \"com.spiffygame\".\n     * @param {integer=} params.startIndex \n     * @param {string=} params.token \n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/inappproducts',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * androidpublisher.inappproducts.patch\n     *\n     * @desc Updates the details of an in-app product. This method supports patch semantics.\n     *\n     * @alias androidpublisher.inappproducts.patch\n     * @memberOf! androidpublisher(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.autoConvertMissingPrices If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on the default price. Defaults to false.\n     * @param {string} params.packageName Unique identifier for the Android app with the in-app product; for example, \"com.spiffygame\".\n     * @param {string} params.sku Unique identifier for the in-app product.\n     * @param {androidpublisher(v2).InAppProduct} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/inappproducts/{sku}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['packageName', 'sku'],\n        pathParams: ['packageName', 'sku'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * androidpublisher.inappproducts.update\n     *\n     * @desc Updates the details of an in-app product.\n     *\n     * @alias androidpublisher.inappproducts.update\n     * @memberOf! androidpublisher(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.autoConvertMissingPrices If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on the default price. Defaults to false.\n     * @param {string} params.packageName Unique identifier for the Android app with the in-app product; for example, \"com.spiffygame\".\n     * @param {string} params.sku Unique identifier for the in-app product.\n     * @param {androidpublisher(v2).InAppProduct} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/inappproducts/{sku}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['packageName', 'sku'],\n        pathParams: ['packageName', 'sku'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.purchases = {\n\n    products: {\n\n      /**\n       * androidpublisher.purchases.products.get\n       *\n       * @desc Checks the purchase and consumption status of an inapp item.\n       *\n       * @alias androidpublisher.purchases.products.get\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.packageName The package name of the application the inapp product was sold in (for example, 'com.some.thing').\n       * @param {string} params.productId The inapp product SKU (for example, 'com.some.thing.inapp1').\n       * @param {string} params.token The token provided to the user's device when the inapp product was purchased.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/purchases/products/{productId}/tokens/{token}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'productId', 'token'],\n          pathParams: ['packageName', 'productId', 'token'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    subscriptions: {\n\n      /**\n       * androidpublisher.purchases.subscriptions.cancel\n       *\n       * @desc Cancels a user's subscription purchase. The subscription remains valid until its expiration time.\n       *\n       * @alias androidpublisher.purchases.subscriptions.cancel\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.packageName The package name of the application for which this subscription was purchased (for example, 'com.some.thing').\n       * @param {string} params.subscriptionId The purchased subscription ID (for example, 'monthly001').\n       * @param {string} params.token The token provided to the user's device when the subscription was purchased.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      cancel: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:cancel',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'subscriptionId', 'token'],\n          pathParams: ['packageName', 'subscriptionId', 'token'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.purchases.subscriptions.defer\n       *\n       * @desc Defers a user's subscription purchase until a specified future expiration time.\n       *\n       * @alias androidpublisher.purchases.subscriptions.defer\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.packageName The package name of the application for which this subscription was purchased (for example, 'com.some.thing').\n       * @param {string} params.subscriptionId The purchased subscription ID (for example, 'monthly001').\n       * @param {string} params.token The token provided to the user's device when the subscription was purchased.\n       * @param {androidpublisher(v2).SubscriptionPurchasesDeferRequest} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      defer: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:defer',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'subscriptionId', 'token'],\n          pathParams: ['packageName', 'subscriptionId', 'token'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.purchases.subscriptions.get\n       *\n       * @desc Checks whether a user's subscription purchase is valid and returns its expiry time.\n       *\n       * @alias androidpublisher.purchases.subscriptions.get\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.packageName The package name of the application for which this subscription was purchased (for example, 'com.some.thing').\n       * @param {string} params.subscriptionId The purchased subscription ID (for example, 'monthly001').\n       * @param {string} params.token The token provided to the user's device when the subscription was purchased.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'subscriptionId', 'token'],\n          pathParams: ['packageName', 'subscriptionId', 'token'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.purchases.subscriptions.refund\n       *\n       * @desc Refunds a user's subscription purchase, but the subscription remains valid until its expiration time and it will continue to recur.\n       *\n       * @alias androidpublisher.purchases.subscriptions.refund\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.packageName The package name of the application for which this subscription was purchased (for example, 'com.some.thing').\n       * @param {string} params.subscriptionId The purchased subscription ID (for example, 'monthly001').\n       * @param {string} params.token The token provided to the user's device when the subscription was purchased.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      refund: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:refund',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'subscriptionId', 'token'],\n          pathParams: ['packageName', 'subscriptionId', 'token'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * androidpublisher.purchases.subscriptions.revoke\n       *\n       * @desc Refunds and immediately revokes a user's subscription purchase. Access to the subscription will be terminated immediately and it will stop recurring.\n       *\n       * @alias androidpublisher.purchases.subscriptions.revoke\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.packageName The package name of the application for which this subscription was purchased (for example, 'com.some.thing').\n       * @param {string} params.subscriptionId The purchased subscription ID (for example, 'monthly001').\n       * @param {string} params.token The token provided to the user's device when the subscription was purchased.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      revoke: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:revoke',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['packageName', 'subscriptionId', 'token'],\n          pathParams: ['packageName', 'subscriptionId', 'token'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    voidedpurchases: {\n\n      /**\n       * androidpublisher.purchases.voidedpurchases.list\n       *\n       * @desc Lists the purchases that were cancelled, refunded or charged-back.\n       *\n       * @alias androidpublisher.purchases.voidedpurchases.list\n       * @memberOf! androidpublisher(v2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.endTime The time, in milliseconds since the Epoch, of the newest voided in-app product purchase that you want to see in the response. The value of this parameter cannot be greater than the current time and is ignored if a pagination token is set. Default value is current time.\n       * @param {integer=} params.maxResults \n       * @param {string} params.packageName The package name of the application for which voided purchases need to be returned (for example, 'com.some.thing').\n       * @param {integer=} params.startIndex \n       * @param {string=} params.startTime The time, in milliseconds since the Epoch, of the oldest voided in-app product purchase that you want to see in the response. The value of this parameter cannot be older than 30 days and is ignored if a pagination token is set. Default value is current time minus 30 days.\n       * @param {string=} params.token \n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/purchases/voidedpurchases',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['packageName'],\n          pathParams: ['packageName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n\n  self.reviews = {\n\n    /**\n     * androidpublisher.reviews.get\n     *\n     * @desc Returns a single review.\n     *\n     * @alias androidpublisher.reviews.get\n     * @memberOf! androidpublisher(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.packageName Unique identifier for the Android app for which we want reviews; for example, \"com.spiffygame\".\n     * @param {string} params.reviewId \n     * @param {string=} params.translationLanguage \n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/reviews/{reviewId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['packageName', 'reviewId'],\n        pathParams: ['packageName', 'reviewId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * androidpublisher.reviews.list\n     *\n     * @desc Returns a list of reviews. Only reviews from last week will be returned.\n     *\n     * @alias androidpublisher.reviews.list\n     * @memberOf! androidpublisher(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer=} params.maxResults \n     * @param {string} params.packageName Unique identifier for the Android app for which we want reviews; for example, \"com.spiffygame\".\n     * @param {integer=} params.startIndex \n     * @param {string=} params.token \n     * @param {string=} params.translationLanguage \n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/reviews',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * androidpublisher.reviews.reply\n     *\n     * @desc Reply to a single review, or update an existing reply.\n     *\n     * @alias androidpublisher.reviews.reply\n     * @memberOf! androidpublisher(v2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.packageName Unique identifier for the Android app for which we want reviews; for example, \"com.spiffygame\".\n     * @param {string} params.reviewId \n     * @param {androidpublisher(v2).ReviewsReplyRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    reply: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/androidpublisher/v2/applications/{packageName}/reviews/{reviewId}:reply',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['packageName', 'reviewId'],\n        pathParams: ['packageName', 'reviewId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef Apk\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).ApkBinary} binary Information about the binary payload of this APK.\n * @property {integer} versionCode The version code of the APK, as specified in the APK&#39;s manifest file.\n */\n/**\n * @typedef ApkBinary\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} sha1 A sha1 hash of the APK payload, encoded as a hex string and matching the output of the sha1sum command.\n */\n/**\n * @typedef ApkListing\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} language The language code, in BCP 47 format (eg &quot;en-US&quot;).\n * @property {string} recentChanges Describe what&#39;s new in your APK.\n */\n/**\n * @typedef ApkListingsListResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;androidpublisher#apkListingsListResponse&quot;.\n * @property {androidpublisher(v2).ApkListing[]} listings \n */\n/**\n * @typedef ApksAddExternallyHostedRequest\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).ExternallyHostedApk} externallyHostedApk The definition of the externally-hosted APK and where it is located.\n */\n/**\n * @typedef ApksAddExternallyHostedResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).ExternallyHostedApk} externallyHostedApk The definition of the externally-hosted APK and where it is located.\n */\n/**\n * @typedef ApksListResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).Apk[]} apks \n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;androidpublisher#apksListResponse&quot;.\n */\n/**\n * @typedef AppDetails\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} contactEmail The user-visible support email for this app.\n * @property {string} contactPhone The user-visible support telephone number for this app.\n * @property {string} contactWebsite The user-visible website for this app.\n * @property {string} defaultLanguage Default language code, in BCP 47 format (eg &quot;en-US&quot;).\n */\n/**\n * @typedef AppEdit\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} expiryTimeSeconds The time at which the edit will expire and will be no longer valid for use in any subsequent API calls (encoded as seconds since the Epoch).\n * @property {string} id The ID of the edit that can be used in subsequent API calls.\n */\n/**\n * @typedef Comment\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).DeveloperComment} developerComment A comment from a developer.\n * @property {androidpublisher(v2).UserComment} userComment A comment from a user.\n */\n/**\n * @typedef DeobfuscationFile\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} symbolType The type of the deobfuscation file.\n */\n/**\n * @typedef DeobfuscationFilesUploadResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).DeobfuscationFile} deobfuscationFile \n */\n/**\n * @typedef DeveloperComment\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).Timestamp} lastModified The last time at which this comment was updated.\n * @property {string} text The content of the comment, i.e. reply body.\n */\n/**\n * @typedef DeviceMetadata\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} cpuMake Device CPU make e.g. &quot;Qualcomm&quot;\n * @property {string} cpuModel Device CPU model e.g. &quot;MSM8974&quot;\n * @property {string} deviceClass Device class (e.g. tablet)\n * @property {integer} glEsVersion OpenGL version\n * @property {string} manufacturer Device manufacturer (e.g. Motorola)\n * @property {string} nativePlatform Comma separated list of native platforms (e.g. &quot;arm&quot;, &quot;arm7&quot;)\n * @property {string} productName Device model name (e.g. Droid)\n * @property {integer} ramMb Device RAM in Megabytes e.g. &quot;2048&quot;\n * @property {integer} screenDensityDpi Screen density in DPI\n * @property {integer} screenHeightPx Screen height in pixels\n * @property {integer} screenWidthPx Screen width in pixels\n */\n/**\n * @typedef Entitlement\n * @memberOf! androidpublisher(v2)\n * @type object\n* @property {string} kind This kind represents an entitlement object in the androidpublisher service.\n* @property {string} productId The SKU of the product.\n* @property {string} productType The type of the inapp product. Possible values are:  \n- In-app item: &quot;inapp&quot; \n- Subscription: &quot;subs&quot;\n* @property {string} token The token which can be verified using the subscriptions or products API.\n*/\n/**\n * @typedef EntitlementsListResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).PageInfo} pageInfo \n * @property {androidpublisher(v2).Entitlement[]} resources \n * @property {androidpublisher(v2).TokenPagination} tokenPagination \n */\n/**\n * @typedef ExpansionFile\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} fileSize If set this field indicates that this APK has an Expansion File uploaded to it: this APK does not reference another APK&#39;s Expansion File. The field&#39;s value is the size of the uploaded Expansion File in bytes.\n * @property {integer} referencesVersion If set this APK&#39;s Expansion File references another APK&#39;s Expansion File. The file_size field will not be set.\n */\n/**\n * @typedef ExpansionFilesUploadResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).ExpansionFile} expansionFile \n */\n/**\n * @typedef ExternallyHostedApk\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} applicationLabel The application label.\n * @property {string[]} certificateBase64s A certificate (or array of certificates if a certificate-chain is used) used to signed this APK, represented as a base64 encoded byte array.\n * @property {string} externallyHostedUrl The URL at which the APK is hosted. This must be an https URL.\n * @property {string} fileSha1Base64 The SHA1 checksum of this APK, represented as a base64 encoded byte array.\n * @property {string} fileSha256Base64 The SHA256 checksum of this APK, represented as a base64 encoded byte array.\n * @property {string} fileSize The file size in bytes of this APK.\n * @property {string} iconBase64 The icon image from the APK, as a base64 encoded byte array.\n * @property {integer} maximumSdk The maximum SDK supported by this APK (optional).\n * @property {integer} minimumSdk The minimum SDK targeted by this APK.\n * @property {string[]} nativeCodes The native code environments supported by this APK (optional).\n * @property {string} packageName The package name.\n * @property {string[]} usesFeatures The features required by this APK (optional).\n * @property {androidpublisher(v2).ExternallyHostedApkUsesPermission[]} usesPermissions The permissions requested by this APK.\n * @property {integer} versionCode The version code of this APK.\n * @property {string} versionName The version name of this APK.\n */\n/**\n * @typedef ExternallyHostedApkUsesPermission\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {integer} maxSdkVersion Optionally, the maximum SDK version for which the permission is required.\n * @property {string} name The name of the permission requested.\n */\n/**\n * @typedef Image\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} id A unique id representing this image.\n * @property {string} sha1 A sha1 hash of the image that was uploaded.\n * @property {string} url A URL that will serve a preview of the image.\n */\n/**\n * @typedef ImagesDeleteAllResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).Image[]} deleted \n */\n/**\n * @typedef ImagesListResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).Image[]} images \n */\n/**\n * @typedef ImagesUploadResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).Image} image \n */\n/**\n * @typedef InAppProduct\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} defaultLanguage The default language of the localized data, as defined by BCP 47. e.g. &quot;en-US&quot;, &quot;en-GB&quot;.\n * @property {androidpublisher(v2).Price} defaultPrice Default price cannot be zero. In-app products can never be free. Default price is always in the developer&#39;s Checkout merchant currency.\n * @property {object} listings List of localized title and description data.\n * @property {string} packageName The package name of the parent app.\n * @property {object} prices Prices per buyer region. None of these prices should be zero. In-app products can never be free.\n * @property {string} purchaseType Purchase type enum value. Unmodifiable after creation.\n * @property {androidpublisher(v2).Season} season Definition of a season for a seasonal subscription. Can be defined only for yearly subscriptions.\n * @property {string} sku The stock-keeping-unit (SKU) of the product, unique within an app.\n * @property {string} status \n * @property {string} subscriptionPeriod Subscription period, specified in ISO 8601 format. Acceptable values are &quot;P1W&quot; (one week), &quot;P1M&quot; (one month), &quot;P3M&quot; (three months), &quot;P6M&quot; (six months), and &quot;P1Y&quot; (one year).\n * @property {string} trialPeriod Trial period, specified in ISO 8601 format. Acceptable values are anything between &quot;P7D&quot; (seven days) and &quot;P999D&quot; (999 days). Seasonal subscriptions cannot have a trial period.\n */\n/**\n * @typedef InAppProductListing\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} description \n * @property {string} title \n */\n/**\n * @typedef InappproductsBatchRequest\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).InappproductsBatchRequestEntry[]} entrys \n */\n/**\n * @typedef InappproductsBatchRequestEntry\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {integer} batchId \n * @property {androidpublisher(v2).InappproductsInsertRequest} inappproductsinsertrequest \n * @property {androidpublisher(v2).InappproductsUpdateRequest} inappproductsupdaterequest \n * @property {string} methodName \n */\n/**\n * @typedef InappproductsBatchResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).InappproductsBatchResponseEntry[]} entrys \n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;androidpublisher#inappproductsBatchResponse&quot;.\n */\n/**\n * @typedef InappproductsBatchResponseEntry\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {integer} batchId \n * @property {androidpublisher(v2).InappproductsInsertResponse} inappproductsinsertresponse \n * @property {androidpublisher(v2).InappproductsUpdateResponse} inappproductsupdateresponse \n */\n/**\n * @typedef InappproductsInsertRequest\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).InAppProduct} inappproduct \n */\n/**\n * @typedef InappproductsInsertResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).InAppProduct} inappproduct \n */\n/**\n * @typedef InappproductsListResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).InAppProduct[]} inappproduct \n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;androidpublisher#inappproductsListResponse&quot;.\n * @property {androidpublisher(v2).PageInfo} pageInfo \n * @property {androidpublisher(v2).TokenPagination} tokenPagination \n */\n/**\n * @typedef InappproductsUpdateRequest\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).InAppProduct} inappproduct \n */\n/**\n * @typedef InappproductsUpdateResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).InAppProduct} inappproduct \n */\n/**\n * @typedef Listing\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} fullDescription Full description of the app; this may be up to 4000 characters in length.\n * @property {string} language Language localization code (for example, &quot;de-AT&quot; for Austrian German).\n * @property {string} shortDescription Short description of the app (previously known as promo text); this may be up to 80 characters in length.\n * @property {string} title App&#39;s localized title.\n * @property {string} video URL of a promotional YouTube video for the app.\n */\n/**\n * @typedef ListingsListResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;androidpublisher#listingsListResponse&quot;.\n * @property {androidpublisher(v2).Listing[]} listings \n */\n/**\n * @typedef MonthDay\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {integer} day Day of a month, value in [1, 31] range. Valid range depends on the specified month.\n * @property {integer} month Month of a year. e.g. 1 = JAN, 2 = FEB etc.\n */\n/**\n * @typedef PageInfo\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {integer} resultPerPage \n * @property {integer} startIndex \n * @property {integer} totalResults \n */\n/**\n * @typedef Price\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} currency 3 letter Currency code, as defined by ISO 4217.\n * @property {string} priceMicros The price in millionths of the currency base unit represented as a string.\n */\n/**\n * @typedef ProductPurchase\n * @memberOf! androidpublisher(v2)\n * @type object\n* @property {integer} consumptionState The consumption state of the inapp product. Possible values are:  \n- Yet to be consumed \n- Consumed\n* @property {string} developerPayload A developer-specified string that contains supplemental information about an order.\n* @property {string} kind This kind represents an inappPurchase object in the androidpublisher service.\n* @property {integer} purchaseState The purchase state of the order. Possible values are:  \n- Purchased \n- Cancelled\n* @property {string} purchaseTimeMillis The time the product was purchased, in milliseconds since the epoch (Jan 1, 1970).\n*/\n/**\n * @typedef Prorate\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).Price} defaultPrice Default price cannot be zero and must be less than the full subscription price. Default price is always in the developer&#39;s Checkout merchant currency. Targeted countries have their prices set automatically based on the default_price.\n * @property {androidpublisher(v2).MonthDay} start Defines the first day on which the price takes effect.\n */\n/**\n * @typedef Review\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} authorName The name of the user who wrote the review.\n * @property {androidpublisher(v2).Comment[]} comments A repeated field containing comments for the review.\n * @property {string} reviewId Unique identifier for this review.\n */\n/**\n * @typedef ReviewReplyResult\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).Timestamp} lastEdited The time at which the reply took effect.\n * @property {string} replyText The reply text that was applied.\n */\n/**\n * @typedef ReviewsListResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).PageInfo} pageInfo \n * @property {androidpublisher(v2).Review[]} reviews \n * @property {androidpublisher(v2).TokenPagination} tokenPagination \n */\n/**\n * @typedef ReviewsReplyRequest\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} replyText The text to set as the reply. Replies of more than approximately 350 characters will be rejected. HTML tags will be stripped.\n */\n/**\n * @typedef ReviewsReplyResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).ReviewReplyResult} result \n */\n/**\n * @typedef Season\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).MonthDay} end Inclusive end date of the recurrence period.\n * @property {androidpublisher(v2).Prorate[]} prorations Optionally present list of prorations for the season. Each proration is a one-off discounted entry into a subscription. Each proration contains the first date on which the discount is available and the new pricing information.\n * @property {androidpublisher(v2).MonthDay} start Inclusive start date of the recurrence period.\n */\n/**\n * @typedef SubscriptionDeferralInfo\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} desiredExpiryTimeMillis The desired next expiry time to assign to the subscription, in milliseconds since the Epoch. The given time must be later/greater than the current expiry time for the subscription.\n * @property {string} expectedExpiryTimeMillis The expected expiry time for the subscription. If the current expiry time for the subscription is not the value specified here, the deferral will not occur.\n */\n/**\n * @typedef SubscriptionPurchase\n * @memberOf! androidpublisher(v2)\n * @type object\n* @property {boolean} autoRenewing Whether the subscription will automatically be renewed when it reaches its current expiry time.\n* @property {integer} cancelReason The reason why a subscription was cancelled or is not auto-renewing. Possible values are:  \n- User cancelled the subscription \n- Subscription was cancelled by the system, for example because of a billing problem\n* @property {string} countryCode ISO 3166-1 alpha-2 billing country/region code of the user at the time the subscription was granted.\n* @property {string} developerPayload A developer-specified string that contains supplemental information about an order.\n* @property {string} expiryTimeMillis Time at which the subscription will expire, in milliseconds since the Epoch.\n* @property {string} kind This kind represents a subscriptionPurchase object in the androidpublisher service.\n* @property {integer} paymentState The payment state of the subscription. Possible values are:  \n- Payment pending \n- Payment received\n* @property {string} priceAmountMicros Price of the subscription, not including tax. Price is expressed in micro-units, where 1,000,000 micro-units represents one unit of the currency. For example, if the subscription price is €1.99, price_amount_micros is 1990000.\n* @property {string} priceCurrencyCode ISO 4217 currency code for the subscription price. For example, if the price is specified in British pounds sterling, price_currency_code is &quot;GBP&quot;.\n* @property {string} startTimeMillis Time at which the subscription was granted, in milliseconds since the Epoch.\n* @property {string} userCancellationTimeMillis The time at which the subscription was canceled by the user, in milliseconds since the epoch. Only present if cancelReason is 0.\n*/\n/**\n * @typedef SubscriptionPurchasesDeferRequest\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).SubscriptionDeferralInfo} deferralInfo The information about the new desired expiry time for the subscription.\n */\n/**\n * @typedef SubscriptionPurchasesDeferResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} newExpiryTimeMillis The new expiry time for the subscription in milliseconds since the Epoch.\n */\n/**\n * @typedef Testers\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string[]} googleGroups \n * @property {string[]} googlePlusCommunities \n */\n/**\n * @typedef Timestamp\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {integer} nanos \n * @property {string} seconds \n */\n/**\n * @typedef TokenPagination\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} nextPageToken \n * @property {string} previousPageToken \n */\n/**\n * @typedef Track\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} track \n * @property {number} userFraction \n * @property {integer[]} versionCodes \n */\n/**\n * @typedef TracksListResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;androidpublisher#tracksListResponse&quot;.\n * @property {androidpublisher(v2).Track[]} tracks \n */\n/**\n * @typedef UserComment\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {integer} androidOsVersion Integer Android SDK version of the user&#39;s device at the time the review was written, e.g. 23 is Marshmallow. May be absent.\n * @property {integer} appVersionCode Integer version code of the app as installed at the time the review was written. May be absent.\n * @property {string} appVersionName String version name of the app as installed at the time the review was written. May be absent.\n * @property {string} device Codename for the reviewer&#39;s device, e.g. klte, flounder. May be absent.\n * @property {androidpublisher(v2).DeviceMetadata} deviceMetadata Some information about the characteristics of the user&#39;s device\n * @property {androidpublisher(v2).Timestamp} lastModified The last time at which this comment was updated.\n * @property {string} originalText Untranslated text of the review, in the case where the review has been translated. If the review has not been translated this is left blank.\n * @property {string} reviewerLanguage Language code for the reviewer. This is taken from the device settings so is not guaranteed to match the language the review is written in. May be absent.\n * @property {integer} starRating The star rating associated with the review, from 1 to 5.\n * @property {string} text The content of the comment, i.e. review body. In some cases users have been able to write a review with separate title and body; in those cases the title and body are concatenated and separated by a tab character.\n * @property {integer} thumbsDownCount Number of users who have given this review a thumbs down\n * @property {integer} thumbsUpCount Number of users who have given this review a thumbs up\n */\n/**\n * @typedef VoidedPurchase\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {string} kind This kind represents a voided purchase object in the androidpublisher service.\n * @property {string} purchaseTimeMillis The time at which the purchase was made, in milliseconds since the epoch (Jan 1, 1970).\n * @property {string} purchaseToken The token that was generated when a purchase was made. This uniquely identifies a purchase.\n * @property {string} voidedTimeMillis The time at which the purchase was cancelled/refunded/charged-back, in milliseconds since the epoch (Jan 1, 1970).\n */\n/**\n * @typedef VoidedPurchasesListResponse\n * @memberOf! androidpublisher(v2)\n * @type object\n * @property {androidpublisher(v2).PageInfo} pageInfo \n * @property {androidpublisher(v2).TokenPagination} tokenPagination \n * @property {androidpublisher(v2).VoidedPurchase[]} voidedPurchases \n */\nmodule.exports = Androidpublisher;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/appengine/v1alpha.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Google App Engine Admin API\n *\n * The App Engine Admin API enables developers to provision and manage their App Engine applications.\n *\n * @example\n * var google = require('googleapis');\n * var appengine = google.appengine('v1alpha');\n *\n * @namespace appengine\n * @type {Function}\n * @version v1alpha\n * @variation v1alpha\n * @param {object=} options Options for Appengine\n */\nfunction Appengine(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.apps = {\n\n    operations: {\n\n      /**\n       * appengine.apps.operations.list\n       *\n       * @desc Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding below allows API services to override the binding to use different resource name schemes, such as users/x/operations.\n       *\n       * @alias appengine.apps.operations.list\n       * @memberOf! appengine(v1alpha)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.filter The standard list filter.\n       * @param {string} params.appsId Part of `name`. The name of the operation collection.\n       * @param {string=} params.pageToken The standard list page token.\n       * @param {integer=} params.pageSize The standard list page size.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1alpha/apps/{appsId}/operations',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.operations.get\n       *\n       * @desc Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.\n       *\n       * @alias appengine.apps.operations.get\n       * @memberOf! appengine(v1alpha)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `name`. The name of the operation resource.\n       * @param {string} params.operationsId Part of `name`. See documentation of `appsId`.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1alpha/apps/{appsId}/operations/{operationsId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'operationsId'],\n          pathParams: ['appsId', 'operationsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    locations: {\n\n      /**\n       * appengine.apps.locations.list\n       *\n       * @desc Lists information about the supported locations for this service.\n       *\n       * @alias appengine.apps.locations.list\n       * @memberOf! appengine(v1alpha)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.filter The standard list filter.\n       * @param {string} params.appsId Part of `name`. The resource that owns the locations collection, if applicable.\n       * @param {string=} params.pageToken The standard list page token.\n       * @param {integer=} params.pageSize The standard list page size.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1alpha/apps/{appsId}/locations',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.locations.get\n       *\n       * @desc Get information about a location.\n       *\n       * @alias appengine.apps.locations.get\n       * @memberOf! appengine(v1alpha)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `name`. Resource name for the location.\n       * @param {string} params.locationsId Part of `name`. See documentation of `appsId`.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1alpha/apps/{appsId}/locations/{locationsId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'locationsId'],\n          pathParams: ['appsId', 'locationsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\n/**\n * @typedef OperationMetadataV1\n * @memberOf! appengine(v1alpha)\n * @type object\n * @property {string} insertTime Time that this operation was created.@OutputOnly\n * @property {string[]} warning Durable messages that persist on every operation poll. @OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly\n * @property {string} ephemeralMessage Ephemeral message that may change every time the operation is polled. @OutputOnly\n * @property {string} method API method that initiated this operation. Example: google.appengine.v1.Versions.CreateVersion.@OutputOnly\n * @property {string} endTime Time that this operation completed.@OutputOnly\n */\n/**\n * @typedef Operation\n * @memberOf! appengine(v1alpha)\n * @type object\n * @property {boolean} done If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.\n * @property {object} response The normal response of the operation in case of success. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse.\n * @property {string} name The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should have the format of operations/some/unique/name.\n * @property {appengine(v1alpha).Status} error The error result of the operation in case of failure or cancellation.\n * @property {object} metadata Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.\n */\n/**\n * @typedef ListOperationsResponse\n * @memberOf! appengine(v1alpha)\n * @type object\n * @property {string} nextPageToken The standard List next-page token.\n * @property {appengine(v1alpha).Operation[]} operations A list of operations that matches the specified filter in the request.\n */\n/**\n * @typedef OperationMetadata\n * @memberOf! appengine(v1alpha)\n * @type object\n * @property {string} method API method that initiated this operation. Example: google.appengine.v1beta4.Version.CreateVersion.@OutputOnly\n * @property {string} endTime Timestamp that this operation completed.@OutputOnly\n * @property {string} operationType Type of this operation. Deprecated, use method field instead. Example: &quot;create_version&quot;.@OutputOnly\n * @property {string} insertTime Timestamp that this operation was created.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/modules/default.@OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n */\n/**\n * @typedef OperationMetadataExperimental\n * @memberOf! appengine(v1alpha)\n * @type object\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/customDomains/example.com.@OutputOnly\n * @property {string} method API method that initiated this operation. Example: google.appengine.experimental.CustomDomains.CreateCustomDomain.@OutputOnly\n * @property {string} insertTime Time that this operation was created.@OutputOnly\n * @property {string} endTime Time that this operation completed.@OutputOnly\n */\n/**\n * @typedef OperationMetadataV1Beta5\n * @memberOf! appengine(v1alpha)\n * @type object\n * @property {string} insertTime Timestamp that this operation was created.@OutputOnly\n * @property {string} endTime Timestamp that this operation completed.@OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly\n * @property {string} method API method name that initiated this operation. Example: google.appengine.v1beta5.Version.CreateVersion.@OutputOnly\n */\n/**\n * @typedef Status\n * @memberOf! appengine(v1alpha)\n * @type object\n * @property {string} message A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.\n * @property {object[]} details A list of messages that carry the error details. There will be a common set of message types for APIs to use.\n * @property {integer} code The status code, which should be an enum value of google.rpc.Code.\n */\n/**\n * @typedef LocationMetadata\n * @memberOf! appengine(v1alpha)\n * @type object\n * @property {boolean} flexibleEnvironmentAvailable App Engine Flexible Environment is available in the given location.@OutputOnly\n * @property {boolean} standardEnvironmentAvailable App Engine Standard Environment is available in the given location.@OutputOnly\n */\n/**\n * @typedef ListLocationsResponse\n * @memberOf! appengine(v1alpha)\n * @type object\n * @property {appengine(v1alpha).Location[]} locations A list of locations that matches the specified filter in the request.\n * @property {string} nextPageToken The standard List next-page token.\n */\n/**\n * @typedef OperationMetadataV1Beta\n * @memberOf! appengine(v1alpha)\n * @type object\n * @property {string} method API method that initiated this operation. Example: google.appengine.v1beta.Versions.CreateVersion.@OutputOnly\n * @property {string} endTime Time that this operation completed.@OutputOnly\n * @property {string} insertTime Time that this operation was created.@OutputOnly\n * @property {string[]} warning Durable messages that persist on every operation poll. @OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly\n * @property {string} ephemeralMessage Ephemeral message that may change every time the operation is polled. @OutputOnly\n */\n/**\n * @typedef Location\n * @memberOf! appengine(v1alpha)\n * @type object\n* @property {string} locationId The canonical id for this location. For example: &quot;us-east1&quot;.\n* @property {object} metadata Service-specific metadata. For example the available capacity at the given location.\n* @property {object} labels Cross-service attributes for the location. For example\n{&quot;cloud.googleapis.com/region&quot;: &quot;us-east1&quot;}\n\n* @property {string} name Resource name for the location, which may vary between implementations. For example: &quot;projects/example-project/locations/us-east1&quot;\n*/\nmodule.exports = Appengine;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/appengine/v1beta4.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Google App Engine Admin API\n *\n * The App Engine Admin API enables developers to provision and manage their App Engine applications.\n *\n * @example\n * var google = require('googleapis');\n * var appengine = google.appengine('v1beta4');\n *\n * @namespace appengine\n * @type {Function}\n * @version v1beta4\n * @variation v1beta4\n * @param {object=} options Options for Appengine\n */\nfunction Appengine(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.apps = {\n\n    /**\n     * appengine.apps.create\n     *\n     * @desc Creates an App Engine application for a Google Cloud Platform project. Required fields: id - The ID of the target Cloud Platform project. location - The region (https://cloud.google.com/appengine/docs/locations) where you want the App Engine application located.For more information about App Engine applications, see Managing Projects, Applications, and Billing (https://cloud.google.com/appengine/docs/python/console/).\n     *\n     * @alias appengine.apps.create\n     * @memberOf! appengine(v1beta4)\n     *\n     * @param {object} params Parameters for request\n     * @param {appengine(v1beta4).Application} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://appengine.googleapis.com/v1beta4/apps',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * appengine.apps.get\n     *\n     * @desc Gets information about an application.\n     *\n     * @alias appengine.apps.get\n     * @memberOf! appengine(v1beta4)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.ensureResourcesExist Certain resources associated with an application are created on-demand. Controls whether these resources should be created when performing the GET operation. If specified and any resources could not be created, the request will fail with an error code. Additionally, this parameter can cause the request to take longer to complete.\n     * @param {string} params.appsId Part of `name`. Name of the application to get. Example: apps/myapp.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * appengine.apps.patch\n     *\n     * @desc Updates the specified Application resource. You can update the following fields: auth_domain (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta4/apps#Application.FIELDS.auth_domain) default_cookie_expiration (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta4/apps#Application.FIELDS.default_cookie_expiration)\n     *\n     * @alias appengine.apps.patch\n     * @memberOf! appengine(v1beta4)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.appsId Part of `name`. Name of the Application resource to update. Example: apps/myapp.\n     * @param {string=} params.mask Standard field mask for the set of fields to be updated.\n     * @param {appengine(v1beta4).Application} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    modules: {\n\n      /**\n       * appengine.apps.modules.delete\n       *\n       * @desc Deletes the specified module and all enclosed versions.\n       *\n       * @alias appengine.apps.modules.delete\n       * @memberOf! appengine(v1beta4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/modules/default.\n       * @param {string} params.modulesId Part of `name`. See documentation of `appsId`.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}/modules/{modulesId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'modulesId'],\n          pathParams: ['appsId', 'modulesId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.modules.get\n       *\n       * @desc Gets the current configuration of the specified module.\n       *\n       * @alias appengine.apps.modules.get\n       * @memberOf! appengine(v1beta4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/modules/default.\n       * @param {string} params.modulesId Part of `name`. See documentation of `appsId`.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}/modules/{modulesId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'modulesId'],\n          pathParams: ['appsId', 'modulesId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.modules.list\n       *\n       * @desc Lists all the modules in the application.\n       *\n       * @alias appengine.apps.modules.list\n       * @memberOf! appengine(v1beta4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp.\n       * @param {string=} params.pageToken Continuation token for fetching the next page of results.\n       * @param {integer=} params.pageSize Maximum results to return per page.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}/modules',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.modules.patch\n       *\n       * @desc Updates the configuration of the specified module.\n       *\n       * @alias appengine.apps.modules.patch\n       * @memberOf! appengine(v1beta4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.modulesId Part of `name`. See documentation of `appsId`.\n       * @param {string=} params.mask Standard field mask for the set of fields to be updated.\n       * @param {string} params.appsId Part of `name`. Name of the resource to update. Example: apps/myapp/modules/default.\n       * @param {boolean=} params.migrateTraffic Set to true to gradually shift traffic to one or more versions that you specify. By default, traffic is shifted immediately. For gradual traffic migration, the target versions must be located within instances that are configured for both warmup requests (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta4/apps.modules.versions#inboundservicetype) and automatic scaling (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta4/apps.modules.versions#automaticscaling). You must specify the shardBy (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta4/apps.modules#shardby) field in the Module resource. Gradual traffic migration is not supported in the App Engine flexible environment. For examples, see Migrating and Splitting Traffic (https://cloud.google.com/appengine/docs/admin-api/migrating-splitting-traffic).\n       * @param {appengine(v1beta4).Module} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}/modules/{modulesId}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'modulesId'],\n          pathParams: ['modulesId', 'appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      versions: {\n\n        /**\n         * appengine.apps.modules.versions.delete\n         *\n         * @desc Deletes an existing version.\n         *\n         * @alias appengine.apps.modules.versions.delete\n         * @memberOf! appengine(v1beta4)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.modulesId Part of `name`. See documentation of `appsId`.\n         * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n         * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/modules/default/versions/v1.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        delete: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}/modules/{modulesId}/versions/{versionsId}',\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'modulesId', 'versionsId'],\n            pathParams: ['modulesId', 'versionsId', 'appsId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * appengine.apps.modules.versions.get\n         *\n         * @desc Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource.\n         *\n         * @alias appengine.apps.modules.versions.get\n         * @memberOf! appengine(v1beta4)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.modulesId Part of `name`. See documentation of `appsId`.\n         * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n         * @param {string=} params.view Controls the set of fields returned in the Get response.\n         * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/modules/default/versions/v1.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        get: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}/modules/{modulesId}/versions/{versionsId}',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'modulesId', 'versionsId'],\n            pathParams: ['modulesId', 'versionsId', 'appsId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * appengine.apps.modules.versions.list\n         *\n         * @desc Lists the versions of a module.\n         *\n         * @alias appengine.apps.modules.versions.list\n         * @memberOf! appengine(v1beta4)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.modulesId Part of `name`. See documentation of `appsId`.\n         * @param {string=} params.view Controls the set of fields returned in the List response.\n         * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/modules/default.\n         * @param {string=} params.pageToken Continuation token for fetching the next page of results.\n         * @param {integer=} params.pageSize Maximum results to return per page.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}/modules/{modulesId}/versions',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'modulesId'],\n            pathParams: ['modulesId', 'appsId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * appengine.apps.modules.versions.patch\n         *\n         * @desc Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses: serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta4/apps.modules.versions#Version.FIELDS.serving_status):  For Version resources that use basic scaling, manual scaling, or run in  the App Engine flexible environment. instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta4/apps.modules.versions#Version.FIELDS.instance_class):  For Version resources that run in the App Engine standard environment. automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta4/apps.modules.versions#Version.FIELDS.automatic_scaling):  For Version resources that use automatic scaling and run in the App  Engine standard environment. automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta4/apps.modules.versions#Version.FIELDS.automatic_scaling):  For Version resources that use automatic scaling and run in the App  Engine standard environment.\n         *\n         * @alias appengine.apps.modules.versions.patch\n         * @memberOf! appengine(v1beta4)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.appsId Part of `name`. Name of the resource to update. Example: apps/myapp/modules/default/versions/1.\n         * @param {string} params.modulesId Part of `name`. See documentation of `appsId`.\n         * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n         * @param {string=} params.mask Standard field mask for the set of fields to be updated.\n         * @param {appengine(v1beta4).Version} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        patch: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}/modules/{modulesId}/versions/{versionsId}',\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'modulesId', 'versionsId'],\n            pathParams: ['appsId', 'modulesId', 'versionsId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * appengine.apps.modules.versions.create\n         *\n         * @desc Deploys code and resource files to a new version.\n         *\n         * @alias appengine.apps.modules.versions.create\n         * @memberOf! appengine(v1beta4)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.appsId Part of `name`. Name of the resource to update. Example: apps/myapp/modules/default.\n         * @param {string} params.modulesId Part of `name`. See documentation of `appsId`.\n         * @param {appengine(v1beta4).Version} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}/modules/{modulesId}/versions',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'modulesId'],\n            pathParams: ['appsId', 'modulesId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        instances: {\n\n          /**\n           * appengine.apps.modules.versions.instances.get\n           *\n           * @desc Gets instance information.\n           *\n           * @alias appengine.apps.modules.versions.instances.get\n           * @memberOf! appengine(v1beta4)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/modules/default/versions/v1/instances/instance-1.\n           * @param {string} params.instancesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.modulesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          get: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}/modules/{modulesId}/versions/{versionsId}/instances/{instancesId}',\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'modulesId', 'versionsId', 'instancesId'],\n              pathParams: ['appsId', 'instancesId', 'modulesId', 'versionsId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          },\n\n          /**\n           * appengine.apps.modules.versions.instances.list\n           *\n           * @desc Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).\n           *\n           * @alias appengine.apps.modules.versions.instances.list\n           * @memberOf! appengine(v1beta4)\n           *\n           * @param {object} params Parameters for request\n           * @param {integer=} params.pageSize Maximum results to return per page.\n           * @param {string} params.modulesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/modules/default/versions/v1.\n           * @param {string=} params.pageToken Continuation token for fetching the next page of results.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          list: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}/modules/{modulesId}/versions/{versionsId}/instances',\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'modulesId', 'versionsId'],\n              pathParams: ['modulesId', 'versionsId', 'appsId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          },\n\n          /**\n           * appengine.apps.modules.versions.instances.debug\n           *\n           * @desc Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in \"debug mode\", the instance continues to serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable for instances in App Engine flexible environment.\n           *\n           * @alias appengine.apps.modules.versions.instances.debug\n           * @memberOf! appengine(v1beta4)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/modules/default/versions/v1/instances/instance-1.\n           * @param {string} params.instancesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.modulesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n           * @param {appengine(v1beta4).DebugInstanceRequest} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          debug: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}/modules/{modulesId}/versions/{versionsId}/instances/{instancesId}:debug',\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'modulesId', 'versionsId', 'instancesId'],\n              pathParams: ['appsId', 'instancesId', 'modulesId', 'versionsId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          },\n\n          /**\n           * appengine.apps.modules.versions.instances.delete\n           *\n           * @desc Stops a running instance.\n           *\n           * @alias appengine.apps.modules.versions.instances.delete\n           * @memberOf! appengine(v1beta4)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/modules/default/versions/v1/instances/instance-1.\n           * @param {string} params.instancesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.modulesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          delete: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}/modules/{modulesId}/versions/{versionsId}/instances/{instancesId}',\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'modulesId', 'versionsId', 'instancesId'],\n              pathParams: ['appsId', 'instancesId', 'modulesId', 'versionsId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          }\n        }\n      }\n    },\n\n    operations: {\n\n      /**\n       * appengine.apps.operations.list\n       *\n       * @desc Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding below allows API services to override the binding to use different resource name schemes, such as users/x/operations.\n       *\n       * @alias appengine.apps.operations.list\n       * @memberOf! appengine(v1beta4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.filter The standard list filter.\n       * @param {string} params.appsId Part of `name`. The name of the operation collection.\n       * @param {string=} params.pageToken The standard list page token.\n       * @param {integer=} params.pageSize The standard list page size.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}/operations',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.operations.get\n       *\n       * @desc Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.\n       *\n       * @alias appengine.apps.operations.get\n       * @memberOf! appengine(v1beta4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `name`. The name of the operation resource.\n       * @param {string} params.operationsId Part of `name`. See documentation of `appsId`.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}/operations/{operationsId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'operationsId'],\n          pathParams: ['appsId', 'operationsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    locations: {\n\n      /**\n       * appengine.apps.locations.list\n       *\n       * @desc Lists information about the supported locations for this service.\n       *\n       * @alias appengine.apps.locations.list\n       * @memberOf! appengine(v1beta4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.filter The standard list filter.\n       * @param {string} params.appsId Part of `name`. The resource that owns the locations collection, if applicable.\n       * @param {string=} params.pageToken The standard list page token.\n       * @param {integer=} params.pageSize The standard list page size.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}/locations',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.locations.get\n       *\n       * @desc Get information about a location.\n       *\n       * @alias appengine.apps.locations.get\n       * @memberOf! appengine(v1beta4)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.locationsId Part of `name`. See documentation of `appsId`.\n       * @param {string} params.appsId Part of `name`. Resource name for the location.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta4/apps/{appsId}/locations/{locationsId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'locationsId'],\n          pathParams: ['locationsId', 'appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\n/**\n * @typedef UrlMap\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {appengine(v1beta4).StaticDirectoryHandler} staticDirectory Serves the entire contents of a directory as static files.This attribute is deprecated. You can mimic the behavior of static directories using static files.\n * @property {appengine(v1beta4).StaticFilesHandler} staticFiles Returns the contents of a file, such as an image, as the response.\n * @property {string} redirectHttpResponseCode 30x code to use when performing redirects for the secure field. Defaults to 302.\n * @property {string} securityLevel Security (HTTPS) enforcement for this URL.\n * @property {string} authFailAction Action to take when users access resources that require authentication. Defaults to redirect.\n * @property {appengine(v1beta4).ScriptHandler} script Executes a script to handle the request that matches this URL pattern.\n * @property {string} urlRegex A URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings. All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.\n * @property {string} login Level of login required to access this resource.\n * @property {appengine(v1beta4).ApiEndpointHandler} apiEndpoint Uses API Endpoints to handle requests.\n */\n/**\n * @typedef Operation\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} name The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should have the format of operations/some/unique/name.\n * @property {appengine(v1beta4).Status} error The error result of the operation in case of failure or cancellation.\n * @property {object} metadata Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.\n * @property {boolean} done If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.\n * @property {object} response The normal response of the operation in case of success. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse.\n */\n/**\n * @typedef ApiConfigHandler\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} url URL to serve the endpoint at.\n * @property {string} securityLevel Security (HTTPS) enforcement for this URL.\n * @property {string} authFailAction Action to take when users access resources that require authentication. Defaults to redirect.\n * @property {string} script Path to the script from the application root directory.\n * @property {string} login Level of login required to access this resource. Defaults to optional.\n */\n/**\n * @typedef ScriptHandler\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} scriptPath Path to the script from the application root directory.\n */\n/**\n * @typedef StaticFilesHandler\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {boolean} applicationReadable Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.\n * @property {object} httpHeaders HTTP headers to use for all responses from these URLs.\n * @property {string} uploadPathRegex Regular expression that matches the file paths for all files that should be referenced by this handler.\n * @property {string} path Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.\n * @property {string} mimeType MIME type used to serve all files served by this handler. Defaults to file-specific MIME types, which are derived from each file&#39;s filename extension.\n * @property {boolean} requireMatchingFile Whether this handler should match the request if the file referenced by the handler does not exist.\n * @property {string} expiration Time a static file served by this handler should be cached.\n */\n/**\n * @typedef FileInfo\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} sha1Sum The SHA1 hash of the file, in hex.\n * @property {string} mimeType The MIME type of the file.Defaults to the value from Google Cloud Storage.\n * @property {string} sourceUrl URL source to use to fetch this file. Must be a URL to a resource in Google Cloud Storage in the form &#39;http(s)://storage.googleapis.com/&lt;bucket&gt;/&lt;object&gt;&#39;.\n */\n/**\n * @typedef DiskUtilization\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {integer} targetReadBytesPerSec Target bytes read per second.\n * @property {integer} targetWriteOpsPerSec Target ops written per second.\n * @property {integer} targetWriteBytesPerSec Target bytes written per second.\n * @property {integer} targetReadOpsPerSec Target ops read per second.\n */\n/**\n * @typedef BasicScaling\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {integer} maxInstances Maximum number of instances to create for this version.\n * @property {string} idleTimeout Duration of time after the last request that an instance must wait before the instance is shut down.\n */\n/**\n * @typedef OperationMetadataExperimental\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/customDomains/example.com.@OutputOnly\n * @property {string} method API method that initiated this operation. Example: google.appengine.experimental.CustomDomains.CreateCustomDomain.@OutputOnly\n * @property {string} insertTime Time that this operation was created.@OutputOnly\n * @property {string} endTime Time that this operation completed.@OutputOnly\n */\n/**\n * @typedef CpuUtilization\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} aggregationWindowLength Period of time over which CPU utilization is calculated.\n * @property {number} targetUtilization Target CPU utilization ratio to maintain when scaling. Must be between 0 and 1.\n */\n/**\n * @typedef Status\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {object[]} details A list of messages that carry the error details. There will be a common set of message types for APIs to use.\n * @property {integer} code The status code, which should be an enum value of google.rpc.Code.\n * @property {string} message A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.\n */\n/**\n * @typedef IdentityAwareProxy\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} oauth2ClientSecretSha256 Hex-encoded SHA-256 hash of the client secret.@OutputOnly\n * @property {boolean} enabled Whether the serving infrastructure will authenticate and authorize all incoming requests.If true, the oauth2_client_id and oauth2_client_secret fields must be non-empty.\n * @property {string} oauth2ClientSecret For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2_client_secret_sha256 field.@InputOnly\n * @property {string} oauth2ClientId OAuth2 client ID to use for the authentication flow.\n */\n/**\n * @typedef ManualScaling\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {integer} instances Number of instances to assign to the module at the start. This number can later be altered by using the Modules API (https://cloud.google.com/appengine/docs/python/modules/functions) set_num_instances() function.\n */\n/**\n * @typedef TrafficSplit\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} shardBy Mechanism used to determine which version a request is sent to. The traffic selection algorithm will be stable for either type until allocations are changed.\n * @property {object} allocations Mapping from version IDs within the module to fractional (0.000, 1] allocations of traffic for that version. Each version can be specified only once, but some versions in the module may not have any traffic allocation. Modules that have traffic allocated cannot be deleted until either the module is deleted or their traffic allocation is removed. Allocations must sum to 1. Up to two decimal place precision is supported for IP-based splits and up to three decimal places is supported for cookie-based splits.\n */\n/**\n * @typedef LocationMetadata\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {boolean} flexibleEnvironmentAvailable App Engine Flexible Environment is available in the given location.@OutputOnly\n * @property {boolean} standardEnvironmentAvailable App Engine Standard Environment is available in the given location.@OutputOnly\n */\n/**\n * @typedef OperationMetadataV1Beta\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string[]} warning Durable messages that persist on every operation poll. @OutputOnly\n * @property {string} insertTime Time that this operation was created.@OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly\n * @property {string} ephemeralMessage Ephemeral message that may change every time the operation is polled. @OutputOnly\n * @property {string} method API method that initiated this operation. Example: google.appengine.v1beta.Versions.CreateVersion.@OutputOnly\n * @property {string} endTime Time that this operation completed.@OutputOnly\n */\n/**\n * @typedef ListModulesResponse\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} nextPageToken Continuation token for fetching the next page of results.\n * @property {appengine(v1beta4).Module[]} modules The modules belonging to the requested application.\n */\n/**\n * @typedef Resources\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {number} cpu Number of CPU cores needed.\n * @property {number} memoryGb Memory (GB) needed.\n * @property {appengine(v1beta4).Volume[]} volumes User specified volumes.\n * @property {number} diskGb Disk size (GB) needed.\n */\n/**\n * @typedef Deployment\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {appengine(v1beta4).ContainerInfo} container The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.\n * @property {appengine(v1beta4).SourceReference[]} sourceReferences Origin of the source code for this deployment. There can be more than one source reference per version if source code is distributed among multiple repositories.\n * @property {object} files Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.\n */\n/**\n * @typedef Volume\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {number} sizeGb Volume size in gigabytes.\n * @property {string} name Unique name for the volume.\n * @property {string} volumeType Underlying volume type, e.g. &#39;tmpfs&#39;.\n */\n/**\n * @typedef ListOperationsResponse\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} nextPageToken The standard List next-page token.\n * @property {appengine(v1beta4).Operation[]} operations A list of operations that matches the specified filter in the request.\n */\n/**\n * @typedef OperationMetadata\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} operationType Type of this operation. Deprecated, use method field instead. Example: &quot;create_version&quot;.@OutputOnly\n * @property {string} insertTime Timestamp that this operation was created.@OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/modules/default.@OutputOnly\n * @property {string} method API method that initiated this operation. Example: google.appengine.v1beta4.Version.CreateVersion.@OutputOnly\n * @property {string} endTime Timestamp that this operation completed.@OutputOnly\n */\n/**\n * @typedef ListInstancesResponse\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {appengine(v1beta4).Instance[]} instances The instances belonging to the requested version.\n * @property {string} nextPageToken Continuation token for fetching the next page of results.\n */\n/**\n * @typedef ErrorHandler\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} staticFile Static file content to be served for this error.\n * @property {string} errorCode Error condition this handler applies to.\n * @property {string} mimeType MIME type of file. Defaults to text/html.\n */\n/**\n * @typedef OperationMetadataV1\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} ephemeralMessage Ephemeral message that may change every time the operation is polled. @OutputOnly\n * @property {string} method API method that initiated this operation. Example: google.appengine.v1.Versions.CreateVersion.@OutputOnly\n * @property {string} endTime Time that this operation completed.@OutputOnly\n * @property {string} insertTime Time that this operation was created.@OutputOnly\n * @property {string[]} warning Durable messages that persist on every operation poll. @OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly\n */\n/**\n * @typedef Application\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} id Identifier of the Application resource. This identifier is equivalent to the project ID of the Google Cloud Platform project where you want to deploy your application. Example: myapp.\n * @property {string} defaultCookieExpiration Cookie expiration policy for this application.\n * @property {string} codeBucket Google Cloud Storage bucket that can be used for storing files associated with this application. This bucket is associated with the application and can be used by the gcloud deployment commands.@OutputOnly\n * @property {string} location Location from which this application will be run. Application instances will run out of data centers in the chosen location, which is also where all of the application&#39;s end user content is stored.Defaults to us-central.Options are:us-central - Central USeurope-west - Western Europeus-east1 - Eastern US\n * @property {string} defaultBucket Google Cloud Storage bucket that can be used by this application to store content.@OutputOnly\n * @property {appengine(v1beta4).UrlDispatchRule[]} dispatchRules HTTP path dispatch rules for requests to the application that do not explicitly target a module or version. Rules are order-dependent.@OutputOnly\n * @property {string} defaultHostname Hostname used to reach the application, as resolved by App Engine.@OutputOnly\n * @property {string} name Full path to the Application resource in the API. Example: apps/myapp.@OutputOnly\n * @property {appengine(v1beta4).IdentityAwareProxy} iap \n * @property {string} authDomain Google Apps authentication domain that controls which users can access this application.Defaults to open access for any Google Account.\n */\n/**\n * @typedef Network\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string[]} forwardedPorts List of ports, or port pairs, to forward from the virtual machine to the application container.\n * @property {string} instanceTag Tag to apply to the VM instance during creation.\n * @property {string} name Google Cloud Platform network where the virtual machines are created. Specify the short name, not the resource path.Defaults to default.\n */\n/**\n * @typedef Instance\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} vmName Name of the virtual machine where this instance lives. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {string} vmId Virtual machine ID of this instance. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {number} qps Average queries per second (QPS) over the last minute.@OutputOnly\n * @property {string} vmZoneName Zone where the virtual machine is located. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {boolean} vmUnlocked Whether this instance is in debug mode. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {string} name Full path to the Instance resource in the API. Example: apps/myapp/modules/default/versions/v1/instances/instance-1.@OutputOnly\n * @property {integer} averageLatency Average latency (ms) over the last minute.@OutputOnly\n * @property {string} id Relative name of the instance within the version. Example: instance-1.@OutputOnly\n * @property {string} memoryUsage Total memory in use (bytes).@OutputOnly\n * @property {string} vmIp The IP address of this instance. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {integer} errors Number of errors since this instance was started.@OutputOnly\n * @property {string} availability Availability of the instance.@OutputOnly\n * @property {string} vmStatus Status of the virtual machine where this instance lives. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {integer} requests Number of requests since this instance was started.@OutputOnly\n * @property {string} appEngineRelease App Engine release this instance is running on.@OutputOnly\n * @property {string} startTimestamp Time that this instance was started.@OutputOnly\n */\n/**\n * @typedef UrlDispatchRule\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} path Pathname within the host. Must start with a &quot;/&quot;. A single &quot;*&quot; can be included at the end of the path. The sum of the lengths of the domain and path may not exceed 100 characters.\n * @property {string} domain Domain name to match against. The wildcard &quot;*&quot; is supported if specified before a period: &quot;*.&quot;.Defaults to matching all domains: &quot;*&quot;.\n * @property {string} module Resource ID of a module in this application that should serve the matched request. The module must already exist. Example: default.\n */\n/**\n * @typedef ListVersionsResponse\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {appengine(v1beta4).Version[]} versions The versions belonging to the requested module.\n * @property {string} nextPageToken Continuation token for fetching the next page of results.\n */\n/**\n * @typedef Module\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} id Relative name of the module within the application. Example: default.@OutputOnly\n * @property {string} name Full path to the Module resource in the API. Example: apps/myapp/modules/default.@OutputOnly\n * @property {appengine(v1beta4).TrafficSplit} split Mapping that defines fractional HTTP traffic diversion to different versions within the module.\n */\n/**\n * @typedef ApiEndpointHandler\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} scriptPath Path to the script from the application root directory.\n */\n/**\n * @typedef StaticDirectoryHandler\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} mimeType MIME type used to serve all files served by this handler. Defaults to file-specific MIME types, which are direved from each file&#39;s filename extension.\n * @property {boolean} requireMatchingFile Whether this handler should match the request if the file referenced by the handler does not exist.\n * @property {string} expiration Time a static file served by this handler should be cached.\n * @property {boolean} applicationReadable Whether files should also be uploaded as code data. By default, files declared in static directory handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.\n * @property {object} httpHeaders HTTP headers to use for all responses from these URLs.\n * @property {string} directory Path to the directory containing the static files from the application root directory. Everything after the end of the matched URL pattern is appended to static_dir to form the full path to the requested file.\n */\n/**\n * @typedef AutomaticScaling\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} minPendingLatency Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.\n * @property {appengine(v1beta4).RequestUtilization} requestUtilization Target scaling by request utilization.\n * @property {integer} maxIdleInstances Maximum number of idle instances that should be maintained for this version.\n * @property {integer} minIdleInstances Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a module.\n * @property {integer} maxTotalInstances Maximum number of instances that should be started to handle requests.\n * @property {integer} minTotalInstances Minimum number of instances that should be maintained for this version.\n * @property {appengine(v1beta4).NetworkUtilization} networkUtilization Target scaling by network usage.\n * @property {integer} maxConcurrentRequests Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.\n * @property {string} coolDownPeriod Amount of time that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait between changes to the number of virtual machines. Only applicable for VM runtimes.\n * @property {string} maxPendingLatency Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.\n * @property {appengine(v1beta4).CpuUtilization} cpuUtilization Target scaling by CPU usage.\n * @property {appengine(v1beta4).DiskUtilization} diskUtilization Target scaling by disk usage.\n */\n/**\n * @typedef NetworkUtilization\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {integer} targetReceivedBytesPerSec Target bytes received per second.\n * @property {integer} targetSentPacketsPerSec Target packets sent per second.\n * @property {integer} targetSentBytesPerSec Target bytes sent per second.\n * @property {integer} targetReceivedPacketsPerSec Target packets received per second.\n */\n/**\n * @typedef Location\n * @memberOf! appengine(v1beta4)\n * @type object\n* @property {string} name Resource name for the location, which may vary between implementations. For example: &quot;projects/example-project/locations/us-east1&quot;\n* @property {string} locationId The canonical id for this location. For example: &quot;us-east1&quot;.\n* @property {object} metadata Service-specific metadata. For example the available capacity at the given location.\n* @property {object} labels Cross-service attributes for the location. For example\n{&quot;cloud.googleapis.com/region&quot;: &quot;us-east1&quot;}\n\n*/\n/**\n * @typedef HealthCheck\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {integer} restartThreshold Number of consecutive failed health checks required before an instance is restarted.\n * @property {integer} healthyThreshold Number of consecutive successful health checks required before receiving traffic.\n * @property {string} checkInterval Interval between health checks.\n * @property {string} timeout Time before the health check is considered failed.\n * @property {integer} unhealthyThreshold Number of consecutive failed health checks required before removing traffic.\n * @property {boolean} disableHealthCheck Whether to explicitly disable health checks for this instance.\n * @property {string} host Host header to send when performing an HTTP health check. Example: &quot;myapp.appspot.com&quot;\n */\n/**\n * @typedef DebugInstanceRequest\n * @memberOf! appengine(v1beta4)\n * @type object\n* @property {string} sshKey Public SSH key to add to the instance. Examples:\n[USERNAME]:ssh-rsa [KEY_VALUE] [USERNAME]\n[USERNAME]:ssh-rsa [KEY_VALUE] google-ssh {&quot;userName&quot;:&quot;[USERNAME]&quot;,&quot;expireOn&quot;:&quot;[EXPIRE_TIME]&quot;}For more information, see Adding and Removing SSH Keys (https://cloud.google.com/compute/docs/instances/adding-removing-ssh-keys).\n*/\n/**\n * @typedef SourceReference\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} revisionId The canonical, persistent identifier of the deployed revision. Aliases that include tags or branch names are not allowed. Example (git): &quot;2198322f89e0bb2e25021667c2ed489d1fd34e6b&quot;\n * @property {string} repository URI string identifying the repository. Example: &quot;https://source.developers.google.com/p/app-123/r/default&quot;\n */\n/**\n * @typedef OperationMetadataV1Beta5\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} method API method name that initiated this operation. Example: google.appengine.v1beta5.Version.CreateVersion.@OutputOnly\n * @property {string} insertTime Timestamp that this operation was created.@OutputOnly\n * @property {string} endTime Timestamp that this operation completed.@OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly\n */\n/**\n * @typedef Library\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} version Version of the library to select, or &quot;latest&quot;.\n * @property {string} name Name of the library. Example: &quot;django&quot;.\n */\n/**\n * @typedef ListLocationsResponse\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {appengine(v1beta4).Location[]} locations A list of locations that matches the specified filter in the request.\n * @property {string} nextPageToken The standard List next-page token.\n */\n/**\n * @typedef Version\n * @memberOf! appengine(v1beta4)\n * @type object\n* @property {object} envVariables Environment variables made available to the application.Only returned in GET requests if view=FULL is set.\n* @property {appengine(v1beta4).Network} network Extra network settings. Only applicable for VM runtimes.\n* @property {object} betaSettings Metadata settings that are supplied to this version to enable beta runtime features.\n* @property {string} env App Engine execution environment to use for this version.Defaults to 1.\n* @property {appengine(v1beta4).UrlMap[]} handlers An ordered list of URL-matching patterns that should be applied to incoming requests. The first matching URL handles the request and other request handlers are not attempted.Only returned in GET requests if view=FULL is set.\n* @property {string} deployer Email address of the user who created this version.@OutputOnly\n* @property {appengine(v1beta4).AutomaticScaling} automaticScaling Automatic scaling is based on request rate, response latencies, and other application metrics.\n* @property {appengine(v1beta4).HealthCheck} healthCheck Configures health checking for VM instances. Unhealthy instances are stopped and replaced with new instances. Only applicable for VM runtimes.Only returned in GET requests if view=FULL is set.\n* @property {boolean} threadsafe Whether multiple requests can be dispatched to this version at once.\n* @property {appengine(v1beta4).ManualScaling} manualScaling A module with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.\n* @property {string} name Full path to the Version resource in the API. Example: apps/myapp/modules/default/versions/v1.@OutputOnly\n* @property {appengine(v1beta4).ApiConfigHandler} apiConfig Serving configuration for Google Cloud Endpoints (https://cloud.google.com/appengine/docs/python/endpoints/).Only returned in GET requests if view=FULL is set.\n* @property {boolean} vm Whether to deploy this version in a container on a virtual machine.\n* @property {string} instanceClass Instance class that is used to run this version. Valid values are:\nAutomaticScaling: F1, F2, F4, F4_1G\nManualScaling or BasicScaling: B1, B2, B4, B8, B4_1GDefaults to F1 for AutomaticScaling and B1 for ManualScaling or BasicScaling.\n* @property {string} servingStatus Current serving status of this version. Only the versions with a SERVING status create instances and can be billed.SERVING_STATUS_UNSPECIFIED is an invalid value. Defaults to SERVING.\n* @property {appengine(v1beta4).Deployment} deployment Code and application artifacts that make up this version.Only returned in GET requests if view=FULL is set.\n* @property {string[]} inboundServices Before an application can receive email or XMPP messages, the application must be configured to enable the service.\n* @property {appengine(v1beta4).Resources} resources Machine resources for this version. Only applicable for VM runtimes.\n* @property {appengine(v1beta4).ErrorHandler[]} errorHandlers Custom static error pages. Limited to 10KB per page.Only returned in GET requests if view=FULL is set.\n* @property {string} defaultExpiration Duration that static files should be cached by web proxies and browsers. Only applicable if the corresponding StaticFilesHandler (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#staticfileshandler) does not specify its own expiration time.Only returned in GET requests if view=FULL is set.\n* @property {appengine(v1beta4).Library[]} libraries Configuration for third-party Python runtime libraries required by the application.Only returned in GET requests if view=FULL is set.\n* @property {string} nobuildFilesRegex Files that match this pattern will not be built into this version. Only applicable for Go runtimes.Only returned in GET requests if view=FULL is set.\n* @property {string} creationTime Time that this version was created.@OutputOnly\n* @property {appengine(v1beta4).BasicScaling} basicScaling A module with basic scaling will create an instance when the application receives a request. The instance will be turned down when the app becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.\n* @property {string} runtime Desired runtime. Example: python27.\n* @property {string} id Relative name of the version within the module. Example: v1. Version names can contain only lowercase letters, numbers, or hyphens. Reserved names: &quot;default&quot;, &quot;latest&quot;, and any name with the prefix &quot;ah-&quot;.\n*/\n/**\n * @typedef ContainerInfo\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {string} image URI to the hosted container image in Google Container Registry. The URI must be fully qualified and include a tag or digest. Examples: &quot;gcr.io/my-project/image:tag&quot; or &quot;gcr.io/my-project/image@digest&quot;\n */\n/**\n * @typedef RequestUtilization\n * @memberOf! appengine(v1beta4)\n * @type object\n * @property {integer} targetRequestCountPerSec Target requests per second.\n * @property {integer} targetConcurrentRequests Target number of concurrent requests.\n */\nmodule.exports = Appengine;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/appengine/v1beta5.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Google App Engine Admin API\n *\n * The App Engine Admin API enables developers to provision and manage their App Engine applications.\n *\n * @example\n * var google = require('googleapis');\n * var appengine = google.appengine('v1beta5');\n *\n * @namespace appengine\n * @type {Function}\n * @version v1beta5\n * @variation v1beta5\n * @param {object=} options Options for Appengine\n */\nfunction Appengine(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.apps = {\n\n    /**\n     * appengine.apps.get\n     *\n     * @desc Gets information about an application.\n     *\n     * @alias appengine.apps.get\n     * @memberOf! appengine(v1beta5)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.ensureResourcesExist Certain resources associated with an application are created on-demand. Controls whether these resources should be created when performing the GET operation. If specified and any resources could not be created, the request will fail with an error code. Additionally, this parameter can cause the request to take longer to complete. Note: This parameter will be deprecated in a future version of the API.\n     * @param {string} params.appsId Part of `name`. Name of the application to get. Example: apps/myapp.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * appengine.apps.patch\n     *\n     * @desc Updates the specified Application resource. You can update the following fields: auth_domain (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta5/apps#Application.FIELDS.auth_domain) default_cookie_expiration (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta5/apps#Application.FIELDS.default_cookie_expiration)\n     *\n     * @alias appengine.apps.patch\n     * @memberOf! appengine(v1beta5)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.appsId Part of `name`. Name of the Application resource to update. Example: apps/myapp.\n     * @param {string=} params.mask Standard field mask for the set of fields to be updated.\n     * @param {appengine(v1beta5).Application} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * appengine.apps.create\n     *\n     * @desc Creates an App Engine application for a Google Cloud Platform project. Required fields: id - The ID of the target Cloud Platform project. location - The region (https://cloud.google.com/appengine/docs/locations) where you want the App Engine application located.For more information about App Engine applications, see Managing Projects, Applications, and Billing (https://cloud.google.com/appengine/docs/python/console/).\n     *\n     * @alias appengine.apps.create\n     * @memberOf! appengine(v1beta5)\n     *\n     * @param {object} params Parameters for request\n     * @param {appengine(v1beta5).Application} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://appengine.googleapis.com/v1beta5/apps',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    services: {\n\n      /**\n       * appengine.apps.services.get\n       *\n       * @desc Gets the current configuration of the specified service.\n       *\n       * @alias appengine.apps.services.get\n       * @memberOf! appengine(v1beta5)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/services/default.\n       * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}/services/{servicesId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['appsId', 'servicesId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.services.list\n       *\n       * @desc Lists all the services in the application.\n       *\n       * @alias appengine.apps.services.list\n       * @memberOf! appengine(v1beta5)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp.\n       * @param {string=} params.pageToken Continuation token for fetching the next page of results.\n       * @param {integer=} params.pageSize Maximum results to return per page.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}/services',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.services.patch\n       *\n       * @desc Updates the configuration of the specified service.\n       *\n       * @alias appengine.apps.services.patch\n       * @memberOf! appengine(v1beta5)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.mask Standard field mask for the set of fields to be updated.\n       * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n       * @param {string} params.appsId Part of `name`. Name of the resource to update. Example: apps/myapp/services/default.\n       * @param {boolean=} params.migrateTraffic Set to true to gradually shift traffic to one or more versions that you specify. By default, traffic is shifted immediately. For gradual traffic migration, the target versions must be located within instances that are configured for both warmup requests (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta5/apps.services.versions#inboundservicetype) and automatic scaling (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta5/apps.services.versions#automaticscaling). You must specify the shardBy (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta5/apps.services#shardby) field in the Service resource. Gradual traffic migration is not supported in the App Engine flexible environment. For examples, see Migrating and Splitting Traffic (https://cloud.google.com/appengine/docs/admin-api/migrating-splitting-traffic).\n       * @param {appengine(v1beta5).Service} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}/services/{servicesId}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['servicesId', 'appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.services.delete\n       *\n       * @desc Deletes the specified service and all enclosed versions.\n       *\n       * @alias appengine.apps.services.delete\n       * @memberOf! appengine(v1beta5)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n       * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/services/default.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}/services/{servicesId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['servicesId', 'appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      versions: {\n\n        /**\n         * appengine.apps.services.versions.create\n         *\n         * @desc Deploys new code and resource files to a new version.\n         *\n         * @alias appengine.apps.services.versions.create\n         * @memberOf! appengine(v1beta5)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n         * @param {string} params.appsId Part of `name`. Name of the resource to update. For example: \"apps/myapp/services/default\".\n         * @param {appengine(v1beta5).Version} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}/services/{servicesId}/versions',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'servicesId'],\n            pathParams: ['servicesId', 'appsId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * appengine.apps.services.versions.delete\n         *\n         * @desc Deletes an existing version.\n         *\n         * @alias appengine.apps.services.versions.delete\n         * @memberOf! appengine(v1beta5)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n         * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.\n         * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        delete: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}',\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'servicesId', 'versionsId'],\n            pathParams: ['servicesId', 'appsId', 'versionsId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * appengine.apps.services.versions.get\n         *\n         * @desc Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource.\n         *\n         * @alias appengine.apps.services.versions.get\n         * @memberOf! appengine(v1beta5)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n         * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.\n         * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n         * @param {string=} params.view Controls the set of fields returned in the Get response.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        get: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'servicesId', 'versionsId'],\n            pathParams: ['servicesId', 'appsId', 'versionsId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * appengine.apps.services.versions.list\n         *\n         * @desc Lists the versions of a service.\n         *\n         * @alias appengine.apps.services.versions.list\n         * @memberOf! appengine(v1beta5)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/services/default.\n         * @param {string=} params.pageToken Continuation token for fetching the next page of results.\n         * @param {integer=} params.pageSize Maximum results to return per page.\n         * @param {string=} params.view Controls the set of fields returned in the List response.\n         * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}/services/{servicesId}/versions',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'servicesId'],\n            pathParams: ['appsId', 'servicesId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * appengine.apps.services.versions.patch\n         *\n         * @desc Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses: serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta5/apps.services.versions#Version.FIELDS.serving_status):  For Version resources that use basic scaling, manual scaling, or run in  the App Engine flexible environment. instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta5/apps.services.versions#Version.FIELDS.instance_class):  For Version resources that run in the App Engine standard environment. automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta5/apps.services.versions#Version.FIELDS.automatic_scaling):  For Version resources that use automatic scaling and run in the App  Engine standard environment. automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta5/apps.services.versions#Version.FIELDS.automatic_scaling):  For Version resources that use automatic scaling and run in the App  Engine standard environment.\n         *\n         * @alias appengine.apps.services.versions.patch\n         * @memberOf! appengine(v1beta5)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.appsId Part of `name`. Name of the resource to update. Example: apps/myapp/services/default/versions/1.\n         * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n         * @param {string=} params.mask Standard field mask for the set of fields to be updated.\n         * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n         * @param {appengine(v1beta5).Version} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        patch: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}',\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'servicesId', 'versionsId'],\n            pathParams: ['appsId', 'versionsId', 'servicesId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        instances: {\n\n          /**\n           * appengine.apps.services.versions.instances.delete\n           *\n           * @desc Stops a running instance.\n           *\n           * @alias appengine.apps.services.versions.instances.delete\n           * @memberOf! appengine(v1beta5)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.appsId Part of `name`. Name of the resource requested. For example: \"apps/myapp/services/default/versions/v1/instances/instance-1\".\n           * @param {string} params.instancesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          delete: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}',\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n              pathParams: ['appsId', 'instancesId', 'versionsId', 'servicesId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          },\n\n          /**\n           * appengine.apps.services.versions.instances.get\n           *\n           * @desc Gets instance information.\n           *\n           * @alias appengine.apps.services.versions.instances.get\n           * @memberOf! appengine(v1beta5)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1/instances/instance-1.\n           * @param {string} params.instancesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          get: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}',\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n              pathParams: ['servicesId', 'appsId', 'instancesId', 'versionsId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          },\n\n          /**\n           * appengine.apps.services.versions.instances.list\n           *\n           * @desc Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).\n           *\n           * @alias appengine.apps.services.versions.instances.list\n           * @memberOf! appengine(v1beta5)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.\n           * @param {string=} params.pageToken Continuation token for fetching the next page of results.\n           * @param {integer=} params.pageSize Maximum results to return per page.\n           * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          list: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances',\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'servicesId', 'versionsId'],\n              pathParams: ['servicesId', 'appsId', 'versionsId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          },\n\n          /**\n           * appengine.apps.services.versions.instances.debug\n           *\n           * @desc Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in \"debug mode\", the instance continues to serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable for instances in App Engine flexible environment.\n           *\n           * @alias appengine.apps.services.versions.instances.debug\n           * @memberOf! appengine(v1beta5)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1/instances/instance-1.\n           * @param {string} params.instancesId Part of `name`. See documentation of `appsId`.\n           * @param {appengine(v1beta5).DebugInstanceRequest} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          debug: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}:debug',\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n              pathParams: ['versionsId', 'servicesId', 'appsId', 'instancesId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          }\n        }\n      }\n    },\n\n    operations: {\n\n      /**\n       * appengine.apps.operations.list\n       *\n       * @desc Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding below allows API services to override the binding to use different resource name schemes, such as users/x/operations.\n       *\n       * @alias appengine.apps.operations.list\n       * @memberOf! appengine(v1beta5)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.filter The standard list filter.\n       * @param {string} params.appsId Part of `name`. The name of the operation collection.\n       * @param {string=} params.pageToken The standard list page token.\n       * @param {integer=} params.pageSize The standard list page size.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}/operations',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.operations.get\n       *\n       * @desc Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.\n       *\n       * @alias appengine.apps.operations.get\n       * @memberOf! appengine(v1beta5)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.operationsId Part of `name`. See documentation of `appsId`.\n       * @param {string} params.appsId Part of `name`. The name of the operation resource.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}/operations/{operationsId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'operationsId'],\n          pathParams: ['operationsId', 'appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    locations: {\n\n      /**\n       * appengine.apps.locations.list\n       *\n       * @desc Lists information about the supported locations for this service.\n       *\n       * @alias appengine.apps.locations.list\n       * @memberOf! appengine(v1beta5)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.filter The standard list filter.\n       * @param {string} params.appsId Part of `name`. The resource that owns the locations collection, if applicable.\n       * @param {string=} params.pageToken The standard list page token.\n       * @param {integer=} params.pageSize The standard list page size.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}/locations',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.locations.get\n       *\n       * @desc Get information about a location.\n       *\n       * @alias appengine.apps.locations.get\n       * @memberOf! appengine(v1beta5)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.locationsId Part of `name`. See documentation of `appsId`.\n       * @param {string} params.appsId Part of `name`. Resource name for the location.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta5/apps/{appsId}/locations/{locationsId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'locationsId'],\n          pathParams: ['locationsId', 'appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\n/**\n * @typedef Deployment\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {object} files Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.\n * @property {appengine(v1beta5).ContainerInfo} container The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.\n * @property {appengine(v1beta5).SourceReference[]} sourceReferences Origin of the source code for this deployment. There can be more than one source reference per version if source code is distributed among multiple repositories.\n */\n/**\n * @typedef Resources\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {appengine(v1beta5).Volume[]} volumes Volumes mounted within the app container.\n * @property {number} diskGb Disk size (GB) needed.\n * @property {number} cpu Number of CPU cores needed.\n * @property {number} memoryGb Memory (GB) needed.\n */\n/**\n * @typedef Service\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} name Full path to the Service resource in the API. Example: apps/myapp/services/default.@OutputOnly\n * @property {appengine(v1beta5).TrafficSplit} split Mapping that defines fractional HTTP traffic diversion to different versions within the service.\n * @property {string} id Relative name of the service within the application. Example: default.@OutputOnly\n */\n/**\n * @typedef Volume\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {number} sizeGb Volume size in gigabytes.\n * @property {string} name Unique name for the volume.\n * @property {string} volumeType Underlying volume type, e.g. &#39;tmpfs&#39;.\n */\n/**\n * @typedef ListOperationsResponse\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {appengine(v1beta5).Operation[]} operations A list of operations that matches the specified filter in the request.\n * @property {string} nextPageToken The standard List next-page token.\n */\n/**\n * @typedef OperationMetadata\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} endTime Timestamp that this operation completed.@OutputOnly\n * @property {string} operationType Type of this operation. Deprecated, use method field instead. Example: &quot;create_version&quot;.@OutputOnly\n * @property {string} insertTime Timestamp that this operation was created.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/modules/default.@OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} method API method that initiated this operation. Example: google.appengine.v1beta4.Version.CreateVersion.@OutputOnly\n */\n/**\n * @typedef ListInstancesResponse\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} nextPageToken Continuation token for fetching the next page of results.\n * @property {appengine(v1beta5).Instance[]} instances The instances belonging to the requested version.\n */\n/**\n * @typedef OperationMetadataV1\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} ephemeralMessage Ephemeral message that may change every time the operation is polled. @OutputOnly\n * @property {string} method API method that initiated this operation. Example: google.appengine.v1.Versions.CreateVersion.@OutputOnly\n * @property {string} endTime Time that this operation completed.@OutputOnly\n * @property {string} insertTime Time that this operation was created.@OutputOnly\n * @property {string[]} warning Durable messages that persist on every operation poll. @OutputOnly\n */\n/**\n * @typedef ErrorHandler\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} errorCode Error condition this handler applies to.\n * @property {string} mimeType MIME type of file. Defaults to text/html.\n * @property {string} staticFile Static file content to be served for this error.\n */\n/**\n * @typedef Application\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} name Full path to the Application resource in the API. Example: apps/myapp.@OutputOnly\n * @property {string} authDomain Google Apps authentication domain that controls which users can access this application.Defaults to open access for any Google Account.\n * @property {appengine(v1beta5).IdentityAwareProxy} iap \n * @property {string} defaultCookieExpiration Cookie expiration policy for this application.\n * @property {string} id Identifier of the Application resource. This identifier is equivalent to the project ID of the Google Cloud Platform project where you want to deploy your application. Example: myapp.\n * @property {string} codeBucket A Google Cloud Storage bucket that can be used for storing files associated with this application. This bucket is associated with the application and can be used by the gcloud deployment commands.@OutputOnly\n * @property {string} location Location from which this application will be run. Application instances will run out of data centers in the chosen location, which is also where all of the application&#39;s end user content is stored.Defaults to us-central.Options are:us-central - Central USeurope-west - Western Europeus-east1 - Eastern US\n * @property {string} defaultBucket A Google Cloud Storage bucket that can be used by the application to store content.@OutputOnly\n * @property {appengine(v1beta5).UrlDispatchRule[]} dispatchRules HTTP path dispatch rules for requests to the application that do not explicitly target a service or version. Rules are order-dependent.@OutputOnly\n * @property {string} defaultHostname Hostname used to reach the application, as resolved by App Engine.@OutputOnly\n */\n/**\n * @typedef Network\n * @memberOf! appengine(v1beta5)\n * @type object\n* @property {string[]} forwardedPorts List of ports, or port pairs, to forward from the virtual machine to the application container.\n* @property {string} instanceTag Tag to apply to the VM instance during creation.\n* @property {string} subnetworkName Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.If a subnetwork name is specified, a network name will also be required unless it is for the default network.\nIf the network the VM instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range.\nIf the network the VM instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetwork_name) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network.\nIf the network the VM instance is being created in is a custom Subnet Mode Network, then the subnetwork_name must be specified and the IP address is created from the IPCidrRange of the subnetwork.If specified, the subnetwork must exist in the same region as the Flex app.\n* @property {string} name Google Cloud Platform network where the virtual machines are created. Specify the short name, not the resource path.Defaults to default.\n*/\n/**\n * @typedef UrlDispatchRule\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} domain Domain name to match against. The wildcard &quot;*&quot; is supported if specified before a period: &quot;*.&quot;.Defaults to matching all domains: &quot;*&quot;.\n * @property {string} service Resource id of a service in this application that should serve the matched request. The service must already exist. Example: default.\n * @property {string} path Pathname within the host. Must start with a &quot;/&quot;. A single &quot;*&quot; can be included at the end of the path. The sum of the lengths of the domain and path may not exceed 100 characters.\n */\n/**\n * @typedef Instance\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} appEngineRelease App Engine release this instance is running on.@OutputOnly\n * @property {string} startTimestamp Time that this instance was started.@OutputOnly\n * @property {string} vmName Name of the virtual machine where this instance lives. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {number} qps Average queries per second (QPS) over the last minute.@OutputOnly\n * @property {string} vmId Virtual machine ID of this instance. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {boolean} vmUnlocked Whether this instance is in debug mode. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {string} name Full path to the Instance resource in the API. Example: apps/myapp/services/default/versions/v1/instances/instance-1.@OutputOnly\n * @property {string} vmZoneName Zone where the virtual machine is located. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {integer} averageLatency Average latency (ms) over the last minute.@OutputOnly\n * @property {string} id Relative name of the instance within the version. Example: instance-1.@OutputOnly\n * @property {string} vmIp The IP address of this instance. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {string} memoryUsage Total memory in use (bytes).@OutputOnly\n * @property {integer} errors Number of errors since this instance was started.@OutputOnly\n * @property {string} availability Availability of the instance.@OutputOnly\n * @property {string} vmStatus Status of the virtual machine where this instance lives. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {integer} requests Number of requests since this instance was started.@OutputOnly\n */\n/**\n * @typedef ListVersionsResponse\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {appengine(v1beta5).Version[]} versions The versions belonging to the requested service.\n * @property {string} nextPageToken Continuation token for fetching the next page of results.\n */\n/**\n * @typedef ApiEndpointHandler\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} scriptPath Path to the script from the application root directory.\n */\n/**\n * @typedef AutomaticScaling\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {appengine(v1beta5).DiskUtilization} diskUtilization Target scaling by disk usage.\n * @property {string} minPendingLatency Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.\n * @property {integer} maxIdleInstances Maximum number of idle instances that should be maintained for this version.\n * @property {appengine(v1beta5).RequestUtilization} requestUtilization Target scaling by request utilization.\n * @property {integer} minIdleInstances Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a module.\n * @property {integer} maxTotalInstances Maximum number of instances that should be started to handle requests.\n * @property {integer} minTotalInstances Minimum number of instances that should be maintained for this version.\n * @property {appengine(v1beta5).NetworkUtilization} networkUtilization Target scaling by network usage.\n * @property {string} coolDownPeriod Amount of time that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait between changes to the number of virtual machines. Only applicable for VM runtimes.\n * @property {integer} maxConcurrentRequests Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.\n * @property {string} maxPendingLatency Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.\n * @property {appengine(v1beta5).CpuUtilization} cpuUtilization Target scaling by CPU usage.\n */\n/**\n * @typedef Location\n * @memberOf! appengine(v1beta5)\n * @type object\n* @property {object} labels Cross-service attributes for the location. For example\n{&quot;cloud.googleapis.com/region&quot;: &quot;us-east1&quot;}\n\n* @property {string} name Resource name for the location, which may vary between implementations. For example: &quot;projects/example-project/locations/us-east1&quot;\n* @property {string} locationId The canonical id for this location. For example: &quot;us-east1&quot;.\n* @property {object} metadata Service-specific metadata. For example the available capacity at the given location.\n*/\n/**\n * @typedef NetworkUtilization\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {integer} targetReceivedBytesPerSec Target bytes received per second.\n * @property {integer} targetSentPacketsPerSec Target packets sent per second.\n * @property {integer} targetSentBytesPerSec Target bytes sent per second.\n * @property {integer} targetReceivedPacketsPerSec Target packets received per second.\n */\n/**\n * @typedef HealthCheck\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {integer} unhealthyThreshold Number of consecutive failed health checks required before removing traffic.\n * @property {boolean} disableHealthCheck Whether to explicitly disable health checks for this instance.\n * @property {string} host Host header to send when performing an HTTP health check. Example: &quot;myapp.appspot.com&quot;\n * @property {integer} restartThreshold Number of consecutive failed health checks required before an instance is restarted.\n * @property {integer} healthyThreshold Number of consecutive successful health checks required before receiving traffic.\n * @property {string} checkInterval Interval between health checks.\n * @property {string} timeout Time before the health check is considered failed.\n */\n/**\n * @typedef DebugInstanceRequest\n * @memberOf! appengine(v1beta5)\n * @type object\n* @property {string} sshKey Public SSH key to add to the instance. Examples:\n[USERNAME]:ssh-rsa [KEY_VALUE] [USERNAME]\n[USERNAME]:ssh-rsa [KEY_VALUE] google-ssh {&quot;userName&quot;:&quot;[USERNAME]&quot;,&quot;expireOn&quot;:&quot;[EXPIRE_TIME]&quot;}For more information, see Adding and Removing SSH Keys (https://cloud.google.com/compute/docs/instances/adding-removing-ssh-keys).\n*/\n/**\n * @typedef SourceReference\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} repository URI string identifying the repository. Example: &quot;https://source.developers.google.com/p/app-123/r/default&quot;\n * @property {string} revisionId The canonical, persistent identifier of the deployed revision. Aliases that include tags or branch names are not allowed. Example (git): &quot;2198322f89e0bb2e25021667c2ed489d1fd34e6b&quot;\n */\n/**\n * @typedef OperationMetadataV1Beta5\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} insertTime Timestamp that this operation was created.@OutputOnly\n * @property {string} endTime Timestamp that this operation completed.@OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly\n * @property {string} method API method name that initiated this operation. Example: google.appengine.v1beta5.Version.CreateVersion.@OutputOnly\n */\n/**\n * @typedef Library\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} name Name of the library. Example: &quot;django&quot;.\n * @property {string} version Version of the library to select, or &quot;latest&quot;.\n */\n/**\n * @typedef ListLocationsResponse\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} nextPageToken The standard List next-page token.\n * @property {appengine(v1beta5).Location[]} locations A list of locations that matches the specified filter in the request.\n */\n/**\n * @typedef Version\n * @memberOf! appengine(v1beta5)\n * @type object\n* @property {appengine(v1beta5).EndpointsApiService} endpointsApiService Cloud Endpoints configuration.If endpoints_api_service is set, the Cloud Endpoints Extensible Service Proxy will be provided to serve the API implemented by the app.\n* @property {boolean} vm Whether to deploy this version in a container on a virtual machine.\n* @property {string} instanceClass Instance class that is used to run this version. Valid values are:\nAutomaticScaling: F1, F2, F4, F4_1G\nManualScaling or BasicScaling: B1, B2, B4, B8, B4_1GDefaults to F1 for AutomaticScaling and B1 for ManualScaling or BasicScaling.\n* @property {string} servingStatus Current serving status of this version. Only the versions with a SERVING status create instances and can be billed.SERVING_STATUS_UNSPECIFIED is an invalid value. Defaults to SERVING.\n* @property {appengine(v1beta5).Deployment} deployment Code and application artifacts that make up this version.Only returned in GET requests if view=FULL is set.\n* @property {appengine(v1beta5).Resources} resources Machine resources for this version. Only applicable for VM runtimes.\n* @property {string[]} inboundServices Before an application can receive email or XMPP messages, the application must be configured to enable the service.\n* @property {appengine(v1beta5).ErrorHandler[]} errorHandlers Custom static error pages. Limited to 10KB per page.Only returned in GET requests if view=FULL is set.\n* @property {string} defaultExpiration Duration that static files should be cached by web proxies and browsers. Only applicable if the corresponding StaticFilesHandler (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#staticfileshandler) does not specify its own expiration time.Only returned in GET requests if view=FULL is set.\n* @property {appengine(v1beta5).Library[]} libraries Configuration for third-party Python runtime libraries required by the application.Only returned in GET requests if view=FULL is set.\n* @property {string} creationTime Time that this version was created.@OutputOnly\n* @property {string} nobuildFilesRegex Files that match this pattern will not be built into this version. Only applicable for Go runtimes.Only returned in GET requests if view=FULL is set.\n* @property {appengine(v1beta5).BasicScaling} basicScaling A service with basic scaling will create an instance when the application receives a request. The instance will be turned down when the app becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.\n* @property {string} runtime Desired runtime. Example: python27.\n* @property {string} id Relative name of the version within the module. Example: v1. Version names can contain only lowercase letters, numbers, or hyphens. Reserved names: &quot;default&quot;, &quot;latest&quot;, and any name with the prefix &quot;ah-&quot;.\n* @property {object} envVariables Environment variables made available to the application.Only returned in GET requests if view=FULL is set.\n* @property {appengine(v1beta5).Network} network Extra network settings. Only applicable for VM runtimes.\n* @property {object} betaSettings Metadata settings that are supplied to this version to enable beta runtime features.\n* @property {string} env App Engine execution environment to use for this version.Defaults to 1.\n* @property {appengine(v1beta5).UrlMap[]} handlers An ordered list of URL-matching patterns that should be applied to incoming requests. The first matching URL handles the request and other request handlers are not attempted.Only returned in GET requests if view=FULL is set.\n* @property {string} deployer Email address of the user who created this version.@OutputOnly\n* @property {appengine(v1beta5).AutomaticScaling} automaticScaling Automatic scaling is based on request rate, response latencies, and other application metrics.\n* @property {string} diskUsageBytes Total size of version files hosted on App Engine disk in bytes.@OutputOnly\n* @property {appengine(v1beta5).HealthCheck} healthCheck Configures health checking for VM instances. Unhealthy instances are be stopped and replaced with new instances. Only applicable for VM runtimes.Only returned in GET requests if view=FULL is set.\n* @property {boolean} threadsafe Whether multiple requests can be dispatched to this version at once.\n* @property {appengine(v1beta5).ManualScaling} manualScaling A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.\n* @property {string} name Full path to the Version resource in the API. Example: apps/myapp/services/default/versions/v1.@OutputOnly\n* @property {appengine(v1beta5).ApiConfigHandler} apiConfig Serving configuration for Google Cloud Endpoints (https://cloud.google.com/appengine/docs/python/endpoints/).Only returned in GET requests if view=FULL is set.\n*/\n/**\n * @typedef ContainerInfo\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} image URI to the hosted container image in Google Container Registry. The URI must be fully qualified and include a tag or digest. Examples: &quot;gcr.io/my-project/image:tag&quot; or &quot;gcr.io/my-project/image@digest&quot;\n */\n/**\n * @typedef RequestUtilization\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {integer} targetRequestCountPerSec Target requests per second.\n * @property {integer} targetConcurrentRequests Target number of concurrent requests.\n */\n/**\n * @typedef UrlMap\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {appengine(v1beta5).ApiEndpointHandler} apiEndpoint Uses API Endpoints to handle requests.\n * @property {appengine(v1beta5).StaticFilesHandler} staticFiles Returns the contents of a file, such as an image, as the response.\n * @property {string} redirectHttpResponseCode 30x code to use when performing redirects for the secure field. Defaults to 302.\n * @property {string} securityLevel Security (HTTPS) enforcement for this URL.\n * @property {string} authFailAction Action to take when users access resources that require authentication. Defaults to redirect.\n * @property {appengine(v1beta5).ScriptHandler} script Executes a script to handle the request that matches this URL pattern.\n * @property {string} urlRegex A URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings. All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.\n * @property {string} login Level of login required to access this resource.\n */\n/**\n * @typedef EndpointsApiService\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} name Endpoints service name which is the name of the &quot;service&quot; resource in the Service Management API. For example &quot;myapi.endpoints.myproject.cloud.goog&quot;\n * @property {string} configId Endpoints service configuration id as specified by the Service Management API. For example &quot;2016-09-19r1&quot;\n */\n/**\n * @typedef ApiConfigHandler\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} url URL to serve the endpoint at.\n * @property {string} securityLevel Security (HTTPS) enforcement for this URL.\n * @property {string} authFailAction Action to take when users access resources that require authentication. Defaults to redirect.\n * @property {string} script Path to the script from the application root directory.\n * @property {string} login Level of login required to access this resource. Defaults to optional.\n */\n/**\n * @typedef Operation\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {object} response The normal response of the operation in case of success. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse.\n * @property {string} name The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should have the format of operations/some/unique/name.\n * @property {appengine(v1beta5).Status} error The error result of the operation in case of failure or cancellation.\n * @property {object} metadata Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.\n * @property {boolean} done If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.\n */\n/**\n * @typedef ScriptHandler\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} scriptPath Path to the script from the application root directory.\n */\n/**\n * @typedef StaticFilesHandler\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} mimeType MIME type used to serve all files served by this handler. Defaults to file-specific MIME types, which are derived from each file&#39;s filename extension.\n * @property {boolean} requireMatchingFile Whether this handler should match the request if the file referenced by the handler does not exist.\n * @property {string} expiration Time a static file served by this handler should be cached.\n * @property {object} httpHeaders HTTP headers to use for all responses from these URLs.\n * @property {boolean} applicationReadable Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.\n * @property {string} uploadPathRegex Regular expression that matches the file paths for all files that should be referenced by this handler.\n * @property {string} path Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.\n */\n/**\n * @typedef FileInfo\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} sha1Sum The SHA1 hash of the file, in hex.\n * @property {string} mimeType The MIME type of the file.Defaults to the value from Google Cloud Storage.\n * @property {string} sourceUrl URL source to use to fetch this file. Must be a URL to a resource in Google Cloud Storage in the form &#39;http(s)://storage.googleapis.com/&lt;bucket&gt;/&lt;object&gt;&#39;.\n */\n/**\n * @typedef DiskUtilization\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {integer} targetWriteOpsPerSec Target ops written per second.\n * @property {integer} targetWriteBytesPerSec Target bytes written per second.\n * @property {integer} targetReadOpsPerSec Target ops read per second.\n * @property {integer} targetReadBytesPerSec Target bytes read per second.\n */\n/**\n * @typedef BasicScaling\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {integer} maxInstances Maximum number of instances to create for this version.\n * @property {string} idleTimeout Duration of time after the last request that an instance must wait before the instance is shut down.\n */\n/**\n * @typedef OperationMetadataExperimental\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} method API method that initiated this operation. Example: google.appengine.experimental.CustomDomains.CreateCustomDomain.@OutputOnly\n * @property {string} insertTime Time that this operation was created.@OutputOnly\n * @property {string} endTime Time that this operation completed.@OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/customDomains/example.com.@OutputOnly\n */\n/**\n * @typedef CpuUtilization\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} aggregationWindowLength Period of time over which CPU utilization is calculated.\n * @property {number} targetUtilization Target CPU utilization ratio to maintain when scaling. Must be between 0 and 1.\n */\n/**\n * @typedef Status\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {integer} code The status code, which should be an enum value of google.rpc.Code.\n * @property {string} message A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.\n * @property {object[]} details A list of messages that carry the error details. There will be a common set of message types for APIs to use.\n */\n/**\n * @typedef IdentityAwareProxy\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} oauth2ClientSecret For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2_client_secret_sha256 field.@InputOnly\n * @property {string} oauth2ClientId OAuth2 client ID to use for the authentication flow.\n * @property {string} oauth2ClientSecretSha256 Hex-encoded SHA-256 hash of the client secret.@OutputOnly\n * @property {boolean} enabled Whether the serving infrastructure will authenticate and authorize all incoming requests.If true, the oauth2_client_id and oauth2_client_secret fields must be non-empty.\n */\n/**\n * @typedef ManualScaling\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {integer} instances Number of instances to assign to the service at the start. This number can later be altered by using the Modules API (https://cloud.google.com/appengine/docs/python/modules/functions) set_num_instances() function.\n */\n/**\n * @typedef TrafficSplit\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string} shardBy Mechanism used to determine which version a request is sent to. The traffic selection algorithm will be stable for either type until allocations are changed.\n * @property {object} allocations Mapping from version IDs within the service to fractional (0.000, 1] allocations of traffic for that version. Each version can be specified only once, but some versions in the service may not have any traffic allocation. Services that have traffic allocated cannot be deleted until either the service is deleted or their traffic allocation is removed. Allocations must sum to 1. Up to two decimal place precision is supported for IP-based splits and up to three decimal places is supported for cookie-based splits.\n */\n/**\n * @typedef LocationMetadata\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {boolean} flexibleEnvironmentAvailable App Engine Flexible Environment is available in the given location.@OutputOnly\n * @property {boolean} standardEnvironmentAvailable App Engine Standard Environment is available in the given location.@OutputOnly\n */\n/**\n * @typedef OperationMetadataV1Beta\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {string[]} warning Durable messages that persist on every operation poll. @OutputOnly\n * @property {string} insertTime Time that this operation was created.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} ephemeralMessage Ephemeral message that may change every time the operation is polled. @OutputOnly\n * @property {string} method API method that initiated this operation. Example: google.appengine.v1beta.Versions.CreateVersion.@OutputOnly\n * @property {string} endTime Time that this operation completed.@OutputOnly\n */\n/**\n * @typedef ListServicesResponse\n * @memberOf! appengine(v1beta5)\n * @type object\n * @property {appengine(v1beta5).Service[]} services The services belonging to the requested application.\n * @property {string} nextPageToken Continuation token for fetching the next page of results.\n */\nmodule.exports = Appengine;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/appengine/v1beta.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Google App Engine Admin API\n *\n * The App Engine Admin API enables developers to provision and manage their App Engine applications.\n *\n * @example\n * var google = require('googleapis');\n * var appengine = google.appengine('v1beta');\n *\n * @namespace appengine\n * @type {Function}\n * @version v1beta\n * @variation v1beta\n * @param {object=} options Options for Appengine\n */\nfunction Appengine(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.apps = {\n\n    /**\n     * appengine.apps.repair\n     *\n     * @desc Recreates the required App Engine features for the specified App Engine application, for example a Cloud Storage bucket or App Engine service account. Use this method if you receive an error message about a missing feature, for example, Error retrieving the App Engine service account.\n     *\n     * @alias appengine.apps.repair\n     * @memberOf! appengine(v1beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.appsId Part of `name`. Name of the application to repair. Example: apps/myapp\n     * @param {appengine(v1beta).RepairApplicationRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    repair: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}:repair',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * appengine.apps.get\n     *\n     * @desc Gets information about an application.\n     *\n     * @alias appengine.apps.get\n     * @memberOf! appengine(v1beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.appsId Part of `name`. Name of the Application resource to get. Example: apps/myapp.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * appengine.apps.patch\n     *\n     * @desc Updates the specified Application resource. You can update the following fields: auth_domain - Google authentication domain for controlling user access to the application. default_cookie_expiration - Cookie expiration policy for the application.\n     *\n     * @alias appengine.apps.patch\n     * @memberOf! appengine(v1beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.updateMask Standard field mask for the set of fields to be updated.\n     * @param {string} params.appsId Part of `name`. Name of the Application resource to update. Example: apps/myapp.\n     * @param {appengine(v1beta).Application} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * appengine.apps.create\n     *\n     * @desc Creates an App Engine application for a Google Cloud Platform project. Required fields: id - The ID of the target Cloud Platform project. location - The region (https://cloud.google.com/appengine/docs/locations) where you want the App Engine application located.For more information about App Engine applications, see Managing Projects, Applications, and Billing (https://cloud.google.com/appengine/docs/python/console/).\n     *\n     * @alias appengine.apps.create\n     * @memberOf! appengine(v1beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {appengine(v1beta).Application} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://appengine.googleapis.com/v1beta/apps',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    authorizedDomains: {\n\n      /**\n       * appengine.apps.authorizedDomains.list\n       *\n       * @desc Lists all domains the user is authorized to administer.\n       *\n       * @alias appengine.apps.authorizedDomains.list\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `parent`. Name of the parent Application resource. Example: apps/myapp.\n       * @param {string=} params.pageToken Continuation token for fetching the next page of results.\n       * @param {integer=} params.pageSize Maximum results to return per page.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/authorizedDomains',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    operations: {\n\n      /**\n       * appengine.apps.operations.list\n       *\n       * @desc Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding below allows API services to override the binding to use different resource name schemes, such as users/x/operations.\n       *\n       * @alias appengine.apps.operations.list\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.filter The standard list filter.\n       * @param {string} params.appsId Part of `name`. The name of the operation collection.\n       * @param {string=} params.pageToken The standard list page token.\n       * @param {integer=} params.pageSize The standard list page size.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/operations',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.operations.get\n       *\n       * @desc Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.\n       *\n       * @alias appengine.apps.operations.get\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.operationsId Part of `name`. See documentation of `appsId`.\n       * @param {string} params.appsId Part of `name`. The name of the operation resource.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/operations/{operationsId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'operationsId'],\n          pathParams: ['operationsId', 'appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    domainMappings: {\n\n      /**\n       * appengine.apps.domainMappings.create\n       *\n       * @desc Maps a domain to an application. A user must be authorized to administer a domain in order to map it to an application. For a list of available authorized domains, see AuthorizedDomains.ListAuthorizedDomains.\n       *\n       * @alias appengine.apps.domainMappings.create\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `parent`. Name of the parent Application resource. Example: apps/myapp.\n       * @param {appengine(v1beta).DomainMapping} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/domainMappings',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.domainMappings.delete\n       *\n       * @desc Deletes the specified domain mapping. A user must be authorized to administer the associated domain in order to delete a DomainMapping resource.\n       *\n       * @alias appengine.apps.domainMappings.delete\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `name`. Name of the resource to delete. Example: apps/myapp/domainMappings/example.com.\n       * @param {string} params.domainMappingsId Part of `name`. See documentation of `appsId`.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/domainMappings/{domainMappingsId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'domainMappingsId'],\n          pathParams: ['appsId', 'domainMappingsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.domainMappings.list\n       *\n       * @desc Lists the domain mappings on an application.\n       *\n       * @alias appengine.apps.domainMappings.list\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `parent`. Name of the parent Application resource. Example: apps/myapp.\n       * @param {string=} params.pageToken Continuation token for fetching the next page of results.\n       * @param {integer=} params.pageSize Maximum results to return per page.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/domainMappings',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.domainMappings.get\n       *\n       * @desc Gets the specified domain mapping.\n       *\n       * @alias appengine.apps.domainMappings.get\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.domainMappingsId Part of `name`. See documentation of `appsId`.\n       * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/domainMappings/example.com.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/domainMappings/{domainMappingsId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'domainMappingsId'],\n          pathParams: ['domainMappingsId', 'appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.domainMappings.patch\n       *\n       * @desc Updates the specified domain mapping. To map an SSL certificate to a domain mapping, update certificate_id to point to an AuthorizedCertificate resource. A user must be authorized to administer the associated domain in order to update a DomainMapping resource.\n       *\n       * @alias appengine.apps.domainMappings.patch\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `name`. Name of the resource to update. Example: apps/myapp/domainMappings/example.com.\n       * @param {string} params.domainMappingsId Part of `name`. See documentation of `appsId`.\n       * @param {string=} params.updateMask Standard field mask for the set of fields to be updated.\n       * @param {appengine(v1beta).DomainMapping} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/domainMappings/{domainMappingsId}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'domainMappingsId'],\n          pathParams: ['appsId', 'domainMappingsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    locations: {\n\n      /**\n       * appengine.apps.locations.list\n       *\n       * @desc Lists information about the supported locations for this service.\n       *\n       * @alias appengine.apps.locations.list\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer=} params.pageSize The standard list page size.\n       * @param {string=} params.filter The standard list filter.\n       * @param {string} params.appsId Part of `name`. The resource that owns the locations collection, if applicable.\n       * @param {string=} params.pageToken The standard list page token.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/locations',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.locations.get\n       *\n       * @desc Get information about a location.\n       *\n       * @alias appengine.apps.locations.get\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.locationsId Part of `name`. See documentation of `appsId`.\n       * @param {string} params.appsId Part of `name`. Resource name for the location.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/locations/{locationsId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'locationsId'],\n          pathParams: ['locationsId', 'appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    authorizedCertificates: {\n\n      /**\n       * appengine.apps.authorizedCertificates.delete\n       *\n       * @desc Deletes the specified SSL certificate.\n       *\n       * @alias appengine.apps.authorizedCertificates.delete\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.authorizedCertificatesId Part of `name`. See documentation of `appsId`.\n       * @param {string} params.appsId Part of `name`. Name of the resource to delete. Example: apps/myapp/authorizedCertificates/12345.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'authorizedCertificatesId'],\n          pathParams: ['authorizedCertificatesId', 'appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.authorizedCertificates.list\n       *\n       * @desc Lists all SSL certificates the user is authorized to administer.\n       *\n       * @alias appengine.apps.authorizedCertificates.list\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `parent`. Name of the parent Application resource. Example: apps/myapp.\n       * @param {string=} params.pageToken Continuation token for fetching the next page of results.\n       * @param {integer=} params.pageSize Maximum results to return per page.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/authorizedCertificates',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.authorizedCertificates.get\n       *\n       * @desc Gets the specified SSL certificate.\n       *\n       * @alias appengine.apps.authorizedCertificates.get\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/authorizedCertificates/12345.\n       * @param {string=} params.view Controls the set of fields returned in the GET response.\n       * @param {string} params.authorizedCertificatesId Part of `name`. See documentation of `appsId`.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'authorizedCertificatesId'],\n          pathParams: ['appsId', 'authorizedCertificatesId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.authorizedCertificates.patch\n       *\n       * @desc Updates the specified SSL certificate. To renew a certificate and maintain its existing domain mappings, update certificate_data with a new certificate. The new certificate must be applicable to the same domains as the original certificate. The certificate display_name may also be updated.\n       *\n       * @alias appengine.apps.authorizedCertificates.patch\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.updateMask Standard field mask for the set of fields to be updated. Updates are only supported on the certificate_raw_data and display_name fields.\n       * @param {string} params.appsId Part of `name`. Name of the resource to update. Example: apps/myapp/authorizedCertificates/12345.\n       * @param {string} params.authorizedCertificatesId Part of `name`. See documentation of `appsId`.\n       * @param {appengine(v1beta).AuthorizedCertificate} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'authorizedCertificatesId'],\n          pathParams: ['appsId', 'authorizedCertificatesId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.authorizedCertificates.create\n       *\n       * @desc Uploads the specified SSL certificate.\n       *\n       * @alias appengine.apps.authorizedCertificates.create\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `parent`. Name of the parent Application resource. Example: apps/myapp.\n       * @param {appengine(v1beta).AuthorizedCertificate} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/authorizedCertificates',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    services: {\n\n      /**\n       * appengine.apps.services.delete\n       *\n       * @desc Deletes the specified service and all enclosed versions.\n       *\n       * @alias appengine.apps.services.delete\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n       * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/services/default.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      delete: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/services/{servicesId}',\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['servicesId', 'appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.services.list\n       *\n       * @desc Lists all the services in the application.\n       *\n       * @alias appengine.apps.services.list\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.appsId Part of `parent`. Name of the parent Application resource. Example: apps/myapp.\n       * @param {string=} params.pageToken Continuation token for fetching the next page of results.\n       * @param {integer=} params.pageSize Maximum results to return per page.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/services',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.services.get\n       *\n       * @desc Gets the current configuration of the specified service.\n       *\n       * @alias appengine.apps.services.get\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n       * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/services/default.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/services/{servicesId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['servicesId', 'appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * appengine.apps.services.patch\n       *\n       * @desc Updates the configuration of the specified service.\n       *\n       * @alias appengine.apps.services.patch\n       * @memberOf! appengine(v1beta)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.updateMask Standard field mask for the set of fields to be updated.\n       * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n       * @param {string} params.appsId Part of `name`. Name of the resource to update. Example: apps/myapp/services/default.\n       * @param {boolean=} params.migrateTraffic Set to true to gradually shift traffic to one or more versions that you specify. By default, traffic is shifted immediately. For gradual traffic migration, the target versions must be located within instances that are configured for both warmup requests (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#inboundservicetype) and automatic scaling (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#automaticscaling). You must specify the shardBy (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services#shardby) field in the Service resource. Gradual traffic migration is not supported in the App Engine flexible environment. For examples, see Migrating and Splitting Traffic (https://cloud.google.com/appengine/docs/admin-api/migrating-splitting-traffic).\n       * @param {appengine(v1beta).Service} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      patch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/services/{servicesId}',\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['servicesId', 'appsId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      versions: {\n\n        /**\n         * appengine.apps.services.versions.delete\n         *\n         * @desc Deletes an existing Version resource.\n         *\n         * @alias appengine.apps.services.versions.delete\n         * @memberOf! appengine(v1beta)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n         * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n         * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        delete: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}',\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'servicesId', 'versionsId'],\n            pathParams: ['versionsId', 'servicesId', 'appsId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * appengine.apps.services.versions.list\n         *\n         * @desc Lists the versions of a service.\n         *\n         * @alias appengine.apps.services.versions.list\n         * @memberOf! appengine(v1beta)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.servicesId Part of `parent`. See documentation of `appsId`.\n         * @param {string} params.appsId Part of `parent`. Name of the parent Service resource. Example: apps/myapp/services/default.\n         * @param {string=} params.pageToken Continuation token for fetching the next page of results.\n         * @param {integer=} params.pageSize Maximum results to return per page.\n         * @param {string=} params.view Controls the set of fields returned in the List response.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/services/{servicesId}/versions',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'servicesId'],\n            pathParams: ['servicesId', 'appsId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * appengine.apps.services.versions.get\n         *\n         * @desc Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource.\n         *\n         * @alias appengine.apps.services.versions.get\n         * @memberOf! appengine(v1beta)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n         * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.\n         * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n         * @param {string=} params.view Controls the set of fields returned in the Get response.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        get: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'servicesId', 'versionsId'],\n            pathParams: ['servicesId', 'appsId', 'versionsId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * appengine.apps.services.versions.patch\n         *\n         * @desc Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses: serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.serving_status):  For Version resources that use basic scaling, manual scaling, or run in  the App Engine flexible environment. instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.instance_class):  For Version resources that run in the App Engine standard environment. automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.automatic_scaling):  For Version resources that use automatic scaling and run in the App  Engine standard environment. automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.automatic_scaling):  For Version resources that use automatic scaling and run in the App  Engine standard environment.\n         *\n         * @alias appengine.apps.services.versions.patch\n         * @memberOf! appengine(v1beta)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n         * @param {string} params.appsId Part of `name`. Name of the resource to update. Example: apps/myapp/services/default/versions/1.\n         * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n         * @param {string=} params.updateMask Standard field mask for the set of fields to be updated.\n         * @param {appengine(v1beta).Version} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        patch: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}',\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'servicesId', 'versionsId'],\n            pathParams: ['servicesId', 'appsId', 'versionsId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * appengine.apps.services.versions.create\n         *\n         * @desc Deploys code and resource files to a new version.\n         *\n         * @alias appengine.apps.services.versions.create\n         * @memberOf! appengine(v1beta)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.servicesId Part of `parent`. See documentation of `appsId`.\n         * @param {string} params.appsId Part of `parent`. Name of the parent resource to create this version under. Example: apps/myapp/services/default.\n         * @param {appengine(v1beta).Version} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/services/{servicesId}/versions',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['appsId', 'servicesId'],\n            pathParams: ['servicesId', 'appsId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        instances: {\n\n          /**\n           * appengine.apps.services.versions.instances.delete\n           *\n           * @desc Stops a running instance.\n           *\n           * @alias appengine.apps.services.versions.instances.delete\n           * @memberOf! appengine(v1beta)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1/instances/instance-1.\n           * @param {string} params.instancesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          delete: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}',\n                method: 'DELETE'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n              pathParams: ['servicesId', 'appsId', 'instancesId', 'versionsId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          },\n\n          /**\n           * appengine.apps.services.versions.instances.list\n           *\n           * @desc Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).\n           *\n           * @alias appengine.apps.services.versions.instances.list\n           * @memberOf! appengine(v1beta)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.servicesId Part of `parent`. See documentation of `appsId`.\n           * @param {string} params.appsId Part of `parent`. Name of the parent Version resource. Example: apps/myapp/services/default/versions/v1.\n           * @param {string=} params.pageToken Continuation token for fetching the next page of results.\n           * @param {integer=} params.pageSize Maximum results to return per page.\n           * @param {string} params.versionsId Part of `parent`. See documentation of `appsId`.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          list: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances',\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'servicesId', 'versionsId'],\n              pathParams: ['servicesId', 'appsId', 'versionsId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          },\n\n          /**\n           * appengine.apps.services.versions.instances.get\n           *\n           * @desc Gets instance information.\n           *\n           * @alias appengine.apps.services.versions.instances.get\n           * @memberOf! appengine(v1beta)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1/instances/instance-1.\n           * @param {string} params.instancesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          get: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}',\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n              pathParams: ['appsId', 'instancesId', 'versionsId', 'servicesId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          },\n\n          /**\n           * appengine.apps.services.versions.instances.debug\n           *\n           * @desc Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in \"debug mode\", the instance continues to serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable for instances in App Engine flexible environment.\n           *\n           * @alias appengine.apps.services.versions.instances.debug\n           * @memberOf! appengine(v1beta)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.appsId Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1/instances/instance-1.\n           * @param {string} params.instancesId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.versionsId Part of `name`. See documentation of `appsId`.\n           * @param {string} params.servicesId Part of `name`. See documentation of `appsId`.\n           * @param {appengine(v1beta).DebugInstanceRequest} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          debug: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://appengine.googleapis.com/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}:debug',\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n              pathParams: ['appsId', 'instancesId', 'versionsId', 'servicesId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          }\n        }\n      }\n    }\n  };\n}\n\n/**\n * @typedef FileInfo\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} sha1Sum The SHA1 hash of the file, in hex.\n * @property {string} mimeType The MIME type of the file.Defaults to the value from Google Cloud Storage.\n * @property {string} sourceUrl URL source to use to fetch this file. Must be a URL to a resource in Google Cloud Storage in the form &#39;http(s)://storage.googleapis.com/&lt;bucket&gt;/&lt;object&gt;&#39;.\n */\n/**\n * @typedef ScriptHandler\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} scriptPath Path to the script from the application root directory.\n */\n/**\n * @typedef OperationMetadataExperimental\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} endTime Time that this operation completed.@OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/customDomains/example.com.@OutputOnly\n * @property {string} method API method that initiated this operation. Example: google.appengine.experimental.CustomDomains.CreateCustomDomain.@OutputOnly\n * @property {string} insertTime Time that this operation was created.@OutputOnly\n */\n/**\n * @typedef AuthorizedDomain\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} id Fully qualified domain name of the domain authorized for use. Example: example.com.\n * @property {string} name Full path to the AuthorizedDomain resource in the API. Example: apps/myapp/authorizedDomains/example.com.@OutputOnly\n */\n/**\n * @typedef TrafficSplit\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} shardBy Mechanism used to determine which version a request is sent to. The traffic selection algorithm will be stable for either type until allocations are changed.\n * @property {object} allocations Mapping from version IDs within the service to fractional (0.000, 1] allocations of traffic for that version. Each version can be specified only once, but some versions in the service may not have any traffic allocation. Services that have traffic allocated cannot be deleted until either the service is deleted or their traffic allocation is removed. Allocations must sum to 1. Up to two decimal place precision is supported for IP-based splits and up to three decimal places is supported for cookie-based splits.\n */\n/**\n * @typedef OperationMetadataV1Beta\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} ephemeralMessage Ephemeral message that may change every time the operation is polled. @OutputOnly\n * @property {string} method API method that initiated this operation. Example: google.appengine.v1beta.Versions.CreateVersion.@OutputOnly\n * @property {string} endTime Time that this operation completed.@OutputOnly\n * @property {string} insertTime Time that this operation was created.@OutputOnly\n * @property {string[]} warning Durable messages that persist on every operation poll. @OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly\n */\n/**\n * @typedef ListServicesResponse\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {appengine(v1beta).Service[]} services The services belonging to the requested application.\n * @property {string} nextPageToken Continuation token for fetching the next page of results.\n */\n/**\n * @typedef Deployment\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {appengine(v1beta).ZipInfo} zip The zip file for this deployment, if this is a zip deployment.\n * @property {appengine(v1beta).ContainerInfo} container The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.\n * @property {object} files Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.\n */\n/**\n * @typedef Resources\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {appengine(v1beta).Volume[]} volumes User specified volumes.\n * @property {number} diskGb Disk size (GB) needed.\n * @property {number} cpu Number of CPU cores needed.\n * @property {number} memoryGb Memory (GB) needed.\n */\n/**\n * @typedef Volume\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} volumeType Underlying volume type, e.g. &#39;tmpfs&#39;.\n * @property {number} sizeGb Volume size in gigabytes.\n * @property {string} name Unique name for the volume.\n */\n/**\n * @typedef ListInstancesResponse\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {appengine(v1beta).Instance[]} instances The instances belonging to the requested version.\n * @property {string} nextPageToken Continuation token for fetching the next page of results.\n */\n/**\n * @typedef ListDomainMappingsResponse\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {appengine(v1beta).DomainMapping[]} domainMappings The domain mappings for the application.\n * @property {string} nextPageToken Continuation token for fetching the next page of results.\n */\n/**\n * @typedef UrlDispatchRule\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} path Pathname within the host. Must start with a &quot;/&quot;. A single &quot;*&quot; can be included at the end of the path.The sum of the lengths of the domain and path may not exceed 100 characters.\n * @property {string} domain Domain name to match against. The wildcard &quot;*&quot; is supported if specified before a period: &quot;*.&quot;.Defaults to matching all domains: &quot;*&quot;.\n * @property {string} service Resource ID of a service in this application that should serve the matched request. The service must already exist. Example: default.\n */\n/**\n * @typedef ListVersionsResponse\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {appengine(v1beta).Version[]} versions The versions belonging to the requested service.\n * @property {string} nextPageToken Continuation token for fetching the next page of results.\n */\n/**\n * @typedef ListAuthorizedDomainsResponse\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} nextPageToken Continuation token for fetching the next page of results.\n * @property {appengine(v1beta).AuthorizedDomain[]} domains The authorized domains belonging to the user.\n */\n/**\n * @typedef Empty\n * @memberOf! appengine(v1beta)\n * @type object\n */\n/**\n * @typedef ApiEndpointHandler\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} scriptPath Path to the script from the application root directory.\n */\n/**\n * @typedef DomainMapping\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} id Relative name of the domain serving the application. Example: example.com.\n * @property {appengine(v1beta).ResourceRecord[]} resourceRecords The resource records required to configure this domain mapping. These records must be added to the domain&#39;s DNS configuration in order to serve the application via this domain mapping.@OutputOnly\n * @property {string} name Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.@OutputOnly\n * @property {appengine(v1beta).SslSettings} sslSettings SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.\n */\n/**\n * @typedef ZipInfo\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} sourceUrl URL of the zip file to deploy from. Must be a URL to a resource in Google Cloud Storage in the form &#39;http(s)://storage.googleapis.com/&lt;bucket&gt;/&lt;object&gt;&#39;.\n * @property {integer} filesCount An estimate of the number of files in a zip for a zip deployment. If set, must be greater than or equal to the actual number of files. Used for optimizing performance; if not provided, deployment may be slow.\n */\n/**\n * @typedef AutomaticScaling\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} minPendingLatency Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.\n * @property {integer} maxIdleInstances Maximum number of idle instances that should be maintained for this version.\n * @property {appengine(v1beta).RequestUtilization} requestUtilization Target scaling by request utilization.\n * @property {integer} minIdleInstances Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.\n * @property {integer} maxTotalInstances Maximum number of instances that should be started to handle requests.\n * @property {integer} minTotalInstances Minimum number of instances that should be maintained for this version.\n * @property {appengine(v1beta).NetworkUtilization} networkUtilization Target scaling by network usage.\n * @property {string} coolDownPeriod Amount of time that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait between changes to the number of virtual machines. Only applicable for VM runtimes.\n * @property {integer} maxConcurrentRequests Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.\n * @property {string} maxPendingLatency Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.\n * @property {appengine(v1beta).CpuUtilization} cpuUtilization Target scaling by CPU usage.\n * @property {appengine(v1beta).DiskUtilization} diskUtilization Target scaling by disk usage.\n */\n/**\n * @typedef AuthorizedCertificate\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {integer} domainMappingsCount Aggregate count of the domain mappings with this certificate mapped. This count includes domain mappings on applications for which the user does not have VIEWER permissions.Only returned by GET requests when specifically requested by the view=FULL option.@OutputOnly\n * @property {string[]} domainNames Topmost applicable domains of this certificate. This certificate applies to these domains and their subdomains. Example: example.com.@OutputOnly\n * @property {string} id Relative name of the certificate. This is a unique value autogenerated on AuthorizedCertificate resource creation. Example: 12345.@OutputOnly\n * @property {string} displayName The user-specified display name of the certificate. This is not guaranteed to be unique. Example: My Certificate.\n * @property {appengine(v1beta).CertificateRawData} certificateRawData The SSL certificate serving the AuthorizedCertificate resource. This must be obtained independently from a certificate authority.\n * @property {string[]} visibleDomainMappings The full paths to user visible Domain Mapping resources that have this certificate mapped. Example: apps/myapp/domainMappings/example.com.This may not represent the full list of mapped domain mappings if the user does not have VIEWER permissions on all of the applications that have this certificate mapped. See domain_mappings_count for a complete count.Only returned by GET requests when specifically requested by the view=FULL option.@OutputOnly\n * @property {string} expireTime The time when this certificate expires. To update the renewal time on this certificate, upload an SSL certificate with a different expiration time using AuthorizedCertificates.UpdateAuthorizedCertificate.@OutputOnly\n * @property {string} name Full path to the AuthorizedCertificate resource in the API. Example: apps/myapp/authorizedCertificates/12345.@OutputOnly\n */\n/**\n * @typedef ResourceRecord\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} type Resource record type. Example: AAAA.\n * @property {string} rrdata Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).\n * @property {string} name Relative name of the object affected by this record. Only applicable for CNAME records. Example: &#39;www&#39;.\n */\n/**\n * @typedef Library\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} name Name of the library. Example: &quot;django&quot;.\n * @property {string} version Version of the library to select, or &quot;latest&quot;.\n */\n/**\n * @typedef ListLocationsResponse\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {appengine(v1beta).Location[]} locations A list of locations that matches the specified filter in the request.\n * @property {string} nextPageToken The standard List next-page token.\n */\n/**\n * @typedef ContainerInfo\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} image URI to the hosted container image in Google Container Registry. The URI must be fully qualified and include a tag or digest. Examples: &quot;gcr.io/my-project/image:tag&quot; or &quot;gcr.io/my-project/image@digest&quot;\n */\n/**\n * @typedef RequestUtilization\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {integer} targetRequestCountPerSecond Target requests per second.\n * @property {integer} targetConcurrentRequests Target number of concurrent requests.\n */\n/**\n * @typedef UrlMap\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} redirectHttpResponseCode 30x code to use when performing redirects for the secure field. Defaults to 302.\n * @property {string} securityLevel Security (HTTPS) enforcement for this URL.\n * @property {string} authFailAction Action to take when users access resources that require authentication. Defaults to redirect.\n * @property {appengine(v1beta).ScriptHandler} script Executes a script to handle the request that matches this URL pattern.\n * @property {string} urlRegex URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings. All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.\n * @property {string} login Level of login required to access this resource.\n * @property {appengine(v1beta).ApiEndpointHandler} apiEndpoint Uses API Endpoints to handle requests.\n * @property {appengine(v1beta).StaticFilesHandler} staticFiles Returns the contents of a file, such as an image, as the response.\n */\n/**\n * @typedef EndpointsApiService\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} name Endpoints service name which is the name of the &quot;service&quot; resource in the Service Management API. For example &quot;myapi.endpoints.myproject.cloud.goog&quot;\n * @property {string} configId Endpoints service configuration id as specified by the Service Management API. For example &quot;2016-09-19r1&quot;\n */\n/**\n * @typedef Operation\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {appengine(v1beta).Status} error The error result of the operation in case of failure or cancellation.\n * @property {object} metadata Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.\n * @property {boolean} done If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.\n * @property {object} response The normal response of the operation in case of success. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse.\n * @property {string} name The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should have the format of operations/some/unique/name.\n */\n/**\n * @typedef ApiConfigHandler\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} url URL to serve the endpoint at.\n * @property {string} securityLevel Security (HTTPS) enforcement for this URL.\n * @property {string} authFailAction Action to take when users access resources that require authentication. Defaults to redirect.\n * @property {string} script Path to the script from the application root directory.\n * @property {string} login Level of login required to access this resource. Defaults to optional.\n */\n/**\n * @typedef StaticFilesHandler\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} uploadPathRegex Regular expression that matches the file paths for all files that should be referenced by this handler.\n * @property {string} path Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.\n * @property {string} mimeType MIME type used to serve all files served by this handler.Defaults to file-specific MIME types, which are derived from each file&#39;s filename extension.\n * @property {boolean} requireMatchingFile Whether this handler should match the request if the file referenced by the handler does not exist.\n * @property {string} expiration Time a static file served by this handler should be cached by web proxies and browsers.\n * @property {boolean} applicationReadable Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.\n * @property {object} httpHeaders HTTP headers to use for all responses from these URLs.\n */\n/**\n * @typedef BasicScaling\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {integer} maxInstances Maximum number of instances to create for this version.\n * @property {string} idleTimeout Duration of time after the last request that an instance must wait before the instance is shut down.\n */\n/**\n * @typedef DiskUtilization\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {integer} targetReadBytesPerSecond Target bytes read per second.\n * @property {integer} targetReadOpsPerSecond Target ops read per seconds.\n * @property {integer} targetWriteOpsPerSecond Target ops written per second.\n * @property {integer} targetWriteBytesPerSecond Target bytes written per second.\n */\n/**\n * @typedef CpuUtilization\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} aggregationWindowLength Period of time over which CPU utilization is calculated.\n * @property {number} targetUtilization Target CPU utilization ratio to maintain when scaling. Must be between 0 and 1.\n */\n/**\n * @typedef IdentityAwareProxy\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} oauth2ClientId OAuth2 client ID to use for the authentication flow.\n * @property {string} oauth2ClientSecretSha256 Hex-encoded SHA-256 hash of the client secret.@OutputOnly\n * @property {boolean} enabled Whether the serving infrastructure will authenticate and authorize all incoming requests.If true, the oauth2_client_id and oauth2_client_secret fields must be non-empty.\n * @property {string} oauth2ClientSecret OAuth2 client secret to use for the authentication flow.For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2_client_secret_sha256 field.@InputOnly\n */\n/**\n * @typedef Status\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {integer} code The status code, which should be an enum value of google.rpc.Code.\n * @property {string} message A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.\n * @property {object[]} details A list of messages that carry the error details. There will be a common set of message types for APIs to use.\n */\n/**\n * @typedef ManualScaling\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {integer} instances Number of instances to assign to the service at the start. This number can later be altered by using the Modules API (https://cloud.google.com/appengine/docs/python/modules/functions) set_num_instances() function.\n */\n/**\n * @typedef LocationMetadata\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {boolean} flexibleEnvironmentAvailable App Engine Flexible Environment is available in the given location.@OutputOnly\n * @property {boolean} standardEnvironmentAvailable App Engine Standard Environment is available in the given location.@OutputOnly\n */\n/**\n * @typedef Service\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} id Relative name of the service within the application. Example: default.@OutputOnly\n * @property {string} name Full path to the Service resource in the API. Example: apps/myapp/services/default.@OutputOnly\n * @property {appengine(v1beta).TrafficSplit} split Mapping that defines fractional HTTP traffic diversion to different versions within the service.\n */\n/**\n * @typedef ListOperationsResponse\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} nextPageToken The standard List next-page token.\n * @property {appengine(v1beta).Operation[]} operations A list of operations that matches the specified filter in the request.\n */\n/**\n * @typedef OperationMetadata\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/modules/default.@OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} method API method that initiated this operation. Example: google.appengine.v1beta4.Version.CreateVersion.@OutputOnly\n * @property {string} endTime Timestamp that this operation completed.@OutputOnly\n * @property {string} operationType Type of this operation. Deprecated, use method field instead. Example: &quot;create_version&quot;.@OutputOnly\n * @property {string} insertTime Timestamp that this operation was created.@OutputOnly\n */\n/**\n * @typedef ListAuthorizedCertificatesResponse\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} nextPageToken Continuation token for fetching the next page of results.\n * @property {appengine(v1beta).AuthorizedCertificate[]} certificates The SSL certificates the user is authorized to administer.\n */\n/**\n * @typedef OperationMetadataV1\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} ephemeralMessage Ephemeral message that may change every time the operation is polled. @OutputOnly\n * @property {string} method API method that initiated this operation. Example: google.appengine.v1.Versions.CreateVersion.@OutputOnly\n * @property {string} endTime Time that this operation completed.@OutputOnly\n * @property {string[]} warning Durable messages that persist on every operation poll. @OutputOnly\n * @property {string} insertTime Time that this operation was created.@OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly\n */\n/**\n * @typedef SslSettings\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} certificateId ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support. Example: 12345.\n */\n/**\n * @typedef ErrorHandler\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} errorCode Error condition this handler applies to.\n * @property {string} mimeType MIME type of file. Defaults to text/html.\n * @property {string} staticFile Static file content to be served for this error.\n */\n/**\n * @typedef Application\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {appengine(v1beta).UrlDispatchRule[]} dispatchRules HTTP path dispatch rules for requests to the application that do not explicitly target a service or version. Rules are order-dependent. Up to 20 dispatch rules can be supported.@OutputOnly\n * @property {string} gcrDomain The Google Container Registry domain used for storing managed build docker images for this application.\n * @property {string} name Full path to the Application resource in the API. Example: apps/myapp.@OutputOnly\n * @property {string} id Identifier of the Application resource. This identifier is equivalent to the project ID of the Google Cloud Platform project where you want to deploy your application. Example: myapp.\n * @property {string} defaultCookieExpiration Cookie expiration policy for this application.\n * @property {string} locationId Location from which this application will be run. Application instances will run out of data centers in the chosen location, which is also where all of the application&#39;s end user content is stored.Defaults to us-central.Options are:us-central - Central USeurope-west - Western Europeus-east1 - Eastern US\n * @property {string} servingStatus Serving status of this application.\n * @property {string} defaultHostname Hostname used to reach this application, as resolved by App Engine.@OutputOnly\n * @property {appengine(v1beta).IdentityAwareProxy} iap \n * @property {string} authDomain Google Apps authentication domain that controls which users can access this application.Defaults to open access for any Google Account.\n * @property {string} codeBucket Google Cloud Storage bucket that can be used for storing files associated with this application. This bucket is associated with the application and can be used by the gcloud deployment commands.@OutputOnly\n * @property {string} defaultBucket Google Cloud Storage bucket that can be used by this application to store content.@OutputOnly\n */\n/**\n * @typedef Network\n * @memberOf! appengine(v1beta)\n * @type object\n* @property {string[]} forwardedPorts List of ports, or port pairs, to forward from the virtual machine to the application container.\n* @property {string} instanceTag Tag to apply to the VM instance during creation.\n* @property {string} subnetworkName Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.If a subnetwork name is specified, a network name will also be required unless it is for the default network.\nIf the network the VM instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range.\nIf the network the VM instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetwork_name) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network.\nIf the network the VM instance is being created in is a custom Subnet Mode Network, then the subnetwork_name must be specified and the IP address is created from the IPCidrRange of the subnetwork.If specified, the subnetwork must exist in the same region as the Flex app.\n* @property {string} name Google Cloud Platform network where the virtual machines are created. Specify the short name, not the resource path.Defaults to default.\n*/\n/**\n * @typedef Instance\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {integer} averageLatency Average latency (ms) over the last minute.@OutputOnly\n * @property {string} memoryUsage Total memory in use (bytes).@OutputOnly\n * @property {string} id Relative name of the instance within the version. Example: instance-1.@OutputOnly\n * @property {string} vmIp The IP address of this instance. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {string} availability Availability of the instance.@OutputOnly\n * @property {string} vmStatus Status of the virtual machine where this instance lives. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {integer} errors Number of errors since this instance was started.@OutputOnly\n * @property {string} startTime Time that this instance was started.@OutputOnly\n * @property {boolean} vmDebugEnabled Whether this instance is in debug mode. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {integer} requests Number of requests since this instance was started.@OutputOnly\n * @property {string} appEngineRelease App Engine release this instance is running on.@OutputOnly\n * @property {string} vmName Name of the virtual machine where this instance lives. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {string} vmId Virtual machine ID of this instance. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {number} qps Average queries per second (QPS) over the last minute.@OutputOnly\n * @property {string} vmZoneName Zone where the virtual machine is located. Only applicable for instances in App Engine flexible environment.@OutputOnly\n * @property {string} name Full path to the Instance resource in the API. Example: apps/myapp/services/default/versions/v1/instances/instance-1.@OutputOnly\n */\n/**\n * @typedef LivenessCheck\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} checkInterval Interval between health checks.\n * @property {integer} failureThreshold Number of consecutive failed checks required before considering the VM unhealthy.\n * @property {string} timeout Time before the check is considered failed.\n * @property {string} initialDelay The initial delay before starting to execute the checks.\n * @property {string} path The request path.\n * @property {string} host Host header to send when performing a HTTP Liveness check. Example: &quot;myapp.appspot.com&quot;\n * @property {integer} successThreshold Number of consecutive successful checks required before considering the VM healthy.\n */\n/**\n * @typedef Location\n * @memberOf! appengine(v1beta)\n * @type object\n* @property {string} name Resource name for the location, which may vary between implementations. For example: &quot;projects/example-project/locations/us-east1&quot;\n* @property {string} locationId The canonical id for this location. For example: &quot;us-east1&quot;.\n* @property {object} metadata Service-specific metadata. For example the available capacity at the given location.\n* @property {object} labels Cross-service attributes for the location. For example\n{&quot;cloud.googleapis.com/region&quot;: &quot;us-east1&quot;}\n\n*/\n/**\n * @typedef NetworkUtilization\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {integer} targetSentPacketsPerSecond Target packets sent per second.\n * @property {integer} targetReceivedBytesPerSecond Target bytes received per second.\n * @property {integer} targetReceivedPacketsPerSecond Target packets received per second.\n * @property {integer} targetSentBytesPerSecond Target bytes sent per second.\n */\n/**\n * @typedef HealthCheck\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} host Host header to send when performing an HTTP health check. Example: &quot;myapp.appspot.com&quot;\n * @property {integer} healthyThreshold Number of consecutive successful health checks required before receiving traffic.\n * @property {integer} restartThreshold Number of consecutive failed health checks required before an instance is restarted.\n * @property {string} checkInterval Interval between health checks.\n * @property {string} timeout Time before the health check is considered failed.\n * @property {integer} unhealthyThreshold Number of consecutive failed health checks required before removing traffic.\n * @property {boolean} disableHealthCheck Whether to explicitly disable health checks for this instance.\n */\n/**\n * @typedef ReadinessCheck\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} checkInterval Interval between health checks.\n * @property {string} timeout Time before the check is considered failed.\n * @property {integer} failureThreshold Number of consecutive failed checks required before removing traffic.\n * @property {string} path The request path.\n * @property {integer} successThreshold Number of consecutive successful checks required before receiving traffic.\n * @property {string} host Host header to send when performing a HTTP Readiness check. Example: &quot;myapp.appspot.com&quot;\n */\n/**\n * @typedef DebugInstanceRequest\n * @memberOf! appengine(v1beta)\n * @type object\n* @property {string} sshKey Public SSH key to add to the instance. Examples:\n[USERNAME]:ssh-rsa [KEY_VALUE] [USERNAME]\n[USERNAME]:ssh-rsa [KEY_VALUE] google-ssh {&quot;userName&quot;:&quot;[USERNAME]&quot;,&quot;expireOn&quot;:&quot;[EXPIRE_TIME]&quot;}For more information, see Adding and Removing SSH Keys (https://cloud.google.com/compute/docs/instances/adding-removing-ssh-keys).\n*/\n/**\n * @typedef OperationMetadataV1Beta5\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} endTime Timestamp that this operation completed.@OutputOnly\n * @property {string} user User who requested this operation.@OutputOnly\n * @property {string} target Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly\n * @property {string} method API method name that initiated this operation. Example: google.appengine.v1beta5.Version.CreateVersion.@OutputOnly\n * @property {string} insertTime Timestamp that this operation was created.@OutputOnly\n */\n/**\n * @typedef Version\n * @memberOf! appengine(v1beta)\n * @type object\n* @property {string} defaultExpiration Duration that static files should be cached by web proxies and browsers. Only applicable if the corresponding StaticFilesHandler (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#staticfileshandler) does not specify its own expiration time.Only returned in GET requests if view=FULL is set.\n* @property {appengine(v1beta).Library[]} libraries Configuration for third-party Python runtime libraries that are required by the application.Only returned in GET requests if view=FULL is set.\n* @property {string} nobuildFilesRegex Files that match this pattern will not be built into this version. Only applicable for Go runtimes.Only returned in GET requests if view=FULL is set.\n* @property {appengine(v1beta).BasicScaling} basicScaling A service with basic scaling will create an instance when the application receives a request. The instance will be turned down when the app becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.\n* @property {string} runtime Desired runtime. Example: python27.\n* @property {string} id Relative name of the version within the service. Example: v1. Version names can contain only lowercase letters, numbers, or hyphens. Reserved names: &quot;default&quot;, &quot;latest&quot;, and any name with the prefix &quot;ah-&quot;.\n* @property {string} createdBy Email address of the user who created this version.@OutputOnly\n* @property {object} envVariables Environment variables available to the application.Only returned in GET requests if view=FULL is set.\n* @property {appengine(v1beta).LivenessCheck} livenessCheck Configures liveness health checking for VM instances. Unhealthy instances are stopped and replaced with new instancesOnly returned in GET requests if view=FULL is set.\n* @property {appengine(v1beta).Network} network Extra network settings. Only applicable for VM runtimes.\n* @property {object} betaSettings Metadata settings that are supplied to this version to enable beta runtime features.\n* @property {string} env App Engine execution environment for this version.Defaults to standard.\n* @property {appengine(v1beta).UrlMap[]} handlers An ordered list of URL-matching patterns that should be applied to incoming requests. The first matching URL handles the request and other request handlers are not attempted.Only returned in GET requests if view=FULL is set.\n* @property {appengine(v1beta).AutomaticScaling} automaticScaling Automatic scaling is based on request rate, response latencies, and other application metrics.\n* @property {string} diskUsageBytes Total size in bytes of all the files that are included in this version and curerntly hosted on the App Engine disk.@OutputOnly\n* @property {appengine(v1beta).HealthCheck} healthCheck Configures health checking for VM instances. Unhealthy instances are stopped and replaced with new instances. Only applicable for VM runtimes.Only returned in GET requests if view=FULL is set.\n* @property {boolean} threadsafe Whether multiple requests can be dispatched to this version at once.\n* @property {appengine(v1beta).ReadinessCheck} readinessCheck Configures readiness health checking for VM instances. Unhealthy instances are not put into the backend traffic rotation.Only returned in GET requests if view=FULL is set.\n* @property {appengine(v1beta).ManualScaling} manualScaling A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.\n* @property {string} name Full path to the Version resource in the API. Example: apps/myapp/services/default/versions/v1.@OutputOnly\n* @property {appengine(v1beta).ApiConfigHandler} apiConfig Serving configuration for Google Cloud Endpoints (https://cloud.google.com/appengine/docs/python/endpoints/).Only returned in GET requests if view=FULL is set.\n* @property {appengine(v1beta).EndpointsApiService} endpointsApiService Cloud Endpoints configuration.If endpoints_api_service is set, the Cloud Endpoints Extensible Service Proxy will be provided to serve the API implemented by the app.\n* @property {boolean} vm Whether to deploy this version in a container on a virtual machine.\n* @property {string} versionUrl Serving URL for this version. Example: &quot;https://myversion-dot-myservice-dot-myapp.appspot.com&quot;@OutputOnly\n* @property {string} instanceClass Instance class that is used to run this version. Valid values are:\nAutomaticScaling: F1, F2, F4, F4_1G\nManualScaling or BasicScaling: B1, B2, B4, B8, B4_1GDefaults to F1 for AutomaticScaling and B1 for ManualScaling or BasicScaling.\n* @property {string} servingStatus Current serving status of this version. Only the versions with a SERVING status create instances and can be billed.SERVING_STATUS_UNSPECIFIED is an invalid value. Defaults to SERVING.\n* @property {appengine(v1beta).Deployment} deployment Code and application artifacts that make up this version.Only returned in GET requests if view=FULL is set.\n* @property {string} createTime Time that this version was created.@OutputOnly\n* @property {string[]} inboundServices Before an application can receive email or XMPP messages, the application must be configured to enable the service.\n* @property {appengine(v1beta).Resources} resources Machine resources for this version. Only applicable for VM runtimes.\n* @property {appengine(v1beta).ErrorHandler[]} errorHandlers Custom static error pages. Limited to 10KB per page.Only returned in GET requests if view=FULL is set.\n*/\n/**\n * @typedef RepairApplicationRequest\n * @memberOf! appengine(v1beta)\n * @type object\n */\n/**\n * @typedef CertificateRawData\n * @memberOf! appengine(v1beta)\n * @type object\n * @property {string} publicCertificate PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: &lt;pre&gt; -----BEGIN CERTIFICATE----- &lt;certificate_value&gt; -----END CERTIFICATE----- &lt;/pre&gt;\n * @property {string} privateKey Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: &lt;pre&gt; -----BEGIN RSA PRIVATE KEY----- &lt;unencrypted_key_value&gt; -----END RSA PRIVATE KEY----- &lt;/pre&gt; @InputOnly\n */\nmodule.exports = Appengine;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/clouderrorreporting/v1beta1.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Stackdriver Error Reporting API\n *\n * Stackdriver Error Reporting groups and counts similar errors from cloud services. The Stackdriver Error Reporting API provides a way to report new errors and read access to error groups and their associated errors.\n\n *\n * @example\n * var google = require('googleapis');\n * var clouderrorreporting = google.clouderrorreporting('v1beta1');\n *\n * @namespace clouderrorreporting\n * @type {Function}\n * @version v1beta1\n * @variation v1beta1\n * @param {object=} options Options for Clouderrorreporting\n */\nfunction Clouderrorreporting(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.projects = {\n\n    /**\n     * clouderrorreporting.projects.deleteEvents\n     *\n     * @desc Deletes all error events of a given project.\n     *\n     * @alias clouderrorreporting.projects.deleteEvents\n     * @memberOf! clouderrorreporting(v1beta1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.projectName [Required] The resource name of the Google Cloud Platform project. Written as `projects/` plus the [Google Cloud Platform project ID](https://support.google.com/cloud/answer/6158840). Example: `projects/my-project-123`.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    deleteEvents: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://clouderrorreporting.googleapis.com/v1beta1/{projectName}/events',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['projectName'],\n        pathParams: ['projectName'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    groups: {\n\n      /**\n       * clouderrorreporting.projects.groups.get\n       *\n       * @desc Get the specified group.\n       *\n       * @alias clouderrorreporting.projects.groups.get\n       * @memberOf! clouderrorreporting(v1beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.groupName [Required] The group resource name. Written as <code>projects/<var>projectID</var>/groups/<var>group_name</var></code>. Call <a href=\"/error-reporting/reference/rest/v1beta1/projects.groupStats/list\"> <code>groupStats.list</code></a> to return a list of groups belonging to this project.  Example: <code>projects/my-project-123/groups/my-group</code>\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://clouderrorreporting.googleapis.com/v1beta1/{groupName}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['groupName'],\n          pathParams: ['groupName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * clouderrorreporting.projects.groups.update\n       *\n       * @desc Replace the data for the specified group. Fails if the group does not exist.\n       *\n       * @alias clouderrorreporting.projects.groups.update\n       * @memberOf! clouderrorreporting(v1beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.name The group resource name. Example: <code>projects/my-project-123/groups/my-groupid</code>\n       * @param {clouderrorreporting(v1beta1).ErrorGroup} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://clouderrorreporting.googleapis.com/v1beta1/{name}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    groupStats: {\n\n      /**\n       * clouderrorreporting.projects.groupStats.list\n       *\n       * @desc Lists the specified groups.\n       *\n       * @alias clouderrorreporting.projects.groupStats.list\n       * @memberOf! clouderrorreporting(v1beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.timedCountDuration [Optional] The preferred duration for a single returned `TimedCount`. If not set, no timed counts are returned.\n       * @param {string=} params.pageToken [Optional] A `next_page_token` provided by a previous response. To view additional results, pass this token along with the identical query parameters as the first request.\n       * @param {string=} params.timeRange.period Restricts the query to the specified time range.\n       * @param {string=} params.alignment [Optional] The alignment of the timed counts to be returned. Default is `ALIGNMENT_EQUAL_AT_END`.\n       * @param {string=} params.groupId [Optional] List all <code>ErrorGroupStats</code> with these IDs.\n       * @param {string=} params.serviceFilter.service [Optional] The exact value to match against [`ServiceContext.service`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.service).\n       * @param {integer=} params.pageSize [Optional] The maximum number of results to return per response. Default is 20.\n       * @param {string=} params.serviceFilter.version [Optional] The exact value to match against [`ServiceContext.version`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.version).\n       * @param {string=} params.order [Optional] The sort order in which the results are returned. Default is `COUNT_DESC`.\n       * @param {string=} params.serviceFilter.resourceType [Optional] The exact value to match against [`ServiceContext.resource_type`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.resource_type).\n       * @param {string=} params.alignmentTime [Optional] Time where the timed counts shall be aligned if rounded alignment is chosen. Default is 00:00 UTC.\n       * @param {string} params.projectName [Required] The resource name of the Google Cloud Platform project. Written as <code>projects/</code> plus the <a href=\"https://support.google.com/cloud/answer/6158840\">Google Cloud Platform project ID</a>.  Example: <code>projects/my-project-123</code>.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://clouderrorreporting.googleapis.com/v1beta1/{projectName}/groupStats',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectName'],\n          pathParams: ['projectName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    events: {\n\n      /**\n       * clouderrorreporting.projects.events.list\n       *\n       * @desc Lists the specified events.\n       *\n       * @alias clouderrorreporting.projects.events.list\n       * @memberOf! clouderrorreporting(v1beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.timeRange.period Restricts the query to the specified time range.\n       * @param {string} params.projectName [Required] The resource name of the Google Cloud Platform project. Written as `projects/` plus the [Google Cloud Platform project ID](https://support.google.com/cloud/answer/6158840). Example: `projects/my-project-123`.\n       * @param {string=} params.groupId [Required] The group for which events shall be returned.\n       * @param {string=} params.serviceFilter.service [Optional] The exact value to match against [`ServiceContext.service`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.service).\n       * @param {string=} params.pageToken [Optional] A `next_page_token` provided by a previous response.\n       * @param {integer=} params.pageSize [Optional] The maximum number of results to return per response.\n       * @param {string=} params.serviceFilter.version [Optional] The exact value to match against [`ServiceContext.version`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.version).\n       * @param {string=} params.serviceFilter.resourceType [Optional] The exact value to match against [`ServiceContext.resource_type`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.resource_type).\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://clouderrorreporting.googleapis.com/v1beta1/{projectName}/events',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectName'],\n          pathParams: ['projectName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * clouderrorreporting.projects.events.report\n       *\n       * @desc Report an individual error event.  This endpoint accepts <strong>either</strong> an OAuth token, <strong>or</strong> an <a href=\"https://support.google.com/cloud/answer/6158862\">API key</a> for authentication. To use an API key, append it to the URL as the value of a `key` parameter. For example: <pre>POST https://clouderrorreporting.googleapis.com/v1beta1/projects/example-project/events:report?key=123ABC456</pre>\n       *\n       * @alias clouderrorreporting.projects.events.report\n       * @memberOf! clouderrorreporting(v1beta1)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.projectName [Required] The resource name of the Google Cloud Platform project. Written as `projects/` plus the [Google Cloud Platform project ID](https://support.google.com/cloud/answer/6158840). Example: `projects/my-project-123`.\n       * @param {clouderrorreporting(v1beta1).ReportedErrorEvent} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      report: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://clouderrorreporting.googleapis.com/v1beta1/{projectName}/events:report',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectName'],\n          pathParams: ['projectName'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n}\n\n/**\n * @typedef ErrorContext\n * @memberOf! clouderrorreporting(v1beta1)\n * @type object\n* @property {clouderrorreporting(v1beta1).SourceLocation} reportLocation The location in the source code where the decision was made to\nreport the error, usually the place where it was logged.\nFor a logged exception this would be the source line where the\nexception is logged, usually close to the place where it was\ncaught. This value is in contrast to `Exception.cause_location`,\nwhich describes the source line where the exception was thrown.\n* @property {clouderrorreporting(v1beta1).HttpRequestContext} httpRequest The HTTP request which was processed when the error was\ntriggered.\n* @property {string} user The user who caused or was affected by the crash.\nThis can be a user ID, an email address, or an arbitrary token that\nuniquely identifies the user.\nWhen sending an error report, leave this field empty if the user was not\nlogged in. In this case the\nError Reporting system will use other data, such as remote IP address, to\ndistinguish affected users. See `affected_users_count` in\n`ErrorGroupStats`.\n*/\n/**\n * @typedef TrackingIssue\n * @memberOf! clouderrorreporting(v1beta1)\n * @type object\n* @property {string} url A URL pointing to a related entry in an issue tracking system.\nExample: https://github.com/user/project/issues/4\n*/\n/**\n * @typedef ErrorGroupStats\n * @memberOf! clouderrorreporting(v1beta1)\n * @type object\n* @property {clouderrorreporting(v1beta1).ServiceContext[]} affectedServices Service contexts with a non-zero error count for the given filter\ncriteria. This list can be truncated if multiple services are affected.\nRefer to `num_affected_services` for the total count.\n* @property {integer} numAffectedServices The total number of services with a non-zero error count for the given\nfilter criteria.\n* @property {clouderrorreporting(v1beta1).ErrorEvent} representative An arbitrary event that is chosen as representative for the whole group.\nThe representative event is intended to be used as a quick preview for\nthe whole group. Events in the group are usually sufficiently similar\nto each other such that showing an arbitrary representative provides\ninsight into the characteristics of the group as a whole.\n* @property {clouderrorreporting(v1beta1).TimedCount[]} timedCounts Approximate number of occurrences over time.\nTimed counts returned by ListGroups are guaranteed to be:\n\n- Inside the requested time interval\n- Non-overlapping, and\n- Ordered by ascending time.\n* @property {clouderrorreporting(v1beta1).ErrorGroup} group Group data that is independent of the filter criteria.\n* @property {string} firstSeenTime Approximate first occurrence that was ever seen for this group\nand which matches the given filter criteria, ignoring the\ntime_range that was specified in the request.\n* @property {string} count Approximate total number of events in the given group that match\nthe filter criteria.\n* @property {string} lastSeenTime Approximate last occurrence that was ever seen for this group and\nwhich matches the given filter criteria, ignoring the time_range\nthat was specified in the request.\n* @property {string} affectedUsersCount Approximate number of affected users in the given group that\nmatch the filter criteria.\nUsers are distinguished by data in the `ErrorContext` of the\nindividual error events, such as their login name or their remote\nIP address in case of HTTP requests.\nThe number of affected users can be zero even if the number of\nerrors is non-zero if no data was provided from which the\naffected user could be deduced.\nUsers are counted based on data in the request\ncontext that was provided in the error report. If more users are\nimplicitly affected, such as due to a crash of the whole service,\nthis is not reflected here.\n*/\n/**\n * @typedef ListEventsResponse\n * @memberOf! clouderrorreporting(v1beta1)\n * @type object\n* @property {string} timeRangeBegin The timestamp specifies the start time to which the request was restricted.\n* @property {clouderrorreporting(v1beta1).ErrorEvent[]} errorEvents The error events which match the given request.\n* @property {string} nextPageToken If non-empty, more results are available.\nPass this token, along with the same query parameters as the first\nrequest, to view the next page of results.\n*/\n/**\n * @typedef TimedCount\n * @memberOf! clouderrorreporting(v1beta1)\n * @type object\n * @property {string} endTime End of the time period to which `count` refers (excluded).\n * @property {string} count Approximate number of occurrences in the given time period.\n * @property {string} startTime Start of the time period to which `count` refers (included).\n */\n/**\n * @typedef ErrorGroup\n * @memberOf! clouderrorreporting(v1beta1)\n * @type object\n* @property {string} name The group resource name.\nExample: &lt;code&gt;projects/my-project-123/groups/my-groupid&lt;/code&gt;\n* @property {string} groupId Group IDs are unique for a given project. If the same kind of error\noccurs in different service contexts, it will receive the same group ID.\n* @property {clouderrorreporting(v1beta1).TrackingIssue[]} trackingIssues Associated tracking issues.\n*/\n/**\n * @typedef ServiceContext\n * @memberOf! clouderrorreporting(v1beta1)\n * @type object\n* @property {string} resourceType Type of the MonitoredResource. List of possible values:\nhttps://cloud.google.com/monitoring/api/resources\n\nValue is set automatically for incoming errors and must not be set when\nreporting errors.\n* @property {string} version Represents the source code version that the developer provided,\nwhich could represent a version label or a Git SHA-1 hash, for example.\nFor App Engine standard environment, the version is set to the version of\nthe app.\n* @property {string} service An identifier of the service, such as the name of the\nexecutable, job, or Google App Engine service name. This field is expected\nto have a low number of values that are relatively stable over time, as\nopposed to `version`, which can be changed whenever new code is deployed.\n\nContains the service name for error reports extracted from Google\nApp Engine logs or `default` if the App Engine default service is used.\n*/\n/**\n * @typedef SourceLocation\n * @memberOf! clouderrorreporting(v1beta1)\n * @type object\n* @property {string} functionName Human-readable name of a function or method.\nThe value can include optional context like the class or package name.\nFor example, `my.package.MyClass.method` in case of Java.\n* @property {string} filePath The source code filename, which can include a truncated relative\npath, or a full path from a production machine.\n* @property {integer} lineNumber 1-based. 0 indicates that the line number is unknown.\n*/\n/**\n * @typedef ReportErrorEventResponse\n * @memberOf! clouderrorreporting(v1beta1)\n * @type object\n */\n/**\n * @typedef HttpRequestContext\n * @memberOf! clouderrorreporting(v1beta1)\n * @type object\n* @property {string} remoteIp The IP address from which the request originated.\nThis can be IPv4, IPv6, or a token which is derived from the\nIP address, depending on the data that has been provided\nin the error report.\n* @property {string} referrer The referrer information that is provided with the request.\n* @property {string} userAgent The user agent information that is provided with the request.\n* @property {string} url The URL of the request.\n* @property {integer} responseStatusCode The HTTP response status code for the request.\n* @property {string} method The type of HTTP request, such as `GET`, `POST`, etc.\n*/\n/**\n * @typedef ListGroupStatsResponse\n * @memberOf! clouderrorreporting(v1beta1)\n * @type object\n* @property {string} timeRangeBegin The timestamp specifies the start time to which the request was restricted.\nThe start time is set based on the requested time range. It may be adjusted\nto a later time if a project has exceeded the storage quota and older data\nhas been deleted.\n* @property {clouderrorreporting(v1beta1).ErrorGroupStats[]} errorGroupStats The error group stats which match the given request.\n* @property {string} nextPageToken If non-empty, more results are available.\nPass this token, along with the same query parameters as the first\nrequest, to view the next page of results.\n*/\n/**\n * @typedef DeleteEventsResponse\n * @memberOf! clouderrorreporting(v1beta1)\n * @type object\n */\n/**\n * @typedef ErrorEvent\n * @memberOf! clouderrorreporting(v1beta1)\n * @type object\n* @property {clouderrorreporting(v1beta1).ErrorContext} context Data about the context in which the error occurred.\n* @property {string} message The stack trace that was reported or logged by the service.\n* @property {clouderrorreporting(v1beta1).ServiceContext} serviceContext The `ServiceContext` for which this error was reported.\n* @property {string} eventTime Time when the event occurred as provided in the error report.\nIf the report did not contain a timestamp, the time the error was received\nby the Error Reporting system is used.\n*/\n/**\n * @typedef ReportedErrorEvent\n * @memberOf! clouderrorreporting(v1beta1)\n * @type object\n* @property {clouderrorreporting(v1beta1).ErrorContext} context [Optional] A description of the context in which the error occurred.\n* @property {string} message [Required] The error message.\nIf no `context.reportLocation` is provided, the message must contain a\nheader (typically consisting of the exception type name and an error\nmessage) and an exception stack trace in one of the supported programming\nlanguages and formats.\nSupported languages are Java, Python, JavaScript, Ruby, C#, PHP, and Go.\nSupported stack trace formats are:\n\n* **Java**: Must be the return value of [`Throwable.printStackTrace()`](https://docs.oracle.com/javase/7/docs/api/java/lang/Throwable.html#printStackTrace%28%29).\n* **Python**: Must be the return value of [`traceback.format_exc()`](https://docs.python.org/2/library/traceback.html#traceback.format_exc).\n* **JavaScript**: Must be the value of [`error.stack`](https://github.com/v8/v8/wiki/Stack-Trace-API)\nas returned by V8.\n* **Ruby**: Must contain frames returned by [`Exception.backtrace`](https://ruby-doc.org/core-2.2.0/Exception.html#method-i-backtrace).\n* **C#**: Must be the return value of [`Exception.ToString()`](https://msdn.microsoft.com/en-us/library/system.exception.tostring.aspx).\n* **PHP**: Must start with `PHP (Notice|Parse error|Fatal error|Warning)`\nand contain the result of [`(string)$exception`](http://php.net/manual/en/exception.tostring.php).\n* **Go**: Must be the return value of [`runtime.Stack()`](https://golang.org/pkg/runtime/debug/#Stack).\n* @property {clouderrorreporting(v1beta1).ServiceContext} serviceContext [Required] The service context in which this error has occurred.\n* @property {string} eventTime [Optional] Time when the event occurred.\nIf not provided, the time when the event was received by the\nError Reporting system will be used.\n*/\nmodule.exports = Clouderrorreporting;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/cloudfunctions/v1beta2.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Google Cloud Functions API\n *\n * API for managing lightweight user-provided functions executed in response to events.\n *\n * @example\n * var google = require('googleapis');\n * var cloudfunctions = google.cloudfunctions('v1beta2');\n *\n * @namespace cloudfunctions\n * @type {Function}\n * @version v1beta2\n * @variation v1beta2\n * @param {object=} options Options for Cloudfunctions\n */\nfunction Cloudfunctions(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.operations = {\n\n    /**\n     * cloudfunctions.operations.get\n     *\n     * @desc Gets the latest state of a long-running operation.  Clients can use this method to poll the operation result at intervals as recommended by the API service.\n     *\n     * @alias cloudfunctions.operations.get\n     * @memberOf! cloudfunctions(v1beta2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.name The name of the operation resource.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://cloudfunctions.googleapis.com/v1beta2/{name}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.projects = {\n\n    locations: {\n\n      /**\n       * cloudfunctions.projects.locations.list\n       *\n       * @desc Lists information about the supported locations for this service.\n       *\n       * @alias cloudfunctions.projects.locations.list\n       * @memberOf! cloudfunctions(v1beta2)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.name The resource that owns the locations collection, if applicable.\n       * @param {string=} params.pageToken The standard list page token.\n       * @param {integer=} params.pageSize The standard list page size.\n       * @param {string=} params.filter The standard list filter.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://cloudfunctions.googleapis.com/v1beta2/{name}/locations',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      functions: {\n\n        /**\n         * cloudfunctions.projects.locations.functions.get\n         *\n         * @desc Returns a function with the given name from the requested project.\n         *\n         * @alias cloudfunctions.projects.locations.functions.get\n         * @memberOf! cloudfunctions(v1beta2)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.name The name of the function which details should be obtained.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        get: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://cloudfunctions.googleapis.com/v1beta2/{name}',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * cloudfunctions.projects.locations.functions.update\n         *\n         * @desc Updates existing function.\n         *\n         * @alias cloudfunctions.projects.locations.functions.update\n         * @memberOf! cloudfunctions(v1beta2)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.name The name of the function to be updated.\n         * @param {cloudfunctions(v1beta2).CloudFunction} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        update: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://cloudfunctions.googleapis.com/v1beta2/{name}',\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * cloudfunctions.projects.locations.functions.delete\n         *\n         * @desc Deletes a function with the given name from the specified project. If the given function is used by some trigger, the trigger will be updated to remove this function.\n         *\n         * @alias cloudfunctions.projects.locations.functions.delete\n         * @memberOf! cloudfunctions(v1beta2)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.name The name of the function which should be deleted.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        delete: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://cloudfunctions.googleapis.com/v1beta2/{name}',\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * cloudfunctions.projects.locations.functions.list\n         *\n         * @desc Returns a list of functions that belong to the requested project.\n         *\n         * @alias cloudfunctions.projects.locations.functions.list\n         * @memberOf! cloudfunctions(v1beta2)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.location The project and location from which the function should be listed, specified in the format `projects/x/locations/x` If you want to list functions in all locations, use \"-\" in place of a location.\n         * @param {string=} params.pageToken The value returned by the last `ListFunctionsResponse`; indicates that this is a continuation of a prior `ListFunctions` call, and that the system should return the next page of data.\n         * @param {integer=} params.pageSize Maximum number of functions to return per call.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://cloudfunctions.googleapis.com/v1beta2/{location}/functions',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['location'],\n            pathParams: ['location'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * cloudfunctions.projects.locations.functions.call\n         *\n         * @desc Invokes synchronously deployed function. To be used for testing, very limited traffic allowed.\n         *\n         * @alias cloudfunctions.projects.locations.functions.call\n         * @memberOf! cloudfunctions(v1beta2)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.name The name of the function to be called.\n         * @param {cloudfunctions(v1beta2).CallFunctionRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        call: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://cloudfunctions.googleapis.com/v1beta2/{name}:call',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['name'],\n            pathParams: ['name'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * cloudfunctions.projects.locations.functions.create\n         *\n         * @desc Creates a new function. If a function with the given name already exists in the specified project, the long running operation will return `ALREADY_EXISTS` error.\n         *\n         * @alias cloudfunctions.projects.locations.functions.create\n         * @memberOf! cloudfunctions(v1beta2)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.location The project and location in which the function should be created, specified in the format `projects/x/locations/x`\n         * @param {cloudfunctions(v1beta2).CloudFunction} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://cloudfunctions.googleapis.com/v1beta2/{location}/functions',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['location'],\n            pathParams: ['location'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        }\n      }\n    }\n  };\n}\n\n/**\n * @typedef Operation\n * @memberOf! cloudfunctions(v1beta2)\n * @type object\n* @property {object} response The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.\n* @property {string} name The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should have the format of `operations/some/unique/name`.\n* @property {cloudfunctions(v1beta2).Status} error The error result of the operation in case of failure or cancellation.\n* @property {object} metadata Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.\n* @property {boolean} done If the value is `false`, it means the operation is still in progress.\nIf true, the operation is completed, and either `error` or `response` is\navailable.\n*/\n/**\n * @typedef OperationMetadataV1Beta2\n * @memberOf! cloudfunctions(v1beta2)\n * @type object\n* @property {string} target Target of the operation - for example\nprojects/project-1/locations/region-1/functions/function-1\n* @property {object} request The original request that started the operation.\n* @property {string} type Type of operation.\n*/\n/**\n * @typedef Status\n * @memberOf! cloudfunctions(v1beta2)\n * @type object\n* @property {integer} code The status code, which should be an enum value of google.rpc.Code.\n* @property {string} message A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.\n* @property {object[]} details A list of messages that carry the error details.  There will be a\ncommon set of message types for APIs to use.\n*/\n/**\n * @typedef CallFunctionRequest\n * @memberOf! cloudfunctions(v1beta2)\n * @type object\n * @property {string} data Input to be passed to the function.\n */\n/**\n * @typedef SourceRepository\n * @memberOf! cloudfunctions(v1beta2)\n * @type object\n* @property {string} repositoryUrl URL to the hosted repository where the function is defined. Only paths in\nhttps://source.developers.google.com domain are supported. The path should\ncontain the name of the repository.\n* @property {string} tag The name of the tag that captures the state of the repository from\nwhich the function should be fetched.\n* @property {string} branch The name of the branch from which the function should be fetched.\n* @property {string} sourcePath The path within the repository where the function is defined. The path\nshould point to the directory where Cloud Functions files are located. Use\n&quot;/&quot; if the function is defined directly in the root directory of a\nrepository.\n* @property {string} deployedRevision Output only. The id of the revision that was resolved at the moment of\nfunction creation or update. For example when a user deployed from a\nbranch, it will be the revision id of the latest change on this branch at\nthat time. If user deployed from revision then this value will be always\nequal to the revision specified by the user.\n* @property {string} revision The id of the revision that captures the state of the repository from\nwhich the function should be fetched.\n*/\n/**\n * @typedef CloudFunction\n * @memberOf! cloudfunctions(v1beta2)\n * @type object\n* @property {string} updateTime Output only. The last update timestamp of a Cloud Function.\n* @property {string} latestOperation Output only. Name of the most recent operation modifying the function. If\nthe function status is `DEPLOYING` or `DELETING`, then it points to the\nactive operation.\n* @property {cloudfunctions(v1beta2).HTTPSTrigger} httpsTrigger An HTTPS endpoint type of source that can be triggered via URL.\n* @property {cloudfunctions(v1beta2).EventTrigger} eventTrigger A source that fires events in response to a condition in another service.\n* @property {string} status Output only. Status of the function deployment.\n* @property {string} timeout The function execution timeout. Execution is considered failed and\ncan be terminated if the function is not completed at the end of the\ntimeout period. Defaults to 60 seconds.\n* @property {integer} availableMemoryMb The amount of memory in MB available for a function.\nDefaults to 256MB.\n* @property {string} name A user-defined name of the function. Function names must be unique\nglobally and match pattern `projects/x/locations/x/functions/x\n* @property {string} serviceAccount Output only. The service account of the function.\n* @property {string} sourceArchiveUrl The URL, starting with gs://, pointing to the zip archive which contains\nthe function.\n* @property {cloudfunctions(v1beta2).SourceRepository} sourceRepository The hosted repository where the function is defined.\n* @property {string} entryPoint The name of the function (as defined in source code) that will be\nexecuted. Defaults to the resource name suffix, if not specified. For\nbackward compatibility, if function with given name is not found, then the\nsystem will try to use function named &quot;function&quot;.\nFor Node.js this is name of a function exported by the module specified\nin `source_location`.\n*/\n/**\n * @typedef Location\n * @memberOf! cloudfunctions(v1beta2)\n * @type object\n* @property {object} metadata Service-specific metadata. For example the available capacity at the given\nlocation.\n* @property {object} labels Cross-service attributes for the location. For example\n\n    {&quot;cloud.googleapis.com/region&quot;: &quot;us-east1&quot;}\n* @property {string} name Resource name for the location, which may vary between implementations.\nFor example: `&quot;projects/example-project/locations/us-east1&quot;`\n* @property {string} locationId The canonical id for this location. For example: `&quot;us-east1&quot;`.\n*/\n/**\n * @typedef ListFunctionsResponse\n * @memberOf! cloudfunctions(v1beta2)\n * @type object\n* @property {string} nextPageToken If not empty, indicates that there may be more functions that match\nthe request; this value should be passed in a new\ngoogle.cloud.functions.v1beta2.ListFunctionsRequest\nto get more functions.\n* @property {cloudfunctions(v1beta2).CloudFunction[]} functions The functions that match the request.\n*/\n/**\n * @typedef CallFunctionResponse\n * @memberOf! cloudfunctions(v1beta2)\n * @type object\n* @property {string} executionId Execution id of function invocation.\n* @property {string} result Result populated for successful execution of synchronous function. Will\nnot be populated if function does not return a result through context.\n* @property {string} error Either system or user-function generated error. Set if execution\nwas not successful.\n*/\n/**\n * @typedef ListLocationsResponse\n * @memberOf! cloudfunctions(v1beta2)\n * @type object\n * @property {string} nextPageToken The standard List next-page token.\n * @property {cloudfunctions(v1beta2).Location[]} locations A list of locations that matches the specified filter in the request.\n */\n/**\n * @typedef EventTrigger\n * @memberOf! cloudfunctions(v1beta2)\n * @type object\n* @property {string} resource Which instance of the source&#39;s service should send events. E.g. for Pub/Sub\nthis would be a Pub/Sub topic at `projects/x/topics/x. For Google Cloud\nStorage this would be a bucket at `projects/x/buckets/x. For any source\nthat only supports one instance per-project, this should be the name of the\nproject (`projects/x)\n* @property {string} eventType `event_type` names contain the service that is sending an event and the\nkind of event that was fired. Must be of the form\n`providers/x/eventTypes/x e.g. Directly handle a Message published to\nGoogle Cloud Pub/Sub `providers/cloud.pubsub/eventTypes/topic.publish`\n\n     Handle an object changing in Google Cloud Storage\n     `providers/cloud.storage/eventTypes/object.change`\n\n     Handle a write to the Firebase Realtime Database\n     `providers/firebase.database/eventTypes/data.write`\n*/\n/**\n * @typedef HTTPSTrigger\n * @memberOf! cloudfunctions(v1beta2)\n * @type object\n * @property {string} url Output only. The deployed url for the function.\n */\nmodule.exports = Cloudfunctions;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/cloudmonitoring/v2beta2.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Cloud Monitoring API\n *\n * Accesses Google Cloud Monitoring data.\n *\n * @example\n * var google = require('googleapis');\n * var cloudmonitoring = google.cloudmonitoring('v2beta2');\n *\n * @namespace cloudmonitoring\n * @type {Function}\n * @version v2beta2\n * @variation v2beta2\n * @param {object=} options Options for Cloudmonitoring\n */\nfunction Cloudmonitoring(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.metricDescriptors = {\n\n    /**\n     * cloudmonitoring.metricDescriptors.create\n     *\n     * @desc Create a new metric.\n     *\n     * @alias cloudmonitoring.metricDescriptors.create\n     * @memberOf! cloudmonitoring(v2beta2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project The project id. The value can be the numeric project ID or string-based project name.\n     * @param {cloudmonitoring(v2beta2).MetricDescriptor} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/cloudmonitoring/v2beta2/projects/{project}/metricDescriptors',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * cloudmonitoring.metricDescriptors.delete\n     *\n     * @desc Delete an existing metric.\n     *\n     * @alias cloudmonitoring.metricDescriptors.delete\n     * @memberOf! cloudmonitoring(v2beta2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.metric Name of the metric.\n     * @param {string} params.project The project ID to which the metric belongs.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/cloudmonitoring/v2beta2/projects/{project}/metricDescriptors/{metric}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'metric'],\n        pathParams: ['metric', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * cloudmonitoring.metricDescriptors.list\n     *\n     * @desc List metric descriptors that match the query. If the query is not set, then all of the metric descriptors will be returned. Large responses will be paginated, use the nextPageToken returned in the response to request subsequent pages of results by setting the pageToken query parameter to the value of the nextPageToken.\n     *\n     * @alias cloudmonitoring.metricDescriptors.list\n     * @memberOf! cloudmonitoring(v2beta2)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer=} params.count Maximum number of metric descriptors per page. Used for pagination. If not specified, count = 100.\n     * @param {string=} params.pageToken The pagination token, which is used to page through large result sets. Set this value to the value of the nextPageToken to retrieve the next page of results.\n     * @param {string} params.project The project id. The value can be the numeric project ID or string-based project name.\n     * @param {string=} params.query The query used to search against existing metrics. Separate keywords with a space; the service joins all keywords with AND, meaning that all keywords must match for a metric to be returned. If this field is omitted, all metrics are returned. If an empty string is passed with this field, no metrics are returned.\n     * @param {cloudmonitoring(v2beta2).ListMetricDescriptorsRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/cloudmonitoring/v2beta2/projects/{project}/metricDescriptors',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.timeseries = {\n\n    /**\n     * cloudmonitoring.timeseries.list\n     *\n     * @desc List the data points of the time series that match the metric and labels values and that have data points in the interval. Large responses are paginated; use the nextPageToken returned in the response to request subsequent pages of results by setting the pageToken query parameter to the value of the nextPageToken.\n     *\n     * @alias cloudmonitoring.timeseries.list\n     * @memberOf! cloudmonitoring(v2beta2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.aggregator The aggregation function that will reduce the data points in each window to a single point. This parameter is only valid for non-cumulative metrics with a value type of INT64 or DOUBLE.\n     * @param {integer=} params.count Maximum number of data points per page, which is used for pagination of results.\n     * @param {string=} params.labels A collection of labels for the matching time series, which are represented as:   - key==value: key equals the value  - key=~value: key regex matches the value  - key!=value: key does not equal the value  - key!~value: key regex does not match the value  For example, to list all of the time series descriptors for the region us-central1, you could specify: label=cloud.googleapis.com%2Flocation=~us-central1.*\n     * @param {string} params.metric Metric names are protocol-free URLs as listed in the Supported Metrics page. For example, compute.googleapis.com/instance/disk/read_ops_count.\n     * @param {string=} params.oldest Start of the time interval (exclusive), which is expressed as an RFC 3339 timestamp. If neither oldest nor timespan is specified, the default time interval will be (youngest - 4 hours, youngest]\n     * @param {string=} params.pageToken The pagination token, which is used to page through large result sets. Set this value to the value of the nextPageToken to retrieve the next page of results.\n     * @param {string} params.project The project ID to which this time series belongs. The value can be the numeric project ID or string-based project name.\n     * @param {string=} params.timespan Length of the time interval to query, which is an alternative way to declare the interval: (youngest - timespan, youngest]. The timespan and oldest parameters should not be used together. Units:   - s: second  - m: minute  - h: hour  - d: day  - w: week  Examples: 2s, 3m, 4w. Only one unit is allowed, for example: 2w3d is not allowed; you should use 17d instead.  If neither oldest nor timespan is specified, the default time interval will be (youngest - 4 hours, youngest].\n     * @param {string=} params.window The sampling window. At most one data point will be returned for each window in the requested time interval. This parameter is only valid for non-cumulative metric types. Units:   - m: minute  - h: hour  - d: day  - w: week  Examples: 3m, 4w. Only one unit is allowed, for example: 2w3d is not allowed; you should use 17d instead.\n     * @param {string} params.youngest End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.\n     * @param {cloudmonitoring(v2beta2).ListTimeseriesRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/cloudmonitoring/v2beta2/projects/{project}/timeseries/{metric}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'metric', 'youngest'],\n        pathParams: ['metric', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * cloudmonitoring.timeseries.write\n     *\n     * @desc Put data points to one or more time series for one or more metrics. If a time series does not exist, a new time series will be created. It is not allowed to write a time series point that is older than the existing youngest point of that time series. Points that are older than the existing youngest point of that time series will be discarded silently. Therefore, users should make sure that points of a time series are written sequentially in the order of their end time.\n     *\n     * @alias cloudmonitoring.timeseries.write\n     * @memberOf! cloudmonitoring(v2beta2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project The project ID. The value can be the numeric project ID or string-based project name.\n     * @param {cloudmonitoring(v2beta2).WriteTimeseriesRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    write: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/cloudmonitoring/v2beta2/projects/{project}/timeseries:write',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.timeseriesDescriptors = {\n\n    /**\n     * cloudmonitoring.timeseriesDescriptors.list\n     *\n     * @desc List the descriptors of the time series that match the metric and labels values and that have data points in the interval. Large responses are paginated; use the nextPageToken returned in the response to request subsequent pages of results by setting the pageToken query parameter to the value of the nextPageToken.\n     *\n     * @alias cloudmonitoring.timeseriesDescriptors.list\n     * @memberOf! cloudmonitoring(v2beta2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.aggregator The aggregation function that will reduce the data points in each window to a single point. This parameter is only valid for non-cumulative metrics with a value type of INT64 or DOUBLE.\n     * @param {integer=} params.count Maximum number of time series descriptors per page. Used for pagination. If not specified, count = 100.\n     * @param {string=} params.labels A collection of labels for the matching time series, which are represented as:   - key==value: key equals the value  - key=~value: key regex matches the value  - key!=value: key does not equal the value  - key!~value: key regex does not match the value  For example, to list all of the time series descriptors for the region us-central1, you could specify: label=cloud.googleapis.com%2Flocation=~us-central1.*\n     * @param {string} params.metric Metric names are protocol-free URLs as listed in the Supported Metrics page. For example, compute.googleapis.com/instance/disk/read_ops_count.\n     * @param {string=} params.oldest Start of the time interval (exclusive), which is expressed as an RFC 3339 timestamp. If neither oldest nor timespan is specified, the default time interval will be (youngest - 4 hours, youngest]\n     * @param {string=} params.pageToken The pagination token, which is used to page through large result sets. Set this value to the value of the nextPageToken to retrieve the next page of results.\n     * @param {string} params.project The project ID to which this time series belongs. The value can be the numeric project ID or string-based project name.\n     * @param {string=} params.timespan Length of the time interval to query, which is an alternative way to declare the interval: (youngest - timespan, youngest]. The timespan and oldest parameters should not be used together. Units:   - s: second  - m: minute  - h: hour  - d: day  - w: week  Examples: 2s, 3m, 4w. Only one unit is allowed, for example: 2w3d is not allowed; you should use 17d instead.  If neither oldest nor timespan is specified, the default time interval will be (youngest - 4 hours, youngest].\n     * @param {string=} params.window The sampling window. At most one data point will be returned for each window in the requested time interval. This parameter is only valid for non-cumulative metric types. Units:   - m: minute  - h: hour  - d: day  - w: week  Examples: 3m, 4w. Only one unit is allowed, for example: 2w3d is not allowed; you should use 17d instead.\n     * @param {string} params.youngest End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.\n     * @param {cloudmonitoring(v2beta2).ListTimeseriesDescriptorsRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/cloudmonitoring/v2beta2/projects/{project}/timeseriesDescriptors/{metric}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'metric', 'youngest'],\n        pathParams: ['metric', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef DeleteMetricDescriptorResponse\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;cloudmonitoring#deleteMetricDescriptorResponse&quot;.\n */\n/**\n * @typedef ListMetricDescriptorsRequest\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;cloudmonitoring#listMetricDescriptorsRequest&quot;.\n */\n/**\n * @typedef ListMetricDescriptorsResponse\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;cloudmonitoring#listMetricDescriptorsResponse&quot;.\n * @property {cloudmonitoring(v2beta2).MetricDescriptor[]} metrics The returned metric descriptors.\n * @property {string} nextPageToken Pagination token. If present, indicates that additional results are available for retrieval. To access the results past the pagination limit, pass this value to the pageToken query parameter.\n */\n/**\n * @typedef ListTimeseriesDescriptorsRequest\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;cloudmonitoring#listTimeseriesDescriptorsRequest&quot;.\n */\n/**\n * @typedef ListTimeseriesDescriptorsResponse\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;cloudmonitoring#listTimeseriesDescriptorsResponse&quot;.\n * @property {string} nextPageToken Pagination token. If present, indicates that additional results are available for retrieval. To access the results past the pagination limit, set this value to the pageToken query parameter.\n * @property {string} oldest The oldest timestamp of the interval of this query, as an RFC 3339 string.\n * @property {cloudmonitoring(v2beta2).TimeseriesDescriptor[]} timeseries The returned time series descriptors.\n * @property {string} youngest The youngest timestamp of the interval of this query, as an RFC 3339 string.\n */\n/**\n * @typedef ListTimeseriesRequest\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;cloudmonitoring#listTimeseriesRequest&quot;.\n */\n/**\n * @typedef ListTimeseriesResponse\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;cloudmonitoring#listTimeseriesResponse&quot;.\n * @property {string} nextPageToken Pagination token. If present, indicates that additional results are available for retrieval. To access the results past the pagination limit, set the pageToken query parameter to this value. All of the points of a time series will be returned before returning any point of the subsequent time series.\n * @property {string} oldest The oldest timestamp of the interval of this query as an RFC 3339 string.\n * @property {cloudmonitoring(v2beta2).Timeseries[]} timeseries The returned time series.\n * @property {string} youngest The youngest timestamp of the interval of this query as an RFC 3339 string.\n */\n/**\n * @typedef MetricDescriptor\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {string} description Description of this metric.\n * @property {cloudmonitoring(v2beta2).MetricDescriptorLabelDescriptor[]} labels Labels defined for this metric.\n * @property {string} name The name of this metric.\n * @property {string} project The project ID to which the metric belongs.\n * @property {cloudmonitoring(v2beta2).MetricDescriptorTypeDescriptor} typeDescriptor Type description for this metric.\n */\n/**\n * @typedef MetricDescriptorLabelDescriptor\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {string} description Label description.\n * @property {string} key Label key.\n */\n/**\n * @typedef MetricDescriptorTypeDescriptor\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {string} metricType The method of collecting data for the metric. See Metric types.\n * @property {string} valueType The data type of of individual points in the metric&#39;s time series. See Metric value types.\n */\n/**\n * @typedef Point\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {boolean} boolValue The value of this data point. Either &quot;true&quot; or &quot;false&quot;.\n * @property {cloudmonitoring(v2beta2).PointDistribution} distributionValue The value of this data point as a distribution. A distribution value can contain a list of buckets and/or an underflowBucket and an overflowBucket. The values of these points can be used to create a histogram.\n * @property {number} doubleValue The value of this data point as a double-precision floating-point number.\n * @property {string} end The interval [start, end] is the time period to which the point&#39;s value applies. For gauge metrics, whose values are instantaneous measurements, this interval should be empty (start should equal end). For cumulative metrics (of which deltas and rates are special cases), the interval should be non-empty. Both start and end are RFC 3339 strings.\n * @property {string} int64Value The value of this data point as a 64-bit integer.\n * @property {string} start The interval [start, end] is the time period to which the point&#39;s value applies. For gauge metrics, whose values are instantaneous measurements, this interval should be empty (start should equal end). For cumulative metrics (of which deltas and rates are special cases), the interval should be non-empty. Both start and end are RFC 3339 strings.\n * @property {string} stringValue The value of this data point in string format.\n */\n/**\n * @typedef PointDistribution\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {cloudmonitoring(v2beta2).PointDistributionBucket[]} buckets The finite buckets.\n * @property {cloudmonitoring(v2beta2).PointDistributionOverflowBucket} overflowBucket The overflow bucket.\n * @property {cloudmonitoring(v2beta2).PointDistributionUnderflowBucket} underflowBucket The underflow bucket.\n */\n/**\n * @typedef PointDistributionBucket\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {string} count The number of events whose values are in the interval defined by this bucket.\n * @property {number} lowerBound The lower bound of the value interval of this bucket (inclusive).\n * @property {number} upperBound The upper bound of the value interval of this bucket (exclusive).\n */\n/**\n * @typedef PointDistributionOverflowBucket\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {string} count The number of events whose values are in the interval defined by this bucket.\n * @property {number} lowerBound The lower bound of the value interval of this bucket (inclusive).\n */\n/**\n * @typedef PointDistributionUnderflowBucket\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {string} count The number of events whose values are in the interval defined by this bucket.\n * @property {number} upperBound The upper bound of the value interval of this bucket (exclusive).\n */\n/**\n * @typedef Timeseries\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {cloudmonitoring(v2beta2).Point[]} points The data points of this time series. The points are listed in order of their end timestamp, from younger to older.\n * @property {cloudmonitoring(v2beta2).TimeseriesDescriptor} timeseriesDesc The descriptor of this time series.\n */\n/**\n * @typedef TimeseriesDescriptor\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {object} labels The label&#39;s name.\n * @property {string} metric The name of the metric.\n * @property {string} project The Developers Console project number to which this time series belongs.\n */\n/**\n * @typedef TimeseriesDescriptorLabel\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {string} key The label&#39;s name.\n * @property {string} value The label&#39;s value.\n */\n/**\n * @typedef TimeseriesPoint\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {cloudmonitoring(v2beta2).Point} point The data point in this time series snapshot.\n * @property {cloudmonitoring(v2beta2).TimeseriesDescriptor} timeseriesDesc The descriptor of this time series.\n */\n/**\n * @typedef WriteTimeseriesRequest\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {object} commonLabels The label&#39;s name.\n * @property {cloudmonitoring(v2beta2).TimeseriesPoint[]} timeseries Provide time series specific labels and the data points for each time series. The labels in timeseries and the common_labels should form a complete list of labels that required by the metric.\n */\n/**\n * @typedef WriteTimeseriesResponse\n * @memberOf! cloudmonitoring(v2beta2)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;cloudmonitoring#writeTimeseriesResponse&quot;.\n */\nmodule.exports = Cloudmonitoring;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/clouduseraccounts/alpha.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Cloud User Accounts API\n *\n * Creates and manages users and groups for accessing Google Compute Engine virtual machines.\n *\n * @example\n * var google = require('googleapis');\n * var clouduseraccounts = google.clouduseraccounts('alpha');\n *\n * @namespace clouduseraccounts\n * @type {Function}\n * @version alpha\n * @variation alpha\n * @param {object=} options Options for Clouduseraccounts\n */\nfunction Clouduseraccounts(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.globalAccountsOperations = {\n\n    /**\n     * clouduseraccounts.globalAccountsOperations.delete\n     *\n     * @desc Deletes the specified operation resource.\n     *\n     * @alias clouduseraccounts.globalAccountsOperations.delete\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.operation Name of the Operations resource to delete.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/operations/{operation}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.globalAccountsOperations.get\n     *\n     * @desc Retrieves the specified operation resource.\n     *\n     * @alias clouduseraccounts.globalAccountsOperations.get\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.operation Name of the Operations resource to return.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/operations/{operation}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.globalAccountsOperations.list\n     *\n     * @desc Retrieves the list of operation resources contained within the specified project.\n     *\n     * @alias clouduseraccounts.globalAccountsOperations.list\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  Compute Engine Beta API Only: If you use filtering in the Beta API, you can also filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. In particular, use filtering on nested fields to take advantage of instance labels to organize and filter results based on label values.  The Beta API also supports filtering on multiple expressions by providing each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests.\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/operations',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.groups = {\n\n    /**\n     * clouduseraccounts.groups.addMember\n     *\n     * @desc Adds users to the specified group.\n     *\n     * @alias clouduseraccounts.groups.addMember\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the group for this request.\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(alpha).GroupsAddMemberRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    addMember: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/groups/{groupName}/addMember',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.delete\n     *\n     * @desc Deletes the specified Group resource.\n     *\n     * @alias clouduseraccounts.groups.delete\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the Group resource to delete.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/groups/{groupName}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.get\n     *\n     * @desc Returns the specified Group resource.\n     *\n     * @alias clouduseraccounts.groups.get\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the Group resource to return.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/groups/{groupName}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.getIamPolicy\n     *\n     * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.\n     *\n     * @alias clouduseraccounts.groups.getIamPolicy\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.resource_ Name of the resource for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getIamPolicy: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/groups/{resource}/getIamPolicy',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.insert\n     *\n     * @desc Creates a Group resource in the specified project using the data included in the request.\n     *\n     * @alias clouduseraccounts.groups.insert\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(alpha).Group} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/groups',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.list\n     *\n     * @desc Retrieves the list of groups contained within the specified project.\n     *\n     * @alias clouduseraccounts.groups.list\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  Compute Engine Beta API Only: If you use filtering in the Beta API, you can also filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. In particular, use filtering on nested fields to take advantage of instance labels to organize and filter results based on label values.  The Beta API also supports filtering on multiple expressions by providing each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests.\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/groups',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.removeMember\n     *\n     * @desc Removes users from the specified group.\n     *\n     * @alias clouduseraccounts.groups.removeMember\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the group for this request.\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(alpha).GroupsRemoveMemberRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    removeMember: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/groups/{groupName}/removeMember',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.setIamPolicy\n     *\n     * @desc Sets the access control policy on the specified resource. Replaces any existing policy.\n     *\n     * @alias clouduseraccounts.groups.setIamPolicy\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.resource_ Name of the resource for this request.\n     * @param {clouduseraccounts(alpha).Policy} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    setIamPolicy: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/groups/{resource}/setIamPolicy',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.testIamPermissions\n     *\n     * @desc Returns permissions that a caller has on the specified resource.\n     *\n     * @alias clouduseraccounts.groups.testIamPermissions\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.resource_ Name of the resource for this request.\n     * @param {clouduseraccounts(alpha).TestPermissionsRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    testIamPermissions: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/groups/{resource}/testIamPermissions',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.linux = {\n\n    /**\n     * clouduseraccounts.linux.getAuthorizedKeysView\n     *\n     * @desc Returns a list of authorized public keys for a specific user account.\n     *\n     * @alias clouduseraccounts.linux.getAuthorizedKeysView\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.instance The fully-qualified URL of the virtual machine requesting the view.\n     * @param {boolean=} params.login Whether the view was requested as part of a user-initiated login.\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user The user account for which you want to get a list of authorized public keys.\n     * @param {string} params.zone Name of the zone for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getAuthorizedKeysView: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/zones/{zone}/authorizedKeysView/{user}',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'zone', 'user', 'instance'],\n        pathParams: ['project', 'user', 'zone'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.linux.getLinuxAccountViews\n     *\n     * @desc Retrieves a list of user accounts for an instance within a specific project.\n     *\n     * @alias clouduseraccounts.linux.getLinuxAccountViews\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  Compute Engine Beta API Only: If you use filtering in the Beta API, you can also filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. In particular, use filtering on nested fields to take advantage of instance labels to organize and filter results based on label values.  The Beta API also supports filtering on multiple expressions by providing each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {string} params.instance The fully-qualified URL of the virtual machine requesting the views.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests.\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.zone Name of the zone for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getLinuxAccountViews: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/zones/{zone}/linuxAccountViews',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['project', 'zone'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.users = {\n\n    /**\n     * clouduseraccounts.users.addPublicKey\n     *\n     * @desc Adds a public key to the specified User resource with the data included in the request.\n     *\n     * @alias clouduseraccounts.users.addPublicKey\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user for this request.\n     * @param {clouduseraccounts(alpha).PublicKey} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    addPublicKey: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/users/{user}/addPublicKey',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.delete\n     *\n     * @desc Deletes the specified User resource.\n     *\n     * @alias clouduseraccounts.users.delete\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user resource to delete.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/users/{user}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.get\n     *\n     * @desc Returns the specified User resource.\n     *\n     * @alias clouduseraccounts.users.get\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user resource to return.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/users/{user}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.getIamPolicy\n     *\n     * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.\n     *\n     * @alias clouduseraccounts.users.getIamPolicy\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.resource_ Name of the resource for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getIamPolicy: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/users/{resource}/getIamPolicy',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.insert\n     *\n     * @desc Creates a User resource in the specified project using the data included in the request.\n     *\n     * @alias clouduseraccounts.users.insert\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(alpha).User} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/users',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.list\n     *\n     * @desc Retrieves a list of users contained within the specified project.\n     *\n     * @alias clouduseraccounts.users.list\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  Compute Engine Beta API Only: If you use filtering in the Beta API, you can also filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. In particular, use filtering on nested fields to take advantage of instance labels to organize and filter results based on label values.  The Beta API also supports filtering on multiple expressions by providing each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests.\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/users',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.removePublicKey\n     *\n     * @desc Removes the specified public key from the user.\n     *\n     * @alias clouduseraccounts.users.removePublicKey\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.fingerprint The fingerprint of the public key to delete. Public keys are identified by their fingerprint, which is defined by RFC4716 to be the MD5 digest of the public key.\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    removePublicKey: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/users/{user}/removePublicKey',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user', 'fingerprint'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.setIamPolicy\n     *\n     * @desc Sets the access control policy on the specified resource. Replaces any existing policy.\n     *\n     * @alias clouduseraccounts.users.setIamPolicy\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.resource_ Name of the resource for this request.\n     * @param {clouduseraccounts(alpha).Policy} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    setIamPolicy: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/users/{resource}/setIamPolicy',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.testIamPermissions\n     *\n     * @desc Returns permissions that a caller has on the specified resource.\n     *\n     * @alias clouduseraccounts.users.testIamPermissions\n     * @memberOf! clouduseraccounts(alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.resource_ Name of the resource for this request.\n     * @param {clouduseraccounts(alpha).TestPermissionsRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    testIamPermissions: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/alpha/projects/{project}/global/users/{resource}/testIamPermissions',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef AuditConfig\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {string[]} exemptedMembers Specifies the identities that are exempted from &quot;data access&quot; audit logging for the `service` specified above. Follows the same format of Binding.members.\n * @property {string} service Specifies a service that will be enabled for &quot;data access&quot; audit logging. For example, `resourcemanager`, `storage`, `compute`. `allServices` is a special value that covers all services.\n */\n/**\n * @typedef AuthorizedKeysView\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {string[]} keys [Output Only] The list of authorized public keys in SSH format.\n * @property {boolean} sudoer [Output Only] Whether the user has the ability to elevate on the instance that requested the authorized keys.\n */\n/**\n * @typedef Binding\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n* @property {string[]} members Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values:\n\n* `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account.\n\n* `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account.\n\n* `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@gmail.com` or `joe@example.com`.\n\n* `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`.\n\n* `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`.\n\n* `domain:{domain}`: A Google Apps domain name that represents all the users of that domain. For example, `google.com` or `example.com`.\n* @property {string} role Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.\n*/\n/**\n * @typedef Condition\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {string} iam Trusted attributes supplied by the IAM system.\n * @property {string} op An operator to apply the subject with.\n * @property {string} svc Trusted attributes discharged by the service.\n * @property {string} sys Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.\n * @property {string} value The object of the condition. Exactly one of these must be set.\n * @property {string[]} values The objects of the condition. This is mutually exclusive with &#39;value&#39;.\n */\n/**\n * @typedef Group\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {string} creationTimestamp [Output Only] Creation timestamp in RFC3339 text format.\n * @property {string} description An optional textual description of the resource; provided by the client when the resource is created.\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {string} kind [Output Only] Type of the resource. Always clouduseraccounts#group for groups.\n * @property {string[]} members [Output Only] A list of URLs to User resources who belong to the group. Users may only be members of groups in the same project.\n * @property {string} name Name of the resource; provided by the client when the resource is created.\n * @property {string} selfLink [Output Only] Server defined URL for the resource.\n */\n/**\n * @typedef GroupList\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {clouduseraccounts(alpha).Group[]} items [Output Only] A list of Group resources.\n * @property {string} kind [Output Only] Type of resource. Always clouduseraccounts#groupList for lists of groups.\n * @property {string} nextPageToken [Output Only] A token used to continue a truncated list request.\n * @property {string} selfLink [Output Only] Server defined URL for this resource.\n */\n/**\n * @typedef GroupsAddMemberRequest\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {string[]} users Fully-qualified URLs of the User resources to add.\n */\n/**\n * @typedef GroupsRemoveMemberRequest\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {string[]} users Fully-qualified URLs of the User resources to remove.\n */\n/**\n * @typedef LinuxAccountViews\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {clouduseraccounts(alpha).LinuxGroupView[]} groupViews [Output Only] A list of all groups within a project.\n * @property {string} kind [Output Only] Type of the resource. Always clouduseraccounts#linuxAccountViews for Linux resources.\n * @property {clouduseraccounts(alpha).LinuxUserView[]} userViews [Output Only] A list of all users within a project.\n */\n/**\n * @typedef LinuxGetAuthorizedKeysViewResponse\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {clouduseraccounts(alpha).AuthorizedKeysView} resource [Output Only] A list of authorized public keys for a user.\n */\n/**\n * @typedef LinuxGetLinuxAccountViewsResponse\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {clouduseraccounts(alpha).LinuxAccountViews} resource [Output Only] A list of authorized user accounts and groups.\n */\n/**\n * @typedef LinuxGroupView\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {integer} gid [Output Only] The Group ID.\n * @property {string} groupName [Output Only] Group name.\n * @property {string[]} members [Output Only] List of user accounts that belong to the group.\n */\n/**\n * @typedef LinuxUserView\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {string} gecos [Output Only] The GECOS (user information) entry for this account.\n * @property {integer} gid [Output Only] User&#39;s default group ID.\n * @property {string} homeDirectory [Output Only] The path to the home directory for this account.\n * @property {string} shell [Output Only] The path to the login shell for this account.\n * @property {integer} uid [Output Only] User ID.\n * @property {string} username [Output Only] The username of the account.\n */\n/**\n * @typedef LogConfig\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {clouduseraccounts(alpha).LogConfigCounterOptions} counter Counter options.\n */\n/**\n * @typedef LogConfigCounterOptions\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {string} field The field value to attribute.\n * @property {string} metric The metric to update.\n */\n/**\n * @typedef Operation\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {string} clientOperationId [Output Only] Reserved for future use.\n * @property {string} creationTimestamp [Output Only] Creation timestamp in RFC3339 text format.\n * @property {string} description [Output Only] A textual description of the operation, which is set when the operation is created.\n * @property {string} endTime [Output Only] The time that this operation was completed. This value is in RFC3339 text format.\n * @property {object} error [Output Only] If errors are generated during processing of the operation, this field will be populated.\n * @property {string} httpErrorMessage [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as NOT FOUND.\n * @property {integer} httpErrorStatusCode [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a 404 means the resource was not found.\n * @property {string} id [Output Only] The unique identifier for the resource. This identifier is defined by the server.\n * @property {string} insertTime [Output Only] The time that this operation was requested. This value is in RFC3339 text format.\n * @property {string} kind [Output Only] Type of the resource. Always compute#operation for Operation resources.\n * @property {string} name [Output Only] Name of the resource.\n * @property {string} operationType [Output Only] The type of operation, such as insert, update, or delete, and so on.\n * @property {integer} progress [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.\n * @property {string} region [Output Only] The URL of the region where the operation resides. Only available when performing regional operations.\n * @property {string} selfLink [Output Only] Server-defined URL for the resource.\n * @property {string} startTime [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.\n * @property {string} status [Output Only] The status of the operation, which can be one of the following: PENDING, RUNNING, or DONE.\n * @property {string} statusMessage [Output Only] An optional textual description of the current status of the operation.\n * @property {string} targetId [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.\n * @property {string} targetLink [Output Only] The URL of the resource that the operation modifies.\n * @property {string} user [Output Only] User who requested the operation, for example: user@example.com.\n * @property {object[]} warnings [Output Only] If warning messages are generated during processing of the operation, this field will be populated.\n * @property {string} zone [Output Only] The URL of the zone where the operation resides. Only available when performing per-zone operations.\n */\n/**\n * @typedef OperationList\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {string} id [Output Only] The unique identifier for the resource. This identifier is defined by the server.\n * @property {clouduseraccounts(alpha).Operation[]} items [Output Only] A list of Operation resources.\n * @property {string} kind [Output Only] Type of resource. Always compute#operations for Operations resource.\n * @property {string} nextPageToken [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.\n * @property {string} selfLink [Output Only] Server-defined URL for this resource.\n */\n/**\n * @typedef Policy\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n* @property {clouduseraccounts(alpha).AuditConfig[]} auditConfigs Specifies audit logging configs for &quot;data access&quot;. &quot;data access&quot;: generally refers to data reads/writes and admin reads. &quot;admin activity&quot;: generally refers to admin writes.\n\nNote: `AuditConfig` doesn&#39;t apply to &quot;admin activity&quot;, which always enables audit logging.\n* @property {clouduseraccounts(alpha).Binding[]} bindings Associates a list of `members` to a `role`. Multiple `bindings` must not be specified for the same `role`. `bindings` with no members will result in an error.\n* @property {string} etag `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy.\n\nIf no `etag` is provided in the call to `setIamPolicy`, then the existing policy is overwritten blindly.\n* @property {boolean} iamOwned \n* @property {clouduseraccounts(alpha).Rule[]} rules If more than one rule is specified, the rules are applied in the following manner: - All matching LOG rules are always applied. - If any DENY/DENY_WITH_LOG rule matches, permission is denied. Logging will be applied if one or more matching rule requires logging. - Otherwise, if any ALLOW/ALLOW_WITH_LOG rule matches, permission is granted. Logging will be applied if one or more matching rule requires logging. - Otherwise, if no rule applies, permission is denied.\n* @property {integer} version Version of the `Policy`. The default version is 0.\n*/\n/**\n * @typedef PublicKey\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {string} creationTimestamp [Output Only] Creation timestamp in RFC3339 text format.\n * @property {string} description An optional textual description of the resource; provided by the client when the resource is created.\n * @property {string} expirationTimestamp Optional expiration timestamp. If provided, the timestamp must be in RFC3339 text format. If not provided, the public key never expires.\n * @property {string} fingerprint [Output Only] The fingerprint of the key is defined by RFC4716 to be the MD5 digest of the public key.\n * @property {string} key Public key text in SSH format, defined by RFC4253 section 6.6.\n */\n/**\n * @typedef Rule\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {string} action Required\n * @property {clouduseraccounts(alpha).Condition[]} conditions Additional restrictions that must be met\n * @property {string} description Human-readable description of the rule.\n * @property {string[]} ins The rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in this set of entries.\n * @property {clouduseraccounts(alpha).LogConfig[]} logConfigs The config returned to callers of tech.iam.IAM.CheckPolicy for any entries that match the LOG action.\n * @property {string[]} notIns The rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is not in this set of entries.\n * @property {string[]} permissions A permission is a string of form &#39;..&#39; (e.g., &#39;storage.buckets.list&#39;). A value of &#39;*&#39; matches all permissions, and a verb part of &#39;*&#39; (e.g., &#39;storage.buckets.*&#39;) matches all verbs.\n */\n/**\n * @typedef TestPermissionsRequest\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {string[]} permissions The set of permissions to check for the &#39;resource&#39;. Permissions with wildcards (such as &#39;*&#39; or &#39;storage.*&#39;) are not allowed.\n */\n/**\n * @typedef TestPermissionsResponse\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {string[]} permissions A subset of `TestPermissionsRequest.permissions` that the caller is allowed.\n */\n/**\n * @typedef User\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {string} creationTimestamp [Output Only] Creation timestamp in RFC3339 text format.\n * @property {string} description An optional textual description of the resource; provided by the client when the resource is created.\n * @property {string[]} groups [Output Only] A list of URLs to Group resources who contain the user. Users are only members of groups in the same project.\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {string} kind [Output Only] Type of the resource. Always clouduseraccounts#user for users.\n * @property {string} name Name of the resource; provided by the client when the resource is created.\n * @property {string} owner Email address of account&#39;s owner. This account will be validated to make sure it exists. The email can belong to any domain, but it must be tied to a Google account.\n * @property {clouduseraccounts(alpha).PublicKey[]} publicKeys [Output Only] Public keys that this user may use to login.\n * @property {string} selfLink [Output Only] Server defined URL for the resource.\n */\n/**\n * @typedef UserList\n * @memberOf! clouduseraccounts(alpha)\n * @type object\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {clouduseraccounts(alpha).User[]} items [Output Only] A list of User resources.\n * @property {string} kind [Output Only] Type of resource. Always clouduseraccounts#userList for lists of users.\n * @property {string} nextPageToken [Output Only] A token used to continue a truncated list request.\n * @property {string} selfLink [Output Only] Server defined URL for this resource.\n */\nmodule.exports = Clouduseraccounts;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/clouduseraccounts/beta.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Cloud User Accounts API\n *\n * Creates and manages users and groups for accessing Google Compute Engine virtual machines.\n *\n * @example\n * var google = require('googleapis');\n * var clouduseraccounts = google.clouduseraccounts('beta');\n *\n * @namespace clouduseraccounts\n * @type {Function}\n * @version beta\n * @variation beta\n * @param {object=} options Options for Clouduseraccounts\n */\nfunction Clouduseraccounts(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.globalAccountsOperations = {\n\n    /**\n     * clouduseraccounts.globalAccountsOperations.delete\n     *\n     * @desc Deletes the specified operation resource.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // Name of the Operations resource to delete.\n     *     operation: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   cloudUserAccounts.globalAccountsOperations.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias clouduseraccounts.globalAccountsOperations.delete\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.operation Name of the Operations resource to delete.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/beta/projects/{project}/global/operations/{operation}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.globalAccountsOperations.get\n     *\n     * @desc Retrieves the specified operation resource.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // Name of the Operations resource to return.\n     *     operation: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   cloudUserAccounts.globalAccountsOperations.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias clouduseraccounts.globalAccountsOperations.get\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.operation Name of the Operations resource to return.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/beta/projects/{project}/global/operations/{operation}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.globalAccountsOperations.list\n     *\n     * @desc Retrieves the list of operation resources contained within the specified project.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var itemsPage = response['items'];\n     *     if (!itemsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < itemsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `itemsPage`:\n     *       console.log(JSON.stringify(itemsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       cloudUserAccounts.globalAccountsOperations.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   cloudUserAccounts.globalAccountsOperations.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias clouduseraccounts.globalAccountsOperations.list\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  Compute Engine Beta API Only: If you use filtering in the Beta API, you can also filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. In particular, use filtering on nested fields to take advantage of instance labels to organize and filter results based on label values.  The Beta API also supports filtering on multiple expressions by providing each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests.\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/beta/projects/{project}/global/operations',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.groups = {\n\n    /**\n     * clouduseraccounts.groups.addMember\n     *\n     * @desc Adds users to the specified group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // Name of the group for this request.\n     *     groupName: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   cloudUserAccounts.groups.addMember(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias clouduseraccounts.groups.addMember\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the group for this request.\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(beta).GroupsAddMemberRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    addMember: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/beta/projects/{project}/global/groups/{groupName}/addMember',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.delete\n     *\n     * @desc Deletes the specified Group resource.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // Name of the Group resource to delete.\n     *     groupName: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   cloudUserAccounts.groups.delete(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias clouduseraccounts.groups.delete\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the Group resource to delete.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/beta/projects/{project}/global/groups/{groupName}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.get\n     *\n     * @desc Returns the specified Group resource.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // Name of the Group resource to return.\n     *     groupName: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   cloudUserAccounts.groups.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias clouduseraccounts.groups.get\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the Group resource to return.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/beta/projects/{project}/global/groups/{groupName}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.insert\n     *\n     * @desc Creates a Group resource in the specified project using the data included in the request.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   cloudUserAccounts.groups.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias clouduseraccounts.groups.insert\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(beta).Group} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/beta/projects/{project}/global/groups',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.list\n     *\n     * @desc Retrieves the list of groups contained within the specified project.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var itemsPage = response['items'];\n     *     if (!itemsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < itemsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `itemsPage`:\n     *       console.log(JSON.stringify(itemsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       cloudUserAccounts.groups.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   cloudUserAccounts.groups.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias clouduseraccounts.groups.list\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  Compute Engine Beta API Only: If you use filtering in the Beta API, you can also filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. In particular, use filtering on nested fields to take advantage of instance labels to organize and filter results based on label values.  The Beta API also supports filtering on multiple expressions by providing each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests.\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/beta/projects/{project}/global/groups',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.removeMember\n     *\n     * @desc Removes users from the specified group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // Name of the group for this request.\n     *     groupName: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   cloudUserAccounts.groups.removeMember(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias clouduseraccounts.groups.removeMember\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the group for this request.\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(beta).GroupsRemoveMemberRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    removeMember: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/beta/projects/{project}/global/groups/{groupName}/removeMember',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.linux = {\n\n    /**\n     * clouduseraccounts.linux.getAuthorizedKeysView\n     *\n     * @desc Returns a list of authorized public keys for a specific user account.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // Name of the zone for this request.\n     *     zone: '',  // TODO: Update placeholder value.\n     *\n     *     // The user account for which you want to get a list of authorized public keys.\n     *     user: '',  // TODO: Update placeholder value.\n     *\n     *     // The fully-qualified URL of the virtual machine requesting the view.\n     *     instance: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   cloudUserAccounts.linux.getAuthorizedKeysView(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias clouduseraccounts.linux.getAuthorizedKeysView\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.instance The fully-qualified URL of the virtual machine requesting the view.\n     * @param {boolean=} params.login Whether the view was requested as part of a user-initiated login.\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user The user account for which you want to get a list of authorized public keys.\n     * @param {string} params.zone Name of the zone for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getAuthorizedKeysView: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/beta/projects/{project}/zones/{zone}/authorizedKeysView/{user}',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'zone', 'user', 'instance'],\n        pathParams: ['project', 'user', 'zone'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.linux.getLinuxAccountViews\n     *\n     * @desc Retrieves a list of user accounts for an instance within a specific project.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // Name of the zone for this request.\n     *     zone: '',  // TODO: Update placeholder value.\n     *\n     *     // The fully-qualified URL of the virtual machine requesting the views.\n     *     instance: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   cloudUserAccounts.linux.getLinuxAccountViews(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias clouduseraccounts.linux.getLinuxAccountViews\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  Compute Engine Beta API Only: If you use filtering in the Beta API, you can also filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. In particular, use filtering on nested fields to take advantage of instance labels to organize and filter results based on label values.  The Beta API also supports filtering on multiple expressions by providing each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {string} params.instance The fully-qualified URL of the virtual machine requesting the views.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests.\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.zone Name of the zone for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getLinuxAccountViews: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/beta/projects/{project}/zones/{zone}/linuxAccountViews',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['project', 'zone'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.users = {\n\n    /**\n     * clouduseraccounts.users.addPublicKey\n     *\n     * @desc Adds a public key to the specified User resource with the data included in the request.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // Name of the user for this request.\n     *     user: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   cloudUserAccounts.users.addPublicKey(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias clouduseraccounts.users.addPublicKey\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user for this request.\n     * @param {clouduseraccounts(beta).PublicKey} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    addPublicKey: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/beta/projects/{project}/global/users/{user}/addPublicKey',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.delete\n     *\n     * @desc Deletes the specified User resource.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // Name of the user resource to delete.\n     *     user: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   cloudUserAccounts.users.delete(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias clouduseraccounts.users.delete\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user resource to delete.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/beta/projects/{project}/global/users/{user}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.get\n     *\n     * @desc Returns the specified User resource.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // Name of the user resource to return.\n     *     user: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   cloudUserAccounts.users.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias clouduseraccounts.users.get\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user resource to return.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/beta/projects/{project}/global/users/{user}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.insert\n     *\n     * @desc Creates a User resource in the specified project using the data included in the request.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   cloudUserAccounts.users.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias clouduseraccounts.users.insert\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(beta).User} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/beta/projects/{project}/global/users',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.list\n     *\n     * @desc Retrieves a list of users contained within the specified project.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var itemsPage = response['items'];\n     *     if (!itemsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < itemsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `itemsPage`:\n     *       console.log(JSON.stringify(itemsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       cloudUserAccounts.users.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   cloudUserAccounts.users.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias clouduseraccounts.users.list\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  Compute Engine Beta API Only: If you use filtering in the Beta API, you can also filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. In particular, use filtering on nested fields to take advantage of instance labels to organize and filter results based on label values.  The Beta API also supports filtering on multiple expressions by providing each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests.\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/beta/projects/{project}/global/users',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.removePublicKey\n     *\n     * @desc Removes the specified public key from the user.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Cloud User Accounts API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/clouduseraccounts\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var cloudUserAccounts = google.clouduseraccounts('beta');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Project ID for this request.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // Name of the user for this request.\n     *     user: '',  // TODO: Update placeholder value.\n     *\n     *     // The fingerprint of the public key to delete. Public keys are identified by their fingerprint, which\n     *     // is defined by RFC4716 to be the MD5 digest of the public key.\n     *     fingerprint: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   cloudUserAccounts.users.removePublicKey(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias clouduseraccounts.users.removePublicKey\n     * @memberOf! clouduseraccounts(beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.fingerprint The fingerprint of the public key to delete. Public keys are identified by their fingerprint, which is defined by RFC4716 to be the MD5 digest of the public key.\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    removePublicKey: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/beta/projects/{project}/global/users/{user}/removePublicKey',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user', 'fingerprint'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef AuthorizedKeysView\n * @memberOf! clouduseraccounts(beta)\n * @type object\n * @property {string[]} keys [Output Only] The list of authorized public keys in SSH format.\n * @property {boolean} sudoer [Output Only] Whether the user has the ability to elevate on the instance that requested the authorized keys.\n */\n/**\n * @typedef Group\n * @memberOf! clouduseraccounts(beta)\n * @type object\n * @property {string} creationTimestamp [Output Only] Creation timestamp in RFC3339 text format.\n * @property {string} description An optional textual description of the resource; provided by the client when the resource is created.\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {string} kind [Output Only] Type of the resource. Always clouduseraccounts#group for groups.\n * @property {string[]} members [Output Only] A list of URLs to User resources who belong to the group. Users may only be members of groups in the same project.\n * @property {string} name Name of the resource; provided by the client when the resource is created.\n * @property {string} selfLink [Output Only] Server defined URL for the resource.\n */\n/**\n * @typedef GroupList\n * @memberOf! clouduseraccounts(beta)\n * @type object\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {clouduseraccounts(beta).Group[]} items [Output Only] A list of Group resources.\n * @property {string} kind [Output Only] Type of resource. Always clouduseraccounts#groupList for lists of groups.\n * @property {string} nextPageToken [Output Only] A token used to continue a truncated list request.\n * @property {string} selfLink [Output Only] Server defined URL for this resource.\n */\n/**\n * @typedef GroupsAddMemberRequest\n * @memberOf! clouduseraccounts(beta)\n * @type object\n * @property {string[]} users Fully-qualified URLs of the User resources to add.\n */\n/**\n * @typedef GroupsRemoveMemberRequest\n * @memberOf! clouduseraccounts(beta)\n * @type object\n * @property {string[]} users Fully-qualified URLs of the User resources to remove.\n */\n/**\n * @typedef LinuxAccountViews\n * @memberOf! clouduseraccounts(beta)\n * @type object\n * @property {clouduseraccounts(beta).LinuxGroupView[]} groupViews [Output Only] A list of all groups within a project.\n * @property {string} kind [Output Only] Type of the resource. Always clouduseraccounts#linuxAccountViews for Linux resources.\n * @property {clouduseraccounts(beta).LinuxUserView[]} userViews [Output Only] A list of all users within a project.\n */\n/**\n * @typedef LinuxGetAuthorizedKeysViewResponse\n * @memberOf! clouduseraccounts(beta)\n * @type object\n * @property {clouduseraccounts(beta).AuthorizedKeysView} resource [Output Only] A list of authorized public keys for a user.\n */\n/**\n * @typedef LinuxGetLinuxAccountViewsResponse\n * @memberOf! clouduseraccounts(beta)\n * @type object\n * @property {clouduseraccounts(beta).LinuxAccountViews} resource [Output Only] A list of authorized user accounts and groups.\n */\n/**\n * @typedef LinuxGroupView\n * @memberOf! clouduseraccounts(beta)\n * @type object\n * @property {integer} gid [Output Only] The Group ID.\n * @property {string} groupName [Output Only] Group name.\n * @property {string[]} members [Output Only] List of user accounts that belong to the group.\n */\n/**\n * @typedef LinuxUserView\n * @memberOf! clouduseraccounts(beta)\n * @type object\n * @property {string} gecos [Output Only] The GECOS (user information) entry for this account.\n * @property {integer} gid [Output Only] User&#39;s default group ID.\n * @property {string} homeDirectory [Output Only] The path to the home directory for this account.\n * @property {string} shell [Output Only] The path to the login shell for this account.\n * @property {integer} uid [Output Only] User ID.\n * @property {string} username [Output Only] The username of the account.\n */\n/**\n * @typedef Operation\n * @memberOf! clouduseraccounts(beta)\n * @type object\n * @property {string} clientOperationId [Output Only] Reserved for future use.\n * @property {string} creationTimestamp [Output Only] Creation timestamp in RFC3339 text format.\n * @property {string} description [Output Only] A textual description of the operation, which is set when the operation is created.\n * @property {string} endTime [Output Only] The time that this operation was completed. This value is in RFC3339 text format.\n * @property {object} error [Output Only] If errors are generated during processing of the operation, this field will be populated.\n * @property {string} httpErrorMessage [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as NOT FOUND.\n * @property {integer} httpErrorStatusCode [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a 404 means the resource was not found.\n * @property {string} id [Output Only] The unique identifier for the resource. This identifier is defined by the server.\n * @property {string} insertTime [Output Only] The time that this operation was requested. This value is in RFC3339 text format.\n * @property {string} kind [Output Only] Type of the resource. Always compute#operation for Operation resources.\n * @property {string} name [Output Only] Name of the resource.\n * @property {string} operationType [Output Only] The type of operation, such as insert, update, or delete, and so on.\n * @property {integer} progress [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.\n * @property {string} region [Output Only] The URL of the region where the operation resides. Only available when performing regional operations.\n * @property {string} selfLink [Output Only] Server-defined URL for the resource.\n * @property {string} startTime [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.\n * @property {string} status [Output Only] The status of the operation, which can be one of the following: PENDING, RUNNING, or DONE.\n * @property {string} statusMessage [Output Only] An optional textual description of the current status of the operation.\n * @property {string} targetId [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.\n * @property {string} targetLink [Output Only] The URL of the resource that the operation modifies.\n * @property {string} user [Output Only] User who requested the operation, for example: user@example.com.\n * @property {object[]} warnings [Output Only] If warning messages are generated during processing of the operation, this field will be populated.\n * @property {string} zone [Output Only] The URL of the zone where the operation resides. Only available when performing per-zone operations.\n */\n/**\n * @typedef OperationList\n * @memberOf! clouduseraccounts(beta)\n * @type object\n * @property {string} id [Output Only] The unique identifier for the resource. This identifier is defined by the server.\n * @property {clouduseraccounts(beta).Operation[]} items [Output Only] A list of Operation resources.\n * @property {string} kind [Output Only] Type of resource. Always compute#operations for Operations resource.\n * @property {string} nextPageToken [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.\n * @property {string} selfLink [Output Only] Server-defined URL for this resource.\n */\n/**\n * @typedef PublicKey\n * @memberOf! clouduseraccounts(beta)\n * @type object\n * @property {string} creationTimestamp [Output Only] Creation timestamp in RFC3339 text format.\n * @property {string} description An optional textual description of the resource; provided by the client when the resource is created.\n * @property {string} expirationTimestamp Optional expiration timestamp. If provided, the timestamp must be in RFC3339 text format. If not provided, the public key never expires.\n * @property {string} fingerprint [Output Only] The fingerprint of the key is defined by RFC4716 to be the MD5 digest of the public key.\n * @property {string} key Public key text in SSH format, defined by RFC4253 section 6.6.\n */\n/**\n * @typedef User\n * @memberOf! clouduseraccounts(beta)\n * @type object\n * @property {string} creationTimestamp [Output Only] Creation timestamp in RFC3339 text format.\n * @property {string} description An optional textual description of the resource; provided by the client when the resource is created.\n * @property {string[]} groups [Output Only] A list of URLs to Group resources who contain the user. Users are only members of groups in the same project.\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {string} kind [Output Only] Type of the resource. Always clouduseraccounts#user for users.\n * @property {string} name Name of the resource; provided by the client when the resource is created.\n * @property {string} owner Email address of account&#39;s owner. This account will be validated to make sure it exists. The email can belong to any domain, but it must be tied to a Google account.\n * @property {clouduseraccounts(beta).PublicKey[]} publicKeys [Output Only] Public keys that this user may use to login.\n * @property {string} selfLink [Output Only] Server defined URL for the resource.\n */\n/**\n * @typedef UserList\n * @memberOf! clouduseraccounts(beta)\n * @type object\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {clouduseraccounts(beta).User[]} items [Output Only] A list of User resources.\n * @property {string} kind [Output Only] Type of resource. Always clouduseraccounts#userList for lists of users.\n * @property {string} nextPageToken [Output Only] A token used to continue a truncated list request.\n * @property {string} selfLink [Output Only] Server defined URL for this resource.\n */\nmodule.exports = Clouduseraccounts;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/clouduseraccounts/vm_alpha.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Cloud User Accounts API\n *\n * Creates and manages users and groups for accessing Google Compute Engine virtual machines.\n *\n * @example\n * var google = require('googleapis');\n * var clouduseraccounts = google.clouduseraccounts('vm_alpha');\n *\n * @namespace clouduseraccounts\n * @type {Function}\n * @version vm_alpha\n * @variation vm_alpha\n * @param {object=} options Options for Clouduseraccounts\n */\nfunction Clouduseraccounts(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.globalAccountsOperations = {\n\n    /**\n     * clouduseraccounts.globalAccountsOperations.delete\n     *\n     * @desc Deletes the specified operation resource.\n     *\n     * @alias clouduseraccounts.globalAccountsOperations.delete\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.operation Name of the Operations resource to delete.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/operations/{operation}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.globalAccountsOperations.get\n     *\n     * @desc Retrieves the specified operation resource.\n     *\n     * @alias clouduseraccounts.globalAccountsOperations.get\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.operation Name of the Operations resource to return.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/operations/{operation}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.globalAccountsOperations.list\n     *\n     * @desc Retrieves the list of operation resources contained within the specified project.\n     *\n     * @alias clouduseraccounts.globalAccountsOperations.list\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  Compute Engine Beta API Only: If you use filtering in the Beta API, you can also filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. In particular, use filtering on nested fields to take advantage of instance labels to organize and filter results based on label values.  The Beta API also supports filtering on multiple expressions by providing each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests.\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/operations',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.groups = {\n\n    /**\n     * clouduseraccounts.groups.addMember\n     *\n     * @desc Adds users to the specified group.\n     *\n     * @alias clouduseraccounts.groups.addMember\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the group for this request.\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(vm_alpha).GroupsAddMemberRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    addMember: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/groups/{groupName}/addMember',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.delete\n     *\n     * @desc Deletes the specified Group resource.\n     *\n     * @alias clouduseraccounts.groups.delete\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the Group resource to delete.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/groups/{groupName}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.get\n     *\n     * @desc Returns the specified Group resource.\n     *\n     * @alias clouduseraccounts.groups.get\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the Group resource to return.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/groups/{groupName}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.getIamPolicy\n     *\n     * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.\n     *\n     * @alias clouduseraccounts.groups.getIamPolicy\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.resource_ Name of the resource for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getIamPolicy: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/groups/{resource}/getIamPolicy',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.insert\n     *\n     * @desc Creates a Group resource in the specified project using the data included in the request.\n     *\n     * @alias clouduseraccounts.groups.insert\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(vm_alpha).Group} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/groups',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.list\n     *\n     * @desc Retrieves the list of groups contained within the specified project.\n     *\n     * @alias clouduseraccounts.groups.list\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  Compute Engine Beta API Only: If you use filtering in the Beta API, you can also filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. In particular, use filtering on nested fields to take advantage of instance labels to organize and filter results based on label values.  The Beta API also supports filtering on multiple expressions by providing each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests.\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/groups',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.removeMember\n     *\n     * @desc Removes users from the specified group.\n     *\n     * @alias clouduseraccounts.groups.removeMember\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the group for this request.\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(vm_alpha).GroupsRemoveMemberRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    removeMember: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/groups/{groupName}/removeMember',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.setIamPolicy\n     *\n     * @desc Sets the access control policy on the specified resource. Replaces any existing policy.\n     *\n     * @alias clouduseraccounts.groups.setIamPolicy\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.resource_ Name of the resource for this request.\n     * @param {clouduseraccounts(vm_alpha).Policy} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    setIamPolicy: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/groups/{resource}/setIamPolicy',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.testIamPermissions\n     *\n     * @desc Returns permissions that a caller has on the specified resource.\n     *\n     * @alias clouduseraccounts.groups.testIamPermissions\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.resource_ Name of the resource for this request.\n     * @param {clouduseraccounts(vm_alpha).TestPermissionsRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    testIamPermissions: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/groups/{resource}/testIamPermissions',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.linux = {\n\n    /**\n     * clouduseraccounts.linux.getAuthorizedKeysView\n     *\n     * @desc Returns a list of authorized public keys for a specific user account.\n     *\n     * @alias clouduseraccounts.linux.getAuthorizedKeysView\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.instance The fully-qualified URL of the virtual machine requesting the view.\n     * @param {boolean=} params.login Whether the view was requested as part of a user-initiated login.\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user The user account for which you want to get a list of authorized public keys.\n     * @param {string} params.zone Name of the zone for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getAuthorizedKeysView: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/zones/{zone}/authorizedKeysView/{user}',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'zone', 'user', 'instance'],\n        pathParams: ['project', 'user', 'zone'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.linux.getLinuxAccountViews\n     *\n     * @desc Retrieves a list of user accounts for an instance within a specific project.\n     *\n     * @alias clouduseraccounts.linux.getLinuxAccountViews\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  Compute Engine Beta API Only: If you use filtering in the Beta API, you can also filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. In particular, use filtering on nested fields to take advantage of instance labels to organize and filter results based on label values.  The Beta API also supports filtering on multiple expressions by providing each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {string} params.instance The fully-qualified URL of the virtual machine requesting the views.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests.\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.zone Name of the zone for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getLinuxAccountViews: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/zones/{zone}/linuxAccountViews',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['project', 'zone'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.users = {\n\n    /**\n     * clouduseraccounts.users.addPublicKey\n     *\n     * @desc Adds a public key to the specified User resource with the data included in the request.\n     *\n     * @alias clouduseraccounts.users.addPublicKey\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user for this request.\n     * @param {clouduseraccounts(vm_alpha).PublicKey} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    addPublicKey: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/users/{user}/addPublicKey',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.delete\n     *\n     * @desc Deletes the specified User resource.\n     *\n     * @alias clouduseraccounts.users.delete\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user resource to delete.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/users/{user}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.get\n     *\n     * @desc Returns the specified User resource.\n     *\n     * @alias clouduseraccounts.users.get\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user resource to return.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/users/{user}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.getIamPolicy\n     *\n     * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.\n     *\n     * @alias clouduseraccounts.users.getIamPolicy\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.resource_ Name of the resource for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getIamPolicy: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/users/{resource}/getIamPolicy',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.insert\n     *\n     * @desc Creates a User resource in the specified project using the data included in the request.\n     *\n     * @alias clouduseraccounts.users.insert\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(vm_alpha).User} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/users',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.list\n     *\n     * @desc Retrieves a list of users contained within the specified project.\n     *\n     * @alias clouduseraccounts.users.list\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  Compute Engine Beta API Only: If you use filtering in the Beta API, you can also filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. In particular, use filtering on nested fields to take advantage of instance labels to organize and filter results based on label values.  The Beta API also supports filtering on multiple expressions by providing each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests.\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/users',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.removePublicKey\n     *\n     * @desc Removes the specified public key from the user.\n     *\n     * @alias clouduseraccounts.users.removePublicKey\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.fingerprint The fingerprint of the public key to delete. Public keys are identified by their fingerprint, which is defined by RFC4716 to be the MD5 digest of the public key.\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    removePublicKey: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/users/{user}/removePublicKey',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user', 'fingerprint'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.setIamPolicy\n     *\n     * @desc Sets the access control policy on the specified resource. Replaces any existing policy.\n     *\n     * @alias clouduseraccounts.users.setIamPolicy\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.resource_ Name of the resource for this request.\n     * @param {clouduseraccounts(vm_alpha).Policy} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    setIamPolicy: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/users/{resource}/setIamPolicy',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.testIamPermissions\n     *\n     * @desc Returns permissions that a caller has on the specified resource.\n     *\n     * @alias clouduseraccounts.users.testIamPermissions\n     * @memberOf! clouduseraccounts(vm_alpha)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.resource_ Name of the resource for this request.\n     * @param {clouduseraccounts(vm_alpha).TestPermissionsRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    testIamPermissions: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_alpha/projects/{project}/global/users/{resource}/testIamPermissions',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef AuditConfig\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {string[]} exemptedMembers Specifies the identities that are exempted from &quot;data access&quot; audit logging for the `service` specified above. Follows the same format of Binding.members.\n * @property {string} service Specifies a service that will be enabled for &quot;data access&quot; audit logging. For example, `resourcemanager`, `storage`, `compute`. `allServices` is a special value that covers all services.\n */\n/**\n * @typedef AuthorizedKeysView\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {string[]} keys [Output Only] The list of authorized public keys in SSH format.\n * @property {boolean} sudoer [Output Only] Whether the user has the ability to elevate on the instance that requested the authorized keys.\n */\n/**\n * @typedef Binding\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n* @property {string[]} members Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values:\n\n* `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account.\n\n* `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account.\n\n* `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@gmail.com` or `joe@example.com`.\n\n* `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`.\n\n* `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`.\n\n* `domain:{domain}`: A Google Apps domain name that represents all the users of that domain. For example, `google.com` or `example.com`.\n* @property {string} role Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.\n*/\n/**\n * @typedef Condition\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {string} iam Trusted attributes supplied by the IAM system.\n * @property {string} op An operator to apply the subject with.\n * @property {string} svc Trusted attributes discharged by the service.\n * @property {string} sys Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.\n * @property {string} value The object of the condition. Exactly one of these must be set.\n * @property {string[]} values The objects of the condition. This is mutually exclusive with &#39;value&#39;.\n */\n/**\n * @typedef Group\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {string} creationTimestamp [Output Only] Creation timestamp in RFC3339 text format.\n * @property {string} description An optional textual description of the resource; provided by the client when the resource is created.\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {string} kind [Output Only] Type of the resource. Always clouduseraccounts#group for groups.\n * @property {string[]} members [Output Only] A list of URLs to User resources who belong to the group. Users may only be members of groups in the same project.\n * @property {string} name Name of the resource; provided by the client when the resource is created.\n * @property {string} selfLink [Output Only] Server defined URL for the resource.\n */\n/**\n * @typedef GroupList\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {clouduseraccounts(vm_alpha).Group[]} items [Output Only] A list of Group resources.\n * @property {string} kind [Output Only] Type of resource. Always clouduseraccounts#groupList for lists of groups.\n * @property {string} nextPageToken [Output Only] A token used to continue a truncated list request.\n * @property {string} selfLink [Output Only] Server defined URL for this resource.\n */\n/**\n * @typedef GroupsAddMemberRequest\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {string[]} users Fully-qualified URLs of the User resources to add.\n */\n/**\n * @typedef GroupsRemoveMemberRequest\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {string[]} users Fully-qualified URLs of the User resources to remove.\n */\n/**\n * @typedef LinuxAccountViews\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {clouduseraccounts(vm_alpha).LinuxGroupView[]} groupViews [Output Only] A list of all groups within a project.\n * @property {string} kind [Output Only] Type of the resource. Always clouduseraccounts#linuxAccountViews for Linux resources.\n * @property {clouduseraccounts(vm_alpha).LinuxUserView[]} userViews [Output Only] A list of all users within a project.\n */\n/**\n * @typedef LinuxGetAuthorizedKeysViewResponse\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {clouduseraccounts(vm_alpha).AuthorizedKeysView} resource [Output Only] A list of authorized public keys for a user.\n */\n/**\n * @typedef LinuxGetLinuxAccountViewsResponse\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {clouduseraccounts(vm_alpha).LinuxAccountViews} resource [Output Only] A list of authorized user accounts and groups.\n */\n/**\n * @typedef LinuxGroupView\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {integer} gid [Output Only] The Group ID.\n * @property {string} groupName [Output Only] Group name.\n * @property {string[]} members [Output Only] List of user accounts that belong to the group.\n */\n/**\n * @typedef LinuxUserView\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {string} gecos [Output Only] The GECOS (user information) entry for this account.\n * @property {integer} gid [Output Only] User&#39;s default group ID.\n * @property {string} homeDirectory [Output Only] The path to the home directory for this account.\n * @property {string} shell [Output Only] The path to the login shell for this account.\n * @property {integer} uid [Output Only] User ID.\n * @property {string} username [Output Only] The username of the account.\n */\n/**\n * @typedef LogConfig\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {clouduseraccounts(vm_alpha).LogConfigCounterOptions} counter Counter options.\n */\n/**\n * @typedef LogConfigCounterOptions\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {string} field The field value to attribute.\n * @property {string} metric The metric to update.\n */\n/**\n * @typedef Operation\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {string} clientOperationId [Output Only] Reserved for future use.\n * @property {string} creationTimestamp [Output Only] Creation timestamp in RFC3339 text format.\n * @property {string} description [Output Only] A textual description of the operation, which is set when the operation is created.\n * @property {string} endTime [Output Only] The time that this operation was completed. This value is in RFC3339 text format.\n * @property {object} error [Output Only] If errors are generated during processing of the operation, this field will be populated.\n * @property {string} httpErrorMessage [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as NOT FOUND.\n * @property {integer} httpErrorStatusCode [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a 404 means the resource was not found.\n * @property {string} id [Output Only] The unique identifier for the resource. This identifier is defined by the server.\n * @property {string} insertTime [Output Only] The time that this operation was requested. This value is in RFC3339 text format.\n * @property {string} kind [Output Only] Type of the resource. Always compute#operation for Operation resources.\n * @property {string} name [Output Only] Name of the resource.\n * @property {string} operationType [Output Only] The type of operation, such as insert, update, or delete, and so on.\n * @property {integer} progress [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.\n * @property {string} region [Output Only] The URL of the region where the operation resides. Only available when performing regional operations.\n * @property {string} selfLink [Output Only] Server-defined URL for the resource.\n * @property {string} startTime [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.\n * @property {string} status [Output Only] The status of the operation, which can be one of the following: PENDING, RUNNING, or DONE.\n * @property {string} statusMessage [Output Only] An optional textual description of the current status of the operation.\n * @property {string} targetId [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.\n * @property {string} targetLink [Output Only] The URL of the resource that the operation modifies.\n * @property {string} user [Output Only] User who requested the operation, for example: user@example.com.\n * @property {object[]} warnings [Output Only] If warning messages are generated during processing of the operation, this field will be populated.\n * @property {string} zone [Output Only] The URL of the zone where the operation resides. Only available when performing per-zone operations.\n */\n/**\n * @typedef OperationList\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {string} id [Output Only] The unique identifier for the resource. This identifier is defined by the server.\n * @property {clouduseraccounts(vm_alpha).Operation[]} items [Output Only] A list of Operation resources.\n * @property {string} kind [Output Only] Type of resource. Always compute#operations for Operations resource.\n * @property {string} nextPageToken [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.\n * @property {string} selfLink [Output Only] Server-defined URL for this resource.\n */\n/**\n * @typedef Policy\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n* @property {clouduseraccounts(vm_alpha).AuditConfig[]} auditConfigs Specifies audit logging configs for &quot;data access&quot;. &quot;data access&quot;: generally refers to data reads/writes and admin reads. &quot;admin activity&quot;: generally refers to admin writes.\n\nNote: `AuditConfig` doesn&#39;t apply to &quot;admin activity&quot;, which always enables audit logging.\n* @property {clouduseraccounts(vm_alpha).Binding[]} bindings Associates a list of `members` to a `role`. Multiple `bindings` must not be specified for the same `role`. `bindings` with no members will result in an error.\n* @property {string} etag `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy.\n\nIf no `etag` is provided in the call to `setIamPolicy`, then the existing policy is overwritten blindly.\n* @property {boolean} iamOwned \n* @property {clouduseraccounts(vm_alpha).Rule[]} rules If more than one rule is specified, the rules are applied in the following manner: - All matching LOG rules are always applied. - If any DENY/DENY_WITH_LOG rule matches, permission is denied. Logging will be applied if one or more matching rule requires logging. - Otherwise, if any ALLOW/ALLOW_WITH_LOG rule matches, permission is granted. Logging will be applied if one or more matching rule requires logging. - Otherwise, if no rule applies, permission is denied.\n* @property {integer} version Version of the `Policy`. The default version is 0.\n*/\n/**\n * @typedef PublicKey\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {string} creationTimestamp [Output Only] Creation timestamp in RFC3339 text format.\n * @property {string} description An optional textual description of the resource; provided by the client when the resource is created.\n * @property {string} expirationTimestamp Optional expiration timestamp. If provided, the timestamp must be in RFC3339 text format. If not provided, the public key never expires.\n * @property {string} fingerprint [Output Only] The fingerprint of the key is defined by RFC4716 to be the MD5 digest of the public key.\n * @property {string} key Public key text in SSH format, defined by RFC4253 section 6.6.\n */\n/**\n * @typedef Rule\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {string} action Required\n * @property {clouduseraccounts(vm_alpha).Condition[]} conditions Additional restrictions that must be met\n * @property {string} description Human-readable description of the rule.\n * @property {string[]} ins The rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in this set of entries.\n * @property {clouduseraccounts(vm_alpha).LogConfig[]} logConfigs The config returned to callers of tech.iam.IAM.CheckPolicy for any entries that match the LOG action.\n * @property {string[]} notIns The rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is not in this set of entries.\n * @property {string[]} permissions A permission is a string of form &#39;..&#39; (e.g., &#39;storage.buckets.list&#39;). A value of &#39;*&#39; matches all permissions, and a verb part of &#39;*&#39; (e.g., &#39;storage.buckets.*&#39;) matches all verbs.\n */\n/**\n * @typedef TestPermissionsRequest\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {string[]} permissions The set of permissions to check for the &#39;resource&#39;. Permissions with wildcards (such as &#39;*&#39; or &#39;storage.*&#39;) are not allowed.\n */\n/**\n * @typedef TestPermissionsResponse\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {string[]} permissions A subset of `TestPermissionsRequest.permissions` that the caller is allowed.\n */\n/**\n * @typedef User\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {string} creationTimestamp [Output Only] Creation timestamp in RFC3339 text format.\n * @property {string} description An optional textual description of the resource; provided by the client when the resource is created.\n * @property {string[]} groups [Output Only] A list of URLs to Group resources who contain the user. Users are only members of groups in the same project.\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {string} kind [Output Only] Type of the resource. Always clouduseraccounts#user for users.\n * @property {string} name Name of the resource; provided by the client when the resource is created.\n * @property {string} owner Email address of account&#39;s owner. This account will be validated to make sure it exists. The email can belong to any domain, but it must be tied to a Google account.\n * @property {clouduseraccounts(vm_alpha).PublicKey[]} publicKeys [Output Only] Public keys that this user may use to login.\n * @property {string} selfLink [Output Only] Server defined URL for the resource.\n */\n/**\n * @typedef UserList\n * @memberOf! clouduseraccounts(vm_alpha)\n * @type object\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {clouduseraccounts(vm_alpha).User[]} items [Output Only] A list of User resources.\n * @property {string} kind [Output Only] Type of resource. Always clouduseraccounts#userList for lists of users.\n * @property {string} nextPageToken [Output Only] A token used to continue a truncated list request.\n * @property {string} selfLink [Output Only] Server defined URL for this resource.\n */\nmodule.exports = Clouduseraccounts;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/clouduseraccounts/vm_beta.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Cloud User Accounts API\n *\n * Creates and manages users and groups for accessing Google Compute Engine virtual machines.\n *\n * @example\n * var google = require('googleapis');\n * var clouduseraccounts = google.clouduseraccounts('vm_beta');\n *\n * @namespace clouduseraccounts\n * @type {Function}\n * @version vm_beta\n * @variation vm_beta\n * @param {object=} options Options for Clouduseraccounts\n */\nfunction Clouduseraccounts(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.globalAccountsOperations = {\n\n    /**\n     * clouduseraccounts.globalAccountsOperations.delete\n     *\n     * @desc Deletes the specified operation resource.\n     *\n     * @alias clouduseraccounts.globalAccountsOperations.delete\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.operation Name of the Operations resource to delete.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_beta/projects/{project}/global/operations/{operation}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.globalAccountsOperations.get\n     *\n     * @desc Retrieves the specified operation resource.\n     *\n     * @alias clouduseraccounts.globalAccountsOperations.get\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.operation Name of the Operations resource to return.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_beta/projects/{project}/global/operations/{operation}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.globalAccountsOperations.list\n     *\n     * @desc Retrieves the list of operation resources contained within the specified project.\n     *\n     * @alias clouduseraccounts.globalAccountsOperations.list\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  Compute Engine Beta API Only: If you use filtering in the Beta API, you can also filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. In particular, use filtering on nested fields to take advantage of instance labels to organize and filter results based on label values.  The Beta API also supports filtering on multiple expressions by providing each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests.\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_beta/projects/{project}/global/operations',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.groups = {\n\n    /**\n     * clouduseraccounts.groups.addMember\n     *\n     * @desc Adds users to the specified group.\n     *\n     * @alias clouduseraccounts.groups.addMember\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the group for this request.\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(vm_beta).GroupsAddMemberRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    addMember: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_beta/projects/{project}/global/groups/{groupName}/addMember',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.delete\n     *\n     * @desc Deletes the specified Group resource.\n     *\n     * @alias clouduseraccounts.groups.delete\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the Group resource to delete.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_beta/projects/{project}/global/groups/{groupName}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.get\n     *\n     * @desc Returns the specified Group resource.\n     *\n     * @alias clouduseraccounts.groups.get\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the Group resource to return.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_beta/projects/{project}/global/groups/{groupName}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.insert\n     *\n     * @desc Creates a Group resource in the specified project using the data included in the request.\n     *\n     * @alias clouduseraccounts.groups.insert\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(vm_beta).Group} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_beta/projects/{project}/global/groups',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.list\n     *\n     * @desc Retrieves the list of groups contained within the specified project.\n     *\n     * @alias clouduseraccounts.groups.list\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  Compute Engine Beta API Only: If you use filtering in the Beta API, you can also filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. In particular, use filtering on nested fields to take advantage of instance labels to organize and filter results based on label values.  The Beta API also supports filtering on multiple expressions by providing each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests.\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_beta/projects/{project}/global/groups',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.groups.removeMember\n     *\n     * @desc Removes users from the specified group.\n     *\n     * @alias clouduseraccounts.groups.removeMember\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.groupName Name of the group for this request.\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(vm_beta).GroupsRemoveMemberRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    removeMember: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_beta/projects/{project}/global/groups/{groupName}/removeMember',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'groupName'],\n        pathParams: ['groupName', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.linux = {\n\n    /**\n     * clouduseraccounts.linux.getAuthorizedKeysView\n     *\n     * @desc Returns a list of authorized public keys for a specific user account.\n     *\n     * @alias clouduseraccounts.linux.getAuthorizedKeysView\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.instance The fully-qualified URL of the virtual machine requesting the view.\n     * @param {boolean=} params.login Whether the view was requested as part of a user-initiated login.\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user The user account for which you want to get a list of authorized public keys.\n     * @param {string} params.zone Name of the zone for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getAuthorizedKeysView: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_beta/projects/{project}/zones/{zone}/authorizedKeysView/{user}',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'zone', 'user', 'instance'],\n        pathParams: ['project', 'user', 'zone'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.linux.getLinuxAccountViews\n     *\n     * @desc Retrieves a list of user accounts for an instance within a specific project.\n     *\n     * @alias clouduseraccounts.linux.getLinuxAccountViews\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  Compute Engine Beta API Only: If you use filtering in the Beta API, you can also filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. In particular, use filtering on nested fields to take advantage of instance labels to organize and filter results based on label values.  The Beta API also supports filtering on multiple expressions by providing each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {string} params.instance The fully-qualified URL of the virtual machine requesting the views.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests.\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.zone Name of the zone for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getLinuxAccountViews: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_beta/projects/{project}/zones/{zone}/linuxAccountViews',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['project', 'zone'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.users = {\n\n    /**\n     * clouduseraccounts.users.addPublicKey\n     *\n     * @desc Adds a public key to the specified User resource with the data included in the request.\n     *\n     * @alias clouduseraccounts.users.addPublicKey\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user for this request.\n     * @param {clouduseraccounts(vm_beta).PublicKey} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    addPublicKey: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_beta/projects/{project}/global/users/{user}/addPublicKey',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.delete\n     *\n     * @desc Deletes the specified User resource.\n     *\n     * @alias clouduseraccounts.users.delete\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user resource to delete.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_beta/projects/{project}/global/users/{user}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.get\n     *\n     * @desc Returns the specified User resource.\n     *\n     * @alias clouduseraccounts.users.get\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user resource to return.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_beta/projects/{project}/global/users/{user}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.insert\n     *\n     * @desc Creates a User resource in the specified project using the data included in the request.\n     *\n     * @alias clouduseraccounts.users.insert\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {clouduseraccounts(vm_beta).User} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_beta/projects/{project}/global/users',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.list\n     *\n     * @desc Retrieves a list of users contained within the specified project.\n     *\n     * @alias clouduseraccounts.users.list\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  Compute Engine Beta API Only: If you use filtering in the Beta API, you can also filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. In particular, use filtering on nested fields to take advantage of instance labels to organize and filter results based on label values.  The Beta API also supports filtering on multiple expressions by providing each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests.\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project Project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_beta/projects/{project}/global/users',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * clouduseraccounts.users.removePublicKey\n     *\n     * @desc Removes the specified public key from the user.\n     *\n     * @alias clouduseraccounts.users.removePublicKey\n     * @memberOf! clouduseraccounts(vm_beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.fingerprint The fingerprint of the public key to delete. Public keys are identified by their fingerprint, which is defined by RFC4716 to be the MD5 digest of the public key.\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.user Name of the user for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    removePublicKey: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/clouduseraccounts/vm_beta/projects/{project}/global/users/{user}/removePublicKey',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'user', 'fingerprint'],\n        pathParams: ['project', 'user'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef AuthorizedKeysView\n * @memberOf! clouduseraccounts(vm_beta)\n * @type object\n * @property {string[]} keys [Output Only] The list of authorized public keys in SSH format.\n * @property {boolean} sudoer [Output Only] Whether the user has the ability to elevate on the instance that requested the authorized keys.\n */\n/**\n * @typedef Group\n * @memberOf! clouduseraccounts(vm_beta)\n * @type object\n * @property {string} creationTimestamp [Output Only] Creation timestamp in RFC3339 text format.\n * @property {string} description An optional textual description of the resource; provided by the client when the resource is created.\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {string} kind [Output Only] Type of the resource. Always clouduseraccounts#group for groups.\n * @property {string[]} members [Output Only] A list of URLs to User resources who belong to the group. Users may only be members of groups in the same project.\n * @property {string} name Name of the resource; provided by the client when the resource is created.\n * @property {string} selfLink [Output Only] Server defined URL for the resource.\n */\n/**\n * @typedef GroupList\n * @memberOf! clouduseraccounts(vm_beta)\n * @type object\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {clouduseraccounts(vm_beta).Group[]} items [Output Only] A list of Group resources.\n * @property {string} kind [Output Only] Type of resource. Always clouduseraccounts#groupList for lists of groups.\n * @property {string} nextPageToken [Output Only] A token used to continue a truncated list request.\n * @property {string} selfLink [Output Only] Server defined URL for this resource.\n */\n/**\n * @typedef GroupsAddMemberRequest\n * @memberOf! clouduseraccounts(vm_beta)\n * @type object\n * @property {string[]} users Fully-qualified URLs of the User resources to add.\n */\n/**\n * @typedef GroupsRemoveMemberRequest\n * @memberOf! clouduseraccounts(vm_beta)\n * @type object\n * @property {string[]} users Fully-qualified URLs of the User resources to remove.\n */\n/**\n * @typedef LinuxAccountViews\n * @memberOf! clouduseraccounts(vm_beta)\n * @type object\n * @property {clouduseraccounts(vm_beta).LinuxGroupView[]} groupViews [Output Only] A list of all groups within a project.\n * @property {string} kind [Output Only] Type of the resource. Always clouduseraccounts#linuxAccountViews for Linux resources.\n * @property {clouduseraccounts(vm_beta).LinuxUserView[]} userViews [Output Only] A list of all users within a project.\n */\n/**\n * @typedef LinuxGetAuthorizedKeysViewResponse\n * @memberOf! clouduseraccounts(vm_beta)\n * @type object\n * @property {clouduseraccounts(vm_beta).AuthorizedKeysView} resource [Output Only] A list of authorized public keys for a user.\n */\n/**\n * @typedef LinuxGetLinuxAccountViewsResponse\n * @memberOf! clouduseraccounts(vm_beta)\n * @type object\n * @property {clouduseraccounts(vm_beta).LinuxAccountViews} resource [Output Only] A list of authorized user accounts and groups.\n */\n/**\n * @typedef LinuxGroupView\n * @memberOf! clouduseraccounts(vm_beta)\n * @type object\n * @property {integer} gid [Output Only] The Group ID.\n * @property {string} groupName [Output Only] Group name.\n * @property {string[]} members [Output Only] List of user accounts that belong to the group.\n */\n/**\n * @typedef LinuxUserView\n * @memberOf! clouduseraccounts(vm_beta)\n * @type object\n * @property {string} gecos [Output Only] The GECOS (user information) entry for this account.\n * @property {integer} gid [Output Only] User&#39;s default group ID.\n * @property {string} homeDirectory [Output Only] The path to the home directory for this account.\n * @property {string} shell [Output Only] The path to the login shell for this account.\n * @property {integer} uid [Output Only] User ID.\n * @property {string} username [Output Only] The username of the account.\n */\n/**\n * @typedef Operation\n * @memberOf! clouduseraccounts(vm_beta)\n * @type object\n * @property {string} clientOperationId [Output Only] Reserved for future use.\n * @property {string} creationTimestamp [Output Only] Creation timestamp in RFC3339 text format.\n * @property {string} description [Output Only] A textual description of the operation, which is set when the operation is created.\n * @property {string} endTime [Output Only] The time that this operation was completed. This value is in RFC3339 text format.\n * @property {object} error [Output Only] If errors are generated during processing of the operation, this field will be populated.\n * @property {string} httpErrorMessage [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as NOT FOUND.\n * @property {integer} httpErrorStatusCode [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a 404 means the resource was not found.\n * @property {string} id [Output Only] The unique identifier for the resource. This identifier is defined by the server.\n * @property {string} insertTime [Output Only] The time that this operation was requested. This value is in RFC3339 text format.\n * @property {string} kind [Output Only] Type of the resource. Always compute#operation for Operation resources.\n * @property {string} name [Output Only] Name of the resource.\n * @property {string} operationType [Output Only] The type of operation, such as insert, update, or delete, and so on.\n * @property {integer} progress [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.\n * @property {string} region [Output Only] The URL of the region where the operation resides. Only available when performing regional operations.\n * @property {string} selfLink [Output Only] Server-defined URL for the resource.\n * @property {string} startTime [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.\n * @property {string} status [Output Only] The status of the operation, which can be one of the following: PENDING, RUNNING, or DONE.\n * @property {string} statusMessage [Output Only] An optional textual description of the current status of the operation.\n * @property {string} targetId [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.\n * @property {string} targetLink [Output Only] The URL of the resource that the operation modifies.\n * @property {string} user [Output Only] User who requested the operation, for example: user@example.com.\n * @property {object[]} warnings [Output Only] If warning messages are generated during processing of the operation, this field will be populated.\n * @property {string} zone [Output Only] The URL of the zone where the operation resides. Only available when performing per-zone operations.\n */\n/**\n * @typedef OperationList\n * @memberOf! clouduseraccounts(vm_beta)\n * @type object\n * @property {string} id [Output Only] The unique identifier for the resource. This identifier is defined by the server.\n * @property {clouduseraccounts(vm_beta).Operation[]} items [Output Only] A list of Operation resources.\n * @property {string} kind [Output Only] Type of resource. Always compute#operations for Operations resource.\n * @property {string} nextPageToken [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.\n * @property {string} selfLink [Output Only] Server-defined URL for this resource.\n */\n/**\n * @typedef PublicKey\n * @memberOf! clouduseraccounts(vm_beta)\n * @type object\n * @property {string} creationTimestamp [Output Only] Creation timestamp in RFC3339 text format.\n * @property {string} description An optional textual description of the resource; provided by the client when the resource is created.\n * @property {string} expirationTimestamp Optional expiration timestamp. If provided, the timestamp must be in RFC3339 text format. If not provided, the public key never expires.\n * @property {string} fingerprint [Output Only] The fingerprint of the key is defined by RFC4716 to be the MD5 digest of the public key.\n * @property {string} key Public key text in SSH format, defined by RFC4253 section 6.6.\n */\n/**\n * @typedef User\n * @memberOf! clouduseraccounts(vm_beta)\n * @type object\n * @property {string} creationTimestamp [Output Only] Creation timestamp in RFC3339 text format.\n * @property {string} description An optional textual description of the resource; provided by the client when the resource is created.\n * @property {string[]} groups [Output Only] A list of URLs to Group resources who contain the user. Users are only members of groups in the same project.\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {string} kind [Output Only] Type of the resource. Always clouduseraccounts#user for users.\n * @property {string} name Name of the resource; provided by the client when the resource is created.\n * @property {string} owner Email address of account&#39;s owner. This account will be validated to make sure it exists. The email can belong to any domain, but it must be tied to a Google account.\n * @property {clouduseraccounts(vm_beta).PublicKey[]} publicKeys [Output Only] Public keys that this user may use to login.\n * @property {string} selfLink [Output Only] Server defined URL for the resource.\n */\n/**\n * @typedef UserList\n * @memberOf! clouduseraccounts(vm_beta)\n * @type object\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {clouduseraccounts(vm_beta).User[]} items [Output Only] A list of User resources.\n * @property {string} kind [Output Only] Type of resource. Always clouduseraccounts#userList for lists of users.\n * @property {string} nextPageToken [Output Only] A token used to continue a truncated list request.\n * @property {string} selfLink [Output Only] Server defined URL for this resource.\n */\nmodule.exports = Clouduseraccounts;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/content/v2sandbox.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Content API for Shopping\n *\n * Manages product items, inventory, and Merchant Center accounts for Google Shopping.\n *\n * @example\n * var google = require('googleapis');\n * var content = google.content('v2sandbox');\n *\n * @namespace content\n * @type {Function}\n * @version v2sandbox\n * @variation v2sandbox\n * @param {object=} options Options for Content\n */\nfunction Content(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.orders = {\n\n    /**\n     * content.orders.acknowledge\n     *\n     * @desc Marks an order as acknowledged. This method can only be called for non-multi-client accounts.\n     *\n     * @alias content.orders.acknowledge\n     * @memberOf! content(v2sandbox)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.merchantId The ID of the managing account.\n     * @param {string} params.orderId The ID of the order.\n     * @param {content(v2sandbox).OrdersAcknowledgeRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    acknowledge: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/content/v2sandbox/{merchantId}/orders/{orderId}/acknowledge',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * content.orders.advancetestorder\n     *\n     * @desc Sandbox only. Moves a test order from state \"inProgress\" to state \"pendingShipment\". This method can only be called for non-multi-client accounts.\n     *\n     * @alias content.orders.advancetestorder\n     * @memberOf! content(v2sandbox)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.merchantId The ID of the managing account.\n     * @param {string} params.orderId The ID of the test order to modify.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    advancetestorder: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/content/v2sandbox/{merchantId}/testorders/{orderId}/advance',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * content.orders.cancel\n     *\n     * @desc Cancels all line items in an order. This method can only be called for non-multi-client accounts.\n     *\n     * @alias content.orders.cancel\n     * @memberOf! content(v2sandbox)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.merchantId The ID of the managing account.\n     * @param {string} params.orderId The ID of the order to cancel.\n     * @param {content(v2sandbox).OrdersCancelRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    cancel: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/content/v2sandbox/{merchantId}/orders/{orderId}/cancel',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * content.orders.cancellineitem\n     *\n     * @desc Cancels a line item. This method can only be called for non-multi-client accounts.\n     *\n     * @alias content.orders.cancellineitem\n     * @memberOf! content(v2sandbox)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.merchantId The ID of the managing account.\n     * @param {string} params.orderId The ID of the order.\n     * @param {content(v2sandbox).OrdersCancelLineItemRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    cancellineitem: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/content/v2sandbox/{merchantId}/orders/{orderId}/cancelLineItem',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * content.orders.createtestorder\n     *\n     * @desc Sandbox only. Creates a test order. This method can only be called for non-multi-client accounts.\n     *\n     * @alias content.orders.createtestorder\n     * @memberOf! content(v2sandbox)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.merchantId The ID of the managing account.\n     * @param {content(v2sandbox).OrdersCreateTestOrderRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    createtestorder: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/content/v2sandbox/{merchantId}/testorders',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * content.orders.custombatch\n     *\n     * @desc Retrieves or modifies multiple orders in a single request. This method can only be called for non-multi-client accounts.\n     *\n     * @alias content.orders.custombatch\n     * @memberOf! content(v2sandbox)\n     *\n     * @param {object} params Parameters for request\n     * @param {content(v2sandbox).OrdersCustomBatchRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    custombatch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/content/v2sandbox/orders/batch',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * content.orders.get\n     *\n     * @desc Retrieves an order from your Merchant Center account. This method can only be called for non-multi-client accounts.\n     *\n     * @alias content.orders.get\n     * @memberOf! content(v2sandbox)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.merchantId The ID of the managing account.\n     * @param {string} params.orderId The ID of the order.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/content/v2sandbox/{merchantId}/orders/{orderId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * content.orders.getbymerchantorderid\n     *\n     * @desc Retrieves an order using merchant order id. This method can only be called for non-multi-client accounts.\n     *\n     * @alias content.orders.getbymerchantorderid\n     * @memberOf! content(v2sandbox)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.merchantId The ID of the managing account.\n     * @param {string} params.merchantOrderId The merchant order id to be looked for.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getbymerchantorderid: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/content/v2sandbox/{merchantId}/ordersbymerchantid/{merchantOrderId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['merchantId', 'merchantOrderId'],\n        pathParams: ['merchantId', 'merchantOrderId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * content.orders.gettestordertemplate\n     *\n     * @desc Sandbox only. Retrieves an order template that can be used to quickly create a new order in sandbox. This method can only be called for non-multi-client accounts.\n     *\n     * @alias content.orders.gettestordertemplate\n     * @memberOf! content(v2sandbox)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.merchantId The ID of the managing account.\n     * @param {string} params.templateName The name of the template to retrieve.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    gettestordertemplate: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/content/v2sandbox/{merchantId}/testordertemplates/{templateName}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['merchantId', 'templateName'],\n        pathParams: ['merchantId', 'templateName'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * content.orders.list\n     *\n     * @desc Lists the orders in your Merchant Center account. This method can only be called for non-multi-client accounts.\n     *\n     * @alias content.orders.list\n     * @memberOf! content(v2sandbox)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.acknowledged Obtains orders that match the acknowledgement status. When set to true, obtains orders that have been acknowledged. When false, obtains orders that have not been acknowledged. We recommend using this filter set to false, in conjunction with the acknowledge call, such that only un-acknowledged orders are returned.\n     * @param {integer=} params.maxResults The maximum number of orders to return in the response, used for paging. The default value is 25 orders per page, and the maximum allowed value is 250 orders per page. Known issue: All List calls will return all Orders without limit regardless of the value of this field.\n     * @param {string} params.merchantId The ID of the managing account.\n     * @param {string=} params.orderBy The ordering of the returned list. The only supported value are placedDate desc and placedDate asc for now, which returns orders sorted by placement date. \"placedDate desc\" stands for listing orders by placement date, from oldest to most recent. \"placedDate asc\" stands for listing orders by placement date, from most recent to oldest. In future releases we'll support other sorting criteria.\n     * @param {string=} params.pageToken The token returned by the previous request.\n     * @param {string=} params.placedDateEnd Obtains orders placed before this date (exclusively), in ISO 8601 format.\n     * @param {string=} params.placedDateStart Obtains orders placed after this date (inclusively), in ISO 8601 format.\n     * @param {string=} params.statuses Obtains orders that match any of the specified statuses. Multiple values can be specified with comma separation. Additionally, please note that active is a shortcut for pendingShipment and partiallyShipped, and completed is a shortcut for shipped , partiallyDelivered, delivered, partiallyReturned, returned, and canceled.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/content/v2sandbox/{merchantId}/orders',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * content.orders.refund\n     *\n     * @desc Refund a portion of the order, up to the full amount paid. This method can only be called for non-multi-client accounts.\n     *\n     * @alias content.orders.refund\n     * @memberOf! content(v2sandbox)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.merchantId The ID of the managing account.\n     * @param {string} params.orderId The ID of the order to refund.\n     * @param {content(v2sandbox).OrdersRefundRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    refund: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/content/v2sandbox/{merchantId}/orders/{orderId}/refund',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * content.orders.returnlineitem\n     *\n     * @desc Returns a line item. This method can only be called for non-multi-client accounts.\n     *\n     * @alias content.orders.returnlineitem\n     * @memberOf! content(v2sandbox)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.merchantId The ID of the managing account.\n     * @param {string} params.orderId The ID of the order.\n     * @param {content(v2sandbox).OrdersReturnLineItemRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    returnlineitem: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/content/v2sandbox/{merchantId}/orders/{orderId}/returnLineItem',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * content.orders.shiplineitems\n     *\n     * @desc Marks line item(s) as shipped. This method can only be called for non-multi-client accounts.\n     *\n     * @alias content.orders.shiplineitems\n     * @memberOf! content(v2sandbox)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.merchantId The ID of the managing account.\n     * @param {string} params.orderId The ID of the order.\n     * @param {content(v2sandbox).OrdersShipLineItemsRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    shiplineitems: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/content/v2sandbox/{merchantId}/orders/{orderId}/shipLineItems',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * content.orders.updatemerchantorderid\n     *\n     * @desc Updates the merchant order ID for a given order. This method can only be called for non-multi-client accounts.\n     *\n     * @alias content.orders.updatemerchantorderid\n     * @memberOf! content(v2sandbox)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.merchantId The ID of the managing account.\n     * @param {string} params.orderId The ID of the order.\n     * @param {content(v2sandbox).OrdersUpdateMerchantOrderIdRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    updatemerchantorderid: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/content/v2sandbox/{merchantId}/orders/{orderId}/updateMerchantOrderId',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * content.orders.updateshipment\n     *\n     * @desc Updates a shipment's status, carrier, and/or tracking ID. This method can only be called for non-multi-client accounts.\n     *\n     * @alias content.orders.updateshipment\n     * @memberOf! content(v2sandbox)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.merchantId The ID of the managing account.\n     * @param {string} params.orderId The ID of the order.\n     * @param {content(v2sandbox).OrdersUpdateShipmentRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    updateshipment: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/content/v2sandbox/{merchantId}/orders/{orderId}/updateShipment',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef Error\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} domain The domain of the error.\n * @property {string} message A description of the error.\n * @property {string} reason The error code.\n */\n/**\n * @typedef Errors\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {integer} code The HTTP status of the first error in errors.\n * @property {content(v2sandbox).Error[]} errors A list of errors.\n * @property {string} message The message of the first error in errors.\n */\n/**\n * @typedef Order\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {boolean} acknowledged Whether the order was acknowledged.\n * @property {string} channelType The channel type of the order: &quot;purchaseOnGoogle&quot; or &quot;googleExpress&quot;.\n * @property {content(v2sandbox).OrderCustomer} customer The details of the customer who placed the order.\n * @property {content(v2sandbox).OrderDeliveryDetails} deliveryDetails The details for the delivery.\n * @property {string} id The REST id of the order. Globally unique.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;content#order&quot;.\n * @property {content(v2sandbox).OrderLineItem[]} lineItems Line items that are ordered.\n * @property {string} merchantId \n * @property {string} merchantOrderId Merchant-provided id of the order.\n * @property {content(v2sandbox).Price} netAmount The net amount for the order. For example, if an order was originally for a grand total of $100 and a refund was issued for $20, the net amount will be $80.\n * @property {content(v2sandbox).OrderPaymentMethod} paymentMethod The details of the payment method.\n * @property {string} paymentStatus The status of the payment.\n * @property {string} placedDate The date when the order was placed, in ISO 8601 format.\n * @property {content(v2sandbox).OrderPromotion[]} promotions The details of the merchant provided promotions applied to the order. More details about the program are  here.\n * @property {content(v2sandbox).OrderRefund[]} refunds Refunds for the order.\n * @property {content(v2sandbox).OrderShipment[]} shipments Shipments of the order.\n * @property {content(v2sandbox).Price} shippingCost The total cost of shipping for all items.\n * @property {content(v2sandbox).Price} shippingCostTax The tax for the total shipping cost.\n * @property {string} shippingOption The requested shipping option.\n * @property {string} status The status of the order.\n */\n/**\n * @typedef OrderAddress\n * @memberOf! content(v2sandbox)\n * @type object\n* @property {string} country CLDR country code (e.g. &quot;US&quot;).\n* @property {string[]} fullAddress Strings representing the lines of the printed label for mailing the order, for example:\nJohn Smith\n1600 Amphitheatre Parkway\nMountain View, CA, 94043\nUnited States\n* @property {boolean} isPostOfficeBox Whether the address is a post office box.\n* @property {string} locality City, town or commune. May also include dependent localities or sublocalities (e.g. neighborhoods or suburbs).\n* @property {string} postalCode Postal Code or ZIP (e.g. &quot;94043&quot;).\n* @property {string} recipientName Name of the recipient.\n* @property {string} region Top-level administrative subdivision of the country (e.g. &quot;CA&quot;).\n* @property {string[]} streetAddress Street-level part of the address.\n*/\n/**\n * @typedef OrderCancellation\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} actor The actor that created the cancellation.\n * @property {string} creationDate Date on which the cancellation has been created, in ISO 8601 format.\n * @property {integer} quantity The quantity that was canceled.\n * @property {string} reason The reason for the cancellation. Orders that are cancelled with a noInventory reason will lead to the removal of the product from POG until you make an update to that product. This will not affect your Shopping ads.\n * @property {string} reasonText The explanation of the reason.\n */\n/**\n * @typedef OrderCustomer\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} email Email address of the customer.\n * @property {boolean} explicitMarketingPreference If set, this indicates the user explicitly chose to opt in or out of providing marketing rights to the merchant. If unset, this indicates the user has already made this choice in a previous purchase, and was thus not shown the marketing right opt in/out checkbox during the checkout flow.\n * @property {string} fullName Full name of the customer.\n */\n/**\n * @typedef OrderDeliveryDetails\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {content(v2sandbox).OrderAddress} address The delivery address\n * @property {string} phoneNumber The phone number of the person receiving the delivery.\n */\n/**\n * @typedef OrderLineItem\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {content(v2sandbox).OrderCancellation[]} cancellations Cancellations of the line item.\n * @property {string} id The id of the line item.\n * @property {content(v2sandbox).Price} price Total price for the line item. For example, if two items for $10 are purchased, the total price will be $20.\n * @property {content(v2sandbox).OrderLineItemProduct} product Product data from the time of the order placement.\n * @property {integer} quantityCanceled Number of items canceled.\n * @property {integer} quantityDelivered Number of items delivered.\n * @property {integer} quantityOrdered Number of items ordered.\n * @property {integer} quantityPending Number of items pending.\n * @property {integer} quantityReturned Number of items returned.\n * @property {integer} quantityShipped Number of items shipped.\n * @property {content(v2sandbox).OrderLineItemReturnInfo} returnInfo Details of the return policy for the line item.\n * @property {content(v2sandbox).OrderReturn[]} returns Returns of the line item.\n * @property {content(v2sandbox).OrderLineItemShippingDetails} shippingDetails Details of the requested shipping for the line item.\n * @property {content(v2sandbox).Price} tax Total tax amount for the line item. For example, if two items are purchased, and each have a cost tax of $2, the total tax amount will be $4.\n */\n/**\n * @typedef OrderLineItemProduct\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} brand Brand of the item.\n * @property {string} channel The item&#39;s channel (online or local).\n * @property {string} condition Condition or state of the item.\n * @property {string} contentLanguage The two-letter ISO 639-1 language code for the item.\n * @property {string} gtin Global Trade Item Number (GTIN) of the item.\n * @property {string} id The REST id of the product.\n * @property {string} imageLink URL of an image of the item.\n * @property {string} itemGroupId Shared identifier for all variants of the same product.\n * @property {string} mpn Manufacturer Part Number (MPN) of the item.\n * @property {string} offerId An identifier of the item.\n * @property {content(v2sandbox).Price} price Price of the item.\n * @property {string} shownImage URL to the cached image shown to the user when order was placed.\n * @property {string} targetCountry The CLDR territory code of the target country of the product.\n * @property {string} title The title of the product.\n * @property {content(v2sandbox).OrderLineItemProductVariantAttribute[]} variantAttributes Variant attributes for the item. These are dimensions of the product, such as color, gender, material, pattern, and size. You can find a comprehensive list of variant attributes here.\n */\n/**\n * @typedef OrderLineItemProductVariantAttribute\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} dimension The dimension of the variant.\n * @property {string} value The value for the dimension.\n */\n/**\n * @typedef OrderLineItemReturnInfo\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {integer} daysToReturn How many days later the item can be returned.\n * @property {boolean} isReturnable Whether the item is returnable.\n * @property {string} policyUrl URL of the item return policy.\n */\n/**\n * @typedef OrderLineItemShippingDetails\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} deliverByDate The delivery by date, in ISO 8601 format.\n * @property {content(v2sandbox).OrderLineItemShippingDetailsMethod} method Details of the shipping method.\n * @property {string} shipByDate The ship by date, in ISO 8601 format.\n */\n/**\n * @typedef OrderLineItemShippingDetailsMethod\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} carrier The carrier for the shipping. Optional.\n * @property {integer} maxDaysInTransit Maximum transit time.\n * @property {string} methodName The name of the shipping method.\n * @property {integer} minDaysInTransit Minimum transit time.\n */\n/**\n * @typedef OrderPaymentMethod\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {content(v2sandbox).OrderAddress} billingAddress The billing address.\n * @property {integer} expirationMonth The card expiration month (January = 1, February = 2 etc.).\n * @property {integer} expirationYear The card expiration year (4-digit, e.g. 2015).\n * @property {string} lastFourDigits The last four digits of the card number.\n * @property {string} phoneNumber The billing phone number.\n * @property {string} type The type of instrument (VISA, Mastercard, etc).\n */\n/**\n * @typedef OrderPromotion\n * @memberOf! content(v2sandbox)\n * @type object\n* @property {content(v2sandbox).OrderPromotionBenefit[]} benefits \n* @property {string} effectiveDates The date and time frame when the promotion is active and ready for validation review. Note that the promotion live time may be delayed for a few hours due to the validation review.\nStart date and end date are separated by a forward slash (/). The start date is specified by the format (YYYY-MM-DD), followed by the letter ?T?, the time of the day when the sale starts (in Greenwich Mean Time, GMT), followed by an expression of the time zone for the sale. The end date is in the same format.\n* @property {string} genericRedemptionCode Optional. The text code that corresponds to the promotion when applied on the retailer?s website.\n* @property {string} id The unique ID of the promotion.\n* @property {string} longTitle The full title of the promotion.\n* @property {string} productApplicability Whether the promotion is applicable to all products or only specific products.\n* @property {string} redemptionChannel Indicates that the promotion is valid online.\n*/\n/**\n * @typedef OrderPromotionBenefit\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {content(v2sandbox).Price} discount The discount in the order price when the promotion is applied.\n * @property {string[]} offerIds The OfferId(s) that were purchased in this order and map to this specific benefit of the promotion.\n * @property {string} subType Further describes the benefit of the promotion. Note that we will expand on this enumeration as we support new promotion sub-types.\n * @property {content(v2sandbox).Price} taxImpact The impact on tax when the promotion is applied.\n * @property {string} type Describes whether the promotion applies to products (e.g. 20% off) or to shipping (e.g. Free Shipping).\n */\n/**\n * @typedef OrderRefund\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} actor The actor that created the refund.\n * @property {content(v2sandbox).Price} amount The amount that is refunded.\n * @property {string} creationDate Date on which the item has been created, in ISO 8601 format.\n * @property {string} reason The reason for the refund.\n * @property {string} reasonText The explanation of the reason.\n */\n/**\n * @typedef OrderReturn\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} actor The actor that created the refund.\n * @property {string} creationDate Date on which the item has been created, in ISO 8601 format.\n * @property {integer} quantity Quantity that is returned.\n * @property {string} reason The reason for the return.\n * @property {string} reasonText The explanation of the reason.\n */\n/**\n * @typedef OrderShipment\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} carrier The carrier handling the shipment.\n * @property {string} creationDate Date on which the shipment has been created, in ISO 8601 format.\n * @property {string} deliveryDate Date on which the shipment has been delivered, in ISO 8601 format. Present only if status is delievered\n * @property {string} id The id of the shipment.\n * @property {content(v2sandbox).OrderShipmentLineItemShipment[]} lineItems The line items that are shipped.\n * @property {string} status The status of the shipment.\n * @property {string} trackingId The tracking id for the shipment.\n */\n/**\n * @typedef OrderShipmentLineItemShipment\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} lineItemId The id of the line item that is shipped.\n * @property {integer} quantity The quantity that is shipped.\n */\n/**\n * @typedef OrdersAcknowledgeRequest\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} operationId The ID of the operation. Unique across all operations for a given order.\n */\n/**\n * @typedef OrdersAcknowledgeResponse\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} executionStatus The status of the execution.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;content#ordersAcknowledgeResponse&quot;.\n */\n/**\n * @typedef OrdersAdvanceTestOrderResponse\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;content#ordersAdvanceTestOrderResponse&quot;.\n */\n/**\n * @typedef OrdersCancelLineItemRequest\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {content(v2sandbox).Price} amount Amount to refund for the cancelation. Optional. If not set, Google will calculate the default based on the price and tax of the items involved. The amount must not be larger than the net amount left on the order.\n * @property {string} lineItemId The ID of the line item to cancel.\n * @property {string} operationId The ID of the operation. Unique across all operations for a given order.\n * @property {integer} quantity The quantity to cancel.\n * @property {string} reason The reason for the cancellation.\n * @property {string} reasonText The explanation of the reason.\n */\n/**\n * @typedef OrdersCancelLineItemResponse\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} executionStatus The status of the execution.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;content#ordersCancelLineItemResponse&quot;.\n */\n/**\n * @typedef OrdersCancelRequest\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} operationId The ID of the operation. Unique across all operations for a given order.\n * @property {string} reason The reason for the cancellation.\n * @property {string} reasonText The explanation of the reason.\n */\n/**\n * @typedef OrdersCancelResponse\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} executionStatus The status of the execution.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;content#ordersCancelResponse&quot;.\n */\n/**\n * @typedef OrdersCreateTestOrderRequest\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} templateName The test order template to use. Specify as an alternative to testOrder as a shortcut for retrieving a template and then creating an order using that template.\n * @property {content(v2sandbox).TestOrder} testOrder The test order to create.\n */\n/**\n * @typedef OrdersCreateTestOrderResponse\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;content#ordersCreateTestOrderResponse&quot;.\n * @property {string} orderId The ID of the newly created test order.\n */\n/**\n * @typedef OrdersCustomBatchRequest\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {content(v2sandbox).OrdersCustomBatchRequestEntry[]} entries The request entries to be processed in the batch.\n */\n/**\n * @typedef OrdersCustomBatchRequestEntry\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {integer} batchId An entry ID, unique within the batch request.\n * @property {content(v2sandbox).OrdersCustomBatchRequestEntryCancel} cancel Required for cancel method.\n * @property {content(v2sandbox).OrdersCustomBatchRequestEntryCancelLineItem} cancelLineItem Required for cancelLineItem method.\n * @property {string} merchantId The ID of the managing account.\n * @property {string} merchantOrderId The merchant order id. Required for updateMerchantOrderId and getByMerchantOrderId methods.\n * @property {string} method The method to apply.\n * @property {string} operationId The ID of the operation. Unique across all operations for a given order. Required for all methods beside get and getByMerchantOrderId.\n * @property {string} orderId The ID of the order. Required for all methods beside getByMerchantOrderId.\n * @property {content(v2sandbox).OrdersCustomBatchRequestEntryRefund} refund Required for refund method.\n * @property {content(v2sandbox).OrdersCustomBatchRequestEntryReturnLineItem} returnLineItem Required for returnLineItem method.\n * @property {content(v2sandbox).OrdersCustomBatchRequestEntryShipLineItems} shipLineItems Required for shipLineItems method.\n * @property {content(v2sandbox).OrdersCustomBatchRequestEntryUpdateShipment} updateShipment Required for updateShipment method.\n */\n/**\n * @typedef OrdersCustomBatchRequestEntryCancel\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} reason The reason for the cancellation.\n * @property {string} reasonText The explanation of the reason.\n */\n/**\n * @typedef OrdersCustomBatchRequestEntryCancelLineItem\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {content(v2sandbox).Price} amount Amount to refund for the cancelation. Optional. If not set, Google will calculate the default based on the price and tax of the items involved. The amount must not be larger than the net amount left on the order.\n * @property {string} lineItemId The ID of the line item to cancel.\n * @property {integer} quantity The quantity to cancel.\n * @property {string} reason The reason for the cancellation.\n * @property {string} reasonText The explanation of the reason.\n */\n/**\n * @typedef OrdersCustomBatchRequestEntryRefund\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {content(v2sandbox).Price} amount The amount that is refunded.\n * @property {string} reason The reason for the refund.\n * @property {string} reasonText The explanation of the reason.\n */\n/**\n * @typedef OrdersCustomBatchRequestEntryReturnLineItem\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} lineItemId The ID of the line item to return.\n * @property {integer} quantity The quantity to return.\n * @property {string} reason The reason for the return.\n * @property {string} reasonText The explanation of the reason.\n */\n/**\n * @typedef OrdersCustomBatchRequestEntryShipLineItems\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} carrier The carrier handling the shipment.\n * @property {content(v2sandbox).OrderShipmentLineItemShipment[]} lineItems Line items to ship.\n * @property {string} shipmentId The ID of the shipment.\n * @property {string} trackingId The tracking id for the shipment.\n */\n/**\n * @typedef OrdersCustomBatchRequestEntryUpdateShipment\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} carrier The carrier handling the shipment. Not updated if missing.\n * @property {string} shipmentId The ID of the shipment.\n * @property {string} status New status for the shipment. Not updated if missing.\n * @property {string} trackingId The tracking id for the shipment. Not updated if missing.\n */\n/**\n * @typedef OrdersCustomBatchResponse\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {content(v2sandbox).OrdersCustomBatchResponseEntry[]} entries The result of the execution of the batch requests.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;content#ordersCustomBatchResponse&quot;.\n */\n/**\n * @typedef OrdersCustomBatchResponseEntry\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {integer} batchId The ID of the request entry this entry responds to.\n * @property {content(v2sandbox).Errors} errors A list of errors defined if and only if the request failed.\n * @property {string} executionStatus The status of the execution. Only defined if the method is not get or getByMerchantOrderId and if the request was successful.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;content#ordersCustomBatchResponseEntry&quot;.\n * @property {content(v2sandbox).Order} order The retrieved order. Only defined if the method is get and if the request was successful.\n */\n/**\n * @typedef OrdersGetByMerchantOrderIdResponse\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;content#ordersGetByMerchantOrderIdResponse&quot;.\n * @property {content(v2sandbox).Order} order The requested order.\n */\n/**\n * @typedef OrdersGetTestOrderTemplateResponse\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;content#ordersGetTestOrderTemplateResponse&quot;.\n * @property {content(v2sandbox).TestOrder} template The requested test order template.\n */\n/**\n * @typedef OrdersListResponse\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;content#ordersListResponse&quot;.\n * @property {string} nextPageToken The token for the retrieval of the next page of orders.\n * @property {content(v2sandbox).Order[]} resources \n */\n/**\n * @typedef OrdersRefundRequest\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {content(v2sandbox).Price} amount The amount that is refunded.\n * @property {string} operationId The ID of the operation. Unique across all operations for a given order.\n * @property {string} reason The reason for the refund.\n * @property {string} reasonText The explanation of the reason.\n */\n/**\n * @typedef OrdersRefundResponse\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} executionStatus The status of the execution.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;content#ordersRefundResponse&quot;.\n */\n/**\n * @typedef OrdersReturnLineItemRequest\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} lineItemId The ID of the line item to return.\n * @property {string} operationId The ID of the operation. Unique across all operations for a given order.\n * @property {integer} quantity The quantity to return.\n * @property {string} reason The reason for the return.\n * @property {string} reasonText The explanation of the reason.\n */\n/**\n * @typedef OrdersReturnLineItemResponse\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} executionStatus The status of the execution.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;content#ordersReturnLineItemResponse&quot;.\n */\n/**\n * @typedef OrdersShipLineItemsRequest\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} carrier The carrier handling the shipment.\n * @property {content(v2sandbox).OrderShipmentLineItemShipment[]} lineItems Line items to ship.\n * @property {string} operationId The ID of the operation. Unique across all operations for a given order.\n * @property {string} shipmentId The ID of the shipment.\n * @property {string} trackingId The tracking id for the shipment.\n */\n/**\n * @typedef OrdersShipLineItemsResponse\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} executionStatus The status of the execution.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;content#ordersShipLineItemsResponse&quot;.\n */\n/**\n * @typedef OrdersUpdateMerchantOrderIdRequest\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} merchantOrderId The merchant order id to be assigned to the order. Must be unique per merchant.\n * @property {string} operationId The ID of the operation. Unique across all operations for a given order.\n */\n/**\n * @typedef OrdersUpdateMerchantOrderIdResponse\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} executionStatus The status of the execution.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;content#ordersUpdateMerchantOrderIdResponse&quot;.\n */\n/**\n * @typedef OrdersUpdateShipmentRequest\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} carrier The carrier handling the shipment. Not updated if missing.\n * @property {string} operationId The ID of the operation. Unique across all operations for a given order.\n * @property {string} shipmentId The ID of the shipment.\n * @property {string} status New status for the shipment. Not updated if missing.\n * @property {string} trackingId The tracking id for the shipment. Not updated if missing.\n */\n/**\n * @typedef OrdersUpdateShipmentResponse\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} executionStatus The status of the execution.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;content#ordersUpdateShipmentResponse&quot;.\n */\n/**\n * @typedef Price\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} currency The currency of the price.\n * @property {string} value The price represented as a number.\n */\n/**\n * @typedef TestOrder\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {content(v2sandbox).TestOrderCustomer} customer The details of the customer who placed the order.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;content#testOrder&quot;.\n * @property {content(v2sandbox).TestOrderLineItem[]} lineItems Line items that are ordered. At least one line item must be provided.\n * @property {content(v2sandbox).TestOrderPaymentMethod} paymentMethod The details of the payment method.\n * @property {string} predefinedDeliveryAddress Identifier of one of the predefined delivery addresses for the delivery.\n * @property {content(v2sandbox).OrderPromotion[]} promotions The details of the merchant provided promotions applied to the order. More details about the program are  here.\n * @property {content(v2sandbox).Price} shippingCost The total cost of shipping for all items.\n * @property {content(v2sandbox).Price} shippingCostTax The tax for the total shipping cost.\n * @property {string} shippingOption The requested shipping option.\n */\n/**\n * @typedef TestOrderCustomer\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} email Email address of the customer.\n * @property {boolean} explicitMarketingPreference If set, this indicates the user explicitly chose to opt in or out of providing marketing rights to the merchant. If unset, this indicates the user has already made this choice in a previous purchase, and was thus not shown the marketing right opt in/out checkbox during the checkout flow. Optional.\n * @property {string} fullName Full name of the customer.\n */\n/**\n * @typedef TestOrderLineItem\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {content(v2sandbox).TestOrderLineItemProduct} product Product data from the time of the order placement.\n * @property {integer} quantityOrdered Number of items ordered.\n * @property {content(v2sandbox).OrderLineItemReturnInfo} returnInfo Details of the return policy for the line item.\n * @property {content(v2sandbox).OrderLineItemShippingDetails} shippingDetails Details of the requested shipping for the line item.\n * @property {content(v2sandbox).Price} unitTax Unit tax for the line item.\n */\n/**\n * @typedef TestOrderLineItemProduct\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {string} brand Brand of the item.\n * @property {string} channel The item&#39;s channel.\n * @property {string} condition Condition or state of the item.\n * @property {string} contentLanguage The two-letter ISO 639-1 language code for the item.\n * @property {string} gtin Global Trade Item Number (GTIN) of the item. Optional.\n * @property {string} imageLink URL of an image of the item.\n * @property {string} itemGroupId Shared identifier for all variants of the same product. Optional.\n * @property {string} mpn Manufacturer Part Number (MPN) of the item. Optional.\n * @property {string} offerId An identifier of the item.\n * @property {content(v2sandbox).Price} price The price for the product.\n * @property {string} targetCountry The CLDR territory code of the target country of the product.\n * @property {string} title The title of the product.\n * @property {content(v2sandbox).OrderLineItemProductVariantAttribute[]} variantAttributes Variant attributes for the item. Optional.\n */\n/**\n * @typedef TestOrderPaymentMethod\n * @memberOf! content(v2sandbox)\n * @type object\n * @property {integer} expirationMonth The card expiration month (January = 1, February = 2 etc.).\n * @property {integer} expirationYear The card expiration year (4-digit, e.g. 2015).\n * @property {string} lastFourDigits The last four digits of the card number.\n * @property {string} predefinedBillingAddress The billing address.\n * @property {string} type The type of instrument. Note that real orders might have different values than the four values accepted by createTestOrder.\n */\nmodule.exports = Content;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/dataflow/v1b3.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Google Dataflow API\n *\n * Manages Google Cloud Dataflow projects on Google Cloud Platform.\n *\n * @example\n * var google = require('googleapis');\n * var dataflow = google.dataflow('v1b3');\n *\n * @namespace dataflow\n * @type {Function}\n * @version v1b3\n * @variation v1b3\n * @param {object=} options Options for Dataflow\n */\nfunction Dataflow(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.projects = {\n\n    /**\n     * dataflow.projects.workerMessages\n     *\n     * @desc Send a worker_message to the service.\n     *\n     * @alias dataflow.projects.workerMessages\n     * @memberOf! dataflow(v1b3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.projectId The project to send the WorkerMessages to.\n     * @param {dataflow(v1b3).SendWorkerMessagesRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    workerMessages: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/WorkerMessages',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    jobs: {\n\n      /**\n       * dataflow.projects.jobs.update\n       *\n       * @desc Updates the state of an existing Cloud Dataflow job.\n       *\n       * @alias dataflow.projects.jobs.update\n       * @memberOf! dataflow(v1b3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.location The location that contains this job.\n       * @param {string} params.projectId The ID of the Cloud Platform project that the job belongs to.\n       * @param {string} params.jobId The job ID.\n       * @param {dataflow(v1b3).Job} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      update: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/jobs/{jobId}',\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'jobId'],\n          pathParams: ['projectId', 'jobId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * dataflow.projects.jobs.create\n       *\n       * @desc Creates a Cloud Dataflow job.\n       *\n       * @alias dataflow.projects.jobs.create\n       * @memberOf! dataflow(v1b3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.projectId The ID of the Cloud Platform project that the job belongs to.\n       * @param {string=} params.view The level of information requested in response.\n       * @param {string=} params.location The location that contains this job.\n       * @param {string=} params.replaceJobId Deprecated. This field is now in the Job message.\n       * @param {dataflow(v1b3).Job} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/jobs',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * dataflow.projects.jobs.getMetrics\n       *\n       * @desc Request the job status.\n       *\n       * @alias dataflow.projects.jobs.getMetrics\n       * @memberOf! dataflow(v1b3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.location The location which contains the job specified by job_id.\n       * @param {string=} params.startTime Return only metric data that has changed since this time. Default is to return all information about all metrics for the job.\n       * @param {string} params.projectId A project id.\n       * @param {string} params.jobId The job to get messages for.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      getMetrics: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/jobs/{jobId}/metrics',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'jobId'],\n          pathParams: ['projectId', 'jobId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * dataflow.projects.jobs.get\n       *\n       * @desc Gets the state of the specified Cloud Dataflow job.\n       *\n       * @alias dataflow.projects.jobs.get\n       * @memberOf! dataflow(v1b3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.location The location that contains this job.\n       * @param {string} params.projectId The ID of the Cloud Platform project that the job belongs to.\n       * @param {string} params.jobId The job ID.\n       * @param {string=} params.view The level of information requested in response.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/jobs/{jobId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'jobId'],\n          pathParams: ['projectId', 'jobId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * dataflow.projects.jobs.list\n       *\n       * @desc List the jobs of a project.\n       *\n       * @alias dataflow.projects.jobs.list\n       * @memberOf! dataflow(v1b3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.projectId The project which owns the jobs.\n       * @param {string=} params.filter The kind of filter to use.\n       * @param {string=} params.location The location that contains this job.\n       * @param {string=} params.pageToken Set this to the 'next_page_token' field of a previous response to request additional results in a long list.\n       * @param {integer=} params.pageSize If there are many jobs, limit response to at most this many. The actual number of jobs returned will be the lesser of max_responses and an unspecified server-defined limit.\n       * @param {string=} params.view Level of information requested in response. Default is `JOB_VIEW_SUMMARY`.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/jobs',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      debug: {\n\n        /**\n         * dataflow.projects.jobs.debug.getConfig\n         *\n         * @desc Get encoded debug configuration for component. Not cacheable.\n         *\n         * @alias dataflow.projects.jobs.debug.getConfig\n         * @memberOf! dataflow(v1b3)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.projectId The project id.\n         * @param {string} params.jobId The job id.\n         * @param {dataflow(v1b3).GetDebugConfigRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        getConfig: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/jobs/{jobId}/debug/getConfig',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'jobId'],\n            pathParams: ['projectId', 'jobId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * dataflow.projects.jobs.debug.sendCapture\n         *\n         * @desc Send encoded debug capture data for component.\n         *\n         * @alias dataflow.projects.jobs.debug.sendCapture\n         * @memberOf! dataflow(v1b3)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.projectId The project id.\n         * @param {string} params.jobId The job id.\n         * @param {dataflow(v1b3).SendDebugCaptureRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        sendCapture: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/jobs/{jobId}/debug/sendCapture',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'jobId'],\n            pathParams: ['projectId', 'jobId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        }\n      },\n\n      workItems: {\n\n        /**\n         * dataflow.projects.jobs.workItems.lease\n         *\n         * @desc Leases a dataflow WorkItem to run.\n         *\n         * @alias dataflow.projects.jobs.workItems.lease\n         * @memberOf! dataflow(v1b3)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.projectId Identifies the project this worker belongs to.\n         * @param {string} params.jobId Identifies the workflow job this worker belongs to.\n         * @param {dataflow(v1b3).LeaseWorkItemRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        lease: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/jobs/{jobId}/workItems:lease',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'jobId'],\n            pathParams: ['projectId', 'jobId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * dataflow.projects.jobs.workItems.reportStatus\n         *\n         * @desc Reports the status of dataflow WorkItems leased by a worker.\n         *\n         * @alias dataflow.projects.jobs.workItems.reportStatus\n         * @memberOf! dataflow(v1b3)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.projectId The project which owns the WorkItem's job.\n         * @param {string} params.jobId The job which the WorkItem is part of.\n         * @param {dataflow(v1b3).ReportWorkItemStatusRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        reportStatus: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/jobs/{jobId}/workItems:reportStatus',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'jobId'],\n            pathParams: ['projectId', 'jobId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        }\n      },\n\n      messages: {\n\n        /**\n         * dataflow.projects.jobs.messages.list\n         *\n         * @desc Request the job status.\n         *\n         * @alias dataflow.projects.jobs.messages.list\n         * @memberOf! dataflow(v1b3)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.jobId The job to get messages about.\n         * @param {string} params.projectId A project id.\n         * @param {string=} params.endTime Return only messages with timestamps < end_time. The default is now (i.e. return up to the latest messages available).\n         * @param {string=} params.location The location which contains the job specified by job_id.\n         * @param {string=} params.startTime If specified, return only messages with timestamps >= start_time. The default is the job creation time (i.e. beginning of messages).\n         * @param {string=} params.pageToken If supplied, this should be the value of next_page_token returned by an earlier call. This will cause the next page of results to be returned.\n         * @param {integer=} params.pageSize If specified, determines the maximum number of messages to return.  If unspecified, the service may choose an appropriate default, or may return an arbitrarily large number of results.\n         * @param {string=} params.minimumImportance Filter to only get messages with importance >= level\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/jobs/{jobId}/messages',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'jobId'],\n            pathParams: ['jobId', 'projectId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        }\n      }\n    },\n\n    templates: {\n\n      /**\n       * dataflow.projects.templates.create\n       *\n       * @desc Creates a Cloud Dataflow job from a template.\n       *\n       * @alias dataflow.projects.templates.create\n       * @memberOf! dataflow(v1b3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.projectId Required. The ID of the Cloud Platform project that the job belongs to.\n       * @param {dataflow(v1b3).CreateJobFromTemplateRequest} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/templates',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * dataflow.projects.templates.launch\n       *\n       * @desc Launch a template.\n       *\n       * @alias dataflow.projects.templates.launch\n       * @memberOf! dataflow(v1b3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.gcsPath Required. A Cloud Storage path to the template from which to create the job. Must be valid Cloud Storage URL, beginning with 'gs://'.\n       * @param {boolean=} params.dryRun Whether or not the job should actually be executed after validating parameters. Defaults to false. Validation errors do not cause the HTTP request to fail if true.\n       * @param {string=} params.location The location to which to direct the request.\n       * @param {string} params.projectId Required. The ID of the Cloud Platform project that the job belongs to.\n       * @param {dataflow(v1b3).LaunchTemplateParameters} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      launch: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/templates:launch',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * dataflow.projects.templates.get\n       *\n       * @desc Get the template associated with a template.\n       *\n       * @alias dataflow.projects.templates.get\n       * @memberOf! dataflow(v1b3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.gcsPath Required. A Cloud Storage path to the template from which to create the job. Must be a valid Cloud Storage URL, beginning with `gs://`.\n       * @param {string=} params.location The location to which to direct the request.\n       * @param {string} params.projectId Required. The ID of the Cloud Platform project that the job belongs to.\n       * @param {string=} params.view The view to retrieve. Defaults to METADATA_ONLY.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/templates:get',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    locations: {\n\n      /**\n       * dataflow.projects.locations.workerMessages\n       *\n       * @desc Send a worker_message to the service.\n       *\n       * @alias dataflow.projects.locations.workerMessages\n       * @memberOf! dataflow(v1b3)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.location The location which contains the job\n       * @param {string} params.projectId The project to send the WorkerMessages to.\n       * @param {dataflow(v1b3).SendWorkerMessagesRequest} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      workerMessages: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/locations/{location}/WorkerMessages',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'location'],\n          pathParams: ['location', 'projectId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      templates: {\n\n        /**\n         * dataflow.projects.locations.templates.launch\n         *\n         * @desc Launch a template.\n         *\n         * @alias dataflow.projects.locations.templates.launch\n         * @memberOf! dataflow(v1b3)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.location The location to which to direct the request.\n         * @param {string} params.projectId Required. The ID of the Cloud Platform project that the job belongs to.\n         * @param {string=} params.gcsPath Required. A Cloud Storage path to the template from which to create the job. Must be valid Cloud Storage URL, beginning with 'gs://'.\n         * @param {boolean=} params.dryRun Whether or not the job should actually be executed after validating parameters. Defaults to false. Validation errors do not cause the HTTP request to fail if true.\n         * @param {dataflow(v1b3).LaunchTemplateParameters} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        launch: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/locations/{location}/templates:launch',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'location'],\n            pathParams: ['location', 'projectId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * dataflow.projects.locations.templates.get\n         *\n         * @desc Get the template associated with a template.\n         *\n         * @alias dataflow.projects.locations.templates.get\n         * @memberOf! dataflow(v1b3)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.location The location to which to direct the request.\n         * @param {string} params.projectId Required. The ID of the Cloud Platform project that the job belongs to.\n         * @param {string=} params.view The view to retrieve. Defaults to METADATA_ONLY.\n         * @param {string=} params.gcsPath Required. A Cloud Storage path to the template from which to create the job. Must be a valid Cloud Storage URL, beginning with `gs://`.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        get: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/locations/{location}/templates:get',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'location'],\n            pathParams: ['location', 'projectId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * dataflow.projects.locations.templates.create\n         *\n         * @desc Creates a Cloud Dataflow job from a template.\n         *\n         * @alias dataflow.projects.locations.templates.create\n         * @memberOf! dataflow(v1b3)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.location The location to which to direct the request.\n         * @param {string} params.projectId Required. The ID of the Cloud Platform project that the job belongs to.\n         * @param {dataflow(v1b3).CreateJobFromTemplateRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/locations/{location}/templates',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'location'],\n            pathParams: ['location', 'projectId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        }\n      },\n\n      jobs: {\n\n        /**\n         * dataflow.projects.locations.jobs.get\n         *\n         * @desc Gets the state of the specified Cloud Dataflow job.\n         *\n         * @alias dataflow.projects.locations.jobs.get\n         * @memberOf! dataflow(v1b3)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.projectId The ID of the Cloud Platform project that the job belongs to.\n         * @param {string} params.jobId The job ID.\n         * @param {string=} params.view The level of information requested in response.\n         * @param {string} params.location The location that contains this job.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        get: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'location', 'jobId'],\n            pathParams: ['projectId', 'jobId', 'location'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * dataflow.projects.locations.jobs.list\n         *\n         * @desc List the jobs of a project.\n         *\n         * @alias dataflow.projects.locations.jobs.list\n         * @memberOf! dataflow(v1b3)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.projectId The project which owns the jobs.\n         * @param {string=} params.filter The kind of filter to use.\n         * @param {string} params.location The location that contains this job.\n         * @param {string=} params.pageToken Set this to the 'next_page_token' field of a previous response to request additional results in a long list.\n         * @param {integer=} params.pageSize If there are many jobs, limit response to at most this many. The actual number of jobs returned will be the lesser of max_responses and an unspecified server-defined limit.\n         * @param {string=} params.view Level of information requested in response. Default is `JOB_VIEW_SUMMARY`.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/locations/{location}/jobs',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'location'],\n            pathParams: ['projectId', 'location'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * dataflow.projects.locations.jobs.update\n         *\n         * @desc Updates the state of an existing Cloud Dataflow job.\n         *\n         * @alias dataflow.projects.locations.jobs.update\n         * @memberOf! dataflow(v1b3)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.location The location that contains this job.\n         * @param {string} params.projectId The ID of the Cloud Platform project that the job belongs to.\n         * @param {string} params.jobId The job ID.\n         * @param {dataflow(v1b3).Job} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        update: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}',\n              method: 'PUT'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'location', 'jobId'],\n            pathParams: ['location', 'projectId', 'jobId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * dataflow.projects.locations.jobs.create\n         *\n         * @desc Creates a Cloud Dataflow job.\n         *\n         * @alias dataflow.projects.locations.jobs.create\n         * @memberOf! dataflow(v1b3)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.projectId The ID of the Cloud Platform project that the job belongs to.\n         * @param {string=} params.view The level of information requested in response.\n         * @param {string} params.location The location that contains this job.\n         * @param {string=} params.replaceJobId Deprecated. This field is now in the Job message.\n         * @param {dataflow(v1b3).Job} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/locations/{location}/jobs',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'location'],\n            pathParams: ['projectId', 'location'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * dataflow.projects.locations.jobs.getMetrics\n         *\n         * @desc Request the job status.\n         *\n         * @alias dataflow.projects.locations.jobs.getMetrics\n         * @memberOf! dataflow(v1b3)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.location The location which contains the job specified by job_id.\n         * @param {string=} params.startTime Return only metric data that has changed since this time. Default is to return all information about all metrics for the job.\n         * @param {string} params.projectId A project id.\n         * @param {string} params.jobId The job to get messages for.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        getMetrics: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/metrics',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'location', 'jobId'],\n            pathParams: ['location', 'projectId', 'jobId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        debug: {\n\n          /**\n           * dataflow.projects.locations.jobs.debug.getConfig\n           *\n           * @desc Get encoded debug configuration for component. Not cacheable.\n           *\n           * @alias dataflow.projects.locations.jobs.debug.getConfig\n           * @memberOf! dataflow(v1b3)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.projectId The project id.\n           * @param {string} params.jobId The job id.\n           * @param {string} params.location The location which contains the job specified by job_id.\n           * @param {dataflow(v1b3).GetDebugConfigRequest} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          getConfig: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/getConfig',\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'location', 'jobId'],\n              pathParams: ['projectId', 'jobId', 'location'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          },\n\n          /**\n           * dataflow.projects.locations.jobs.debug.sendCapture\n           *\n           * @desc Send encoded debug capture data for component.\n           *\n           * @alias dataflow.projects.locations.jobs.debug.sendCapture\n           * @memberOf! dataflow(v1b3)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.projectId The project id.\n           * @param {string} params.jobId The job id.\n           * @param {string} params.location The location which contains the job specified by job_id.\n           * @param {dataflow(v1b3).SendDebugCaptureRequest} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          sendCapture: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/sendCapture',\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'location', 'jobId'],\n              pathParams: ['projectId', 'jobId', 'location'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          }\n        },\n\n        workItems: {\n\n          /**\n           * dataflow.projects.locations.jobs.workItems.lease\n           *\n           * @desc Leases a dataflow WorkItem to run.\n           *\n           * @alias dataflow.projects.locations.jobs.workItems.lease\n           * @memberOf! dataflow(v1b3)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.projectId Identifies the project this worker belongs to.\n           * @param {string} params.jobId Identifies the workflow job this worker belongs to.\n           * @param {string} params.location The location which contains the WorkItem's job.\n           * @param {dataflow(v1b3).LeaseWorkItemRequest} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          lease: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:lease',\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'location', 'jobId'],\n              pathParams: ['projectId', 'jobId', 'location'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          },\n\n          /**\n           * dataflow.projects.locations.jobs.workItems.reportStatus\n           *\n           * @desc Reports the status of dataflow WorkItems leased by a worker.\n           *\n           * @alias dataflow.projects.locations.jobs.workItems.reportStatus\n           * @memberOf! dataflow(v1b3)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.projectId The project which owns the WorkItem's job.\n           * @param {string} params.jobId The job which the WorkItem is part of.\n           * @param {string} params.location The location which contains the WorkItem's job.\n           * @param {dataflow(v1b3).ReportWorkItemStatusRequest} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          reportStatus: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:reportStatus',\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'location', 'jobId'],\n              pathParams: ['projectId', 'jobId', 'location'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          }\n        },\n\n        messages: {\n\n          /**\n           * dataflow.projects.locations.jobs.messages.list\n           *\n           * @desc Request the job status.\n           *\n           * @alias dataflow.projects.locations.jobs.messages.list\n           * @memberOf! dataflow(v1b3)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.projectId A project id.\n           * @param {string} params.jobId The job to get messages about.\n           * @param {string=} params.endTime Return only messages with timestamps < end_time. The default is now (i.e. return up to the latest messages available).\n           * @param {string} params.location The location which contains the job specified by job_id.\n           * @param {string=} params.pageToken If supplied, this should be the value of next_page_token returned by an earlier call. This will cause the next page of results to be returned.\n           * @param {string=} params.startTime If specified, return only messages with timestamps >= start_time. The default is the job creation time (i.e. beginning of messages).\n           * @param {integer=} params.pageSize If specified, determines the maximum number of messages to return.  If unspecified, the service may choose an appropriate default, or may return an arbitrarily large number of results.\n           * @param {string=} params.minimumImportance Filter to only get messages with importance >= level\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          list: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://dataflow.googleapis.com/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/messages',\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'location', 'jobId'],\n              pathParams: ['projectId', 'jobId', 'location'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          }\n        }\n      }\n    }\n  };\n}\n\n/**\n * @typedef ComponentSource\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} userName Human-readable name for this transform; may be user or system generated.\n* @property {string} originalTransformOrCollection User name for the original user transform or collection with which this\nsource is most closely associated.\n* @property {string} name Dataflow service generated name for this source.\n*/\n/**\n * @typedef WorkItemServiceState\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} reportStatusInterval New recommended reporting interval.\n* @property {dataflow(v1b3).Position} suggestedStopPosition Obsolete, always empty.\n* @property {object} harnessData Other data returned by the service, specific to the particular\nworker harness.\n* @property {string} leaseExpireTime Time at which the current lease will expire.\n* @property {dataflow(v1b3).MetricShortId[]} metricShortId The short ids that workers should use in subsequent metric updates.\nWorkers should strive to use short ids whenever possible, but it is ok\nto request the short_id again if a worker lost track of it\n(e.g. if the worker is recovering from a crash).\nNOTE: it is possible that the response may have short ids for a subset\nof the metrics.\n* @property {string} nextReportIndex The index value to use for the next report sent by the worker.\nNote: If the report call fails for whatever reason, the worker should\nreuse this index for subsequent report attempts.\n* @property {dataflow(v1b3).ApproximateProgress} suggestedStopPoint DEPRECATED in favor of split_request.\n* @property {dataflow(v1b3).ApproximateSplitRequest} splitRequest The progress point in the WorkItem where the Dataflow service\nsuggests that the worker truncate the task.\n*/\n/**\n * @typedef MetricStructuredName\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {object} context Zero or more labeled fields which identify the part of the job this\nmetric is associated with, such as the name of a step or collection.\n\nFor example, built-in counters associated with steps will have\ncontext[&#39;step&#39;] = &lt;step-name&gt;. Counters associated with PCollections\nin the SDK will have context[&#39;pcollection&#39;] = &lt;pcollection-name&gt;.\n* @property {string} origin Origin (namespace) of metric name. May be blank for user-define metrics;\nwill be &quot;dataflow&quot; for metrics defined by the Dataflow service or SDK.\n* @property {string} name Worker-defined metric name.\n*/\n/**\n * @typedef SeqMapTaskOutputInfo\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} tag The id of the TupleTag the user code will tag the output value by.\n * @property {dataflow(v1b3).Sink} sink The sink to write the output value to.\n */\n/**\n * @typedef JobExecutionStageInfo\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string[]} stepName The steps associated with the execution stage.\nNote that stages may have several steps, and that a given step\nmight be run by more than one stage.\n*/\n/**\n * @typedef KeyRangeLocation\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} deprecatedPersistentDirectory DEPRECATED. The location of the persistent state for this range, as a\npersistent directory in the worker local filesystem.\n* @property {string} deliveryEndpoint The physical location of this range assignment to be used for\nstreaming computation cross-worker message delivery.\n* @property {string} start The start (inclusive) of the key range.\n* @property {string} dataDisk The name of the data disk where data for this range is stored.\nThis name is local to the Google Cloud Platform project and uniquely\nidentifies the disk within that project, for example\n&quot;myproject-1014-104817-4c2-harness-0-disk-1&quot;.\n* @property {string} end The end (exclusive) of the key range.\n*/\n/**\n * @typedef SourceGetMetadataRequest\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).Source} source Specification of the source whose metadata should be computed.\n */\n/**\n * @typedef NameAndKind\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} name Name of the counter.\n * @property {string} kind Counter aggregation kind.\n */\n/**\n * @typedef SeqMapTask\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {object} userFn The user function to invoke.\n* @property {string} name The user-provided name of the SeqDo operation.\n* @property {dataflow(v1b3).SeqMapTaskOutputInfo[]} outputInfos Information about each of the outputs.\n* @property {dataflow(v1b3).SideInputInfo[]} inputs Information about each of the inputs.\n* @property {string} stageName System-defined name of the stage containing the SeqDo operation.\nUnique across the workflow.\n* @property {string} systemName System-defined name of the SeqDo operation.\nUnique across the workflow.\n*/\n/**\n * @typedef WorkerMessageCode\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {object} parameters Parameters contains specific information about the code.\n\nThis is a struct to allow parameters of different types.\n\nExamples:\n 1. For a &quot;HARNESS_STARTED&quot; message parameters might provide the name\n    of the worker and additional data like timing information.\n 2. For a &quot;GCS_DOWNLOAD_ERROR&quot; parameters might contain fields listing\n    the GCS objects being downloaded and fields containing errors.\n\nIn general complex data structures should be avoided. If a worker\nneeds to send a specific and complicated data structure then please\nconsider defining a new proto and adding it to the data oneof in\nWorkerMessageResponse.\n\nConventions:\n Parameters should only be used for information that isn&#39;t typically passed\n as a label.\n hostname and other worker identifiers should almost always be passed\n as labels since they will be included on most messages.\n* @property {string} code The code is a string intended for consumption by a machine that identifies\nthe type of message being sent.\nExamples:\n 1. &quot;HARNESS_STARTED&quot; might be used to indicate the worker harness has\n     started.\n 2. &quot;GCS_DOWNLOAD_ERROR&quot; might be used to indicate an error downloading\n    a GCS file as part of the boot process of one of the worker containers.\n\nThis is a string and not an enum to make it easy to add new codes without\nwaiting for an API change.\n*/\n/**\n * @typedef CustomSourceLocation\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {boolean} stateful Whether this source is stateful.\n */\n/**\n * @typedef MapTask\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {dataflow(v1b3).ParallelInstruction[]} instructions The instructions in the MapTask.\n* @property {string} systemName System-defined name of this MapTask.\nUnique across the workflow.\n* @property {string} stageName System-defined name of the stage containing this MapTask.\nUnique across the workflow.\n*/\n/**\n * @typedef FloatingPointMean\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {number} sum The sum of all values being aggregated.\n * @property {dataflow(v1b3).SplitInt64} count The number of values being aggregated.\n */\n/**\n * @typedef ReportWorkItemStatusResponse\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {dataflow(v1b3).WorkItemServiceState[]} workItemServiceStates A set of messages indicating the service-side state for each\nWorkItem whose status was reported, in the same order as the\nWorkItemStatus messages in the ReportWorkItemStatusRequest which\nresulting in this response.\n*/\n/**\n * @typedef InstructionOutput\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} systemName System-defined name of this output.\nUnique across the workflow.\n* @property {boolean} onlyCountKeyBytes For system-generated byte and mean byte metrics, certain instructions\nshould only report the key size.\n* @property {boolean} onlyCountValueBytes For system-generated byte and mean byte metrics, certain instructions\nshould only report the value size.\n* @property {object} codec The codec to use to encode data being written via this output.\n* @property {string} name The user-provided name of this output.\n* @property {string} originalName System-defined name for this output in the original workflow graph.\nOutputs that do not contribute to an original instruction do not set this.\n*/\n/**\n * @typedef CreateJobFromTemplateRequest\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} gcsPath Required. A Cloud Storage path to the template from which to\ncreate the job.\nMust be a valid Cloud Storage URL, beginning with `gs://`.\n* @property {dataflow(v1b3).RuntimeEnvironment} environment The runtime environment for the job.\n* @property {string} location The location to which to direct the request.\n* @property {object} parameters The runtime parameters to pass to the job.\n* @property {string} jobName Required. The job name to use for the created job.\n*/\n/**\n * @typedef IntegerMean\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).SplitInt64} sum The sum of all values being aggregated.\n * @property {dataflow(v1b3).SplitInt64} count The number of values being aggregated.\n */\n/**\n * @typedef ListJobsResponse\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} nextPageToken Set if there may be more results than fit in this response.\n * @property {dataflow(v1b3).FailedLocation[]} failedLocation Zero or more messages describing locations that failed to respond.\n * @property {dataflow(v1b3).Job[]} jobs A subset of the requested job information.\n */\n/**\n * @typedef ComputationTopology\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} userStageName The user stage name.\n * @property {dataflow(v1b3).StateFamilyConfig[]} stateFamilies The state family values.\n * @property {dataflow(v1b3).StreamLocation[]} outputs The outputs from the computation.\n * @property {string} systemStageName The system stage name.\n * @property {string} computationId The ID of the computation.\n * @property {dataflow(v1b3).StreamLocation[]} inputs The inputs to the computation.\n * @property {dataflow(v1b3).KeyRangeLocation[]} keyRanges The key ranges processed by the computation.\n */\n/**\n * @typedef RuntimeEnvironment\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} serviceAccountEmail The email address of the service account to run the job as.\n* @property {string} tempLocation The Cloud Storage path to use for temporary files.\nMust be a valid Cloud Storage URL, beginning with `gs://`.\n* @property {boolean} bypassTempDirValidation Whether to bypass the safety checks for the job&#39;s temporary directory.\nUse with caution.\n* @property {integer} maxWorkers The maximum number of Google Compute Engine instances to be made\navailable to your pipeline during execution, from 1 to 1000.\n* @property {string} zone The Compute Engine [availability zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones)\nfor launching worker instances to run your pipeline.\n*/\n/**\n * @typedef MountedDataDisk\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} dataDisk The name of the data disk.\nThis name is local to the Google Cloud Platform project and uniquely\nidentifies the disk within that project, for example\n&quot;myproject-1014-104817-4c2-harness-0-disk-1&quot;.\n*/\n/**\n * @typedef StreamingSideInputLocation\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} stateFamily Identifies the state family where this side input is stored.\n * @property {string} tag Identifies the particular side input within the streaming Dataflow job.\n */\n/**\n * @typedef LaunchTemplateResponse\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {dataflow(v1b3).Job} job The job that was launched, if the request was not a dry run and\nthe job was successfully launched.\n*/\n/**\n * @typedef DerivedSource\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} derivationMode What source to base the produced source on (if any).\n * @property {dataflow(v1b3).Source} source Specification of the source.\n */\n/**\n * @typedef DynamicSourceSplit\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {dataflow(v1b3).DerivedSource} residual Residual part (returned to the pool of work).\nSpecified relative to the previously-current source.\n* @property {dataflow(v1b3).DerivedSource} primary Primary part (continued to be processed by worker).\nSpecified relative to the previously-current source.\nBecomes current.\n*/\n/**\n * @typedef Job\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} currentStateTime The timestamp associated with the current state.\n* @property {object} transformNameMapping The map of transform name prefixes of the job to be replaced to the\ncorresponding name prefixes of the new job.\n* @property {string} createTime The timestamp when the job was initially created. Immutable and set by the\nCloud Dataflow service.\n* @property {dataflow(v1b3).Environment} environment The environment for the job.\n* @property {object} labels User-defined labels for this job.\n\nThe labels map can contain no more than 64 entries.  Entries of the labels\nmap are UTF8 strings that comply with the following restrictions:\n\n* Keys must conform to regexp:  \\p{Ll}\\p{Lo}{0,62}\n* Values must conform to regexp:  [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}\n* Both keys and values are additionally constrained to be &lt;= 128 bytes in\nsize.\n* @property {string} type The type of Cloud Dataflow job.\n* @property {string} projectId The ID of the Cloud Platform project that the job belongs to.\n* @property {dataflow(v1b3).PipelineDescription} pipelineDescription Preliminary field: The format of this data may change at any time.\nA description of the user pipeline and stages through which it is executed.\nCreated by Cloud Dataflow service.  Only retrieved with\nJOB_VIEW_DESCRIPTION or JOB_VIEW_ALL.\n* @property {string} replaceJobId If this job is an update of an existing job, this field is the job ID\nof the job it replaced.\n\nWhen sending a `CreateJobRequest`, you can update a job by specifying it\nhere. The job named here is stopped, and its intermediate state is\ntransferred to this job.\n* @property {string} requestedState The job&#39;s requested state.\n\n`UpdateJob` may be used to switch between the `JOB_STATE_STOPPED` and\n`JOB_STATE_RUNNING` states, by setting requested_state.  `UpdateJob` may\nalso be used to directly set a job&#39;s requested state to\n`JOB_STATE_CANCELLED` or `JOB_STATE_DONE`, irrevocably terminating the\njob if it has not already reached a terminal state.\n* @property {string[]} tempFiles A set of files the system should be aware of that are used\nfor temporary storage. These temporary files will be\nremoved on job completion.\nNo duplicates are allowed.\nNo file patterns are supported.\n\nThe supported files are:\n\nGoogle Cloud Storage:\n\n   storage.googleapis.com/{bucket}/{object}\n   bucket.storage.googleapis.com/{object}\n* @property {string} clientRequestId The client&#39;s unique identifier of the job, re-used across retried attempts.\nIf this field is set, the service will ensure its uniqueness.\nThe request to create a job will fail if the service has knowledge of a\npreviously submitted job with the same client&#39;s ID and job name.\nThe caller may use this field to ensure idempotence of job\ncreation across retried attempts to create a job.\nBy default, the field is empty and, in that case, the service ignores it.\n* @property {string} name The user-specified Cloud Dataflow job name.\n\nOnly one Job with a given name may exist in a project at any\ngiven time. If a caller attempts to create a Job with the same\nname as an already-existing Job, the attempt returns the\nexisting Job.\n\nThe name must match the regular expression\n`[a-z]([-a-z0-9]{0,38}[a-z0-9])?`\n* @property {string} replacedByJobId If another job is an update of this job (and thus, this job is in\n`JOB_STATE_UPDATED`), this field contains the ID of that job.\n* @property {dataflow(v1b3).Step[]} steps The top-level steps that constitute the entire job.\n* @property {dataflow(v1b3).JobExecutionInfo} executionInfo Deprecated.\n* @property {string} id The unique ID of this job.\n\nThis field is set by the Cloud Dataflow service when the Job is\ncreated, and is immutable for the life of the job.\n* @property {string} currentState The current state of the job.\n\nJobs are created in the `JOB_STATE_STOPPED` state unless otherwise\nspecified.\n\nA job in the `JOB_STATE_RUNNING` state may asynchronously enter a\nterminal state. After a job has reached a terminal state, no\nfurther state updates may be made.\n\nThis field may be mutated by the Cloud Dataflow service;\ncallers cannot mutate it.\n* @property {string} location The location that contains this job.\n*/\n/**\n * @typedef SourceOperationResponse\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).SourceGetMetadataResponse} getMetadata A response to a request to get metadata about a source.\n * @property {dataflow(v1b3).SourceSplitResponse} split A response to a request to split a source.\n */\n/**\n * @typedef SideInputInfo\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {dataflow(v1b3).Source[]} sources The source(s) to read element(s) from to get the value of this side input.\nIf more than one source, then the elements are taken from the\nsources, in the specified order if order matters.\nAt least one source is required.\n* @property {object} kind How to interpret the source element(s) as a side input value.\n* @property {string} tag The id of the tag the user code will access this side input by;\nthis should correspond to the tag of some MultiOutputInfo.\n*/\n/**\n * @typedef SendDebugCaptureResponse\n * @memberOf! dataflow(v1b3)\n * @type object\n */\n/**\n * @typedef WriteInstruction\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).InstructionInput} input The input.\n * @property {dataflow(v1b3).Sink} sink The sink to write to.\n */\n/**\n * @typedef ConcatPosition\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).Position} position Position within the inner source.\n * @property {integer} index Index of the inner source.\n */\n/**\n * @typedef CounterStructuredNameAndMetadata\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).CounterMetadata} metadata Metadata associated with a counter\n * @property {dataflow(v1b3).CounterStructuredName} name Structured name of the counter.\n */\n/**\n * @typedef AutoscalingSettings\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} algorithm The algorithm to use for autoscaling.\n * @property {integer} maxNumWorkers The maximum number of workers to cap scaling at.\n */\n/**\n * @typedef StreamingComputationRanges\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).KeyRangeDataDiskAssignment[]} rangeAssignments Data disk assignments for ranges from this computation.\n * @property {string} computationId The ID of the computation.\n */\n/**\n * @typedef ExecutionStageSummary\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} id Dataflow service generated id for this stage.\n * @property {dataflow(v1b3).ComponentTransform[]} componentTransform Transforms that comprise this execution stage.\n * @property {dataflow(v1b3).ComponentSource[]} componentSource Collections produced and consumed by component transforms of this stage.\n * @property {string} kind Type of tranform this stage is executing.\n * @property {dataflow(v1b3).StageSource[]} outputSource Output sources for this stage.\n * @property {string} name Dataflow service generated name for this stage.\n * @property {dataflow(v1b3).StageSource[]} inputSource Input sources for this stage.\n */\n/**\n * @typedef SendWorkerMessagesRequest\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).WorkerMessage[]} workerMessages The WorkerMessages to send.\n * @property {string} location The location which contains the job\n */\n/**\n * @typedef SourceSplitShard\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} derivationMode DEPRECATED\n * @property {dataflow(v1b3).Source} source DEPRECATED\n */\n/**\n * @typedef CPUTime\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {number} rate Average CPU utilization rate (% non-idle cpu / second) since previous\nsample.\n* @property {string} timestamp Timestamp of the measurement.\n* @property {string} totalMs Total active CPU time across all cores (ie., non-idle) in milliseconds\nsince start-up.\n*/\n/**\n * @typedef Environment\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {dataflow(v1b3).WorkerPool[]} workerPools The worker pools. At least one &quot;harness&quot; worker pool must be\nspecified in order for the job to have workers.\n* @property {string} dataset The dataset for the current project where various workflow\nrelated tables are stored.\n\nThe supported resource type is:\n\nGoogle BigQuery:\n  bigquery.googleapis.com/{dataset}\n* @property {string[]} experiments The list of experiments to enable.\n* @property {object} internalExperiments Experimental settings.\n* @property {object} version A structure describing which components and their versions of the service\nare required in order to run the job.\n* @property {string} serviceAccountEmail Identity to run virtual machines as. Defaults to the default account.\n* @property {object} userAgent A description of the process that generated the request.\n* @property {object} sdkPipelineOptions The Cloud Dataflow SDK pipeline options specified by the user. These\noptions are passed through the service and are used to recreate the\nSDK pipeline options on the worker in a language agnostic and platform\nindependent way.\n* @property {string} clusterManagerApiService The type of cluster manager API to use.  If unknown or\nunspecified, the service will attempt to choose a reasonable\ndefault.  This should be in the form of the API service name,\ne.g. &quot;compute.googleapis.com&quot;.\n* @property {string} tempStoragePrefix The prefix of the resources the system should use for temporary\nstorage.  The system will append the suffix &quot;/temp-{JOBNAME} to\nthis resource prefix, where {JOBNAME} is the value of the\njob_name field.  The resulting bucket and object prefix is used\nas the prefix of the resources used to store temporary data\nneeded during the job execution.  NOTE: This will override the\nvalue in taskrunner_settings.\nThe supported resource type is:\n\nGoogle Cloud Storage:\n\n  storage.googleapis.com/{bucket}/{object}\n  bucket.storage.googleapis.com/{object}\n*/\n/**\n * @typedef StreamingComputationTask\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} taskType A type of streaming computation task.\n * @property {dataflow(v1b3).StreamingComputationRanges[]} computationRanges Contains ranges of a streaming computation this task should apply to.\n * @property {dataflow(v1b3).MountedDataDisk[]} dataDisks Describes the set of data disks this task should apply to.\n */\n/**\n * @typedef SendDebugCaptureRequest\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} componentId The internal component id for which debug information is sent.\n * @property {string} workerId The worker id, i.e., VM hostname.\n * @property {string} location The location which contains the job specified by job_id.\n * @property {string} data The encoded debug information.\n */\n/**\n * @typedef GetDebugConfigResponse\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} config The encoded debug configuration for the requested component.\n */\n/**\n * @typedef ComponentTransform\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} originalTransform User name for the original user transform with which this transform is\nmost closely associated.\n* @property {string} name Dataflow service generated name for this source.\n* @property {string} userName Human-readable name for this transform; may be user or system generated.\n*/\n/**\n * @typedef StreamingSetupTask\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {integer} workerHarnessPort The TCP port used by the worker to communicate with the Dataflow\nworker harness.\n* @property {boolean} drain The user has requested drain.\n* @property {integer} receiveWorkPort The TCP port on which the worker should listen for messages from\nother streaming computation workers.\n* @property {dataflow(v1b3).TopologyConfig} streamingComputationTopology The global topology of the streaming Dataflow job.\n*/\n/**\n * @typedef PubsubLocation\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {boolean} withAttributes If true, then the client has requested to get pubsub attributes.\n* @property {string} idLabel If set, contains a pubsub label from which to extract record ids.\nIf left empty, record deduplication will be strictly best effort.\n* @property {string} timestampLabel If set, contains a pubsub label from which to extract record timestamps.\nIf left empty, record timestamps will be generated upon arrival.\n* @property {string} topic A pubsub topic, in the form of\n&quot;pubsub.googleapis.com/topics/&lt;project-id&gt;/&lt;topic-name&gt;&quot;\n* @property {string} subscription A pubsub subscription, in the form of\n&quot;pubsub.googleapis.com/subscriptions/&lt;project-id&gt;/&lt;subscription-name&gt;&quot;\n* @property {boolean} dropLateData Indicates whether the pipeline allows late-arriving data.\n* @property {string} trackingSubscription If set, specifies the pubsub subscription that will be used for tracking\ncustom time timestamps for watermark estimation.\n*/\n/**\n * @typedef WorkerHealthReport\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {object[]} pods The pods running on the worker. See:\nhttp://kubernetes.io/v1.1/docs/api-reference/v1/definitions.html#_v1_pod\n\nThis field is used by the worker to send the status of the indvidual\ncontainers running on each worker.\n* @property {string} vmStartupTime The time the VM was booted.\n* @property {boolean} vmIsHealthy Whether the VM is healthy.\n* @property {string} reportInterval The interval at which the worker is sending health reports.\nThe default value of 0 should be interpreted as the field is not being\nexplicitly set by the worker.\n*/\n/**\n * @typedef JobMessage\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} time The timestamp of the message.\n* @property {string} id Identifies the message.  This is automatically generated by the\nservice; the caller should treat it as an opaque string.\n* @property {string} messageText The text of the message.\n* @property {string} messageImportance Importance level of the message.\n*/\n/**\n * @typedef ParameterMetadata\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {boolean} isOptional Optional. Whether the parameter is optional. Defaults to false.\n * @property {string} name Required. The name of the parameter.\n * @property {string[]} regexes Optional. Regexes that the parameter must match.\n * @property {string} label Required. The label to display for the parameter.\n * @property {string} helpText Required. The help text to display for the parameter.\n */\n/**\n * @typedef MultiOutputInfo\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} tag The id of the tag the user code will emit to this output by; this\nshould correspond to the tag of some SideInputInfo.\n*/\n/**\n * @typedef SourceSplitRequest\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).Source} source Specification of the source to be split.\n * @property {dataflow(v1b3).SourceSplitOptions} options Hints for tuning the splitting process.\n */\n/**\n * @typedef SourceGetMetadataResponse\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).SourceMetadata} metadata The computed metadata.\n */\n/**\n * @typedef ShellTask\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} command The shell command to run.\n * @property {integer} exitCode Exit code for the task.\n */\n/**\n * @typedef MetricShortId\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} shortId The service-generated short identifier for the metric.\n* @property {integer} metricIndex The index of the corresponding metric in\nthe ReportWorkItemStatusRequest. Required.\n*/\n/**\n * @typedef TaskRunnerSettings\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} streamingWorkerMainClass The streaming worker main class name.\n* @property {string} logUploadLocation Indicates where to put logs.  If this is not specified, the logs\nwill not be uploaded.\n\nThe supported resource type is:\n\nGoogle Cloud Storage:\n  storage.googleapis.com/{bucket}/{object}\n  bucket.storage.googleapis.com/{object}\n* @property {string} workflowFileName The file to store the workflow in.\n* @property {string} languageHint The suggested backend language.\n* @property {string} commandlinesFileName The file to store preprocessing commands in.\n* @property {string} tempStoragePrefix The prefix of the resources the taskrunner should use for\ntemporary storage.\n\nThe supported resource type is:\n\nGoogle Cloud Storage:\n  storage.googleapis.com/{bucket}/{object}\n  bucket.storage.googleapis.com/{object}\n* @property {string} baseTaskDir The location on the worker for task-specific subdirectories.\n* @property {string} baseUrl The base URL for the taskrunner to use when accessing Google Cloud APIs.\n\nWhen workers access Google Cloud APIs, they logically do so via\nrelative URLs.  If this field is specified, it supplies the base\nURL to use for resolving these relative URLs.  The normative\nalgorithm used is defined by RFC 1808, &quot;Relative Uniform Resource\nLocators&quot;.\n\nIf not specified, the default value is &quot;http://www.googleapis.com/&quot;\n* @property {boolean} logToSerialconsole Whether to send taskrunner log info to Google Compute Engine VM serial\nconsole.\n* @property {boolean} continueOnException Whether to continue taskrunner if an exception is hit.\n* @property {dataflow(v1b3).WorkerSettings} parallelWorkerSettings The settings to pass to the parallel worker harness.\n* @property {string} vmId The ID string of the VM.\n* @property {string} taskUser The UNIX user ID on the worker VM to use for tasks launched by\ntaskrunner; e.g. &quot;root&quot;.\n* @property {boolean} alsologtostderr Whether to also send taskrunner log info to stderr.\n* @property {string} taskGroup The UNIX group ID on the worker VM to use for tasks launched by\ntaskrunner; e.g. &quot;wheel&quot;.\n* @property {string} harnessCommand The command to launch the worker harness.\n* @property {string} logDir The directory on the VM to store logs.\n* @property {string} dataflowApiVersion The API version of endpoint, e.g. &quot;v1b3&quot;\n* @property {string[]} oauthScopes The OAuth2 scopes to be requested by the taskrunner in order to\naccess the Cloud Dataflow API.\n*/\n/**\n * @typedef Position\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} recordIndex Position is a record index.\n* @property {string} shufflePosition CloudPosition is a base64 encoded BatchShufflePosition (with FIXED\nsharding).\n* @property {dataflow(v1b3).ConcatPosition} concatPosition CloudPosition is a concat position.\n* @property {string} byteOffset Position is a byte offset.\n* @property {boolean} end Position is past all other positions. Also useful for the end\nposition of an unbounded range.\n* @property {string} key Position is a string key, ordered lexicographically.\n*/\n/**\n * @typedef Source\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {dataflow(v1b3).SourceMetadata} metadata Optionally, metadata for this source can be supplied right away,\navoiding a SourceGetMetadataOperation roundtrip\n(see SourceOperationRequest).\n\nThis field is meaningful only in the Source objects populated\nby the user (e.g. when filling in a DerivedSource).\nSource objects supplied by the framework to the user don&#39;t have\nthis field populated.\n* @property {object[]} baseSpecs While splitting, sources may specify the produced bundles\nas differences against another source, in order to save backend-side\nmemory and allow bigger jobs. For details, see SourceSplitRequest.\nTo support this use case, the full set of parameters of the source\nis logically obtained by taking the latest explicitly specified value\nof each parameter in the order:\nbase_specs (later items win), spec (overrides anything in base_specs).\n* @property {object} codec The codec to use to decode data read from the source.\n* @property {boolean} doesNotNeedSplitting Setting this value to true hints to the framework that the source\ndoesn&#39;t need splitting, and using SourceSplitRequest on it would\nyield SOURCE_SPLIT_OUTCOME_USE_CURRENT.\n\nE.g. a file splitter may set this to true when splitting a single file\ninto a set of byte ranges of appropriate size, and set this\nto false when splitting a filepattern into individual files.\nHowever, for efficiency, a file splitter may decide to produce\nfile subranges directly from the filepattern to avoid a splitting\nround-trip.\n\nSee SourceSplitRequest for an overview of the splitting process.\n\nThis field is meaningful only in the Source objects populated\nby the user (e.g. when filling in a DerivedSource).\nSource objects supplied by the framework to the user don&#39;t have\nthis field populated.\n* @property {object} spec The source to read from, plus its parameters.\n*/\n/**\n * @typedef SplitInt64\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {integer} highBits The high order bits, including the sign: n &gt;&gt; 32.\n * @property {integer} lowBits The low order bits: n &amp; 0xffffffff.\n */\n/**\n * @typedef WorkerPool\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} diskSourceImage Fully qualified source image for disks.\n* @property {dataflow(v1b3).Package[]} packages Packages to be installed on workers.\n* @property {string} teardownPolicy Sets the policy for determining when to turndown worker pool.\nAllowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and\n`TEARDOWN_NEVER`.\n`TEARDOWN_ALWAYS` means workers are always torn down regardless of whether\nthe job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down\nif the job succeeds. `TEARDOWN_NEVER` means the workers are never torn\ndown.\n\nIf the workers are not torn down by the service, they will\ncontinue to run and use Google Compute Engine VM resources in the\nuser&#39;s project until they are explicitly terminated by the user.\nBecause of this, Google recommends using the `TEARDOWN_ALWAYS`\npolicy except for small, manually supervised test jobs.\n\nIf unknown or unspecified, the service will attempt to choose a reasonable\ndefault.\n* @property {string} onHostMaintenance The action to take on host maintenance, as defined by the Google\nCompute Engine API.\n* @property {object} poolArgs Extra arguments for this worker pool.\n* @property {integer} diskSizeGb Size of root disk for VMs, in GB.  If zero or unspecified, the service will\nattempt to choose a reasonable default.\n* @property {string} workerHarnessContainerImage Required. Docker container image that executes the Cloud Dataflow worker\nharness, residing in Google Container Registry.\n* @property {string} machineType Machine type (e.g. &quot;n1-standard-1&quot;).  If empty or unspecified, the\nservice will attempt to choose a reasonable default.\n* @property {string} diskType Type of root disk for VMs.  If empty or unspecified, the service will\nattempt to choose a reasonable default.\n* @property {string} kind The kind of the worker pool; currently only `harness` and `shuffle`\nare supported.\n* @property {dataflow(v1b3).Disk[]} dataDisks Data disks that are used by a VM in this workflow.\n* @property {string} subnetwork Subnetwork to which VMs will be assigned, if desired.  Expected to be of\nthe form &quot;regions/REGION/subnetworks/SUBNETWORK&quot;.\n* @property {string} ipConfiguration Configuration for VM IPs.\n* @property {dataflow(v1b3).AutoscalingSettings} autoscalingSettings Settings for autoscaling of this WorkerPool.\n* @property {dataflow(v1b3).TaskRunnerSettings} taskrunnerSettings Settings passed through to Google Compute Engine workers when\nusing the standard Dataflow task runner.  Users should ignore\nthis field.\n* @property {object} metadata Metadata to set on the Google Compute Engine VMs.\n* @property {string} network Network to which VMs will be assigned.  If empty or unspecified,\nthe service will use the network &quot;default&quot;.\n* @property {string} defaultPackageSet The default package set to install.  This allows the service to\nselect a default set of packages which are useful to worker\nharnesses written in a particular language.\n* @property {integer} numThreadsPerWorker The number of threads per worker harness. If empty or unspecified, the\nservice will choose a number of threads (according to the number of cores\non the selected machine type for batch, or 1 by convention for streaming).\n* @property {integer} numWorkers Number of Google Compute Engine workers in this pool needed to\nexecute the job.  If zero or unspecified, the service will\nattempt to choose a reasonable default.\n* @property {string} zone Zone to run the worker pools in.  If empty or unspecified, the service\nwill attempt to choose a reasonable default.\n*/\n/**\n * @typedef SourceOperationRequest\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).SourceGetMetadataRequest} getMetadata Information about a request to get metadata about a source.\n * @property {dataflow(v1b3).SourceSplitRequest} split Information about a request to split a source.\n */\n/**\n * @typedef WorkItem\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {dataflow(v1b3).SeqMapTask} seqMapTask Additional information for SeqMapTask WorkItems.\n* @property {dataflow(v1b3).Package[]} packages Any required packages that need to be fetched in order to execute\nthis WorkItem.\n* @property {string} projectId Identifies the cloud project this WorkItem belongs to.\n* @property {string} reportStatusInterval Recommended reporting interval.\n* @property {dataflow(v1b3).SourceOperationRequest} sourceOperationTask Additional information for source operation WorkItems.\n* @property {dataflow(v1b3).StreamingSetupTask} streamingSetupTask Additional information for StreamingSetupTask WorkItems.\n* @property {dataflow(v1b3).StreamingConfigTask} streamingConfigTask Additional information for StreamingConfigTask WorkItems.\n* @property {string} leaseExpireTime Time when the lease on this Work will expire.\n* @property {string} initialReportIndex The initial index to use when reporting the status of the WorkItem.\n* @property {dataflow(v1b3).ShellTask} shellTask Additional information for ShellTask WorkItems.\n* @property {dataflow(v1b3).StreamingComputationTask} streamingComputationTask Additional information for StreamingComputationTask WorkItems.\n* @property {string} jobId Identifies the workflow job this WorkItem belongs to.\n* @property {string} id Identifies this WorkItem.\n* @property {string} configuration Work item-specific configuration as an opaque blob.\n* @property {dataflow(v1b3).MapTask} mapTask Additional information for MapTask WorkItems.\n*/\n/**\n * @typedef ResourceUtilizationReport\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).CPUTime[]} cpuTime CPU utilization samples.\n */\n/**\n * @typedef ReportedParallelism\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {boolean} isInfinite Specifies whether the parallelism is infinite. If true, &quot;value&quot; is\nignored.\nInfinite parallelism means the service will assume that the work item\ncan always be split into more non-empty work items by dynamic splitting.\nThis is a work-around for lack of support for infinity by the current\nJSON-based Java RPC stack.\n* @property {number} value Specifies the level of parallelism in case it is finite.\n*/\n/**\n * @typedef TopologyConfig\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {integer} forwardingKeyBits The size (in bits) of keys that will be assigned to source messages.\n * @property {object} userStageToComputationNameMap Maps user stage names to stable computation names.\n * @property {dataflow(v1b3).ComputationTopology[]} computations The computations associated with a streaming Dataflow job.\n * @property {dataflow(v1b3).DataDiskAssignment[]} dataDiskAssignments The disks assigned to a streaming Dataflow job.\n * @property {integer} persistentStateVersion Version number for persistent state.\n */\n/**\n * @typedef SourceSplitOptions\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} desiredBundleSizeBytes The source should be split into a set of bundles where the estimated size\nof each is approximately this many bytes.\n* @property {string} desiredShardSizeBytes DEPRECATED in favor of desired_bundle_size_bytes.\n*/\n/**\n * @typedef ReadInstruction\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).Source} source The source to read from.\n */\n/**\n * @typedef WorkerSettings\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} baseUrl The base URL for accessing Google Cloud APIs.\n\nWhen workers access Google Cloud APIs, they logically do so via\nrelative URLs.  If this field is specified, it supplies the base\nURL to use for resolving these relative URLs.  The normative\nalgorithm used is defined by RFC 1808, &quot;Relative Uniform Resource\nLocators&quot;.\n\nIf not specified, the default value is &quot;http://www.googleapis.com/&quot;\n* @property {boolean} reportingEnabled Whether to send work progress updates to the service.\n* @property {string} servicePath The Cloud Dataflow service path relative to the root URL, for example,\n&quot;dataflow/v1b3/projects&quot;.\n* @property {string} shuffleServicePath The Shuffle service path relative to the root URL, for example,\n&quot;shuffle/v1beta1&quot;.\n* @property {string} workerId The ID of the worker running this pipeline.\n* @property {string} tempStoragePrefix The prefix of the resources the system should use for temporary\nstorage.\n\nThe supported resource type is:\n\nGoogle Cloud Storage:\n\n  storage.googleapis.com/{bucket}/{object}\n  bucket.storage.googleapis.com/{object}\n*/\n/**\n * @typedef StreamingStageLocation\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} streamId Identifies the particular stream within the streaming Dataflow\njob.\n*/\n/**\n * @typedef DataDiskAssignment\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string[]} dataDisks Mounted data disks. The order is important a data disk&#39;s 0-based index in\nthis list defines which persistent directory the disk is mounted to, for\nexample the list of { &quot;myproject-1014-104817-4c2-harness-0-disk-0&quot; },\n{ &quot;myproject-1014-104817-4c2-harness-0-disk-1&quot; }.\n* @property {string} vmInstance VM instance name the data disks mounted to, for example\n&quot;myproject-1014-104817-4c2-harness-0&quot;.\n*/\n/**\n * @typedef ApproximateSplitRequest\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {dataflow(v1b3).Position} position A Position at which to split the work item.\n* @property {number} fractionConsumed A fraction at which to split the work item, from 0.0 (beginning of the\ninput) to 1.0 (end of the input).\n*/\n/**\n * @typedef Status\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {integer} code The status code, which should be an enum value of google.rpc.Code.\n* @property {string} message A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.\n* @property {object[]} details A list of messages that carry the error details.  There will be a\ncommon set of message types for APIs to use.\n*/\n/**\n * @typedef StreamLocation\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {dataflow(v1b3).CustomSourceLocation} customSourceLocation The stream is a custom source.\n* @property {dataflow(v1b3).StreamingStageLocation} streamingStageLocation The stream is part of another computation within the current\nstreaming Dataflow job.\n* @property {dataflow(v1b3).PubsubLocation} pubsubLocation The stream is a pubsub stream.\n* @property {dataflow(v1b3).StreamingSideInputLocation} sideInputLocation The stream is a streaming side input.\n*/\n/**\n * @typedef SendWorkerMessagesResponse\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).WorkerMessageResponse[]} workerMessageResponses The servers response to the worker messages.\n */\n/**\n * @typedef LeaseWorkItemResponse\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).WorkItem[]} workItems A list of the leased WorkItems.\n */\n/**\n * @typedef TransformSummary\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} name User provided name for this transform instance.\n * @property {string} id SDK generated id of this transform instance.\n * @property {dataflow(v1b3).DisplayData[]} displayData Transform-specific display data.\n * @property {string[]} outputCollectionName User  names for all collection outputs to this transform.\n * @property {string} kind Type of transform.\n * @property {string[]} inputCollectionName User names for all collection inputs to this transform.\n */\n/**\n * @typedef StreamingComputationConfig\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} systemName System defined name for this computation.\n * @property {string} stageName Stage name of this computation.\n * @property {dataflow(v1b3).ParallelInstruction[]} instructions Instructions that comprise the computation.\n * @property {string} computationId Unique identifier for this computation.\n */\n/**\n * @typedef Sink\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {object} codec The codec to use to encode data written to the sink.\n * @property {object} spec The sink to write to, plus its parameters.\n */\n/**\n * @typedef LaunchTemplateParameters\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).RuntimeEnvironment} environment The runtime environment for the job.\n * @property {object} parameters The runtime parameters to pass to the job.\n * @property {string} jobName Required. The job name to use for the created job.\n */\n/**\n * @typedef FlattenInstruction\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).InstructionInput[]} inputs Describes the inputs to the flatten instruction.\n */\n/**\n * @typedef PartialGroupByKeyInstruction\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {object} inputElementCodec The codec to use for interpreting an element in the input PTable.\n* @property {object} valueCombiningFn The value combining function to invoke.\n* @property {string} originalCombineValuesInputStoreName If this instruction includes a combining function this is the name of the\nintermediate store between the GBK and the CombineValues.\n* @property {dataflow(v1b3).SideInputInfo[]} sideInputs Zero or more side inputs.\n* @property {string} originalCombineValuesStepName If this instruction includes a combining function, this is the name of the\nCombineValues instruction lifted into this instruction.\n* @property {dataflow(v1b3).InstructionInput} input Describes the input to the partial group-by-key instruction.\n*/\n/**\n * @typedef InstructionInput\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {integer} producerInstructionIndex The index (origin zero) of the parallel instruction that produces\nthe output to be consumed by this input.  This index is relative\nto the list of instructions in this input&#39;s instruction&#39;s\ncontaining MapTask.\n* @property {integer} outputNum The output index (origin zero) within the producer.\n*/\n/**\n * @typedef StageSource\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} name Dataflow service generated name for this source.\n* @property {string} sizeBytes Size of the source, if measurable.\n* @property {string} userName Human-readable name for this source; may be user or system generated.\n* @property {string} originalTransformOrCollection User name for the original user transform or collection with which this\nsource is most closely associated.\n*/\n/**\n * @typedef StringList\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string[]} elements Elements of the list.\n */\n/**\n * @typedef DisplayData\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} int64Value Contains value if the data is of int64 type.\n* @property {string} durationValue Contains value if the data is of duration type.\n* @property {string} namespace The namespace for the key. This is usually a class name or programming\nlanguage namespace (i.e. python module) which defines the display data.\nThis allows a dax monitoring system to specially handle the data\nand perform custom rendering.\n* @property {number} floatValue Contains value if the data is of float type.\n* @property {string} key The key identifying the display data.\nThis is intended to be used as a label for the display data\nwhen viewed in a dax monitoring system.\n* @property {string} shortStrValue A possible additional shorter value to display.\nFor example a java_class_name_value of com.mypackage.MyDoFn\nwill be stored with MyDoFn as the short_str_value and\ncom.mypackage.MyDoFn as the java_class_name value.\nshort_str_value can be displayed and java_class_name_value\nwill be displayed as a tooltip.\n* @property {string} url An optional full URL.\n* @property {string} label An optional label to display in a dax UI for the element.\n* @property {string} timestampValue Contains value if the data is of timestamp type.\n* @property {boolean} boolValue Contains value if the data is of a boolean type.\n* @property {string} javaClassValue Contains value if the data is of java class type.\n* @property {string} strValue Contains value if the data is of string type.\n*/\n/**\n * @typedef LeaseWorkItemRequest\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} currentWorkerTime The current timestamp at the worker.\n* @property {string[]} workItemTypes Filter for WorkItem type.\n* @property {string} location The location which contains the WorkItem&#39;s job.\n* @property {string[]} workerCapabilities Worker capabilities. WorkItems might be limited to workers with specific\ncapabilities.\n* @property {string} workerId Identifies the worker leasing work -- typically the ID of the\nvirtual machine running the worker.\n* @property {string} requestedLeaseDuration The initial lease period.\n*/\n/**\n * @typedef GetDebugConfigRequest\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} location The location which contains the job specified by job_id.\n* @property {string} componentId The internal component id for which debug configuration is\nrequested.\n* @property {string} workerId The worker id, i.e., VM hostname.\n*/\n/**\n * @typedef GetTemplateResponse\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {dataflow(v1b3).Status} status The status of the get template request. Any problems with the\nrequest will be indicated in the error_details.\n* @property {dataflow(v1b3).TemplateMetadata} metadata The template metadata describing the template name, available\nparameters, etc.\n*/\n/**\n * @typedef ReportWorkItemStatusRequest\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} workerId The ID of the worker reporting the WorkItem status.  If this\ndoes not match the ID of the worker which the Dataflow service\nbelieves currently has the lease on the WorkItem, the report\nwill be dropped (with an error response).\n* @property {string} currentWorkerTime The current timestamp at the worker.\n* @property {string} location The location which contains the WorkItem&#39;s job.\n* @property {dataflow(v1b3).WorkItemStatus[]} workItemStatuses The order is unimportant, except that the order of the\nWorkItemServiceState messages in the ReportWorkItemStatusResponse\ncorresponds to the order of WorkItemStatus messages here.\n*/\n/**\n * @typedef PipelineDescription\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).TransformSummary[]} originalPipelineTransform Description of each transform in the pipeline and collections between them.\n * @property {dataflow(v1b3).DisplayData[]} displayData Pipeline level display data.\n * @property {dataflow(v1b3).ExecutionStageSummary[]} executionPipelineStage Description of each stage of execution of the pipeline.\n */\n/**\n * @typedef StreamingConfigTask\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {object} userStepToStateFamilyNameMap Map from user step names to state families.\n * @property {dataflow(v1b3).StreamingComputationConfig[]} streamingComputationConfigs Set of computation configuration information.\n */\n/**\n * @typedef Step\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} name The name that identifies the step. This must be unique for each\nstep with respect to all other steps in the Cloud Dataflow job.\n* @property {string} kind The kind of step in the Cloud Dataflow job.\n* @property {object} properties Named properties associated with the step. Each kind of\npredefined step has its own required set of properties.\nMust be provided on Create.  Only retrieved with JOB_VIEW_ALL.\n*/\n/**\n * @typedef JobExecutionInfo\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {object} stages A mapping from each stage to the information about that stage.\n */\n/**\n * @typedef FailedLocation\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} name The name of the failed location.\n */\n/**\n * @typedef Disk\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {integer} sizeGb Size of disk in GB.  If zero or unspecified, the service will\nattempt to choose a reasonable default.\n* @property {string} diskType Disk storage type, as defined by Google Compute Engine.  This\nmust be a disk type appropriate to the project and zone in which\nthe workers will run.  If unknown or unspecified, the service\nwill attempt to choose a reasonable default.\n\nFor example, the standard persistent disk type is a resource name\ntypically ending in &quot;pd-standard&quot;.  If SSD persistent disks are\navailable, the resource name typically ends with &quot;pd-ssd&quot;.  The\nactual valid values are defined the Google Compute Engine API,\nnot by the Cloud Dataflow API; consult the Google Compute Engine\ndocumentation for more information about determining the set of\navailable disk types for a particular project and zone.\n\nGoogle Compute Engine Disk types are local to a particular\nproject in a particular zone, and so the resource name will\ntypically look something like this:\n\ncompute.googleapis.com/projects/project-id/zones/zone/diskTypes/pd-standard\n* @property {string} mountPoint Directory in a VM where disk is mounted.\n*/\n/**\n * @typedef CounterMetadata\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} standardUnits System defined Units, see above enum.\n * @property {string} otherUnits A string referring to the unit type.\n * @property {string} kind Counter aggregation kind.\n * @property {string} description Human-readable description of the counter semantics.\n */\n/**\n * @typedef ListJobMessagesResponse\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} nextPageToken The token to obtain the next page of results if there are more.\n * @property {dataflow(v1b3).JobMessage[]} jobMessages Messages in ascending timestamp order.\n */\n/**\n * @typedef ApproximateReportedProgress\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {number} fractionConsumed Completion as fraction of the input consumed, from 0.0 (beginning, nothing\nconsumed), to 1.0 (end of the input, entire input consumed).\n* @property {dataflow(v1b3).ReportedParallelism} consumedParallelism Total amount of parallelism in the portion of input of this task that has\nalready been consumed and is no longer active. In the first two examples\nabove (see remaining_parallelism), the value should be 29 or 2\nrespectively.  The sum of remaining_parallelism and consumed_parallelism\nshould equal the total amount of parallelism in this work item.  If\nspecified, must be finite.\n* @property {dataflow(v1b3).ReportedParallelism} remainingParallelism Total amount of parallelism in the input of this task that remains,\n(i.e. can be delegated to this task and any new tasks via dynamic\nsplitting). Always at least 1 for non-finished work items and 0 for\nfinished.\n\n&quot;Amount of parallelism&quot; refers to how many non-empty parts of the input\ncan be read in parallel. This does not necessarily equal number\nof records. An input that can be read in parallel down to the\nindividual records is called &quot;perfectly splittable&quot;.\nAn example of non-perfectly parallelizable input is a block-compressed\nfile format where a block of records has to be read as a whole,\nbut different blocks can be read in parallel.\n\nExamples:\n* If we are processing record #30 (starting at 1) out of 50 in a perfectly\n  splittable 50-record input, this value should be 21 (20 remaining + 1\n  current).\n* If we are reading through block 3 in a block-compressed file consisting\n  of 5 blocks, this value should be 3 (since blocks 4 and 5 can be\n  processed in parallel by new tasks via dynamic splitting and the current\n  task remains processing block 3).\n* If we are reading through the last block in a block-compressed file,\n  or reading or processing the last record in a perfectly splittable\n  input, this value should be 1, because apart from the current task, no\n  additional remainder can be split off.\n* @property {dataflow(v1b3).Position} position A Position within the work to represent a progress.\n*/\n/**\n * @typedef IntegerList\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).SplitInt64[]} elements Elements of the list.\n */\n/**\n * @typedef StateFamilyConfig\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} stateFamily The state family value.\n * @property {boolean} isRead If true, this family corresponds to a read operation.\n */\n/**\n * @typedef ResourceUtilizationReportResponse\n * @memberOf! dataflow(v1b3)\n * @type object\n */\n/**\n * @typedef SourceSplitResponse\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {dataflow(v1b3).DerivedSource[]} bundles If outcome is SPLITTING_HAPPENED, then this is a list of bundles\ninto which the source was split. Otherwise this field is ignored.\nThis list can be empty, which means the source represents an empty input.\n* @property {dataflow(v1b3).SourceSplitShard[]} shards DEPRECATED in favor of bundles.\n* @property {string} outcome Indicates whether splitting happened and produced a list of bundles.\nIf this is USE_CURRENT_SOURCE_AS_IS, the current source should\nbe processed &quot;as is&quot; without splitting. &quot;bundles&quot; is ignored in this case.\nIf this is SPLITTING_HAPPENED, then &quot;bundles&quot; contains a list of\nbundles into which the source was split.\n*/\n/**\n * @typedef ParallelInstruction\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {dataflow(v1b3).InstructionOutput[]} outputs Describes the outputs of the instruction.\n* @property {string} name User-provided name of this operation.\n* @property {dataflow(v1b3).ReadInstruction} read Additional information for Read instructions.\n* @property {dataflow(v1b3).ParDoInstruction} parDo Additional information for ParDo instructions.\n* @property {dataflow(v1b3).FlattenInstruction} flatten Additional information for Flatten instructions.\n* @property {string} originalName System-defined name for the operation in the original workflow graph.\n* @property {string} systemName System-defined name of this operation.\nUnique across the workflow.\n* @property {dataflow(v1b3).WriteInstruction} write Additional information for Write instructions.\n* @property {dataflow(v1b3).PartialGroupByKeyInstruction} partialGroupByKey Additional information for PartialGroupByKey instructions.\n*/\n/**\n * @typedef Package\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} name The name of the package.\n* @property {string} location The resource to read the package from. The supported resource type is:\n\nGoogle Cloud Storage:\n\n  storage.googleapis.com/{bucket}\n  bucket.storage.googleapis.com/\n*/\n/**\n * @typedef KeyRangeDataDiskAssignment\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} start The start (inclusive) of the key range.\n* @property {string} dataDisk The name of the data disk where data for this range is stored.\nThis name is local to the Google Cloud Platform project and uniquely\nidentifies the disk within that project, for example\n&quot;myproject-1014-104817-4c2-harness-0-disk-1&quot;.\n* @property {string} end The end (exclusive) of the key range.\n*/\n/**\n * @typedef ParDoInstruction\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {object} userFn The user function to invoke.\n * @property {dataflow(v1b3).InstructionInput} input The input.\n * @property {integer} numOutputs The number of outputs.\n * @property {dataflow(v1b3).SideInputInfo[]} sideInputs Zero or more side inputs.\n * @property {dataflow(v1b3).MultiOutputInfo[]} multiOutputInfos Information about each of the outputs, if user_fn is a  MultiDoFn.\n */\n/**\n * @typedef MetricUpdate\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {any} set Worker-computed aggregate value for the &quot;Set&quot; aggregation kind.  The only\npossible value type is a list of Values whose type can be Long, Double,\nor String, according to the metric&#39;s type.  All Values in the list must\nbe of the same type.\n* @property {boolean} cumulative True if this metric is reported as the total cumulative aggregate\nvalue accumulated since the worker started working on this WorkItem.\nBy default this is false, indicating that this metric is reported\nas a delta that is not associated with any WorkItem.\n* @property {any} internal Worker-computed aggregate value for internal use by the Dataflow\nservice.\n* @property {string} kind Metric aggregation kind.  The possible metric aggregation kinds are\n&quot;Sum&quot;, &quot;Max&quot;, &quot;Min&quot;, &quot;Mean&quot;, &quot;Set&quot;, &quot;And&quot;, and &quot;Or&quot;.\nThe specified aggregation kind is case-insensitive.\n\nIf omitted, this is not an aggregated value but instead\na single metric sample value.\n* @property {any} scalar Worker-computed aggregate value for aggregation kinds &quot;Sum&quot;, &quot;Max&quot;, &quot;Min&quot;,\n&quot;And&quot;, and &quot;Or&quot;.  The possible value types are Long, Double, and Boolean.\n* @property {any} meanCount Worker-computed aggregate value for the &quot;Mean&quot; aggregation kind.\nThis holds the count of the aggregated values and is used in combination\nwith mean_sum above to obtain the actual mean aggregate value.\nThe only possible value type is Long.\n* @property {any} meanSum Worker-computed aggregate value for the &quot;Mean&quot; aggregation kind.\nThis holds the sum of the aggregated values and is used in combination\nwith mean_count below to obtain the actual mean aggregate value.\nThe only possible value types are Long and Double.\n* @property {string} updateTime Timestamp associated with the metric value. Optional when workers are\nreporting work progress; it will be filled in responses from the\nmetrics API.\n* @property {dataflow(v1b3).MetricStructuredName} name Name of the metric.\n*/\n/**\n * @typedef CounterStructuredName\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} componentStepName Name of the optimized step being executed by the workers.\n* @property {string} portion Portion of this counter, either key or value.\n* @property {string} originalStepName System generated name of the original step in the user&#39;s graph, before\noptimization.\n* @property {string} workerId ID of a particular worker.\n* @property {string} originNamespace A string containing a more specific namespace of the counter&#39;s origin.\n* @property {string} name Counter name. Not necessarily globally-unique, but unique within the\ncontext of the other fields.\nRequired.\n* @property {string} origin One of the standard Origins defined above.\n* @property {string} executionStepName Name of the stage. An execution step contains multiple component steps.\n*/\n/**\n * @typedef ApproximateProgress\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {number} percentComplete Obsolete.\n * @property {string} remainingTime Obsolete.\n * @property {dataflow(v1b3).Position} position Obsolete.\n */\n/**\n * @typedef WorkerMessageResponse\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).ResourceUtilizationReportResponse} workerMetricsResponse Service&#39;s response to reporting worker metrics (currently empty).\n * @property {dataflow(v1b3).WorkerHealthReportResponse} workerHealthReportResponse The service&#39;s response to a worker&#39;s health report.\n */\n/**\n * @typedef TemplateMetadata\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} name Required. The name of the template.\n* @property {dataflow(v1b3).ParameterMetadata[]} parameters The parameters for the template.\n* @property {string} description Optional. A description of the template.\n* @property {boolean} bypassTempDirValidation If true, will bypass the validation that the temp directory is\nwritable. This should only be used with templates for pipelines\nthat are guaranteed not to need to write to the temp directory,\nwhich is subject to change based on the optimizer.\n*/\n/**\n * @typedef WorkerMessage\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {dataflow(v1b3).WorkerHealthReport} workerHealthReport The health of a worker.\n* @property {dataflow(v1b3).WorkerMessageCode} workerMessageCode A worker message code.\n* @property {dataflow(v1b3).ResourceUtilizationReport} workerMetrics Resource metrics reported by workers.\n* @property {object} labels Labels are used to group WorkerMessages.\nFor example, a worker_message about a particular container\nmight have the labels:\n{ &quot;JOB_ID&quot;: &quot;2015-04-22&quot;,\n  &quot;WORKER_ID&quot;: &quot;wordcount-vm-2015…&quot;\n  &quot;CONTAINER_TYPE&quot;: &quot;worker&quot;,\n  &quot;CONTAINER_ID&quot;: &quot;ac1234def&quot;}\nLabel tags typically correspond to Label enum values. However, for ease\nof development other strings can be used as tags. LABEL_UNSPECIFIED should\nnot be used here.\n* @property {string} time The timestamp of the worker_message.\n*/\n/**\n * @typedef JobMetrics\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {string} metricTime Timestamp as of which metric values are current.\n * @property {dataflow(v1b3).MetricUpdate[]} metrics All metrics for this job.\n */\n/**\n * @typedef FloatingPointList\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {number[]} elements Elements of the list.\n */\n/**\n * @typedef CounterUpdate\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {dataflow(v1b3).SplitInt64} integer Integer value for Sum, Max, Min.\n* @property {dataflow(v1b3).CounterStructuredNameAndMetadata} structuredNameAndMetadata Counter structured name and metadata.\n* @property {dataflow(v1b3).IntegerList} integerList List of integers, for Set.\n* @property {number} floatingPoint Floating point value for Sum, Max, Min.\n* @property {dataflow(v1b3).IntegerMean} integerMean Integer mean aggregation value for Mean.\n* @property {boolean} cumulative True if this counter is reported as the total cumulative aggregate\nvalue accumulated since the worker started working on this WorkItem.\nBy default this is false, indicating that this counter is reported\nas a delta.\n* @property {any} internal Value for internally-defined counters used by the Dataflow service.\n* @property {dataflow(v1b3).FloatingPointMean} floatingPointMean Floating point mean aggregation value for Mean.\n* @property {boolean} boolean Boolean value for And, Or.\n* @property {dataflow(v1b3).NameAndKind} nameAndKind Counter name and aggregation type.\n* @property {dataflow(v1b3).DistributionUpdate} distribution Distribution data\n* @property {dataflow(v1b3).StringList} stringList List of strings, for Set.\n* @property {string} shortId The service-generated short identifier for this counter.\nThe short_id -&gt; (name, metadata) mapping is constant for the lifetime of\na job.\n* @property {dataflow(v1b3).FloatingPointList} floatingPointList List of floating point numbers, for Set.\n*/\n/**\n * @typedef SourceMetadata\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {boolean} producesSortedKeys Whether this source is known to produce key/value pairs with\nthe (encoded) keys in lexicographically sorted order.\n* @property {boolean} infinite Specifies that the size of this source is known to be infinite\n(this is a streaming source).\n* @property {string} estimatedSizeBytes An estimate of the total size (in bytes) of the data that would be\nread from this source.  This estimate is in terms of external storage\nsize, before any decompression or other processing done by the reader.\n*/\n/**\n * @typedef DistributionUpdate\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {dataflow(v1b3).SplitInt64} count The count of the number of elements present in the distribution.\n* @property {dataflow(v1b3).SplitInt64} min The minimum value present in the distribution.\n* @property {number} sumOfSquares Use a double since the sum of squares is likely to overflow int64.\n* @property {dataflow(v1b3).SplitInt64} max The maximum value present in the distribution.\n* @property {dataflow(v1b3).SplitInt64} sum Use an int64 since we&#39;d prefer the added precision. If overflow is a common\nproblem we can detect it and use an additional int64 or a double.\n*/\n/**\n * @typedef SourceFork\n * @memberOf! dataflow(v1b3)\n * @type object\n * @property {dataflow(v1b3).DerivedSource} residualSource DEPRECATED\n * @property {dataflow(v1b3).SourceSplitShard} primary DEPRECATED\n * @property {dataflow(v1b3).DerivedSource} primarySource DEPRECATED\n * @property {dataflow(v1b3).SourceSplitShard} residual DEPRECATED\n */\n/**\n * @typedef WorkerHealthReportResponse\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} reportInterval A positive value indicates the worker should change its reporting interval\nto the specified value.\n\nThe default value of zero means no change in report rate is requested by\nthe server.\n*/\n/**\n * @typedef WorkItemStatus\n * @memberOf! dataflow(v1b3)\n * @type object\n* @property {string} requestedLeaseDuration Amount of time the worker requests for its lease.\n* @property {string} reportIndex The report index.  When a WorkItem is leased, the lease will\ncontain an initial report index.  When a WorkItem&#39;s status is\nreported to the system, the report should be sent with\nthat report index, and the response will contain the index the\nworker should use for the next report.  Reports received with\nunexpected index values will be rejected by the service.\n\nIn order to preserve idempotency, the worker should not alter the\ncontents of a report, even if the worker must submit the same\nreport multiple times before getting back a response.  The worker\nshould not submit a subsequent report until the response for the\nprevious report had been received from the service.\n* @property {dataflow(v1b3).Position} stopPosition A worker may split an active map task in two parts, &quot;primary&quot; and\n&quot;residual&quot;, continuing to process the primary part and returning the\nresidual part into the pool of available work.\nThis event is called a &quot;dynamic split&quot; and is critical to the dynamic\nwork rebalancing feature. The two obtained sub-tasks are called\n&quot;parts&quot; of the split.\nThe parts, if concatenated, must represent the same input as would\nbe read by the current task if the split did not happen.\nThe exact way in which the original task is decomposed into the two\nparts is specified either as a position demarcating them\n(stop_position), or explicitly as two DerivedSources, if this\ntask consumes a user-defined source type (dynamic_source_split).\n\nThe &quot;current&quot; task is adjusted as a result of the split: after a task\nwith range [A, B) sends a stop_position update at C, its range is\nconsidered to be [A, C), e.g.:\n* Progress should be interpreted relative to the new range, e.g.\n  &quot;75% completed&quot; means &quot;75% of [A, C) completed&quot;\n* The worker should interpret proposed_stop_position relative to the\n  new range, e.g. &quot;split at 68%&quot; should be interpreted as\n  &quot;split at 68% of [A, C)&quot;.\n* If the worker chooses to split again using stop_position, only\n  stop_positions in [A, C) will be accepted.\n* Etc.\ndynamic_source_split has similar semantics: e.g., if a task with\nsource S splits using dynamic_source_split into {P, R}\n(where P and R must be together equivalent to S), then subsequent\nprogress and proposed_stop_position should be interpreted relative\nto P, and in a potential subsequent dynamic_source_split into {P&#39;, R&#39;},\nP&#39; and R&#39; must be together equivalent to P, etc.\n* @property {boolean} completed True if the WorkItem was completed (successfully or unsuccessfully).\n* @property {dataflow(v1b3).ApproximateReportedProgress} reportedProgress The worker&#39;s progress through this WorkItem.\n* @property {dataflow(v1b3).SourceFork} sourceFork DEPRECATED in favor of dynamic_source_split.\n* @property {dataflow(v1b3).CounterUpdate[]} counterUpdates Worker output counters for this WorkItem.\n* @property {string} workItemId Identifies the WorkItem.\n* @property {dataflow(v1b3).Status[]} errors Specifies errors which occurred during processing.  If errors are\nprovided, and completed = true, then the WorkItem is considered\nto have failed.\n* @property {dataflow(v1b3).MetricUpdate[]} metricUpdates DEPRECATED in favor of counter_updates.\n* @property {dataflow(v1b3).DynamicSourceSplit} dynamicSourceSplit See documentation of stop_position.\n* @property {dataflow(v1b3).SourceOperationResponse} sourceOperationResponse If the work item represented a SourceOperationRequest, and the work\nis completed, contains the result of the operation.\n* @property {dataflow(v1b3).ApproximateProgress} progress DEPRECATED in favor of reported_progress.\n*/\nmodule.exports = Dataflow;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/dataproc/v1alpha1.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Google Cloud Dataproc API\n *\n * Manages Hadoop-based clusters and jobs on Google Cloud Platform.\n *\n * @example\n * var google = require('googleapis');\n * var dataproc = google.dataproc('v1alpha1');\n *\n * @namespace dataproc\n * @type {Function}\n * @version v1alpha1\n * @variation v1alpha1\n * @param {object=} options Options for Dataproc\n */\nfunction Dataproc(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.operations = {\n\n    /**\n     * dataproc.operations.cancel\n     *\n     * @desc Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients may use Operations.GetOperation or other methods to check whether the cancellation succeeded or the operation completed despite cancellation.\n     *\n     * @example\n     * // PRE-REQUISITES:\n     * // ---------------\n     * // 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dataproc_component/quotas\n     * // 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'\n     * // 3. To install the client library and Application Default Credentials library, run:\n     * //    'npm install googleapis --save'\n     * var google = require('googleapis');\n     * var dataproc = google.dataproc('v1alpha1');\n     *\n     * google.auth.getApplicationDefault(function(err, authClient) {\n     *   if (err) {\n     *     console.log('Authentication failed because of ', err);\n     *     return;\n     *   }\n     *   if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *     var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *     authClient = authClient.createScoped(scopes);\n     *   }\n     *\n     *   var request = {\n     *     // TODO: Change placeholders below to appropriate parameter values for the 'cancel' method:\n     *\n     *     // The name of the operation resource to be cancelled.\n     *     name: \"\",\n     *     resource: {},\n     *     // Auth client\n     *     auth: authClient\n     *   };\n     *\n     *   dataproc.operations.cancel(request, function(err, result) {\n     *     if (err) {\n     *       console.log(err);\n     *     } else {\n     *       console.log(result);\n     *     }\n     *   });\n     * });\n     *\n     * @alias dataproc.operations.cancel\n     * @memberOf! dataproc(v1alpha1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.name The name of the operation resource to be cancelled.\n     * @param {dataproc(v1alpha1).CancelOperationRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    cancel: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://dataproc.googleapis.com/v1alpha1/{name}:cancel',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dataproc.operations.delete\n     *\n     * @desc Deletes a long-running operation. It indicates the client is no longer interested in the operation result. It does not cancel the operation.\n     *\n     * @example\n     * // PRE-REQUISITES:\n     * // ---------------\n     * // 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dataproc_component/quotas\n     * // 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'\n     * // 3. To install the client library and Application Default Credentials library, run:\n     * //    'npm install googleapis --save'\n     * var google = require('googleapis');\n     * var dataproc = google.dataproc('v1alpha1');\n     *\n     * google.auth.getApplicationDefault(function(err, authClient) {\n     *   if (err) {\n     *     console.log('Authentication failed because of ', err);\n     *     return;\n     *   }\n     *   if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *     var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *     authClient = authClient.createScoped(scopes);\n     *   }\n     *\n     *   var request = {\n     *     // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:\n     *\n     *     // The name of the operation resource to be deleted.\n     *     name: \"\",\n     *     // Auth client\n     *     auth: authClient\n     *   };\n     *\n     *   dataproc.operations.delete(request, function(err, result) {\n     *     if (err) {\n     *       console.log(err);\n     *     } else {\n     *       console.log(result);\n     *     }\n     *   });\n     * });\n     *\n     * @alias dataproc.operations.delete\n     * @memberOf! dataproc(v1alpha1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.name The name of the operation resource to be deleted.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://dataproc.googleapis.com/v1alpha1/{name}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dataproc.operations.get\n     *\n     * @desc Gets the latest state of a long-running operation. Clients may use this method to poll the operation result at intervals as recommended by the API service.\n     *\n     * @example\n     * // PRE-REQUISITES:\n     * // ---------------\n     * // 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dataproc_component/quotas\n     * // 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'\n     * // 3. To install the client library and Application Default Credentials library, run:\n     * //    'npm install googleapis --save'\n     * var google = require('googleapis');\n     * var dataproc = google.dataproc('v1alpha1');\n     *\n     * google.auth.getApplicationDefault(function(err, authClient) {\n     *   if (err) {\n     *     console.log('Authentication failed because of ', err);\n     *     return;\n     *   }\n     *   if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *     var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *     authClient = authClient.createScoped(scopes);\n     *   }\n     *\n     *   var request = {\n     *     // TODO: Change placeholders below to appropriate parameter values for the 'get' method:\n     *\n     *     // The operation resource name.\n     *     name: \"\",\n     *     // Auth client\n     *     auth: authClient\n     *   };\n     *\n     *   dataproc.operations.get(request, function(err, result) {\n     *     if (err) {\n     *       console.log(err);\n     *     } else {\n     *       console.log(result);\n     *     }\n     *   });\n     * });\n     *\n     * @alias dataproc.operations.get\n     * @memberOf! dataproc(v1alpha1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.name The operation resource name.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://dataproc.googleapis.com/v1alpha1/{name}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dataproc.operations.list\n     *\n     * @desc Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED.\n     *\n     * @example\n     * // PRE-REQUISITES:\n     * // ---------------\n     * // 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dataproc_component/quotas\n     * // 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'\n     * // 3. To install the client library and Application Default Credentials library, run:\n     * //    'npm install googleapis --save'\n     * var google = require('googleapis');\n     * var dataproc = google.dataproc('v1alpha1');\n     *\n     * google.auth.getApplicationDefault(function(err, authClient) {\n     *   if (err) {\n     *     console.log('Authentication failed because of ', err);\n     *     return;\n     *   }\n     *   if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *     var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *     authClient = authClient.createScoped(scopes);\n     *   }\n     *\n     *   var request = {\n     *     // TODO: Change placeholders below to appropriate parameter values for the 'list' method:\n     *\n     *     // The operation collection name.\n     *     name: \"\",\n     *     // Auth client\n     *     auth: authClient\n     *   };\n     *\n     *\n     *   var recur = function(err, result) {\n     *     if (err) {\n     *       console.log(err);\n     *     } else {\n     *       console.log(result);\n     *       if (result.nextPageToken) {\n     *         request.pageToken = result.nextPageToken;\n     *         dataproc.operations.list(request, recur);\n     *       }\n     *     }\n     *   };\n     *\n     *   dataproc.operations.list(request, recur);\n     * });\n     *\n     * @alias dataproc.operations.list\n     * @memberOf! dataproc(v1alpha1)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Required A JSON object that contains filters for the list operation, in the format {\"key1\":\"value1\",\"key2\":\"value2\", ..., }. Possible keys include project_id, cluster_name, and operation_state_matcher.If project_id is set, requests the list of operations that belong to the specified Google Cloud Platform project ID. This key is required.If cluster_name is set, requests the list of operations that were submitted to the specified cluster name. This key is optional.If operation_state_matcher is set, requests the list of operations that match one of the following status options: ALL, ACTIVE, or NON_ACTIVE.\n     * @param {string} params.name The operation collection name.\n     * @param {string=} params.pageToken The standard List page token.\n     * @param {integer=} params.pageSize The standard List page size.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://dataproc.googleapis.com/v1alpha1/{name}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.projects = {\n\n    regions: {\n\n      jobs: {\n\n        /**\n         * dataproc.projects.regions.jobs.submit\n         *\n         * @desc Submits a job to a cluster.\n         *\n         * @example\n         * // PRE-REQUISITES:\n         * // ---------------\n         * // 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at\n         * //    https://console.developers.google.com/apis/api/dataproc_component/quotas\n         * // 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'\n         * // 3. To install the client library and Application Default Credentials library, run:\n         * //    'npm install googleapis --save'\n         * var google = require('googleapis');\n         * var dataproc = google.dataproc('v1alpha1');\n         *\n         * google.auth.getApplicationDefault(function(err, authClient) {\n         *   if (err) {\n         *     console.log('Authentication failed because of ', err);\n         *     return;\n         *   }\n         *   if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n         *     var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n         *     authClient = authClient.createScoped(scopes);\n         *   }\n         *\n         *   var request = {\n         *     // TODO: Change placeholders below to appropriate parameter values for the 'submit' method:\n         *\n         *     // [Required] The ID of the Google Cloud Platform project that the job belongs to.\n         *     projectId: \"\",\n         *     // [Required] The Dataproc region in which to handle the request.\n         *     region: \"\",\n         *     resource: {},\n         *     // Auth client\n         *     auth: authClient\n         *   };\n         *\n         *   dataproc.projects.regions.jobs.submit(request, function(err, result) {\n         *     if (err) {\n         *       console.log(err);\n         *     } else {\n         *       console.log(result);\n         *     }\n         *   });\n         * });\n         *\n         * @alias dataproc.projects.regions.jobs.submit\n         * @memberOf! dataproc(v1alpha1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.region Required The Dataproc region in which to handle the request.\n         * @param {string} params.projectId Required The ID of the Google Cloud Platform project that the job belongs to.\n         * @param {dataproc(v1alpha1).SubmitJobRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        submit: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataproc.googleapis.com/v1alpha1/projects/{projectId}/regions/{region}/jobs:submit',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region'],\n            pathParams: ['region', 'projectId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * dataproc.projects.regions.jobs.delete\n         *\n         * @desc Deletes the job from the project. If the job is active, the delete fails, and the response returns FAILED_PRECONDITION.\n         *\n         * @example\n         * // PRE-REQUISITES:\n         * // ---------------\n         * // 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at\n         * //    https://console.developers.google.com/apis/api/dataproc_component/quotas\n         * // 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'\n         * // 3. To install the client library and Application Default Credentials library, run:\n         * //    'npm install googleapis --save'\n         * var google = require('googleapis');\n         * var dataproc = google.dataproc('v1alpha1');\n         *\n         * google.auth.getApplicationDefault(function(err, authClient) {\n         *   if (err) {\n         *     console.log('Authentication failed because of ', err);\n         *     return;\n         *   }\n         *   if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n         *     var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n         *     authClient = authClient.createScoped(scopes);\n         *   }\n         *\n         *   var request = {\n         *     // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:\n         *\n         *     // [Required] The ID of the Google Cloud Platform project that the job belongs to.\n         *     projectId: \"\",\n         *     // [Required] The Dataproc region in which to handle the request.\n         *     region: \"\",\n         *     // [Required] The job ID.\n         *     jobId: \"\",\n         *     // Auth client\n         *     auth: authClient\n         *   };\n         *\n         *   dataproc.projects.regions.jobs.delete(request, function(err, result) {\n         *     if (err) {\n         *       console.log(err);\n         *     } else {\n         *       console.log(result);\n         *     }\n         *   });\n         * });\n         *\n         * @alias dataproc.projects.regions.jobs.delete\n         * @memberOf! dataproc(v1alpha1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.region Required The Dataproc region in which to handle the request.\n         * @param {string} params.projectId Required The ID of the Google Cloud Platform project that the job belongs to.\n         * @param {string} params.jobId Required The job ID.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        delete: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataproc.googleapis.com/v1alpha1/projects/{projectId}/regions/{region}/jobs/{jobId}',\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region', 'jobId'],\n            pathParams: ['region', 'projectId', 'jobId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * dataproc.projects.regions.jobs.list\n         *\n         * @desc Lists regions/{region}/jobs in a project.\n         *\n         * @alias dataproc.projects.regions.jobs.list\n         * @memberOf! dataproc(v1alpha1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.projectId Required The ID of the Google Cloud Platform project that the job belongs to.\n         * @param {string} params.region Required The Dataproc region in which to handle the request.\n         * @param {dataproc(v1alpha1).ListJobsRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataproc.googleapis.com/v1alpha1/projects/{projectId}/regions/{region}/jobs:list',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region'],\n            pathParams: ['projectId', 'region'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * dataproc.projects.regions.jobs.cancel\n         *\n         * @desc Starts a job cancellation request. To access the job resource after cancellation, call regions/{region}/jobs:list or regions/{region}/jobs:get.\n         *\n         * @example\n         * // PRE-REQUISITES:\n         * // ---------------\n         * // 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at\n         * //    https://console.developers.google.com/apis/api/dataproc_component/quotas\n         * // 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'\n         * // 3. To install the client library and Application Default Credentials library, run:\n         * //    'npm install googleapis --save'\n         * var google = require('googleapis');\n         * var dataproc = google.dataproc('v1alpha1');\n         *\n         * google.auth.getApplicationDefault(function(err, authClient) {\n         *   if (err) {\n         *     console.log('Authentication failed because of ', err);\n         *     return;\n         *   }\n         *   if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n         *     var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n         *     authClient = authClient.createScoped(scopes);\n         *   }\n         *\n         *   var request = {\n         *     // TODO: Change placeholders below to appropriate parameter values for the 'cancel' method:\n         *\n         *     // [Required] The ID of the Google Cloud Platform project that the job belongs to.\n         *     projectId: \"\",\n         *     // [Required] The Dataproc region in which to handle the request.\n         *     region: \"\",\n         *     // [Required] The job ID.\n         *     jobId: \"\",\n         *     resource: {},\n         *     // Auth client\n         *     auth: authClient\n         *   };\n         *\n         *   dataproc.projects.regions.jobs.cancel(request, function(err, result) {\n         *     if (err) {\n         *       console.log(err);\n         *     } else {\n         *       console.log(result);\n         *     }\n         *   });\n         * });\n         *\n         * @alias dataproc.projects.regions.jobs.cancel\n         * @memberOf! dataproc(v1alpha1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.projectId Required The ID of the Google Cloud Platform project that the job belongs to.\n         * @param {string} params.jobId Required The job ID.\n         * @param {string} params.region Required The Dataproc region in which to handle the request.\n         * @param {dataproc(v1alpha1).CancelJobRequest} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        cancel: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataproc.googleapis.com/v1alpha1/projects/{projectId}/regions/{region}/jobs/{jobId}:cancel',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region', 'jobId'],\n            pathParams: ['projectId', 'jobId', 'region'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * dataproc.projects.regions.jobs.patch\n         *\n         * @desc Updates a job in a project.\n         *\n         * @alias dataproc.projects.regions.jobs.patch\n         * @memberOf! dataproc(v1alpha1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.projectId Required The ID of the Google Cloud Platform project that the job belongs to.\n         * @param {string} params.jobId Required The job ID.\n         * @param {string} params.region Required The Dataproc region in which to handle the request.\n         * @param {string=} params.updateMask Required Specifies the path, relative to <code>Job</code>, of the field to update. For example, to update the labels of a Job the <code>update_mask</code> parameter would be specified as <code>labels</code>, and the PATCH request body would specify the new value. <strong>Note:</strong> Currently, <code>labels</code> is the only field that can be updated.\n         * @param {dataproc(v1alpha1).Job} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        patch: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataproc.googleapis.com/v1alpha1/projects/{projectId}/regions/{region}/jobs/{jobId}',\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region', 'jobId'],\n            pathParams: ['projectId', 'jobId', 'region'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * dataproc.projects.regions.jobs.get\n         *\n         * @desc Gets the resource representation for a job in a project.\n         *\n         * @example\n         * // PRE-REQUISITES:\n         * // ---------------\n         * // 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at\n         * //    https://console.developers.google.com/apis/api/dataproc_component/quotas\n         * // 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'\n         * // 3. To install the client library and Application Default Credentials library, run:\n         * //    'npm install googleapis --save'\n         * var google = require('googleapis');\n         * var dataproc = google.dataproc('v1alpha1');\n         *\n         * google.auth.getApplicationDefault(function(err, authClient) {\n         *   if (err) {\n         *     console.log('Authentication failed because of ', err);\n         *     return;\n         *   }\n         *   if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n         *     var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n         *     authClient = authClient.createScoped(scopes);\n         *   }\n         *\n         *   var request = {\n         *     // TODO: Change placeholders below to appropriate parameter values for the 'get' method:\n         *\n         *     // [Required] The ID of the Google Cloud Platform project that the job belongs to.\n         *     projectId: \"\",\n         *     // [Required] The Dataproc region in which to handle the request.\n         *     region: \"\",\n         *     // [Required] The job ID.\n         *     jobId: \"\",\n         *     // Auth client\n         *     auth: authClient\n         *   };\n         *\n         *   dataproc.projects.regions.jobs.get(request, function(err, result) {\n         *     if (err) {\n         *       console.log(err);\n         *     } else {\n         *       console.log(result);\n         *     }\n         *   });\n         * });\n         *\n         * @alias dataproc.projects.regions.jobs.get\n         * @memberOf! dataproc(v1alpha1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.region Required The Dataproc region in which to handle the request.\n         * @param {string} params.projectId Required The ID of the Google Cloud Platform project that the job belongs to.\n         * @param {string} params.jobId Required The job ID.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        get: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataproc.googleapis.com/v1alpha1/projects/{projectId}/regions/{region}/jobs/{jobId}',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region', 'jobId'],\n            pathParams: ['region', 'projectId', 'jobId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        }\n      },\n\n      clusters: {\n\n        /**\n         * dataproc.projects.regions.clusters.delete\n         *\n         * @desc Request to delete a cluster in a project.\n         *\n         * @example\n         * // PRE-REQUISITES:\n         * // ---------------\n         * // 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at\n         * //    https://console.developers.google.com/apis/api/dataproc_component/quotas\n         * // 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'\n         * // 3. To install the client library and Application Default Credentials library, run:\n         * //    'npm install googleapis --save'\n         * var google = require('googleapis');\n         * var dataproc = google.dataproc('v1alpha1');\n         *\n         * google.auth.getApplicationDefault(function(err, authClient) {\n         *   if (err) {\n         *     console.log('Authentication failed because of ', err);\n         *     return;\n         *   }\n         *   if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n         *     var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n         *     authClient = authClient.createScoped(scopes);\n         *   }\n         *\n         *   var request = {\n         *     // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:\n         *\n         *     // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.\n         *     projectId: \"\",\n         *     // [Required] The Dataproc region in which to handle the request.\n         *     region: \"\",\n         *     // [Required] The cluster name.\n         *     clusterName: \"\",\n         *     // Auth client\n         *     auth: authClient\n         *   };\n         *\n         *   dataproc.projects.regions.clusters.delete(request, function(err, result) {\n         *     if (err) {\n         *       console.log(err);\n         *     } else {\n         *       console.log(result);\n         *     }\n         *   });\n         * });\n         *\n         * @alias dataproc.projects.regions.clusters.delete\n         * @memberOf! dataproc(v1alpha1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.projectId Required The ID of the Google Cloud Platform project that the cluster belongs to.\n         * @param {string} params.region Required The Dataproc region in which to handle the request.\n         * @param {string} params.clusterName Required The cluster name.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        delete: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataproc.googleapis.com/v1alpha1/projects/{projectId}/regions/{region}/clusters/{clusterName}',\n              method: 'DELETE'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region', 'clusterName'],\n            pathParams: ['projectId', 'region', 'clusterName'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * dataproc.projects.regions.clusters.patch\n         *\n         * @desc Request to update a cluster in a project.\n         *\n         * @example\n         * // PRE-REQUISITES:\n         * // ---------------\n         * // 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at\n         * //    https://console.developers.google.com/apis/api/dataproc_component/quotas\n         * // 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'\n         * // 3. To install the client library and Application Default Credentials library, run:\n         * //    'npm install googleapis --save'\n         * var google = require('googleapis');\n         * var dataproc = google.dataproc('v1alpha1');\n         *\n         * google.auth.getApplicationDefault(function(err, authClient) {\n         *   if (err) {\n         *     console.log('Authentication failed because of ', err);\n         *     return;\n         *   }\n         *   if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n         *     var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n         *     authClient = authClient.createScoped(scopes);\n         *   }\n         *\n         *   var request = {\n         *     // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:\n         *\n         *     // [Required] The ID of the Google Cloud Platform project the cluster belongs to.\n         *     projectId: \"\",\n         *     // [Required] The Dataproc region in which to handle the request.\n         *     region: \"\",\n         *     // [Required] The cluster name.\n         *     clusterName: \"\",\n         *     resource: {},\n         *     // Auth client\n         *     auth: authClient\n         *   };\n         *\n         *   dataproc.projects.regions.clusters.patch(request, function(err, result) {\n         *     if (err) {\n         *       console.log(err);\n         *     } else {\n         *       console.log(result);\n         *     }\n         *   });\n         * });\n         *\n         * @alias dataproc.projects.regions.clusters.patch\n         * @memberOf! dataproc(v1alpha1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.region Required The Dataproc region in which to handle the request.\n         * @param {string=} params.updateMask Required Specifies the path, relative to <code>Cluster</code>, of the field to update. For example, to change the number of workers in a cluster to 5, the <code>update_mask</code> parameter would be specified as <code>\"configuration.worker_configuration.num_instances,\"</code> and the PATCH request body would specify the new value, as follows: {   \"configuration\":{     \"workerConfiguration\":{       \"numInstances\":\"5\"     }   } } <strong>Note:</strong> Currently, <code>configuration.worker_configuration.num_instances</code> is the only field that can be updated.\n         * @param {string} params.clusterName Required The cluster name.\n         * @param {string} params.projectId Required The ID of the Google Cloud Platform project the cluster belongs to.\n         * @param {dataproc(v1alpha1).Cluster} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        patch: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataproc.googleapis.com/v1alpha1/projects/{projectId}/regions/{region}/clusters/{clusterName}',\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region', 'clusterName'],\n            pathParams: ['region', 'clusterName', 'projectId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * dataproc.projects.regions.clusters.get\n         *\n         * @desc Request to get the resource representation for a cluster in a project.\n         *\n         * @example\n         * // PRE-REQUISITES:\n         * // ---------------\n         * // 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at\n         * //    https://console.developers.google.com/apis/api/dataproc_component/quotas\n         * // 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'\n         * // 3. To install the client library and Application Default Credentials library, run:\n         * //    'npm install googleapis --save'\n         * var google = require('googleapis');\n         * var dataproc = google.dataproc('v1alpha1');\n         *\n         * google.auth.getApplicationDefault(function(err, authClient) {\n         *   if (err) {\n         *     console.log('Authentication failed because of ', err);\n         *     return;\n         *   }\n         *   if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n         *     var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n         *     authClient = authClient.createScoped(scopes);\n         *   }\n         *\n         *   var request = {\n         *     // TODO: Change placeholders below to appropriate parameter values for the 'get' method:\n         *\n         *     // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.\n         *     projectId: \"\",\n         *     // [Required] The Dataproc region in which to handle the request.\n         *     region: \"\",\n         *     // [Required] The cluster name.\n         *     clusterName: \"\",\n         *     // Auth client\n         *     auth: authClient\n         *   };\n         *\n         *   dataproc.projects.regions.clusters.get(request, function(err, result) {\n         *     if (err) {\n         *       console.log(err);\n         *     } else {\n         *       console.log(result);\n         *     }\n         *   });\n         * });\n         *\n         * @alias dataproc.projects.regions.clusters.get\n         * @memberOf! dataproc(v1alpha1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.projectId Required The ID of the Google Cloud Platform project that the cluster belongs to.\n         * @param {string} params.region Required The Dataproc region in which to handle the request.\n         * @param {string} params.clusterName Required The cluster name.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        get: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataproc.googleapis.com/v1alpha1/projects/{projectId}/regions/{region}/clusters/{clusterName}',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region', 'clusterName'],\n            pathParams: ['projectId', 'region', 'clusterName'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * dataproc.projects.regions.clusters.list\n         *\n         * @desc Request a list of all regions/{region}/clusters in a project.\n         *\n         * @example\n         * // PRE-REQUISITES:\n         * // ---------------\n         * // 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at\n         * //    https://console.developers.google.com/apis/api/dataproc_component/quotas\n         * // 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'\n         * // 3. To install the client library and Application Default Credentials library, run:\n         * //    'npm install googleapis --save'\n         * var google = require('googleapis');\n         * var dataproc = google.dataproc('v1alpha1');\n         *\n         * google.auth.getApplicationDefault(function(err, authClient) {\n         *   if (err) {\n         *     console.log('Authentication failed because of ', err);\n         *     return;\n         *   }\n         *   if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n         *     var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n         *     authClient = authClient.createScoped(scopes);\n         *   }\n         *\n         *   var request = {\n         *     // TODO: Change placeholders below to appropriate parameter values for the 'list' method:\n         *\n         *     // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.\n         *     projectId: \"\",\n         *     // [Required] The Dataproc region in which to handle the request.\n         *     region: \"\",\n         *     // Auth client\n         *     auth: authClient\n         *   };\n         *\n         *\n         *   var recur = function(err, result) {\n         *     if (err) {\n         *       console.log(err);\n         *     } else {\n         *       console.log(result);\n         *       if (result.nextPageToken) {\n         *         request.pageToken = result.nextPageToken;\n         *         dataproc.projects.regions.clusters.list(request, recur);\n         *       }\n         *     }\n         *   };\n         *\n         *   dataproc.projects.regions.clusters.list(request, recur);\n         * });\n         *\n         * @alias dataproc.projects.regions.clusters.list\n         * @memberOf! dataproc(v1alpha1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string=} params.pageToken The standard List page token.\n         * @param {integer=} params.pageSize The standard List page size.\n         * @param {string} params.projectId Required The ID of the Google Cloud Platform project that the cluster belongs to.\n         * @param {string} params.region Required The Dataproc region in which to handle the request.\n         * @param {string=} params.filter Optional A filter constraining which clusters to list. Valid filters contain label terms such as: labels.key1 = val1 AND (-labels.k2 = val2 OR labels.k3 = val3)\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataproc.googleapis.com/v1alpha1/projects/{projectId}/regions/{region}/clusters',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region'],\n            pathParams: ['projectId', 'region'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * dataproc.projects.regions.clusters.create\n         *\n         * @desc Request to create a cluster in a project.\n         *\n         * @example\n         * // PRE-REQUISITES:\n         * // ---------------\n         * // 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at\n         * //    https://console.developers.google.com/apis/api/dataproc_component/quotas\n         * // 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from\n         * //    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'\n         * // 3. To install the client library and Application Default Credentials library, run:\n         * //    'npm install googleapis --save'\n         * var google = require('googleapis');\n         * var dataproc = google.dataproc('v1alpha1');\n         *\n         * google.auth.getApplicationDefault(function(err, authClient) {\n         *   if (err) {\n         *     console.log('Authentication failed because of ', err);\n         *     return;\n         *   }\n         *   if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n         *     var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n         *     authClient = authClient.createScoped(scopes);\n         *   }\n         *\n         *   var request = {\n         *     // TODO: Change placeholders below to appropriate parameter values for the 'create' method:\n         *\n         *     // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.\n         *     projectId: \"\",\n         *     // [Required] The Dataproc region in which to handle the request.\n         *     region: \"\",\n         *     resource: {},\n         *     // Auth client\n         *     auth: authClient\n         *   };\n         *\n         *   dataproc.projects.regions.clusters.create(request, function(err, result) {\n         *     if (err) {\n         *       console.log(err);\n         *     } else {\n         *       console.log(result);\n         *     }\n         *   });\n         * });\n         *\n         * @alias dataproc.projects.regions.clusters.create\n         * @memberOf! dataproc(v1alpha1)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.region Required The Dataproc region in which to handle the request.\n         * @param {string} params.projectId Required The ID of the Google Cloud Platform project that the cluster belongs to.\n         * @param {dataproc(v1alpha1).Cluster} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://dataproc.googleapis.com/v1alpha1/projects/{projectId}/regions/{region}/clusters',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'region'],\n            pathParams: ['region', 'projectId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        }\n      }\n    }\n  };\n}\n\n/**\n * @typedef JobReference\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string} projectId Required The ID of the Google Cloud Platform project that the job belongs to.\n * @property {string} jobId Required The job ID, which must be unique within the project. The job ID is generated by the server upon job submission or provided by the user as a means to perform retries without creating duplicate jobs. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 100 characters.\n */\n/**\n * @typedef SubmitJobRequest\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {dataproc(v1alpha1).Job} job Required The job resource.\n */\n/**\n * @typedef Status\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {integer} code The status code, which should be an enum value of google.rpc.Code.\n * @property {string} message A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.\n * @property {object[]} details A list of messages that carry the error details. There will be a common set of message types for APIs to use.\n */\n/**\n * @typedef JobScheduling\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {integer} maxFailuresPerHour Optional Maximum number of times per hour a driver may be restarted as a result of driver terminating with non-zero code before job is reported failed.A job may be reported as thrashing if driver exits with non-zero code 4 times within 10 minute window.Maximum value is 10.\n */\n/**\n * @typedef NodeInitializationAction\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string} executionTimeout Optional Amount of time executable has to complete. Default is 10 minutes. Cluster creation fails with an explanatory error message (the name of the executable that caused the error and the exceeded timeout period) if the executable is not completed at end of the timeout period.\n * @property {string} executableFile Required Google Cloud Storage URI of executable file.\n */\n/**\n * @typedef ListJobsResponse\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {dataproc(v1alpha1).Job[]} jobs Output-only Jobs list.\n * @property {string} nextPageToken Optional This token is included in the response if there are more results to fetch. To fetch additional results, provide this value as the page_token in a subsequent &lt;code&gt;ListJobsRequest&lt;/code&gt;.\n */\n/**\n * @typedef CancelJobRequest\n * @memberOf! dataproc(v1alpha1)\n * @type object\n */\n/**\n * @typedef SparkSqlJob\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {dataproc(v1alpha1).LoggingConfiguration} loggingConfiguration Optional The runtime log configuration for job execution.\n * @property {object} properties Optional A mapping of property names to values, used to configure Spark SQL&#39;s SparkConf. Properties that conflict with values set by the Cloud Dataproc API may be overwritten.\n * @property {string} queryFileUri The HCFS URI of the script that contains SQL queries.\n * @property {dataproc(v1alpha1).QueryList} queryList A list of queries.\n * @property {string[]} jarFileUris Optional HCFS URIs of jar files to be added to the Spark CLASSPATH.\n * @property {object} scriptVariables Optional Mapping of query variable names to values (equivalent to the Spark SQL command: SET name=&quot;value&quot;;).\n */\n/**\n * @typedef Cluster\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string} createTime Output-only The timestamp of cluster creation.\n * @property {object} labels Optional The labels to associate with this cluster.Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62}Label values must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}\\p{N}_-{0,63}No more than 64 labels can be associated with a given cluster.\n * @property {dataproc(v1alpha1).ClusterStatus} status Output-only Cluster status.\n * @property {dataproc(v1alpha1).ClusterMetrics} metrics Contains cluster daemon metrics such as HDFS and YARN stats.\n * @property {dataproc(v1alpha1).ClusterStatus[]} statusHistory Output-only Previous cluster statuses.\n * @property {string} clusterName Required The cluster name. Cluster names within a project must be unique. Names from deleted clusters can be reused.\n * @property {string} clusterUuid Output-only A cluster UUID (Unique Universal Identifier). Cloud Dataproc generates this value when it creates the cluster.\n * @property {string} projectId Required The Google Cloud Platform project ID that the cluster belongs to.\n * @property {dataproc(v1alpha1).ClusterConfiguration} configuration Required The cluster configuration. It may differ from a user&#39;s initial configuration due to Cloud Dataproc setting of default values and updating clusters.\n */\n/**\n * @typedef ListOperationsResponse\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {dataproc(v1alpha1).Operation[]} operations A list of operations that match the specified filter in the request.\n * @property {string} nextPageToken The standard List next-page token.\n */\n/**\n * @typedef OperationMetadata\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {dataproc(v1alpha1).OperationStatus} status Output-only Current operation status.\n * @property {string} state A message containing the operation state.\n * @property {string} details A message containing any operation metadata details.\n * @property {string} clusterUuid Cluster UUId for the operation.\n * @property {string} clusterName Name of the cluster for the operation.\n * @property {string} innerState A message containing the detailed operation state.\n * @property {string} endTime The time that the operation completed.\n * @property {string} startTime The time that the operation was started by the server.\n * @property {string[]} warnings Output-only Errors encountered during operation execution.\n * @property {string} insertTime The time that the operation was requested.\n * @property {dataproc(v1alpha1).OperationStatus[]} statusHistory Output-only Previous operation status.\n * @property {string} operationType Output-only The operation type.\n * @property {string} description Output-only Short description of operation.\n */\n/**\n * @typedef JobPlacement\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string} clusterName Required The name of the cluster where the job will be submitted.\n * @property {string} clusterUuid Output-only A cluster UUID generated by the Dataproc service when the job is submitted.\n */\n/**\n * @typedef ClusterStatus\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string} detail Optional details of cluster&#39;s state.\n * @property {string} state The cluster&#39;s state.\n * @property {string} stateStartTime Time when this state was entered.\n * @property {string} substate Output-only Additional state information that includes status reported by the agent.\n */\n/**\n * @typedef PigJob\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string[]} jarFileUris Optional HCFS URIs of jar files to add to the CLASSPATH of the Pig Client and Hadoop MapReduce (MR) tasks. Can contain Pig UDFs.\n * @property {object} scriptVariables Optional Mapping of query variable names to values (equivalent to the Pig command: &quot;name=value&quot;).\n * @property {dataproc(v1alpha1).LoggingConfiguration} loggingConfiguration Optional The runtime log configuration for job execution.\n * @property {object} properties Optional A mapping of property names to values, used to configure Pig. Properties that conflict with values set by the Cloud Dataproc API may be overwritten. Can include properties set in /etc/hadoop/conf/*-site.xml, /etc/pig/conf/pig.properties, and classes in user code.\n * @property {boolean} continueOnFailure Optional Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.\n * @property {dataproc(v1alpha1).QueryList} queryList A list of queries.\n * @property {string} queryFileUri The HCFS URI of the script that contains the Pig queries.\n */\n/**\n * @typedef AcceleratorConfiguration\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {integer} acceleratorCount The number of the accelerator cards of this type exposed to this instance.\n * @property {string} acceleratorTypeUri Full or partial URI of the accelerator type resource to expose to this instance. See Google Compute Engine AcceleratorTypes( /compute/docs/reference/beta/acceleratorTypes)\n */\n/**\n * @typedef ListClustersResponse\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {dataproc(v1alpha1).Cluster[]} clusters Output-only The clusters in the project.\n * @property {string} nextPageToken The standard List next-page token.\n */\n/**\n * @typedef ManagedGroupConfiguration\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string} instanceGroupManagerName Output-only The name of Instance Group Manager managing this group.\n * @property {string} instanceTemplateName Output-only The name of Instance Template used for Managed Instance Group.\n */\n/**\n * @typedef Job\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {dataproc(v1alpha1).JobStatus} status Output-only The job status. Additional application-specific status information may be contained in the &lt;code&gt;type_job&lt;/code&gt; and &lt;code&gt;yarn_applications&lt;/code&gt; fields.\n * @property {dataproc(v1alpha1).JobPlacement} placement Required Job information, including how, when, and where to run the job.\n * @property {string} driverControlFilesUri Output-only If present, the location of miscellaneous control files which may be used as part of job setup and handling. If not present, control files may be placed in the same location as driver_output_uri.\n * @property {string} submittedBy Output-only The email address of the user submitting the job. For jobs submitted on the cluster, the address is &lt;code&gt;username@hostname&lt;/code&gt;.\n * @property {dataproc(v1alpha1).JobScheduling} scheduling Optional Job scheduling configuration.\n * @property {dataproc(v1alpha1).PigJob} pigJob Job is a Pig job.\n * @property {string} driverOutputUri Output-only A URI pointing to the location of the mixed stdout/stderr of the job&#39;s driver program&amp;mdash;for example, &lt;code&gt;gs://sysbucket123/foo-cluster/jobid-123/driver/output&lt;/code&gt;.\n * @property {dataproc(v1alpha1).HiveJob} hiveJob Job is a Hive job.\n * @property {object} labels Optional The labels to associate with this job.Label keys must be between 1 and 63 characters long, and must conform to the following regular expression: \\p{Ll}\\p{Lo}{0,62}Label values must be between 1 and 63 characters long, and must conform to the following regular expression: \\p{Ll}\\p{Lo}\\p{N}_-{0,63}No more than 64 labels can be associated with a given job.\n * @property {string} driverOutputResourceUri Output-only A URI pointing to the location of the stdout of the job&#39;s driver program.\n * @property {dataproc(v1alpha1).SparkJob} sparkJob Job is a Spark job.\n * @property {dataproc(v1alpha1).SparkSqlJob} sparkSqlJob Job is a SparkSql job.\n * @property {dataproc(v1alpha1).JobStatus[]} statusHistory Output-only The previous job status.\n * @property {dataproc(v1alpha1).YarnApplication[]} yarnApplications Output-only The collection of Yarn applications spun up by this job.\n * @property {dataproc(v1alpha1).PySparkJob} pysparkJob Job is a Pyspark job.\n * @property {dataproc(v1alpha1).JobReference} reference Optional The fully-qualified reference to the job, which can be used to obtain the equivalent REST path of the job resource. If this property is not specified when a job is created, the server generates a &lt;code&gt;job_id&lt;/code&gt;.\n * @property {boolean} interactive Optional If set to true, then the driver&#39;s stdin will be kept open and driver_input_uri will be set to provide a path at which additional input can be sent to the driver.\n * @property {string} driverInputResourceUri Output-only A URI pointing to the location of the stdin of the job&#39;s driver program, only set if the job is interactive.\n * @property {dataproc(v1alpha1).HadoopJob} hadoopJob Job is a Hadoop job.\n */\n/**\n * @typedef SparkJob\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string} mainClass The name of the driver&#39;s main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris.\n * @property {string[]} archiveUris Optional HCFS URIs of archives to be extracted in the working directory of Spark drivers and tasks. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.\n * @property {string} mainJarFileUri The Hadoop Compatible Filesystem (HCFS) URI of the jar file that contains the main class.\n * @property {string[]} jarFileUris Optional HCFS URIs of jar files to add to the CLASSPATHs of the Spark driver and tasks.\n * @property {dataproc(v1alpha1).LoggingConfiguration} loggingConfiguration Optional The runtime log configuration for job execution.\n * @property {object} properties Optional A mapping of property names to values, used to configure Spark. Properties that conflict with values set by the Cloud Dataproc API may be overwritten. Can include properties set in /etc/spark/conf/spark-defaults.conf and classes in user code.\n * @property {string[]} args Optional The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.\n * @property {string[]} fileUris Optional HCFS URIs of files to be copied to the working directory of Spark drivers and distributed tasks. Useful for naively parallel tasks.\n */\n/**\n * @typedef JobStatus\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string} substate Output-only Additional state information, which includes status reported by the agent.\n * @property {string} insertTime The time of the job request.\n * @property {string} details Optional Job state details, such as an error description if the state is &lt;code&gt;ERROR&lt;/code&gt;.\n * @property {string} state Required A state message specifying the overall job state.\n * @property {string} stateStartTime Output-only The time when this state was entered.\n * @property {string} endTime The time when the job completed.\n * @property {string} startTime The time when the server started the job.\n */\n/**\n * @typedef DiskConfiguration\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {integer} bootDiskSizeGb Optional Size in GB of the boot disk (default is 500GB).\n * @property {integer} numLocalSsds Optional Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs, and HDFS data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic configuration and installed binaries.\n */\n/**\n * @typedef ClusterOperationStatus\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string} stateStartTime Output-only The time this state was entered.\n * @property {string} state Output-only A message containing the operation state.\n * @property {string} details Output-onlyA message containing any operation metadata details.\n * @property {string} innerState Output-only A message containing the detailed operation state.\n */\n/**\n * @typedef YarnApplication\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string} state Required The application state.\n * @property {string} name Required The application name.\n * @property {string} trackingUrl Optional The HTTP URL of the ApplicationMaster, HistoryServer, or TimelineServer that provides application-specific information. The URL uses the internal hostname, and requires a proxy server for resolution and, possibly, access.\n * @property {number} progress Required The numerical progress of the application, from 1 to 100.\n */\n/**\n * @typedef QueryList\n * @memberOf! dataproc(v1alpha1)\n * @type object\n* @property {string[]} queries Required The queries to execute. You do not need to terminate a query with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of an Cloud Dataproc API snippet that uses a QueryList to specify a HiveJob:\n&quot;hiveJob&quot;: {\n  &quot;queryList&quot;: {\n    &quot;queries&quot;: [\n      &quot;query1&quot;,\n      &quot;query2&quot;,\n      &quot;query3;query4&quot;,\n    ]\n  }\n}\n\n*/\n/**\n * @typedef HadoopJob\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string[]} jarFileUris Optional Jar file URIs to add to the CLASSPATHs of the Hadoop driver and tasks.\n * @property {dataproc(v1alpha1).LoggingConfiguration} loggingConfiguration Optional The runtime log configuration for job execution.\n * @property {object} properties Optional A mapping of property names to values, used to configure Hadoop. Properties that conflict with values set by the Cloud Dataproc API may be overwritten. Can include properties set in /etc/hadoop/conf/*-site and classes in user code.\n * @property {string[]} args Optional The arguments to pass to the driver. Do not include arguments, such as -libjars or -Dfoo=bar, that can be set as job properties, since a collision may occur that causes an incorrect job submission.\n * @property {string[]} fileUris Optional HCFS URIs of files to be copied to the working directory of Hadoop drivers and distributed tasks. Useful for naively parallel tasks.\n * @property {string} mainClass The name of the driver&#39;s main class. The jar file containing the class must be in the default CLASSPATH or specified in jar_file_uris.\n * @property {string[]} archiveUris Optional HCFS URIs of archives to be extracted in the working directory of Hadoop drivers and tasks. Supported file types: .jar, .tar, .tar.gz, .tgz, or .zip.\n * @property {string} mainJarFileUri The Hadoop Compatible Filesystem (HCFS) URI of the jar file containing the main class. Examples:  gs://foo-bucket/analytics-binaries/extract-useful-metrics-mr.jar  hdfs:/tmp/test-samples/custom-wordcount.jar  file:///home/usr/lib/hadoop-mapreduce/hadoop-mapreduce-examples.jar\n */\n/**\n * @typedef ClusterOperationMetadata\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string} operationType Output-only The operation type.\n * @property {string} description Output-only Short description of operation.\n * @property {string[]} warnings Output-only Errors encountered during operation execution.\n * @property {object} labels Output-only Labels associated with the operation\n * @property {dataproc(v1alpha1).ClusterOperationStatus} status Output-only Current operation status.\n * @property {dataproc(v1alpha1).ClusterOperationStatus[]} statusHistory Output-only The previous operation status.\n * @property {string} clusterName Output-only Name of the cluster for the operation.\n * @property {string} clusterUuid Output-only Cluster UUID for the operation.\n */\n/**\n * @typedef Empty\n * @memberOf! dataproc(v1alpha1)\n * @type object\n */\n/**\n * @typedef HiveJob\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {boolean} continueOnFailure Optional Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.\n * @property {dataproc(v1alpha1).QueryList} queryList A list of queries.\n * @property {string} queryFileUri The HCFS URI of the script that contains Hive queries.\n * @property {object} scriptVariables Optional Mapping of query variable names to values (equivalent to the Hive command: &#39;SET name=&quot;value&quot;;&#39;).\n * @property {string[]} jarFileUris Optional HCFS URIs of jar files to add to the CLASSPATH of the Hive server and Hadoop MapReduce (MR) tasks. Can contain Hive SerDes and UDFs.\n * @property {object} properties Optional A mapping of property names and values, used to configure Hive. Properties that conflict with values set by the Cloud Dataproc API may be overwritten. Can include properties set in /etc/hadoop/conf/*-site.xml, /etc/hive/conf/hive-site.xml, and classes in user code.\n */\n/**\n * @typedef ListJobsRequest\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string} filter Optional A filter constraining which jobs to list. Valid filters contain job state and label terms such as: labels.key1 = val1 AND (labels.k2 = val2 OR labels.k3 = val3)\n * @property {string} jobStateMatcher Optional Specifies enumerated categories of jobs to list.\n * @property {string} pageToken Optional The page token, returned by a previous call, to request the next page of results.\n * @property {string} clusterName Optional If set, the returned jobs list includes only jobs that were submitted to the named cluster.\n * @property {integer} pageSize Optional The number of results to return in each response.\n */\n/**\n * @typedef DiagnoseClusterResults\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string} outputUri Output-only The Google Cloud Storage URI of the diagnostic output. The output report is a plain text file with a summary of collected diagnostics.\n */\n/**\n * @typedef GceConfiguration\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string} imageUri Deprecated The Google Compute Engine image resource used for cluster instances. Example: &quot;compute.googleapis.com/projects/debian-cloud /global/images/backports-debian-7-wheezy-v20140904&quot;.\n * @property {string} machineTypeUri Deprecated The Google Compute Engine machine type used for cluster instances. Example: &quot;compute.googleapis.com/projects/project_id /zones/us-east1-a/machineTypes/n1-standard-2&quot;.\n * @property {string} networkUri Deprecated The Google Compute Engine network to be used for machine communications. Inbound SSH connections are necessary to complete cluster configuration. Example &quot;compute.googleapis.com/projects/project_id /zones/us-east1-a/default&quot;.\n * @property {string[]} serviceAccountScopes Deprecated The service account scopes included in Google Compute Engine instances. Must include devstorage.full_control to enable the Google Cloud Storage connector. Example &quot;auth.googleapis.com/compute&quot; and &quot;auth.googleapis.com/devstorage.full_control&quot;.\n * @property {string} zoneUri Deprecated The zone where the Google Compute Engine cluster will be located. Example: &quot;compute.googleapis.com/projects/project_id /zones/us-east1-a&quot;.\n */\n/**\n * @typedef SoftwareConfiguration\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {object} properties Optional The properties to set on daemon configuration files.Property keys are specified in &quot;prefix:property&quot; format, such as &quot;core:fs.defaultFS&quot;. The following are supported prefixes and their mappings:  core - core-site.xml  hdfs - hdfs-site.xml  mapred - mapred-site.xml  yarn - yarn-site.xml  hive - hive-site.xml  pig - pig.properties  spark - spark-defaults.conf\n * @property {string} imageVersion Optional The version of software inside the cluster. It must match the regular expression 0-9+.0-9+. If unspecified it will default to latest version.\n */\n/**\n * @typedef PySparkJob\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string[]} jarFileUris Optional HCFS URIs of jar files to add to the CLASSPATHs of the Python driver and tasks.\n * @property {dataproc(v1alpha1).LoggingConfiguration} loggingConfiguration Optional The runtime log configuration for job execution.\n * @property {object} properties Optional A mapping of property names to values, used to configure PySpark. Properties that conflict with values set by the Cloud Dataproc API may be overwritten. Can include properties set in /etc/spark/conf/spark-defaults.conf and classes in user code.\n * @property {string[]} args Optional The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.\n * @property {string[]} fileUris Optional HCFS URIs of files to be copied to the working directory of Python drivers and distributed tasks. Useful for naively parallel tasks.\n * @property {string[]} pythonFileUris Optional HCFS file URIs of Python files to pass to the PySpark framework. Supported file types: .py, .egg, and .zip.\n * @property {string} mainPythonFileUri Required The Hadoop Compatible Filesystem (HCFS) URI of the main Python file to use as the driver. Must be a .py file.\n * @property {string[]} archiveUris Optional HCFS URIs of archives to be extracted in the working directory of .jar, .tar, .tar.gz, .tgz, and .zip.\n */\n/**\n * @typedef LoggingConfiguration\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {object} driverLogLevels The per-package log levels for the driver. This may include &#39;root&#39; package name to configure rootLogger. Examples:  com.google = FATAL, root = INFO, org.apache = DEBUG\n */\n/**\n * @typedef ClusterConfiguration\n * @memberOf! dataproc(v1alpha1)\n * @type object\n* @property {dataproc(v1alpha1).InstanceGroupConfiguration} masterConfiguration Optional The Google Compute Engine configuration settings for the master instance in a cluster.\n* @property {dataproc(v1alpha1).InstanceGroupConfiguration} secondaryWorkerConfiguration Optional The Google Compute Engine configuration settings for additional worker instances in a cluster.\n* @property {string} masterName Deprecated The Master&#39;s hostname. Dataproc derives the name from cluster_name if not set by user (recommended practice is to let Dataproc derive the name). Derived master name example: hadoop-m.\n* @property {string[]} workers Deprecated The list of worker node names. Dataproc derives the names from cluster_name and num_workers if not set by user (recommended practice is to let Dataproc derive the name). Derived worker node name example: hadoop-w-0.\n* @property {dataproc(v1alpha1).NodeInitializationAction[]} initializationActions Optional Commands to execute on each node after configuration is completed. By default, executables are run on master and all worker nodes. You can test a node&#39;s &lt;code&gt;role&lt;/code&gt; metadata to run an executable on a master or worker node, as shown below:\nROLE=$(/usr/share/google/get_metadata_value attributes/role)\nif [[ &quot;${ROLE}&quot; == &#39;Master&#39; ]]; then\n  ... master specific actions ...\nelse\n  ... worker specific actions ...\nfi\n\n* @property {dataproc(v1alpha1).InstanceGroupConfiguration} workerConfiguration Optional The Google Compute Engine configuration settings for worker instances in a cluster.\n* @property {dataproc(v1alpha1).SoftwareConfiguration} softwareConfiguration Optional The configuration settings for software inside the cluster.\n* @property {dataproc(v1alpha1).GceClusterConfiguration} gceClusterConfiguration Optional The shared Google Compute Engine configuration settings for all instances in a cluster.\n* @property {string} configurationBucket Optional A Google Cloud Storage staging bucket used for sharing generated SSH keys and configuration. If you do not specify a staging bucket, Cloud Dataproc will determine an appropriate Cloud Storage location (US, ASIA, or EU) for your cluster&#39;s staging bucket according to the Google Compute Engine zone where your cluster is deployed, then it will create and manage this project-level, per-location bucket for you.\n* @property {integer} numWorkers Deprecated The number of worker nodes in the cluster.\n* @property {dataproc(v1alpha1).DiskConfiguration} masterDiskConfiguration Deprecated The configuration settings of master node disk options.\n* @property {dataproc(v1alpha1).DiskConfiguration} workerDiskConfiguration Deprecated The configuration settings of worker node disk options.\n* @property {dataproc(v1alpha1).GceConfiguration} gceConfiguration Deprecated The Google Compute Engine configuration settings for cluster resources.\n*/\n/**\n * @typedef ClusterMetrics\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {object} yarnMetrics The YARN metrics.\n * @property {object} hdfsMetrics The HDFS metrics.\n */\n/**\n * @typedef InstanceGroupConfiguration\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {dataproc(v1alpha1).AcceleratorConfiguration[]} accelerators Optional The Google Compute Engine accelerator configuration for these instances.\n * @property {integer} numInstances The number of VM instances in the instance group. For master instance groups, must be set to 1.\n * @property {dataproc(v1alpha1).DiskConfiguration} diskConfiguration Disk option configuration settings.\n * @property {string} imageUri Output-only The Google Compute Engine image resource used for cluster instances. Inferred from SoftwareConfiguration.image_version. Example: &quot;compute.googleapis.com/projects/debian-cloud /global/images/backports-debian-7-wheezy-v20140904&quot;.\n * @property {string} machineTypeUri The Google Compute Engine machine type used for cluster instances. Example: &quot;compute.googleapis.com/projects/project_id /zones/us-east1-a/machineTypes/n1-standard-2&quot;.\n * @property {boolean} isPreemptible Specifies that this instance group contains Preemptible Instances.\n * @property {string[]} instanceNames The list of instance names. Dataproc derives the names from cluster_name, num_instances, and the instance group if not set by user (recommended practice is to let Dataproc derive the name).\n * @property {dataproc(v1alpha1).ManagedGroupConfiguration} managedGroupConfiguration Output-only The configuration for Google Compute Engine Instance Group Manager that manages this group. This is only used for preemptible instance groups.\n */\n/**\n * @typedef GceClusterConfiguration\n * @memberOf! dataproc(v1alpha1)\n * @type object\n* @property {string[]} tags The Google Compute Engine tags to add to all instances.\n* @property {string} serviceAccount Optional The service account of the instances. Defaults to the default Google Compute Engine service account. Custom service accounts need permissions equivalent to the folloing IAM roles:\nroles/logging.logWriter\nroles/storage.objectAdmin(see https://cloud.google.com/compute/docs/access/service-accounts#custom_service_accounts for more information). Example: [account_id]@[project_id].iam.gserviceaccount.com\n* @property {string} subnetworkUri The Google Compute Engine subnetwork to be used for machine communications. Cannot be specified with network_uri. Example: compute.googleapis.com/projects/[project_id]/regions/us-east1/sub0.\n* @property {string} networkUri The Google Compute Engine network to be used for machine communications. Cannot be specified with subnetwork_uri. If neither network_uri nor subnetwork_uri is specified, the &quot;default&quot; network of the project is used, if it exists. Cannot be a &quot;Custom Subnet Network&quot; (see https://cloud.google.com/compute/docs/subnetworks for more information). Example: compute.googleapis.com/projects/[project_id]/regions/global/default.\n* @property {string} zoneUri Required The zone where the Google Compute Engine cluster will be located. Example: &quot;compute.googleapis.com/projects/project_id /zones/us-east1-a&quot;.\n* @property {object} metadata The Google Compute Engine metadata entries to add to all instances.\n* @property {boolean} internalIpOnly If true, all instances in the cluser will only have internal IP addresses. By default, clusters are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each instance. This restriction can only be enabled for subnetwork enabled networks, and all off-cluster dependencies must be configured to be accessible without external IP addresses.\n* @property {string[]} serviceAccountScopes The service account scopes included in Google Compute Engine instances. Must include devstorage.full_control to enable the Google Cloud Storage connector. Example &quot;auth.googleapis.com/compute&quot; and &quot;auth.googleapis.com/devstorage.full_control&quot;.\n*/\n/**\n * @typedef CancelOperationRequest\n * @memberOf! dataproc(v1alpha1)\n * @type object\n */\n/**\n * @typedef DiagnoseClusterOutputLocation\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string} outputUri Output-only The Google Cloud Storage URI of the diagnostic output. This will be a plain text file with summary of collected diagnostics.\n */\n/**\n * @typedef Operation\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {object} metadata Service-specific metadata associated with the operation.\n * @property {boolean} done Indicates if the operation is done. If true, the operation is complete and the result is available. If false, the operation is still in progress.\n * @property {object} response The operation response. If the called method returns no data on success, the response is google.protobuf.Empty. If the called method is Get,Create or Update, the response is the resource. For all other methods, the response type is a concatenation of the method name and &quot;Response&quot;. For example, if the called method is TakeSnapshot(), the response type is TakeSnapshotResponse.\n * @property {string} name The name of the operation resource, in the format projects/project_id/operations/operation_id\n * @property {dataproc(v1alpha1).Status} error The error result of the operation in case of failure.\n */\n/**\n * @typedef OperationStatus\n * @memberOf! dataproc(v1alpha1)\n * @type object\n * @property {string} innerState A message containing the detailed operation state.\n * @property {string} stateStartTime The time this state was entered.\n * @property {string} state A message containing the operation state.\n * @property {string} details A message containing any operation metadata details.\n */\nmodule.exports = Dataproc;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/datastore/v1beta3.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Google Cloud Datastore API\n *\n * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application.\n\n *\n * @example\n * var google = require('googleapis');\n * var datastore = google.datastore('v1beta3');\n *\n * @namespace datastore\n * @type {Function}\n * @version v1beta3\n * @variation v1beta3\n * @param {object=} options Options for Datastore\n */\nfunction Datastore(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.projects = {\n\n    /**\n     * datastore.projects.beginTransaction\n     *\n     * @desc Begins a new transaction.\n     *\n     * @alias datastore.projects.beginTransaction\n     * @memberOf! datastore(v1beta3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.projectId The ID of the project against which to make the request.\n     * @param {datastore(v1beta3).BeginTransactionRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    beginTransaction: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://datastore.googleapis.com/v1beta3/projects/{projectId}:beginTransaction',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * datastore.projects.commit\n     *\n     * @desc Commits a transaction, optionally creating, deleting or modifying some entities.\n     *\n     * @alias datastore.projects.commit\n     * @memberOf! datastore(v1beta3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.projectId The ID of the project against which to make the request.\n     * @param {datastore(v1beta3).CommitRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    commit: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://datastore.googleapis.com/v1beta3/projects/{projectId}:commit',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * datastore.projects.rollback\n     *\n     * @desc Rolls back a transaction.\n     *\n     * @alias datastore.projects.rollback\n     * @memberOf! datastore(v1beta3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.projectId The ID of the project against which to make the request.\n     * @param {datastore(v1beta3).RollbackRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    rollback: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://datastore.googleapis.com/v1beta3/projects/{projectId}:rollback',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * datastore.projects.runQuery\n     *\n     * @desc Queries for entities.\n     *\n     * @alias datastore.projects.runQuery\n     * @memberOf! datastore(v1beta3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.projectId The ID of the project against which to make the request.\n     * @param {datastore(v1beta3).RunQueryRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    runQuery: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://datastore.googleapis.com/v1beta3/projects/{projectId}:runQuery',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * datastore.projects.lookup\n     *\n     * @desc Looks up entities by key.\n     *\n     * @alias datastore.projects.lookup\n     * @memberOf! datastore(v1beta3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.projectId The ID of the project against which to make the request.\n     * @param {datastore(v1beta3).LookupRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    lookup: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://datastore.googleapis.com/v1beta3/projects/{projectId}:lookup',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * datastore.projects.allocateIds\n     *\n     * @desc Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted.\n     *\n     * @alias datastore.projects.allocateIds\n     * @memberOf! datastore(v1beta3)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.projectId The ID of the project against which to make the request.\n     * @param {datastore(v1beta3).AllocateIdsRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    allocateIds: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://datastore.googleapis.com/v1beta3/projects/{projectId}:allocateIds',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef AllocateIdsRequest\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {datastore(v1beta3).Key[]} keys A list of keys with incomplete key paths for which to allocate IDs.\nNo key may be reserved/read-only.\n*/\n/**\n * @typedef LookupResponse\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {datastore(v1beta3).EntityResult[]} found Entities found as `ResultType.FULL` entities. The order of results in this\nfield is undefined and has no relation to the order of the keys in the\ninput.\n* @property {datastore(v1beta3).EntityResult[]} missing Entities not found as `ResultType.KEY_ONLY` entities. The order of results\nin this field is undefined and has no relation to the order of the keys\nin the input.\n* @property {datastore(v1beta3).Key[]} deferred A list of keys that were not looked up due to resource constraints. The\norder of results in this field is undefined and has no relation to the\norder of the keys in the input.\n*/\n/**\n * @typedef RunQueryResponse\n * @memberOf! datastore(v1beta3)\n * @type object\n * @property {datastore(v1beta3).QueryResultBatch} batch A batch of query results (always present).\n * @property {datastore(v1beta3).Query} query The parsed form of the `GqlQuery` from the request, if it was set.\n */\n/**\n * @typedef PropertyOrder\n * @memberOf! datastore(v1beta3)\n * @type object\n * @property {datastore(v1beta3).PropertyReference} property The property to order by.\n * @property {string} direction The direction to order by. Defaults to `ASCENDING`.\n */\n/**\n * @typedef BeginTransactionRequest\n * @memberOf! datastore(v1beta3)\n * @type object\n */\n/**\n * @typedef CommitRequest\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {string} mode The type of commit to perform. Defaults to `TRANSACTIONAL`.\n* @property {datastore(v1beta3).Mutation[]} mutations The mutations to perform.\n\nWhen mode is `TRANSACTIONAL`, mutations affecting a single entity are\napplied in order. The following sequences of mutations affecting a single\nentity are not permitted in a single `Commit` request:\n\n- `insert` followed by `insert`\n- `update` followed by `insert`\n- `upsert` followed by `insert`\n- `delete` followed by `update`\n\nWhen mode is `NON_TRANSACTIONAL`, no two mutations may affect a single\nentity.\n* @property {string} transaction The identifier of the transaction associated with the commit. A\ntransaction identifier is returned by a call to\nDatastore.BeginTransaction.\n*/\n/**\n * @typedef KindExpression\n * @memberOf! datastore(v1beta3)\n * @type object\n * @property {string} name The name of the kind.\n */\n/**\n * @typedef Key\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {datastore(v1beta3).PathElement[]} path The entity path.\nAn entity path consists of one or more elements composed of a kind and a\nstring or numerical identifier, which identify entities. The first\nelement identifies a _root entity_, the second element identifies\na _child_ of the root entity, the third element identifies a child of the\nsecond entity, and so forth. The entities identified by all prefixes of\nthe path are called the element&#39;s _ancestors_.\n\nAn entity path is always fully complete: *all* of the entity&#39;s ancestors\nare required to be in the path along with the entity identifier itself.\nThe only exception is that in some documented cases, the identifier in the\nlast path element (for the entity) itself may be omitted. For example,\nthe last path element of the key of `Mutation.insert` may have no\nidentifier.\n\nA path can never be empty, and a path can have at most 100 elements.\n* @property {datastore(v1beta3).PartitionId} partitionId Entities are partitioned into subsets, currently identified by a project\nID and namespace ID.\nQueries are scoped to a single partition.\n*/\n/**\n * @typedef LatLng\n * @memberOf! datastore(v1beta3)\n * @type object\n * @property {number} longitude The longitude in degrees. It must be in the range [-180.0, +180.0].\n * @property {number} latitude The latitude in degrees. It must be in the range [-90.0, +90.0].\n */\n/**\n * @typedef PropertyReference\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {string} name The name of the property.\nIf name includes &quot;.&quot;s, it may be interpreted as a property name path.\n*/\n/**\n * @typedef ArrayValue\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {datastore(v1beta3).Value[]} values Values in the array.\nThe order of this array may not be preserved if it contains a mix of\nindexed and unindexed values.\n*/\n/**\n * @typedef Projection\n * @memberOf! datastore(v1beta3)\n * @type object\n * @property {datastore(v1beta3).PropertyReference} property The property to project.\n */\n/**\n * @typedef Mutation\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {datastore(v1beta3).Key} delete The key of the entity to delete. The entity may or may not already exist.\nMust have a complete key path and must not be reserved/read-only.\n* @property {datastore(v1beta3).Entity} insert The entity to insert. The entity must not already exist.\nThe entity key&#39;s final path element may be incomplete.\n* @property {string} baseVersion The version of the entity that this mutation is being applied to. If this\ndoes not match the current version on the server, the mutation conflicts.\n* @property {datastore(v1beta3).Entity} update The entity to update. The entity must already exist.\nMust have a complete key path.\n* @property {datastore(v1beta3).Entity} upsert The entity to upsert. The entity may or may not already exist.\nThe entity key&#39;s final path element may be incomplete.\n*/\n/**\n * @typedef ReadOptions\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {string} readConsistency The non-transactional read consistency to use.\nCannot be set to `STRONG` for global queries.\n* @property {string} transaction The identifier of the transaction in which to read. A\ntransaction identifier is returned by a call to\nDatastore.BeginTransaction.\n*/\n/**\n * @typedef RollbackResponse\n * @memberOf! datastore(v1beta3)\n * @type object\n */\n/**\n * @typedef MutationResult\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {string} version The version of the entity on the server after processing the mutation. If\nthe mutation doesn&#39;t change anything on the server, then the version will\nbe the version of the current entity or, if no entity is present, a version\nthat is strictly greater than the version of any previous entity and less\nthan the version of any possible future entity.\n* @property {boolean} conflictDetected Whether a conflict was detected for this mutation. Always false when a\nconflict detection strategy field is not set in the mutation.\n* @property {datastore(v1beta3).Key} key The automatically allocated key.\nSet only when the mutation allocated a key.\n*/\n/**\n * @typedef GqlQuery\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {string} queryString A string of the format described\n[here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).\n* @property {boolean} allowLiterals When false, the query string must not contain any literals and instead must\nbind all values. For example,\n`SELECT * FROM Kind WHERE a = &#39;string literal&#39;` is not allowed, while\n`SELECT * FROM Kind WHERE a = @value` is.\n* @property {object} namedBindings For each non-reserved named binding site in the query string, there must be\na named parameter with that name, but not necessarily the inverse.\n\nKey must match regex `A-Za-z_$*`, must not match regex\n`__.*__`, and must not be `&quot;&quot;`.\n* @property {datastore(v1beta3).GqlQueryParameter[]} positionalBindings Numbered binding site @1 references the first numbered parameter,\neffectively using 1-based indexing, rather than the usual 0.\n\nFor each binding site numbered i in `query_string`, there must be an i-th\nnumbered parameter. The inverse must also be true.\n*/\n/**\n * @typedef Filter\n * @memberOf! datastore(v1beta3)\n * @type object\n * @property {datastore(v1beta3).CompositeFilter} compositeFilter A composite filter.\n * @property {datastore(v1beta3).PropertyFilter} propertyFilter A filter on a property.\n */\n/**\n * @typedef RollbackRequest\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {string} transaction The transaction identifier, returned by a call to\nDatastore.BeginTransaction.\n*/\n/**\n * @typedef RunQueryRequest\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {datastore(v1beta3).ReadOptions} readOptions The options for this query.\n* @property {datastore(v1beta3).Query} query The query to run.\n* @property {datastore(v1beta3).PartitionId} partitionId Entities are partitioned into subsets, identified by a partition ID.\nQueries are scoped to a single partition.\nThis partition ID is normalized with the standard default context\npartition ID.\n* @property {datastore(v1beta3).GqlQuery} gqlQuery The GQL query to run.\n*/\n/**\n * @typedef CompositeFilter\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {string} op The operator for combining multiple filters.\n* @property {datastore(v1beta3).Filter[]} filters The list of filters to combine.\nMust contain at least one filter.\n*/\n/**\n * @typedef AllocateIdsResponse\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {datastore(v1beta3).Key[]} keys The keys specified in the request (in the same order), each with\nits key path completed with a newly allocated ID.\n*/\n/**\n * @typedef Query\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {datastore(v1beta3).Filter} filter The filter to apply.\n* @property {integer} limit The maximum number of results to return. Applies after all other\nconstraints. Optional.\nUnspecified is interpreted as no limit.\nMust be &gt;= 0 if specified.\n* @property {integer} offset The number of results to skip. Applies before limit, but after all other\nconstraints. Optional. Must be &gt;= 0 if specified.\n* @property {string} startCursor A starting point for the query results. Query cursors are\nreturned in query result batches and\n[can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).\n* @property {datastore(v1beta3).KindExpression[]} kind The kinds to query (if empty, returns entities of all kinds).\nCurrently at most 1 kind may be specified.\n* @property {datastore(v1beta3).PropertyReference[]} distinctOn The properties to make distinct. The query results will contain the first\nresult for each distinct combination of values for the given properties\n(if empty, all results are returned).\n* @property {datastore(v1beta3).PropertyOrder[]} order The order to apply to the query results (if empty, order is unspecified).\n* @property {datastore(v1beta3).Projection[]} projection The projection to return. Defaults to returning all properties.\n* @property {string} endCursor An ending point for the query results. Query cursors are\nreturned in query result batches and\n[can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).\n*/\n/**\n * @typedef PropertyFilter\n * @memberOf! datastore(v1beta3)\n * @type object\n * @property {datastore(v1beta3).Value} value The value to compare the property to.\n * @property {datastore(v1beta3).PropertyReference} property The property to filter by.\n * @property {string} op The operator to filter by.\n */\n/**\n * @typedef EntityResult\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {string} cursor A cursor that points to the position after the result entity.\nSet only when the `EntityResult` is part of a `QueryResultBatch` message.\n* @property {string} version The version of the entity, a strictly positive number that monotonically\nincreases with changes to the entity.\n\nThis field is set for `FULL` entity\nresults.\n\nFor missing entities in `LookupResponse`, this\nis the version of the snapshot that was used to look up the entity, and it\nis always set except for eventually consistent reads.\n* @property {datastore(v1beta3).Entity} entity The resulting entity.\n*/\n/**\n * @typedef Value\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {string} nullValue A null value.\n* @property {boolean} booleanValue A boolean value.\n* @property {string} blobValue A blob value.\nMay have at most 1,000,000 bytes.\nWhen `exclude_from_indexes` is false, may have at most 1500 bytes.\nIn JSON requests, must be base64-encoded.\n* @property {integer} meaning The `meaning` field should only be populated for backwards compatibility.\n* @property {datastore(v1beta3).ArrayValue} arrayValue An array value.\nCannot contain another array value.\nA `Value` instance that sets field `array_value` must not set fields\n`meaning` or `exclude_from_indexes`.\n* @property {datastore(v1beta3).Entity} entityValue An entity value.\n\n- May have no key.\n- May have a key with an incomplete key path.\n- May have a reserved/read-only key.\n* @property {datastore(v1beta3).LatLng} geoPointValue A geo point value representing a point on the surface of Earth.\n* @property {datastore(v1beta3).Key} keyValue A key value.\n* @property {string} integerValue An integer value.\n* @property {string} stringValue A UTF-8 encoded string value.\nWhen `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes.\nOtherwise, may be set to at least 1,000,000 bytes.\n* @property {boolean} excludeFromIndexes If the value should be excluded from all indexes including those defined\nexplicitly.\n* @property {number} doubleValue A double value.\n* @property {string} timestampValue A timestamp value.\nWhen stored in the Datastore, precise only to microseconds;\nany additional precision is rounded down.\n*/\n/**\n * @typedef CommitResponse\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {integer} indexUpdates The number of index entries updated during the commit, or zero if none were\nupdated.\n* @property {datastore(v1beta3).MutationResult[]} mutationResults The result of performing the mutations.\nThe i-th mutation result corresponds to the i-th mutation in the request.\n*/\n/**\n * @typedef PartitionId\n * @memberOf! datastore(v1beta3)\n * @type object\n * @property {string} projectId The ID of the project to which the entities belong.\n * @property {string} namespaceId If not empty, the ID of the namespace to which the entities belong.\n */\n/**\n * @typedef Entity\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {datastore(v1beta3).Key} key The entity&#39;s key.\n\nAn entity must have a key, unless otherwise documented (for example,\nan entity in `Value.entity_value` may have no key).\nAn entity&#39;s kind is its key path&#39;s last element&#39;s kind,\nor null if it has no key.\n* @property {object} properties The entity&#39;s properties.\nThe map&#39;s keys are property names.\nA property name matching regex `__.*__` is reserved.\nA reserved property name is forbidden in certain documented contexts.\nThe name must not contain more than 500 characters.\nThe name cannot be `&quot;&quot;`.\n*/\n/**\n * @typedef LookupRequest\n * @memberOf! datastore(v1beta3)\n * @type object\n * @property {datastore(v1beta3).ReadOptions} readOptions The options for this lookup request.\n * @property {datastore(v1beta3).Key[]} keys Keys of entities to look up.\n */\n/**\n * @typedef QueryResultBatch\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {string} skippedCursor A cursor that points to the position after the last skipped result.\nWill be set when `skipped_results` != 0.\n* @property {integer} skippedResults The number of results skipped, typically because of an offset.\n* @property {string} entityResultType The result type for every entity in `entity_results`.\n* @property {datastore(v1beta3).EntityResult[]} entityResults The results for this batch.\n* @property {string} endCursor A cursor that points to the position after the last result in the batch.\n* @property {string} moreResults The state of the query after the current batch.\n* @property {string} snapshotVersion The version number of the snapshot this batch was returned from.\nThis applies to the range of results from the query&#39;s `start_cursor` (or\nthe beginning of the query if no cursor was given) to this batch&#39;s\n`end_cursor` (not the query&#39;s `end_cursor`).\n\nIn a single transaction, subsequent query result batches for the same query\ncan have a greater snapshot version number. Each batch&#39;s snapshot version\nis valid for all preceding batches.\nThe value will be zero for eventually consistent queries.\n*/\n/**\n * @typedef PathElement\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {string} name The name of the entity.\nA name matching regex `__.*__` is reserved/read-only.\nA name must not be more than 1500 bytes when UTF-8 encoded.\nCannot be `&quot;&quot;`.\n* @property {string} kind The kind of the entity.\nA kind matching regex `__.*__` is reserved/read-only.\nA kind must not contain more than 1500 bytes when UTF-8 encoded.\nCannot be `&quot;&quot;`.\n* @property {string} id The auto-allocated ID of the entity.\nNever equal to zero. Values less than zero are discouraged and may not\nbe supported in the future.\n*/\n/**\n * @typedef GqlQueryParameter\n * @memberOf! datastore(v1beta3)\n * @type object\n* @property {datastore(v1beta3).Value} value A value parameter.\n* @property {string} cursor A query cursor. Query cursors are returned in query\nresult batches.\n*/\n/**\n * @typedef BeginTransactionResponse\n * @memberOf! datastore(v1beta3)\n * @type object\n * @property {string} transaction The transaction identifier (always present).\n */\nmodule.exports = Datastore;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/deploymentmanager/v2beta.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Google Cloud Deployment Manager API V2Beta Methods\n *\n * The Deployment Manager API allows users to declaratively configure, deploy and run complex solutions on the Google Cloud Platform.\n *\n * @example\n * var google = require('googleapis');\n * var deploymentmanager = google.deploymentmanager('v2beta');\n *\n * @namespace deploymentmanager\n * @type {Function}\n * @version v2beta\n * @variation v2beta\n * @param {object=} options Options for Deploymentmanager\n */\nfunction Deploymentmanager(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.compositeTypes = {\n\n    /**\n     * deploymentmanager.compositeTypes.delete\n     *\n     * @desc Deletes a composite type.\n     *\n     * @alias deploymentmanager.compositeTypes.delete\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.compositeType The name of the type for this request.\n     * @param {string} params.project The project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/compositeTypes/{compositeType}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'compositeType'],\n        pathParams: ['compositeType', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.compositeTypes.get\n     *\n     * @desc Gets information about a specific composite type.\n     *\n     * @alias deploymentmanager.compositeTypes.get\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.compositeType The name of the composite type for this request.\n     * @param {string} params.project The project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/compositeTypes/{compositeType}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'compositeType'],\n        pathParams: ['compositeType', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.compositeTypes.insert\n     *\n     * @desc Creates a composite type.\n     *\n     * @alias deploymentmanager.compositeTypes.insert\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project The project ID for this request.\n     * @param {deploymentmanager(v2beta).CompositeType} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/compositeTypes',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.compositeTypes.list\n     *\n     * @desc Lists all composite types for Deployment Manager.\n     *\n     * @alias deploymentmanager.compositeTypes.list\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project The project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/compositeTypes',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.compositeTypes.patch\n     *\n     * @desc Updates a composite type. This method supports patch semantics.\n     *\n     * @alias deploymentmanager.compositeTypes.patch\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.compositeType The name of the composite type for this request.\n     * @param {string} params.project The project ID for this request.\n     * @param {deploymentmanager(v2beta).CompositeType} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/compositeTypes/{compositeType}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'compositeType'],\n        pathParams: ['compositeType', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.compositeTypes.update\n     *\n     * @desc Updates a composite type.\n     *\n     * @alias deploymentmanager.compositeTypes.update\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.compositeType The name of the composite type for this request.\n     * @param {string} params.project The project ID for this request.\n     * @param {deploymentmanager(v2beta).CompositeType} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/compositeTypes/{compositeType}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'compositeType'],\n        pathParams: ['compositeType', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.deployments = {\n\n    /**\n     * deploymentmanager.deployments.cancelPreview\n     *\n     * @desc Cancels and removes the preview currently associated with the deployment.\n     *\n     * @alias deploymentmanager.deployments.cancelPreview\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.deployment The name of the deployment for this request.\n     * @param {string} params.project The project ID for this request.\n     * @param {deploymentmanager(v2beta).DeploymentsCancelPreviewRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    cancelPreview: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/cancelPreview',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'deployment'],\n        pathParams: ['deployment', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.deployments.delete\n     *\n     * @desc Deletes a deployment and all of the resources in the deployment.\n     *\n     * @alias deploymentmanager.deployments.delete\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.deletePolicy Sets the policy to use for deleting resources.\n     * @param {string} params.deployment The name of the deployment for this request.\n     * @param {string} params.project The project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'deployment'],\n        pathParams: ['deployment', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.deployments.get\n     *\n     * @desc Gets information about a specific deployment.\n     *\n     * @alias deploymentmanager.deployments.get\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.deployment The name of the deployment for this request.\n     * @param {string} params.project The project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'deployment'],\n        pathParams: ['deployment', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.deployments.getIamPolicy\n     *\n     * @desc Gets the access control policy for a resource. May be empty if no such policy or resource exists.\n     *\n     * @alias deploymentmanager.deployments.getIamPolicy\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.resource_ Name of the resource for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getIamPolicy: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/deployments/{resource}/getIamPolicy',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.deployments.insert\n     *\n     * @desc Creates a deployment and all of the resources described by the deployment manifest.\n     *\n     * @alias deploymentmanager.deployments.insert\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.preview If set to true, creates a deployment and creates \"shell\" resources but does not actually instantiate these resources. This allows you to preview what your deployment looks like. After previewing a deployment, you can deploy your resources by making a request with the update() method or you can use the cancelPreview() method to cancel the preview altogether. Note that the deployment will still exist after you cancel the preview and you must separately delete this deployment if you want to remove it.\n     * @param {string} params.project The project ID for this request.\n     * @param {deploymentmanager(v2beta).Deployment} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/deployments',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.deployments.list\n     *\n     * @desc Lists all deployments for a given project.\n     *\n     * @alias deploymentmanager.deployments.list\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project The project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/deployments',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.deployments.patch\n     *\n     * @desc Updates a deployment and all of the resources described by the deployment manifest. This method supports patch semantics.\n     *\n     * @alias deploymentmanager.deployments.patch\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.createPolicy Sets the policy to use for creating new resources.\n     * @param {string=} params.deletePolicy Sets the policy to use for deleting resources.\n     * @param {string} params.deployment The name of the deployment for this request.\n     * @param {boolean=} params.preview If set to true, updates the deployment and creates and updates the \"shell\" resources but does not actually alter or instantiate these resources. This allows you to preview what your deployment will look like. You can use this intent to preview how an update would affect your deployment. You must provide a target.config with a configuration if this is set to true. After previewing a deployment, you can deploy your resources by making a request with the update() or you can cancelPreview() to remove the preview altogether. Note that the deployment will still exist after you cancel the preview and you must separately delete this deployment if you want to remove it.\n     * @param {string} params.project The project ID for this request.\n     * @param {deploymentmanager(v2beta).Deployment} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'deployment'],\n        pathParams: ['deployment', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.deployments.setIamPolicy\n     *\n     * @desc Sets the access control policy on the specified resource. Replaces any existing policy.\n     *\n     * @alias deploymentmanager.deployments.setIamPolicy\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.resource_ Name of the resource for this request.\n     * @param {deploymentmanager(v2beta).Policy} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    setIamPolicy: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/deployments/{resource}/setIamPolicy',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.deployments.stop\n     *\n     * @desc Stops an ongoing operation. This does not roll back any work that has already been completed, but prevents any new work from being started.\n     *\n     * @alias deploymentmanager.deployments.stop\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.deployment The name of the deployment for this request.\n     * @param {string} params.project The project ID for this request.\n     * @param {deploymentmanager(v2beta).DeploymentsStopRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    stop: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/stop',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'deployment'],\n        pathParams: ['deployment', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.deployments.testIamPermissions\n     *\n     * @desc Returns permissions that a caller has on the specified resource.\n     *\n     * @alias deploymentmanager.deployments.testIamPermissions\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project Project ID for this request.\n     * @param {string} params.resource_ Name of the resource for this request.\n     * @param {deploymentmanager(v2beta).TestPermissionsRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    testIamPermissions: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/deployments/{resource}/testIamPermissions',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.deployments.update\n     *\n     * @desc Updates a deployment and all of the resources described by the deployment manifest.\n     *\n     * @alias deploymentmanager.deployments.update\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.createPolicy Sets the policy to use for creating new resources.\n     * @param {string=} params.deletePolicy Sets the policy to use for deleting resources.\n     * @param {string} params.deployment The name of the deployment for this request.\n     * @param {boolean=} params.preview If set to true, updates the deployment and creates and updates the \"shell\" resources but does not actually alter or instantiate these resources. This allows you to preview what your deployment will look like. You can use this intent to preview how an update would affect your deployment. You must provide a target.config with a configuration if this is set to true. After previewing a deployment, you can deploy your resources by making a request with the update() or you can cancelPreview() to remove the preview altogether. Note that the deployment will still exist after you cancel the preview and you must separately delete this deployment if you want to remove it.\n     * @param {string} params.project The project ID for this request.\n     * @param {deploymentmanager(v2beta).Deployment} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'deployment'],\n        pathParams: ['deployment', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.manifests = {\n\n    /**\n     * deploymentmanager.manifests.get\n     *\n     * @desc Gets information about a specific manifest.\n     *\n     * @alias deploymentmanager.manifests.get\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.deployment The name of the deployment for this request.\n     * @param {string} params.manifest The name of the manifest for this request.\n     * @param {string} params.project The project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/manifests/{manifest}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'deployment', 'manifest'],\n        pathParams: ['deployment', 'manifest', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.manifests.list\n     *\n     * @desc Lists all manifests for a given deployment.\n     *\n     * @alias deploymentmanager.manifests.list\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.deployment The name of the deployment for this request.\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project The project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/manifests',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'deployment'],\n        pathParams: ['deployment', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.operations = {\n\n    /**\n     * deploymentmanager.operations.get\n     *\n     * @desc Gets information about a specific operation.\n     *\n     * @alias deploymentmanager.operations.get\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.operation The name of the operation for this request.\n     * @param {string} params.project The project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/operations/{operation}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.operations.list\n     *\n     * @desc Lists all operations for a project.\n     *\n     * @alias deploymentmanager.operations.list\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project The project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/operations',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.resources = {\n\n    /**\n     * deploymentmanager.resources.get\n     *\n     * @desc Gets information about a single resource.\n     *\n     * @alias deploymentmanager.resources.get\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.deployment The name of the deployment for this request.\n     * @param {string} params.project The project ID for this request.\n     * @param {string} params.resource_ The name of the resource for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/resources/{resource}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'deployment', 'resource'],\n        pathParams: ['deployment', 'project', 'resource'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.resources.list\n     *\n     * @desc Lists all resources in a given deployment.\n     *\n     * @alias deploymentmanager.resources.list\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.deployment The name of the deployment for this request.\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project The project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/deployments/{deployment}/resources',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'deployment'],\n        pathParams: ['deployment', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.typeProviders = {\n\n    /**\n     * deploymentmanager.typeProviders.delete\n     *\n     * @desc Deletes a type provider.\n     *\n     * @alias deploymentmanager.typeProviders.delete\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project The project ID for this request.\n     * @param {string} params.typeProvider The name of the type provider for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'typeProvider'],\n        pathParams: ['project', 'typeProvider'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.typeProviders.get\n     *\n     * @desc Gets information about a specific type provider.\n     *\n     * @alias deploymentmanager.typeProviders.get\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project The project ID for this request.\n     * @param {string} params.typeProvider The name of the type provider for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'typeProvider'],\n        pathParams: ['project', 'typeProvider'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.typeProviders.getType\n     *\n     * @desc Gets a type info for a type provided by a TypeProvider.\n     *\n     * @alias deploymentmanager.typeProviders.getType\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project The project ID for this request.\n     * @param {string} params.type The name of the type provider for this request.\n     * @param {string} params.typeProvider The name of the type provider for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getType: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}/types/{type}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'typeProvider', 'type'],\n        pathParams: ['project', 'type', 'typeProvider'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.typeProviders.insert\n     *\n     * @desc Creates a type provider.\n     *\n     * @alias deploymentmanager.typeProviders.insert\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project The project ID for this request.\n     * @param {deploymentmanager(v2beta).TypeProvider} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/typeProviders',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.typeProviders.list\n     *\n     * @desc Lists all resource type providers for Deployment Manager.\n     *\n     * @alias deploymentmanager.typeProviders.list\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project The project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/typeProviders',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.typeProviders.listTypes\n     *\n     * @desc Lists all the type info for a TypeProvider.\n     *\n     * @alias deploymentmanager.typeProviders.listTypes\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project The project ID for this request.\n     * @param {string} params.typeProvider The name of the type provider for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    listTypes: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}/types',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'typeProvider'],\n        pathParams: ['project', 'typeProvider'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.typeProviders.patch\n     *\n     * @desc Updates a type provider. This method supports patch semantics.\n     *\n     * @alias deploymentmanager.typeProviders.patch\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project The project ID for this request.\n     * @param {string} params.typeProvider The name of the type provider for this request.\n     * @param {deploymentmanager(v2beta).TypeProvider} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'typeProvider'],\n        pathParams: ['project', 'typeProvider'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * deploymentmanager.typeProviders.update\n     *\n     * @desc Updates a type provider.\n     *\n     * @alias deploymentmanager.typeProviders.update\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project The project ID for this request.\n     * @param {string} params.typeProvider The name of the type provider for this request.\n     * @param {deploymentmanager(v2beta).TypeProvider} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'typeProvider'],\n        pathParams: ['project', 'typeProvider'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.types = {\n\n    /**\n     * deploymentmanager.types.list\n     *\n     * @desc Lists all resource types for Deployment Manager.\n     *\n     * @alias deploymentmanager.types.list\n     * @memberOf! deploymentmanager(v2beta)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter Sets a filter expression for filtering listed resources, in the form filter={expression}. Your {expression} must be in the format: field_name comparison_string literal_string.  The field_name is the name of the field you want to compare. Only atomic field types are supported (string, number, boolean). The comparison_string must be either eq (equals) or ne (not equals). The literal_string is the string value to filter to. The literal value must be valid for the type of field you are filtering by (string, number, boolean). For string fields, the literal value is interpreted as a regular expression using RE2 syntax. The literal value must match the entire field.  For example, to filter for instances that do not have a name of example-instance, you would use filter=name ne example-instance.  You can filter on nested fields. For example, you could filter on instances that have set the scheduling.automaticRestart field to true. Use filtering on nested fields to take advantage of labels to organize and search for results based on label values.  To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart eq true) (zone eq us-central1-f). Multiple expressions are treated as AND expressions, meaning that resources must match all expressions to pass the filters.\n     * @param {integer=} params.maxResults The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)\n     * @param {string=} params.orderBy Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.  You can also sort results in descending order based on the creation timestamp using orderBy=\"creationTimestamp desc\". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.  Currently, only sorting by name or creationTimestamp desc is supported.\n     * @param {string=} params.pageToken Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.\n     * @param {string} params.project The project ID for this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/deploymentmanager/v2beta/projects/{project}/global/types',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef AuditConfig\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {deploymentmanager(v2beta).AuditLogConfig[]} auditLogConfigs The configuration for logging of each type of permission.\n * @property {string[]} exemptedMembers \n * @property {string} service Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.\n */\n/**\n * @typedef AuditLogConfig\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string[]} exemptedMembers Specifies the identities that do not cause logging for this type of permission. Follows the same format of [Binding.members][].\n * @property {string} logType The log type that this config enables.\n */\n/**\n * @typedef BaseType\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {deploymentmanager(v2beta).CollectionOverride[]} collectionOverrides Allows resource handling overrides for specific collections\n * @property {deploymentmanager(v2beta).Credential} credential Credential used when interacting with this type.\n * @property {string} descriptorUrl Descriptor Url for the this type.\n * @property {deploymentmanager(v2beta).Options} options Options to apply when handling any resources in this service.\n */\n/**\n * @typedef BasicAuth\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} password \n * @property {string} user \n */\n/**\n * @typedef Binding\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n* @property {string[]} members Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values:\n\n* `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account.\n\n* `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account.\n\n* `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@gmail.com` or `joe@example.com`.\n\n\n\n* `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`.\n\n* `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`.\n\n* `domain:{domain}`: A Google Apps domain name that represents all the users of that domain. For example, `google.com` or `example.com`.\n* @property {string} role Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.\n*/\n/**\n * @typedef CollectionOverride\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} collection The collection that identifies this resource within its service.\n * @property {deploymentmanager(v2beta).Options} options The options to apply to this resource-level override\n */\n/**\n * @typedef CompositeType\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} description An optional textual description of the resource; provided by the client when the resource is created.\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {string} insertTime [Output Only] Timestamp when the composite type was created, in RFC3339 text format.\n * @property {deploymentmanager(v2beta).CompositeTypeLabelEntry[]} labels Map of labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: [a-z]([-a-z0-9]*[a-z0-9])? Label values must be between 0 and 63 characters long and must conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?\n * @property {string} name Name of the composite type.\n * @property {deploymentmanager(v2beta).Operation} operation [Output Only] The Operation that most recently ran, or is currently running, on this composite type.\n * @property {string} selfLink [Output Only] Self link for the type provider.\n * @property {string} status \n * @property {deploymentmanager(v2beta).TemplateContents} templateContents Files for the template type.\n */\n/**\n * @typedef CompositeTypeLabelEntry\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} key \n * @property {string} value \n */\n/**\n * @typedef CompositeTypesListResponse\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {deploymentmanager(v2beta).CompositeType[]} compositeTypes [Output Only] A list of resource composite types supported by Deployment Manager.\n * @property {string} nextPageToken A token used to continue a truncated list request.\n */\n/**\n * @typedef Condition\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} iam Trusted attributes supplied by the IAM system.\n * @property {string} op An operator to apply the subject with.\n * @property {string} svc Trusted attributes discharged by the service.\n * @property {string} sys Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.\n * @property {string} value DEPRECATED. Use &#39;values&#39; instead.\n * @property {string[]} values The objects of the condition. This is mutually exclusive with &#39;value&#39;.\n */\n/**\n * @typedef ConfigFile\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} content The contents of the file.\n */\n/**\n * @typedef Credential\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {deploymentmanager(v2beta).BasicAuth} basicAuth Basic Auth Credentials for this Type.\n */\n/**\n * @typedef Deployment\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n* @property {string} description An optional user-provided description of the deployment.\n* @property {string} fingerprint Provides a fingerprint to use in requests to modify a deployment, such as update(), stop(), and cancelPreview() requests. A fingerprint is a randomly generated value that must be provided with update(), stop(), and cancelPreview() requests to perform optimistic locking. This ensures optimistic concurrency so that only one request happens at a time.\n\nThe fingerprint is initially generated by Deployment Manager and changes after every request to modify data. To get the latest fingerprint value, perform a get() request to a deployment.\n* @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n* @property {string} insertTime [Output Only] Timestamp when the deployment was created, in RFC3339 text format .\n* @property {deploymentmanager(v2beta).DeploymentLabelEntry[]} labels Map of labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: [a-z]([-a-z0-9]*[a-z0-9])? Label values must be between 0 and 63 characters long and must conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?\n* @property {string} manifest [Output Only] URL of the manifest representing the last manifest that was successfully deployed.\n* @property {string} name Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.\n* @property {deploymentmanager(v2beta).Operation} operation [Output Only] The Operation that most recently ran, or is currently running, on this deployment.\n* @property {string} selfLink [Output Only] Self link for the deployment.\n* @property {deploymentmanager(v2beta).TargetConfiguration} target [Input Only] The parameters that define your deployment, including the deployment configuration and relevant templates.\n* @property {deploymentmanager(v2beta).DeploymentUpdate} update [Output Only] If Deployment Manager is currently updating or previewing an update to this deployment, the updated configuration appears here.\n*/\n/**\n * @typedef DeploymentLabelEntry\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} key \n * @property {string} value \n */\n/**\n * @typedef DeploymentUpdate\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} description [Output Only] An optional user-provided description of the deployment after the current update has been applied.\n * @property {deploymentmanager(v2beta).DeploymentUpdateLabelEntry[]} labels [Output Only] Map of labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: [a-z]([-a-z0-9]*[a-z0-9])? Label values must be between 0 and 63 characters long and must conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?\n * @property {string} manifest [Output Only] URL of the manifest representing the update configuration of this deployment.\n */\n/**\n * @typedef DeploymentUpdateLabelEntry\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} key \n * @property {string} value \n */\n/**\n * @typedef DeploymentsCancelPreviewRequest\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n* @property {string} fingerprint Specifies a fingerprint for cancelPreview() requests. A fingerprint is a randomly generated value that must be provided in cancelPreview() requests to perform optimistic locking. This ensures optimistic concurrency so that the deployment does not have conflicting requests (e.g. if someone attempts to make a new update request while another user attempts to cancel a preview, this would prevent one of the requests).\n\nThe fingerprint is initially generated by Deployment Manager and changes after every request to modify a deployment. To get the latest fingerprint value, perform a get() request on the deployment.\n*/\n/**\n * @typedef DeploymentsListResponse\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {deploymentmanager(v2beta).Deployment[]} deployments [Output Only] The deployments contained in this response.\n * @property {string} nextPageToken [Output Only] A token used to continue a truncated list request.\n */\n/**\n * @typedef DeploymentsStopRequest\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n* @property {string} fingerprint Specifies a fingerprint for stop() requests. A fingerprint is a randomly generated value that must be provided in stop() requests to perform optimistic locking. This ensures optimistic concurrency so that the deployment does not have conflicting requests (e.g. if someone attempts to make a new update request while another user attempts to stop an ongoing update request, this would prevent a collision).\n\nThe fingerprint is initially generated by Deployment Manager and changes after every request to modify a deployment. To get the latest fingerprint value, perform a get() request on the deployment.\n*/\n/**\n * @typedef ImportFile\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} content The contents of the file.\n * @property {string} name The name of the file.\n */\n/**\n * @typedef InputMapping\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} fieldName The name of the field that is going to be injected.\n * @property {string} location The location where this mapping applies.\n * @property {string} methodMatch Regex to evaluate on method to decide if input applies.\n * @property {string} value A jsonPath expression to select an element.\n */\n/**\n * @typedef LogConfig\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {deploymentmanager(v2beta).LogConfigCounterOptions} counter Counter options.\n */\n/**\n * @typedef LogConfigCounterOptions\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} field The field value to attribute.\n * @property {string} metric The metric to update.\n */\n/**\n * @typedef Manifest\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {deploymentmanager(v2beta).ConfigFile} config [Output Only] The YAML configuration for this manifest.\n * @property {string} expandedConfig [Output Only] The fully-expanded configuration file, including any templates and references.\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {deploymentmanager(v2beta).ImportFile[]} imports [Output Only] The imported files for this manifest.\n * @property {string} insertTime [Output Only] Timestamp when the manifest was created, in RFC3339 text format.\n * @property {string} layout [Output Only] The YAML layout for this manifest.\n * @property {string} name [Output Only] The name of the manifest.\n * @property {string} selfLink [Output Only] Self link for the manifest.\n */\n/**\n * @typedef ManifestsListResponse\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {deploymentmanager(v2beta).Manifest[]} manifests [Output Only] Manifests contained in this list response.\n * @property {string} nextPageToken [Output Only] A token used to continue a truncated list request.\n */\n/**\n * @typedef Operation\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} clientOperationId [Output Only] Reserved for future use.\n * @property {string} creationTimestamp [Deprecated] This field is deprecated.\n * @property {string} description [Output Only] A textual description of the operation, which is set when the operation is created.\n * @property {string} endTime [Output Only] The time that this operation was completed. This value is in RFC3339 text format.\n * @property {object} error [Output Only] If errors are generated during processing of the operation, this field will be populated.\n * @property {string} httpErrorMessage [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as NOT FOUND.\n * @property {integer} httpErrorStatusCode [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a 404 means the resource was not found.\n * @property {string} id [Output Only] The unique identifier for the resource. This identifier is defined by the server.\n * @property {string} insertTime [Output Only] The time that this operation was requested. This value is in RFC3339 text format.\n * @property {string} kind [Output Only] Type of the resource. Always compute#operation for Operation resources.\n * @property {string} name [Output Only] Name of the resource.\n * @property {string} operationType [Output Only] The type of operation, such as insert, update, or delete, and so on.\n * @property {integer} progress [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.\n * @property {string} region [Output Only] The URL of the region where the operation resides. Only available when performing regional operations.\n * @property {string} selfLink [Output Only] Server-defined URL for the resource.\n * @property {string} startTime [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.\n * @property {string} status [Output Only] The status of the operation, which can be one of the following: PENDING, RUNNING, or DONE.\n * @property {string} statusMessage [Output Only] An optional textual description of the current status of the operation.\n * @property {string} targetId [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.\n * @property {string} targetLink [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.\n * @property {string} user [Output Only] User who requested the operation, for example: user@example.com.\n * @property {object[]} warnings [Output Only] If warning messages are generated during processing of the operation, this field will be populated.\n * @property {string} zone [Output Only] The URL of the zone where the operation resides. Only available when performing per-zone operations.\n */\n/**\n * @typedef OperationsListResponse\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} nextPageToken [Output Only] A token used to continue a truncated list request.\n * @property {deploymentmanager(v2beta).Operation[]} operations [Output Only] Operations contained in this list response.\n */\n/**\n * @typedef Options\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {deploymentmanager(v2beta).InputMapping[]} inputMappings The mappings that apply for requests.\n * @property {deploymentmanager(v2beta).ValidationOptions} validationOptions Options for how to validate and process properties on a resource.\n * @property {string} virtualProperties Additional properties block described as a jsonSchema, these properties will never be part of the json payload, but they can be consumed by InputMappings, this must be a valid json schema draft-04. The properties specified here will be decouple in a different section. This schema will be merged to the schema validation, and properties here will be extracted From the payload and consumed explicitly by InputMappings. ex: field1: type: string field2: type: number\n */\n/**\n * @typedef Policy\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n* @property {deploymentmanager(v2beta).AuditConfig[]} auditConfigs Specifies cloud audit logging configuration for this policy.\n* @property {deploymentmanager(v2beta).Binding[]} bindings Associates a list of `members` to a `role`. Multiple `bindings` must not be specified for the same `role`. `bindings` with no members will result in an error.\n* @property {string} etag `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy.\n\nIf no `etag` is provided in the call to `setIamPolicy`, then the existing policy is overwritten blindly.\n* @property {boolean} iamOwned \n* @property {deploymentmanager(v2beta).Rule[]} rules If more than one rule is specified, the rules are applied in the following manner: - All matching LOG rules are always applied. - If any DENY/DENY_WITH_LOG rule matches, permission is denied. Logging will be applied if one or more matching rule requires logging. - Otherwise, if any ALLOW/ALLOW_WITH_LOG rule matches, permission is granted. Logging will be applied if one or more matching rule requires logging. - Otherwise, if no rule applies, permission is denied.\n* @property {integer} version Version of the `Policy`. The default version is 0.\n*/\n/**\n * @typedef Resource\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {deploymentmanager(v2beta).ResourceAccessControl} accessControl The Access Control Policy set on this resource.\n * @property {string} finalProperties [Output Only] The evaluated properties of the resource with references expanded. Returned as serialized YAML.\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {string} insertTime [Output Only] Timestamp when the resource was created or acquired, in RFC3339 text format .\n * @property {string} manifest [Output Only] URL of the manifest representing the current configuration of this resource.\n * @property {string} name [Output Only] The name of the resource as it appears in the YAML config.\n * @property {string} properties [Output Only] The current properties of the resource before any references have been filled in. Returned as serialized YAML.\n * @property {string} type [Output Only] The type of the resource, for example compute.v1.instance, or cloudfunctions.v1beta1.function.\n * @property {deploymentmanager(v2beta).ResourceUpdate} update [Output Only] If Deployment Manager is currently updating or previewing an update to this resource, the updated configuration appears here.\n * @property {string} updateTime [Output Only] Timestamp when the resource was updated, in RFC3339 text format .\n * @property {string} url [Output Only] The URL of the actual resource.\n * @property {object[]} warnings [Output Only] If warning messages are generated during processing of this resource, this field will be populated.\n */\n/**\n * @typedef ResourceAccessControl\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} gcpIamPolicy The GCP IAM Policy to set on the resource.\n */\n/**\n * @typedef ResourceUpdate\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {deploymentmanager(v2beta).ResourceAccessControl} accessControl The Access Control Policy to set on this resource after updating the resource itself.\n * @property {object} error [Output Only] If errors are generated during update of the resource, this field will be populated.\n * @property {string} finalProperties [Output Only] The expanded properties of the resource with reference values expanded. Returned as serialized YAML.\n * @property {string} intent [Output Only] The intent of the resource: PREVIEW, UPDATE, or CANCEL.\n * @property {string} manifest [Output Only] URL of the manifest representing the update configuration of this resource.\n * @property {string} properties [Output Only] The set of updated properties for this resource, before references are expanded. Returned as serialized YAML.\n * @property {string} state [Output Only] The state of the resource.\n * @property {object[]} warnings [Output Only] If warning messages are generated during processing of this resource, this field will be populated.\n */\n/**\n * @typedef ResourcesListResponse\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} nextPageToken A token used to continue a truncated list request.\n * @property {deploymentmanager(v2beta).Resource[]} resources Resources contained in this list response.\n */\n/**\n * @typedef Rule\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} action Required\n * @property {deploymentmanager(v2beta).Condition[]} conditions Additional restrictions that must be met\n * @property {string} description Human-readable description of the rule.\n * @property {string[]} ins If one or more &#39;in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.\n * @property {deploymentmanager(v2beta).LogConfig[]} logConfigs The config returned to callers of tech.iam.IAM.CheckPolicy for any entries that match the LOG action.\n * @property {string[]} notIns If one or more &#39;not_in&#39; clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries.\n * @property {string[]} permissions A permission is a string of form &#39;..&#39; (e.g., &#39;storage.buckets.list&#39;). A value of &#39;*&#39; matches all permissions, and a verb part of &#39;*&#39; (e.g., &#39;storage.buckets.*&#39;) matches all verbs.\n */\n/**\n * @typedef TargetConfiguration\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {deploymentmanager(v2beta).ConfigFile} config The configuration to use for this deployment.\n * @property {deploymentmanager(v2beta).ImportFile[]} imports Specifies any files to import for this configuration. This can be used to import templates or other files. For example, you might import a text file in order to use the file in a template.\n */\n/**\n * @typedef TemplateContents\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {deploymentmanager(v2beta).ImportFile[]} imports Import files referenced by the main template.\n * @property {string} interpreter Which interpreter (python or jinja) should be used during expansion.\n * @property {string} schema The contents of the template schema.\n * @property {string} template The contents of the main template file.\n */\n/**\n * @typedef TestPermissionsRequest\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string[]} permissions The set of permissions to check for the &#39;resource&#39;. Permissions with wildcards (such as &#39;*&#39; or &#39;storage.*&#39;) are not allowed.\n */\n/**\n * @typedef TestPermissionsResponse\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string[]} permissions A subset of `TestPermissionsRequest.permissions` that the caller is allowed.\n */\n/**\n * @typedef Type\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {deploymentmanager(v2beta).BaseType} base Base Type (configurable service) that backs this Type.\n * @property {string} description An optional textual description of the resource; provided by the client when the resource is created.\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {string} insertTime [Output Only] Timestamp when the type was created, in RFC3339 text format.\n * @property {deploymentmanager(v2beta).TypeLabelEntry[]} labels Map of labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: [a-z]([-a-z0-9]*[a-z0-9])? Label values must be between 0 and 63 characters long and must conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?\n * @property {string} name Name of the type.\n * @property {deploymentmanager(v2beta).Operation} operation [Output Only] The Operation that most recently ran, or is currently running, on this type.\n * @property {string} selfLink [Output Only] Self link for the type.\n */\n/**\n * @typedef TypeInfo\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} description The description of the type.\n * @property {string} documentationLink For swagger 2.0 externalDocs field will be used. For swagger 1.2 this field will be empty.\n * @property {string} kind [Output Only] Type of the output. Always deploymentManager#TypeInfo for TypeInfo.\n * @property {string} name The base type or composite type name.\n * @property {deploymentmanager(v2beta).TypeInfoSchemaInfo} schema For base types with a collection, we return a schema and documentation link For template types, we return only a schema\n * @property {string} selfLink [Output Only] Server-defined URL for the resource.\n * @property {string} title The title on the API descriptor URL provided.\n */\n/**\n * @typedef TypeInfoSchemaInfo\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} input The properties that this composite type or base type collection accept as input, represented as a json blob, format is: JSON Schema Draft V4\n * @property {string} output The properties that this composite type or base type collection exposes as output, these properties can be used for references, represented as json blob, format is: JSON Schema Draft V4\n */\n/**\n * @typedef TypeLabelEntry\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} key \n * @property {string} value \n */\n/**\n * @typedef TypeProvider\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {deploymentmanager(v2beta).CollectionOverride[]} collectionOverrides Allows resource handling overrides for specific collections\n * @property {deploymentmanager(v2beta).Credential} credential Credential used when interacting with this type.\n * @property {string} description An optional textual description of the resource; provided by the client when the resource is created.\n * @property {string} descriptorUrl Descriptor Url for the this type provider.\n * @property {string} id [Output Only] Unique identifier for the resource; defined by the server.\n * @property {string} insertTime [Output Only] Timestamp when the type provider was created, in RFC3339 text format.\n * @property {deploymentmanager(v2beta).TypeProviderLabelEntry[]} labels Map of labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: [a-z]([-a-z0-9]*[a-z0-9])? Label values must be between 0 and 63 characters long and must conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?\n * @property {string} name Name of the type provider.\n * @property {deploymentmanager(v2beta).Operation} operation [Output Only] The Operation that most recently ran, or is currently running, on this type provider.\n * @property {deploymentmanager(v2beta).Options} options Options to apply when handling any resources in this service.\n * @property {string} selfLink [Output Only] Self link for the type provider.\n */\n/**\n * @typedef TypeProviderLabelEntry\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} key \n * @property {string} value \n */\n/**\n * @typedef TypeProvidersListResponse\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} nextPageToken A token used to continue a truncated list request.\n * @property {deploymentmanager(v2beta).TypeProvider[]} typeProviders [Output Only] A list of resource type providers supported by Deployment Manager.\n */\n/**\n * @typedef TypeProvidersListTypesResponse\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} nextPageToken A token used to continue a truncated list request.\n * @property {deploymentmanager(v2beta).TypeInfo[]} types [Output Only] A list of resource type info.\n */\n/**\n * @typedef TypesListResponse\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} nextPageToken A token used to continue a truncated list request.\n * @property {deploymentmanager(v2beta).Type[]} types [Output Only] A list of resource types supported by Deployment Manager.\n */\n/**\n * @typedef ValidationOptions\n * @memberOf! deploymentmanager(v2beta)\n * @type object\n * @property {string} schemaValidation Customize how deployment manager will validate the resource against schema errors.\n * @property {string} undeclaredProperties Specify what to do with extra properties when executing a request.\n */\nmodule.exports = Deploymentmanager;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/dfareporting/v2.6.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * DCM/DFA Reporting And Trafficking API\n *\n * Manages your DoubleClick Campaign Manager ad campaigns and reports.\n *\n * @example\n * var google = require('googleapis');\n * var dfareporting = google.dfareporting('v2.6');\n *\n * @namespace dfareporting\n * @type {Function}\n * @version v2.6\n * @variation v2.6\n * @param {object=} options Options for Dfareporting\n */\nfunction Dfareporting(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.accountActiveAdSummaries = {\n\n    /**\n     * dfareporting.accountActiveAdSummaries.get\n     *\n     * @desc Gets the account's active ad summary by account ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Account ID.\n     *     summaryAccountId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountActiveAdSummaries.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountActiveAdSummaries.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.summaryAccountId Account ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/accountActiveAdSummaries/{summaryAccountId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'summaryAccountId'],\n        pathParams: ['profileId', 'summaryAccountId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.accountPermissionGroups = {\n\n    /**\n     * dfareporting.accountPermissionGroups.get\n     *\n     * @desc Gets one account permission group by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Account permission group ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountPermissionGroups.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountPermissionGroups.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Account permission group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/accountPermissionGroups/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accountPermissionGroups.list\n     *\n     * @desc Retrieves the list of account permission groups.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountPermissionGroups.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountPermissionGroups.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/accountPermissionGroups',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.accountPermissions = {\n\n    /**\n     * dfareporting.accountPermissions.get\n     *\n     * @desc Gets one account permission by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Account permission ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountPermissions.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountPermissions.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Account permission ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/accountPermissions/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accountPermissions.list\n     *\n     * @desc Retrieves the list of account permissions.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountPermissions.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountPermissions.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/accountPermissions',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.accountUserProfiles = {\n\n    /**\n     * dfareporting.accountUserProfiles.get\n     *\n     * @desc Gets one account user profile by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // User profile ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountUserProfiles.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountUserProfiles.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id User profile ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/accountUserProfiles/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accountUserProfiles.insert\n     *\n     * @desc Inserts a new account user profile.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountUserProfiles.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountUserProfiles.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).AccountUserProfile} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/accountUserProfiles',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accountUserProfiles.list\n     *\n     * @desc Retrieves a list of account user profiles, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var accountUserProfilesPage = response['accountUserProfiles'];\n     *     if (!accountUserProfilesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < accountUserProfilesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `accountUserProfilesPage`:\n     *       console.log(JSON.stringify(accountUserProfilesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.accountUserProfiles.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.accountUserProfiles.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountUserProfiles.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.active Select only active user profiles.\n     * @param {string=} params.ids Select only user profiles with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, \"user profile*2015\" will return objects with names like \"user profile June 2015\", \"user profile April 2015\", or simply \"user profile 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"user profile\" will match objects with name \"my user profile\", \"user profile 2015\", or simply \"user profile\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.subaccountId Select only user profiles with the specified subaccount ID.\n     * @param {string=} params.userRoleId Select only user profiles with the specified user role ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/accountUserProfiles',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accountUserProfiles.patch\n     *\n     * @desc Updates an existing account user profile. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // User profile ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountUserProfiles.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountUserProfiles.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id User profile ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).AccountUserProfile} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/accountUserProfiles',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accountUserProfiles.update\n     *\n     * @desc Updates an existing account user profile.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountUserProfiles.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountUserProfiles.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).AccountUserProfile} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/accountUserProfiles',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.accounts = {\n\n    /**\n     * dfareporting.accounts.get\n     *\n     * @desc Gets one account by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Account ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accounts.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accounts.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Account ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/accounts/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accounts.list\n     *\n     * @desc Retrieves the list of accounts, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var accountsPage = response['accounts'];\n     *     if (!accountsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < accountsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `accountsPage`:\n     *       console.log(JSON.stringify(accountsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.accounts.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.accounts.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accounts.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.active Select only active accounts. Don't set this field to select both active and non-active accounts.\n     * @param {string=} params.ids Select only accounts with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"account*2015\" will return objects with names like \"account June 2015\", \"account April 2015\", or simply \"account 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"account\" will match objects with name \"my account\", \"account 2015\", or simply \"account\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/accounts',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accounts.patch\n     *\n     * @desc Updates an existing account. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Account ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accounts.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accounts.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Account ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Account} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/accounts',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accounts.update\n     *\n     * @desc Updates an existing account.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accounts.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accounts.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Account} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/accounts',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.ads = {\n\n    /**\n     * dfareporting.ads.get\n     *\n     * @desc Gets one ad by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Ad ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.ads.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.ads.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Ad ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/ads/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.ads.insert\n     *\n     * @desc Inserts a new ad.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.ads.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.ads.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Ad} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/ads',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.ads.list\n     *\n     * @desc Retrieves a list of ads, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var adsPage = response['ads'];\n     *     if (!adsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < adsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `adsPage`:\n     *       console.log(JSON.stringify(adsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.ads.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.ads.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.ads.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.active Select only active ads.\n     * @param {string=} params.advertiserId Select only ads with this advertiser ID.\n     * @param {boolean=} params.archived Select only archived ads.\n     * @param {string=} params.audienceSegmentIds Select only ads with these audience segment IDs.\n     * @param {string=} params.campaignIds Select only ads with these campaign IDs.\n     * @param {string=} params.compatibility Select default ads with the specified compatibility. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering an in-stream video ads developed with the VAST standard.\n     * @param {string=} params.creativeIds Select only ads with these creative IDs assigned.\n     * @param {string=} params.creativeOptimizationConfigurationIds Select only ads with these creative optimization configuration IDs.\n     * @param {string=} params.creativeType Select only ads with the specified creativeType.\n     * @param {boolean=} params.dynamicClickTracker Select only dynamic click trackers. Applicable when type is AD_SERVING_CLICK_TRACKER. If true, select dynamic click trackers. If false, select static click trackers. Leave unset to select both.\n     * @param {string=} params.ids Select only ads with these IDs.\n     * @param {string=} params.landingPageIds Select only ads with these landing page IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.overriddenEventTagId Select only ads with this event tag override ID.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string=} params.placementIds Select only ads with these placement IDs assigned.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.remarketingListIds Select only ads whose list targeting expression use these remarketing list IDs.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"ad*2015\" will return objects with names like \"ad June 2015\", \"ad April 2015\", or simply \"ad 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"ad\" will match objects with name \"my ad\", \"ad 2015\", or simply \"ad\".\n     * @param {string=} params.sizeIds Select only ads with these size IDs.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {boolean=} params.sslCompliant Select only ads that are SSL-compliant.\n     * @param {boolean=} params.sslRequired Select only ads that require SSL.\n     * @param {string=} params.type Select only ads with these types.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/ads',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.ads.patch\n     *\n     * @desc Updates an existing ad. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Ad ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.ads.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.ads.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Ad ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Ad} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/ads',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.ads.update\n     *\n     * @desc Updates an existing ad.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.ads.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.ads.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Ad} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/ads',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.advertiserGroups = {\n\n    /**\n     * dfareporting.advertiserGroups.delete\n     *\n     * @desc Deletes an existing advertiser group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Advertiser group ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertiserGroups.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertiserGroups.delete\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Advertiser group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/advertiserGroups/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertiserGroups.get\n     *\n     * @desc Gets one advertiser group by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Advertiser group ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertiserGroups.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertiserGroups.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Advertiser group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/advertiserGroups/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertiserGroups.insert\n     *\n     * @desc Inserts a new advertiser group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertiserGroups.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertiserGroups.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).AdvertiserGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/advertiserGroups',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertiserGroups.list\n     *\n     * @desc Retrieves a list of advertiser groups, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var advertiserGroupsPage = response['advertiserGroups'];\n     *     if (!advertiserGroupsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < advertiserGroupsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `advertiserGroupsPage`:\n     *       console.log(JSON.stringify(advertiserGroupsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.advertiserGroups.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.advertiserGroups.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertiserGroups.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.ids Select only advertiser groups with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"advertiser*2015\" will return objects with names like \"advertiser group June 2015\", \"advertiser group April 2015\", or simply \"advertiser group 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"advertisergroup\" will match objects with name \"my advertisergroup\", \"advertisergroup 2015\", or simply \"advertisergroup\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/advertiserGroups',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertiserGroups.patch\n     *\n     * @desc Updates an existing advertiser group. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Advertiser group ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertiserGroups.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertiserGroups.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Advertiser group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).AdvertiserGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/advertiserGroups',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertiserGroups.update\n     *\n     * @desc Updates an existing advertiser group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertiserGroups.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertiserGroups.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).AdvertiserGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/advertiserGroups',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.advertisers = {\n\n    /**\n     * dfareporting.advertisers.get\n     *\n     * @desc Gets one advertiser by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Advertiser ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertisers.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertisers.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Advertiser ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/advertisers/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertisers.insert\n     *\n     * @desc Inserts a new advertiser.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertisers.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertisers.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Advertiser} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/advertisers',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertisers.list\n     *\n     * @desc Retrieves a list of advertisers, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var advertisersPage = response['advertisers'];\n     *     if (!advertisersPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < advertisersPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `advertisersPage`:\n     *       console.log(JSON.stringify(advertisersPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.advertisers.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.advertisers.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertisers.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserGroupIds Select only advertisers with these advertiser group IDs.\n     * @param {string=} params.floodlightConfigurationIds Select only advertisers with these floodlight configuration IDs.\n     * @param {string=} params.ids Select only advertisers with these IDs.\n     * @param {boolean=} params.includeAdvertisersWithoutGroupsOnly Select only advertisers which do not belong to any advertiser group.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {boolean=} params.onlyParent Select only advertisers which use another advertiser's floodlight configuration.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"advertiser*2015\" will return objects with names like \"advertiser June 2015\", \"advertiser April 2015\", or simply \"advertiser 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"advertiser\" will match objects with name \"my advertiser\", \"advertiser 2015\", or simply \"advertiser\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.status Select only advertisers with the specified status.\n     * @param {string=} params.subaccountId Select only advertisers with these subaccount IDs.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/advertisers',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertisers.patch\n     *\n     * @desc Updates an existing advertiser. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Advertiser ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertisers.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertisers.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Advertiser ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Advertiser} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/advertisers',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertisers.update\n     *\n     * @desc Updates an existing advertiser.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertisers.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertisers.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Advertiser} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/advertisers',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.browsers = {\n\n    /**\n     * dfareporting.browsers.list\n     *\n     * @desc Retrieves a list of browsers.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.browsers.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.browsers.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/browsers',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.campaignCreativeAssociations = {\n\n    /**\n     * dfareporting.campaignCreativeAssociations.insert\n     *\n     * @desc Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Campaign ID in this association.\n     *     campaignId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.campaignCreativeAssociations.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.campaignCreativeAssociations.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.campaignId Campaign ID in this association.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).CampaignCreativeAssociation} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'campaignId'],\n        pathParams: ['campaignId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.campaignCreativeAssociations.list\n     *\n     * @desc Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Campaign ID in this association.\n     *     campaignId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var campaignCreativeAssociationsPage = response['campaignCreativeAssociations'];\n     *     if (!campaignCreativeAssociationsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < campaignCreativeAssociationsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `campaignCreativeAssociationsPage`:\n     *       console.log(JSON.stringify(campaignCreativeAssociationsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.campaignCreativeAssociations.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.campaignCreativeAssociations.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.campaignCreativeAssociations.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.campaignId Campaign ID in this association.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'campaignId'],\n        pathParams: ['campaignId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.campaigns = {\n\n    /**\n     * dfareporting.campaigns.get\n     *\n     * @desc Gets one campaign by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Campaign ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.campaigns.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.campaigns.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Campaign ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/campaigns/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.campaigns.insert\n     *\n     * @desc Inserts a new campaign.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Default landing page name for this new campaign. Must be less than 256 characters long.\n     *     defaultLandingPageName: '',  // TODO: Update placeholder value.\n     *\n     *     // Default landing page URL for this new campaign.\n     *     defaultLandingPageUrl: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.campaigns.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.campaigns.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.defaultLandingPageName Default landing page name for this new campaign. Must be less than 256 characters long.\n     * @param {string} params.defaultLandingPageUrl Default landing page URL for this new campaign.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Campaign} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/campaigns',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'defaultLandingPageName', 'defaultLandingPageUrl'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.campaigns.list\n     *\n     * @desc Retrieves a list of campaigns, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var campaignsPage = response['campaigns'];\n     *     if (!campaignsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < campaignsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `campaignsPage`:\n     *       console.log(JSON.stringify(campaignsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.campaigns.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.campaigns.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.campaigns.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserGroupIds Select only campaigns whose advertisers belong to these advertiser groups.\n     * @param {string=} params.advertiserIds Select only campaigns that belong to these advertisers.\n     * @param {boolean=} params.archived Select only archived campaigns. Don't set this field to select both archived and non-archived campaigns.\n     * @param {boolean=} params.atLeastOneOptimizationActivity Select only campaigns that have at least one optimization activity.\n     * @param {string=} params.excludedIds Exclude campaigns with these IDs.\n     * @param {string=} params.ids Select only campaigns with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.overriddenEventTagId Select only campaigns that have overridden this event tag ID.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for campaigns by name or ID. Wildcards (*) are allowed. For example, \"campaign*2015\" will return campaigns with names like \"campaign June 2015\", \"campaign April 2015\", or simply \"campaign 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"campaign\" will match campaigns with name \"my campaign\", \"campaign 2015\", or simply \"campaign\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.subaccountId Select only campaigns that belong to this subaccount.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/campaigns',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.campaigns.patch\n     *\n     * @desc Updates an existing campaign. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Campaign ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.campaigns.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.campaigns.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Campaign ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Campaign} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/campaigns',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.campaigns.update\n     *\n     * @desc Updates an existing campaign.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.campaigns.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.campaigns.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Campaign} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/campaigns',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.changeLogs = {\n\n    /**\n     * dfareporting.changeLogs.get\n     *\n     * @desc Gets one change log by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Change log ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.changeLogs.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.changeLogs.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Change log ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/changeLogs/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.changeLogs.list\n     *\n     * @desc Retrieves a list of change logs. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var changeLogsPage = response['changeLogs'];\n     *     if (!changeLogsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < changeLogsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `changeLogsPage`:\n     *       console.log(JSON.stringify(changeLogsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.changeLogs.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.changeLogs.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.changeLogs.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.action Select only change logs with the specified action.\n     * @param {string=} params.ids Select only change logs with these IDs.\n     * @param {string=} params.maxChangeTime Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is \"2015-07-18T22:54:00-04:00\". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.minChangeTime Select only change logs whose change time is before the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is \"2015-07-18T22:54:00-04:00\". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.\n     * @param {string=} params.objectIds Select only change logs with these object IDs.\n     * @param {string=} params.objectType Select only change logs with the specified object type.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Select only change logs whose object ID, user name, old or new values match the search string.\n     * @param {string=} params.userProfileIds Select only change logs with these user profile IDs.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/changeLogs',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.cities = {\n\n    /**\n     * dfareporting.cities.list\n     *\n     * @desc Retrieves a list of cities, possibly filtered.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.cities.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.cities.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.countryDartIds Select only cities from these countries.\n     * @param {string=} params.dartIds Select only cities with these DART IDs.\n     * @param {string=} params.namePrefix Select only cities with names starting with this prefix.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.regionDartIds Select only cities from these regions.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/cities',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.connectionTypes = {\n\n    /**\n     * dfareporting.connectionTypes.get\n     *\n     * @desc Gets one connection type by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Connection type ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.connectionTypes.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.connectionTypes.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Connection type ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/connectionTypes/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.connectionTypes.list\n     *\n     * @desc Retrieves a list of connection types.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.connectionTypes.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.connectionTypes.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/connectionTypes',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.contentCategories = {\n\n    /**\n     * dfareporting.contentCategories.delete\n     *\n     * @desc Deletes an existing content category.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Content category ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.contentCategories.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.contentCategories.delete\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Content category ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/contentCategories/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.contentCategories.get\n     *\n     * @desc Gets one content category by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Content category ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.contentCategories.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.contentCategories.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Content category ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/contentCategories/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.contentCategories.insert\n     *\n     * @desc Inserts a new content category.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.contentCategories.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.contentCategories.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).ContentCategory} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/contentCategories',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.contentCategories.list\n     *\n     * @desc Retrieves a list of content categories, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var contentCategoriesPage = response['contentCategories'];\n     *     if (!contentCategoriesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < contentCategoriesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `contentCategoriesPage`:\n     *       console.log(JSON.stringify(contentCategoriesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.contentCategories.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.contentCategories.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.contentCategories.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.ids Select only content categories with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"contentcategory*2015\" will return objects with names like \"contentcategory June 2015\", \"contentcategory April 2015\", or simply \"contentcategory 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"contentcategory\" will match objects with name \"my contentcategory\", \"contentcategory 2015\", or simply \"contentcategory\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/contentCategories',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.contentCategories.patch\n     *\n     * @desc Updates an existing content category. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Content category ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.contentCategories.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.contentCategories.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Content category ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).ContentCategory} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/contentCategories',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.contentCategories.update\n     *\n     * @desc Updates an existing content category.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.contentCategories.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.contentCategories.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).ContentCategory} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/contentCategories',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.conversions = {\n\n    /**\n     * dfareporting.conversions.batchinsert\n     *\n     * @desc Inserts conversions.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.conversions.batchinsert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/ddmconversions\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.conversions.batchinsert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).ConversionsBatchInsertRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    batchinsert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/conversions/batchinsert',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.countries = {\n\n    /**\n     * dfareporting.countries.get\n     *\n     * @desc Gets one country by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Country DART ID.\n     *     dartId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.countries.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.countries.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.dartId Country DART ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/countries/{dartId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'dartId'],\n        pathParams: ['dartId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.countries.list\n     *\n     * @desc Retrieves a list of countries.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.countries.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.countries.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/countries',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.creativeAssets = {\n\n    /**\n     * dfareporting.creativeAssets.insert\n     *\n     * @desc Inserts a new creative asset.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Advertiser ID of this creative. This is a required field.\n     *     advertiserId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     media: {\n     *       // TODO: Add desired media content for upload. See:\n     *       // https://github.com/google/google-api-nodejs-client#media-uploads\n     *       mimeType: '',  // See https://www.w3.org/Protocols/rfc1341/4_Content-Type.html\n     *       body: {}\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeAssets.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeAssets.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.advertiserId Advertiser ID of this creative. This is a required field.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param  {object} params.resource Media resource metadata\n     * @param {object} params.media Media object\n     * @param {string} params.media.mimeType Media mime-type\n     * @param {string|object} params.media.body Media body contents\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets',\n          method: 'POST'\n        }, options),\n        params: params,\n        mediaUrl: 'https://www.googleapis.com/upload/dfareporting/v2.6/userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets',\n        requiredParams: ['profileId', 'advertiserId'],\n        pathParams: ['advertiserId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.creativeFieldValues = {\n\n    /**\n     * dfareporting.creativeFieldValues.delete\n     *\n     * @desc Deletes an existing creative field value.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Creative field ID for this creative field value.\n     *     creativeFieldId: '',  // TODO: Update placeholder value.\n     *\n     *     // Creative Field Value ID\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFieldValues.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFieldValues.delete\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.creativeFieldId Creative field ID for this creative field value.\n     * @param {string} params.id Creative Field Value ID\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'creativeFieldId', 'id'],\n        pathParams: ['creativeFieldId', 'id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFieldValues.get\n     *\n     * @desc Gets one creative field value by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Creative field ID for this creative field value.\n     *     creativeFieldId: '',  // TODO: Update placeholder value.\n     *\n     *     // Creative Field Value ID\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFieldValues.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFieldValues.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.creativeFieldId Creative field ID for this creative field value.\n     * @param {string} params.id Creative Field Value ID\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'creativeFieldId', 'id'],\n        pathParams: ['creativeFieldId', 'id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFieldValues.insert\n     *\n     * @desc Inserts a new creative field value.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Creative field ID for this creative field value.\n     *     creativeFieldId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFieldValues.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFieldValues.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.creativeFieldId Creative field ID for this creative field value.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).CreativeFieldValue} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'creativeFieldId'],\n        pathParams: ['creativeFieldId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFieldValues.list\n     *\n     * @desc Retrieves a list of creative field values, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Creative field ID for this creative field value.\n     *     creativeFieldId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var creativeFieldValuesPage = response['creativeFieldValues'];\n     *     if (!creativeFieldValuesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < creativeFieldValuesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `creativeFieldValuesPage`:\n     *       console.log(JSON.stringify(creativeFieldValuesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.creativeFieldValues.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.creativeFieldValues.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFieldValues.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.creativeFieldId Creative field ID for this creative field value.\n     * @param {string=} params.ids Select only creative field values with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for creative field values by their values. Wildcards (e.g. *) are not allowed.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'creativeFieldId'],\n        pathParams: ['creativeFieldId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFieldValues.patch\n     *\n     * @desc Updates an existing creative field value. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Creative field ID for this creative field value.\n     *     creativeFieldId: '',  // TODO: Update placeholder value.\n     *\n     *     // Creative Field Value ID\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFieldValues.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFieldValues.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.creativeFieldId Creative field ID for this creative field value.\n     * @param {string} params.id Creative Field Value ID\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).CreativeFieldValue} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'creativeFieldId', 'id'],\n        pathParams: ['creativeFieldId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFieldValues.update\n     *\n     * @desc Updates an existing creative field value.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Creative field ID for this creative field value.\n     *     creativeFieldId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFieldValues.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFieldValues.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.creativeFieldId Creative field ID for this creative field value.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).CreativeFieldValue} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'creativeFieldId'],\n        pathParams: ['creativeFieldId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.creativeFields = {\n\n    /**\n     * dfareporting.creativeFields.delete\n     *\n     * @desc Deletes an existing creative field.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Creative Field ID\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFields.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFields.delete\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Creative Field ID\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeFields/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFields.get\n     *\n     * @desc Gets one creative field by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Creative Field ID\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFields.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFields.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Creative Field ID\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeFields/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFields.insert\n     *\n     * @desc Inserts a new creative field.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFields.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFields.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).CreativeField} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeFields',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFields.list\n     *\n     * @desc Retrieves a list of creative fields, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var creativeFieldsPage = response['creativeFields'];\n     *     if (!creativeFieldsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < creativeFieldsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `creativeFieldsPage`:\n     *       console.log(JSON.stringify(creativeFieldsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.creativeFields.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.creativeFields.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFields.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserIds Select only creative fields that belong to these advertisers.\n     * @param {string=} params.ids Select only creative fields with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for creative fields by name or ID. Wildcards (*) are allowed. For example, \"creativefield*2015\" will return creative fields with names like \"creativefield June 2015\", \"creativefield April 2015\", or simply \"creativefield 2015\". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of \"creativefield\" will match creative fields with the name \"my creativefield\", \"creativefield 2015\", or simply \"creativefield\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeFields',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFields.patch\n     *\n     * @desc Updates an existing creative field. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Creative Field ID\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFields.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFields.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Creative Field ID\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).CreativeField} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeFields',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFields.update\n     *\n     * @desc Updates an existing creative field.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFields.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFields.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).CreativeField} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeFields',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.creativeGroups = {\n\n    /**\n     * dfareporting.creativeGroups.get\n     *\n     * @desc Gets one creative group by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Creative group ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeGroups.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeGroups.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Creative group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeGroups/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeGroups.insert\n     *\n     * @desc Inserts a new creative group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeGroups.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeGroups.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).CreativeGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeGroups',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeGroups.list\n     *\n     * @desc Retrieves a list of creative groups, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var creativeGroupsPage = response['creativeGroups'];\n     *     if (!creativeGroupsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < creativeGroupsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `creativeGroupsPage`:\n     *       console.log(JSON.stringify(creativeGroupsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.creativeGroups.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.creativeGroups.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeGroups.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserIds Select only creative groups that belong to these advertisers.\n     * @param {integer=} params.groupNumber Select only creative groups that belong to this subgroup.\n     * @param {string=} params.ids Select only creative groups with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for creative groups by name or ID. Wildcards (*) are allowed. For example, \"creativegroup*2015\" will return creative groups with names like \"creativegroup June 2015\", \"creativegroup April 2015\", or simply \"creativegroup 2015\". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of \"creativegroup\" will match creative groups with the name \"my creativegroup\", \"creativegroup 2015\", or simply \"creativegroup\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeGroups',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeGroups.patch\n     *\n     * @desc Updates an existing creative group. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Creative group ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeGroups.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeGroups.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Creative group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).CreativeGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeGroups',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeGroups.update\n     *\n     * @desc Updates an existing creative group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeGroups.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeGroups.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).CreativeGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creativeGroups',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.creatives = {\n\n    /**\n     * dfareporting.creatives.get\n     *\n     * @desc Gets one creative by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Creative ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creatives.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creatives.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Creative ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creatives/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creatives.insert\n     *\n     * @desc Inserts a new creative.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creatives.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creatives.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Creative} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creatives',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creatives.list\n     *\n     * @desc Retrieves a list of creatives, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var creativesPage = response['creatives'];\n     *     if (!creativesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < creativesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `creativesPage`:\n     *       console.log(JSON.stringify(creativesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.creatives.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.creatives.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creatives.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.active Select only active creatives. Leave blank to select active and inactive creatives.\n     * @param {string=} params.advertiserId Select only creatives with this advertiser ID.\n     * @param {boolean=} params.archived Select only archived creatives. Leave blank to select archived and unarchived creatives.\n     * @param {string=} params.campaignId Select only creatives with this campaign ID.\n     * @param {string=} params.companionCreativeIds Select only in-stream video creatives with these companion IDs.\n     * @param {string=} params.creativeFieldIds Select only creatives with these creative field IDs.\n     * @param {string=} params.ids Select only creatives with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.renderingIds Select only creatives with these rendering IDs.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"creative*2015\" will return objects with names like \"creative June 2015\", \"creative April 2015\", or simply \"creative 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"creative\" will match objects with name \"my creative\", \"creative 2015\", or simply \"creative\".\n     * @param {string=} params.sizeIds Select only creatives with these size IDs.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.studioCreativeId Select only creatives corresponding to this Studio creative ID.\n     * @param {string=} params.types Select only creatives with these creative types.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creatives',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creatives.patch\n     *\n     * @desc Updates an existing creative. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Creative ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creatives.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creatives.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Creative ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Creative} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creatives',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creatives.update\n     *\n     * @desc Updates an existing creative.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creatives.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creatives.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Creative} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/creatives',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.dimensionValues = {\n\n    /**\n     * dfareporting.dimensionValues.query\n     *\n     * @desc Retrieves list of report dimension values for a list of filters.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA user profile ID.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var itemsPage = response['items'];\n     *     if (!itemsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < itemsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `itemsPage`:\n     *       console.log(JSON.stringify(itemsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.dimensionValues.query(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.dimensionValues.query(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfareporting\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.dimensionValues.query\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken The value of the nextToken from the previous result page.\n     * @param {string} params.profileId The DFA user profile ID.\n     * @param {dfareporting(v2.6).DimensionValueRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    query: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/dimensionvalues/query',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.directorySiteContacts = {\n\n    /**\n     * dfareporting.directorySiteContacts.get\n     *\n     * @desc Gets one directory site contact by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Directory site contact ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.directorySiteContacts.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.directorySiteContacts.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Directory site contact ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/directorySiteContacts/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.directorySiteContacts.list\n     *\n     * @desc Retrieves a list of directory site contacts, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var directorySiteContactsPage = response['directorySiteContacts'];\n     *     if (!directorySiteContactsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < directorySiteContactsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `directorySiteContactsPage`:\n     *       console.log(JSON.stringify(directorySiteContactsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.directorySiteContacts.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.directorySiteContacts.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.directorySiteContacts.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.directorySiteIds Select only directory site contacts with these directory site IDs. This is a required field.\n     * @param {string=} params.ids Select only directory site contacts with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, \"directory site contact*2015\" will return objects with names like \"directory site contact June 2015\", \"directory site contact April 2015\", or simply \"directory site contact 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"directory site contact\" will match objects with name \"my directory site contact\", \"directory site contact 2015\", or simply \"directory site contact\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/directorySiteContacts',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.directorySites = {\n\n    /**\n     * dfareporting.directorySites.get\n     *\n     * @desc Gets one directory site by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Directory site ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.directorySites.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.directorySites.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Directory site ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/directorySites/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.directorySites.insert\n     *\n     * @desc Inserts a new directory site.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.directorySites.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.directorySites.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).DirectorySite} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/directorySites',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.directorySites.list\n     *\n     * @desc Retrieves a list of directory sites, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var directorySitesPage = response['directorySites'];\n     *     if (!directorySitesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < directorySitesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `directorySitesPage`:\n     *       console.log(JSON.stringify(directorySitesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.directorySites.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.directorySites.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.directorySites.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.acceptsInStreamVideoPlacements This search filter is no longer supported and will have no effect on the results returned.\n     * @param {boolean=} params.acceptsInterstitialPlacements This search filter is no longer supported and will have no effect on the results returned.\n     * @param {boolean=} params.acceptsPublisherPaidPlacements Select only directory sites that accept publisher paid placements. This field can be left blank.\n     * @param {boolean=} params.active Select only active directory sites. Leave blank to retrieve both active and inactive directory sites.\n     * @param {string=} params.countryId Select only directory sites with this country ID.\n     * @param {string=} params.dfp_network_code Select only directory sites with this DFP network code.\n     * @param {string=} params.ids Select only directory sites with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string=} params.parentId Select only directory sites with this parent ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name, ID or URL. Wildcards (*) are allowed. For example, \"directory site*2015\" will return objects with names like \"directory site June 2015\", \"directory site April 2015\", or simply \"directory site 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"directory site\" will match objects with name \"my directory site\", \"directory site 2015\" or simply, \"directory site\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/directorySites',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.dynamicTargetingKeys = {\n\n    /**\n     * dfareporting.dynamicTargetingKeys.delete\n     *\n     * @desc Deletes an existing dynamic targeting key.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // ID of the object of this dynamic targeting key. This is a required field.\n     *     objectId: '',  // TODO: Update placeholder value.\n     *\n     *     // Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long\n     *     // and cannot contain commas. All characters are converted to lowercase.\n     *     name: '',  // TODO: Update placeholder value.\n     *\n     *     // Type of the object of this dynamic targeting key. This is a required field.\n     *     objectType: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.dynamicTargetingKeys.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.dynamicTargetingKeys.delete\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.name Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.\n     * @param {string} params.objectId ID of the object of this dynamic targeting key. This is a required field.\n     * @param {string} params.objectType Type of the object of this dynamic targeting key. This is a required field.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/dynamicTargetingKeys/{objectId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'objectId', 'name', 'objectType'],\n        pathParams: ['objectId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.dynamicTargetingKeys.insert\n     *\n     * @desc Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.dynamicTargetingKeys.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.dynamicTargetingKeys.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).DynamicTargetingKey} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/dynamicTargetingKeys',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.dynamicTargetingKeys.list\n     *\n     * @desc Retrieves a list of dynamic targeting keys.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.dynamicTargetingKeys.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.dynamicTargetingKeys.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserId Select only dynamic targeting keys whose object has this advertiser ID.\n     * @param {string=} params.names Select only dynamic targeting keys exactly matching these names.\n     * @param {string=} params.objectId Select only dynamic targeting keys with this object ID.\n     * @param {string=} params.objectType Select only dynamic targeting keys with this object type.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/dynamicTargetingKeys',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.eventTags = {\n\n    /**\n     * dfareporting.eventTags.delete\n     *\n     * @desc Deletes an existing event tag.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Event tag ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.eventTags.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.eventTags.delete\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Event tag ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/eventTags/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.eventTags.get\n     *\n     * @desc Gets one event tag by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Event tag ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.eventTags.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.eventTags.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Event tag ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/eventTags/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.eventTags.insert\n     *\n     * @desc Inserts a new event tag.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.eventTags.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.eventTags.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).EventTag} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/eventTags',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.eventTags.list\n     *\n     * @desc Retrieves a list of event tags, possibly filtered.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.eventTags.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.eventTags.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.adId Select only event tags that belong to this ad.\n     * @param {string=} params.advertiserId Select only event tags that belong to this advertiser.\n     * @param {string=} params.campaignId Select only event tags that belong to this campaign.\n     * @param {boolean=} params.definitionsOnly Examine only the specified campaign or advertiser's event tags for matching selector criteria. When set to false, the parent advertiser and parent campaign of the specified ad or campaign is examined as well. In addition, when set to false, the status field is examined as well, along with the enabledByDefault field. This parameter can not be set to true when adId is specified as ads do not define their own even tags.\n     * @param {boolean=} params.enabled Select only enabled event tags. What is considered enabled or disabled depends on the definitionsOnly parameter. When definitionsOnly is set to true, only the specified advertiser or campaign's event tags' enabledByDefault field is examined. When definitionsOnly is set to false, the specified ad or specified campaign's parent advertiser's or parent campaign's event tags' enabledByDefault and status fields are examined as well.\n     * @param {string=} params.eventTagTypes Select only event tags with the specified event tag types. Event tag types can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking.\n     * @param {string=} params.ids Select only event tags with these IDs.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"eventtag*2015\" will return objects with names like \"eventtag June 2015\", \"eventtag April 2015\", or simply \"eventtag 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"eventtag\" will match objects with name \"my eventtag\", \"eventtag 2015\", or simply \"eventtag\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/eventTags',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.eventTags.patch\n     *\n     * @desc Updates an existing event tag. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Event tag ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.eventTags.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.eventTags.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Event tag ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).EventTag} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/eventTags',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.eventTags.update\n     *\n     * @desc Updates an existing event tag.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.eventTags.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.eventTags.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).EventTag} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/eventTags',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.files = {\n\n    /**\n     * dfareporting.files.get\n     *\n     * @desc Retrieves a report file by its report ID and file ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The ID of the report.\n     *     reportId: '',  // TODO: Update placeholder value.\n     *\n     *     // The ID of the report file.\n     *     fileId: '',  // TODO: Update placeholder value.\n     *\n     *     // TODO: To download media content, use:\n     *     //\n     *     // alt: 'media',\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.files.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfareporting\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.files.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.fileId The ID of the report file.\n     * @param {string} params.reportId The ID of the report.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/reports/{reportId}/files/{fileId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['reportId', 'fileId'],\n        pathParams: ['fileId', 'reportId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.files.list\n     *\n     * @desc Lists files for a user profile.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA profile ID.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var itemsPage = response['items'];\n     *     if (!itemsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < itemsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `itemsPage`:\n     *       console.log(JSON.stringify(itemsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.files.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.files.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfareporting\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.files.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken The value of the nextToken from the previous result page.\n     * @param {string} params.profileId The DFA profile ID.\n     * @param {string=} params.scope The scope that defines which results are returned, default is 'MINE'.\n     * @param {string=} params.sortField The field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is 'DESCENDING'.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/files',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.floodlightActivities = {\n\n    /**\n     * dfareporting.floodlightActivities.delete\n     *\n     * @desc Deletes an existing floodlight activity.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Floodlight activity ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivities.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivities.delete\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Floodlight activity ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/floodlightActivities/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivities.generatetag\n     *\n     * @desc Generates a tag for a floodlight activity.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivities.generatetag(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivities.generatetag\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.floodlightActivityId Floodlight activity ID for which we want to generate a tag.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    generatetag: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/floodlightActivities/generatetag',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivities.get\n     *\n     * @desc Gets one floodlight activity by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Floodlight activity ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivities.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivities.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Floodlight activity ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/floodlightActivities/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivities.insert\n     *\n     * @desc Inserts a new floodlight activity.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivities.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivities.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).FloodlightActivity} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/floodlightActivities',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivities.list\n     *\n     * @desc Retrieves a list of floodlight activities, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var floodlightActivitiesPage = response['floodlightActivities'];\n     *     if (!floodlightActivitiesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < floodlightActivitiesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `floodlightActivitiesPage`:\n     *       console.log(JSON.stringify(floodlightActivitiesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.floodlightActivities.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.floodlightActivities.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivities.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserId Select only floodlight activities for the specified advertiser ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.\n     * @param {string=} params.floodlightActivityGroupIds Select only floodlight activities with the specified floodlight activity group IDs.\n     * @param {string=} params.floodlightActivityGroupName Select only floodlight activities with the specified floodlight activity group name.\n     * @param {string=} params.floodlightActivityGroupTagString Select only floodlight activities with the specified floodlight activity group tag string.\n     * @param {string=} params.floodlightActivityGroupType Select only floodlight activities with the specified floodlight activity group type.\n     * @param {string=} params.floodlightConfigurationId Select only floodlight activities for the specified floodlight configuration ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.\n     * @param {string=} params.ids Select only floodlight activities with the specified IDs. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"floodlightactivity*2015\" will return objects with names like \"floodlightactivity June 2015\", \"floodlightactivity April 2015\", or simply \"floodlightactivity 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"floodlightactivity\" will match objects with name \"my floodlightactivity activity\", \"floodlightactivity 2015\", or simply \"floodlightactivity\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.tagString Select only floodlight activities with the specified tag string.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/floodlightActivities',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivities.patch\n     *\n     * @desc Updates an existing floodlight activity. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Floodlight activity ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivities.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivities.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Floodlight activity ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).FloodlightActivity} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/floodlightActivities',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivities.update\n     *\n     * @desc Updates an existing floodlight activity.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivities.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivities.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).FloodlightActivity} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/floodlightActivities',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.floodlightActivityGroups = {\n\n    /**\n     * dfareporting.floodlightActivityGroups.get\n     *\n     * @desc Gets one floodlight activity group by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Floodlight activity Group ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivityGroups.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivityGroups.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Floodlight activity Group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/floodlightActivityGroups/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivityGroups.insert\n     *\n     * @desc Inserts a new floodlight activity group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivityGroups.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivityGroups.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).FloodlightActivityGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/floodlightActivityGroups',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivityGroups.list\n     *\n     * @desc Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var floodlightActivityGroupsPage = response['floodlightActivityGroups'];\n     *     if (!floodlightActivityGroupsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < floodlightActivityGroupsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `floodlightActivityGroupsPage`:\n     *       console.log(JSON.stringify(floodlightActivityGroupsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.floodlightActivityGroups.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.floodlightActivityGroups.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivityGroups.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserId Select only floodlight activity groups with the specified advertiser ID. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.\n     * @param {string=} params.floodlightConfigurationId Select only floodlight activity groups with the specified floodlight configuration ID. Must specify either advertiserId, or floodlightConfigurationId for a non-empty result.\n     * @param {string=} params.ids Select only floodlight activity groups with the specified IDs. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"floodlightactivitygroup*2015\" will return objects with names like \"floodlightactivitygroup June 2015\", \"floodlightactivitygroup April 2015\", or simply \"floodlightactivitygroup 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"floodlightactivitygroup\" will match objects with name \"my floodlightactivitygroup activity\", \"floodlightactivitygroup 2015\", or simply \"floodlightactivitygroup\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.type Select only floodlight activity groups with the specified floodlight activity group type.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/floodlightActivityGroups',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivityGroups.patch\n     *\n     * @desc Updates an existing floodlight activity group. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Floodlight activity Group ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivityGroups.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivityGroups.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Floodlight activity Group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).FloodlightActivityGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/floodlightActivityGroups',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivityGroups.update\n     *\n     * @desc Updates an existing floodlight activity group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivityGroups.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivityGroups.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).FloodlightActivityGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/floodlightActivityGroups',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.floodlightConfigurations = {\n\n    /**\n     * dfareporting.floodlightConfigurations.get\n     *\n     * @desc Gets one floodlight configuration by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Floodlight configuration ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightConfigurations.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightConfigurations.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Floodlight configuration ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/floodlightConfigurations/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightConfigurations.list\n     *\n     * @desc Retrieves a list of floodlight configurations, possibly filtered.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightConfigurations.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightConfigurations.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.ids Set of IDs of floodlight configurations to retrieve. Required field; otherwise an empty list will be returned.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/floodlightConfigurations',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightConfigurations.patch\n     *\n     * @desc Updates an existing floodlight configuration. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Floodlight configuration ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightConfigurations.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightConfigurations.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Floodlight configuration ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).FloodlightConfiguration} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/floodlightConfigurations',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightConfigurations.update\n     *\n     * @desc Updates an existing floodlight configuration.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightConfigurations.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightConfigurations.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).FloodlightConfiguration} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/floodlightConfigurations',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.inventoryItems = {\n\n    /**\n     * dfareporting.inventoryItems.get\n     *\n     * @desc Gets one inventory item by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Project ID for order documents.\n     *     projectId: '',  // TODO: Update placeholder value.\n     *\n     *     // Inventory item ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.inventoryItems.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.inventoryItems.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Inventory item ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.projectId Project ID for order documents.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/projects/{projectId}/inventoryItems/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'projectId', 'id'],\n        pathParams: ['id', 'profileId', 'projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.inventoryItems.list\n     *\n     * @desc Retrieves a list of inventory items, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Project ID for order documents.\n     *     projectId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var inventoryItemsPage = response['inventoryItems'];\n     *     if (!inventoryItemsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < inventoryItemsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `inventoryItemsPage`:\n     *       console.log(JSON.stringify(inventoryItemsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.inventoryItems.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.inventoryItems.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.inventoryItems.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.ids Select only inventory items with these IDs.\n     * @param {boolean=} params.inPlan Select only inventory items that are in plan.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.orderId Select only inventory items that belong to specified orders.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.projectId Project ID for order documents.\n     * @param {string=} params.siteId Select only inventory items that are associated with these sites.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.type Select only inventory items with this type.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/projects/{projectId}/inventoryItems',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'projectId'],\n        pathParams: ['profileId', 'projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.landingPages = {\n\n    /**\n     * dfareporting.landingPages.delete\n     *\n     * @desc Deletes an existing campaign landing page.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Landing page campaign ID.\n     *     campaignId: '',  // TODO: Update placeholder value.\n     *\n     *     // Landing page ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.landingPages.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.landingPages.delete\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.campaignId Landing page campaign ID.\n     * @param {string} params.id Landing page ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/campaigns/{campaignId}/landingPages/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'campaignId', 'id'],\n        pathParams: ['campaignId', 'id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.landingPages.get\n     *\n     * @desc Gets one campaign landing page by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Landing page campaign ID.\n     *     campaignId: '',  // TODO: Update placeholder value.\n     *\n     *     // Landing page ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.landingPages.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.landingPages.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.campaignId Landing page campaign ID.\n     * @param {string} params.id Landing page ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/campaigns/{campaignId}/landingPages/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'campaignId', 'id'],\n        pathParams: ['campaignId', 'id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.landingPages.insert\n     *\n     * @desc Inserts a new landing page for the specified campaign.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Landing page campaign ID.\n     *     campaignId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.landingPages.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.landingPages.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.campaignId Landing page campaign ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).LandingPage} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/campaigns/{campaignId}/landingPages',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'campaignId'],\n        pathParams: ['campaignId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.landingPages.list\n     *\n     * @desc Retrieves the list of landing pages for the specified campaign.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Landing page campaign ID.\n     *     campaignId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.landingPages.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.landingPages.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.campaignId Landing page campaign ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/campaigns/{campaignId}/landingPages',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'campaignId'],\n        pathParams: ['campaignId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.landingPages.patch\n     *\n     * @desc Updates an existing campaign landing page. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Landing page campaign ID.\n     *     campaignId: '',  // TODO: Update placeholder value.\n     *\n     *     // Landing page ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.landingPages.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.landingPages.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.campaignId Landing page campaign ID.\n     * @param {string} params.id Landing page ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).LandingPage} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/campaigns/{campaignId}/landingPages',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'campaignId', 'id'],\n        pathParams: ['campaignId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.landingPages.update\n     *\n     * @desc Updates an existing campaign landing page.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Landing page campaign ID.\n     *     campaignId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.landingPages.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.landingPages.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.campaignId Landing page campaign ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).LandingPage} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/campaigns/{campaignId}/landingPages',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'campaignId'],\n        pathParams: ['campaignId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.languages = {\n\n    /**\n     * dfareporting.languages.list\n     *\n     * @desc Retrieves a list of languages.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.languages.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.languages.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/languages',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.metros = {\n\n    /**\n     * dfareporting.metros.list\n     *\n     * @desc Retrieves a list of metros.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.metros.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.metros.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/metros',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.mobileCarriers = {\n\n    /**\n     * dfareporting.mobileCarriers.get\n     *\n     * @desc Gets one mobile carrier by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Mobile carrier ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.mobileCarriers.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.mobileCarriers.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Mobile carrier ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/mobileCarriers/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.mobileCarriers.list\n     *\n     * @desc Retrieves a list of mobile carriers.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.mobileCarriers.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.mobileCarriers.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/mobileCarriers',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.operatingSystemVersions = {\n\n    /**\n     * dfareporting.operatingSystemVersions.get\n     *\n     * @desc Gets one operating system version by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Operating system version ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.operatingSystemVersions.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.operatingSystemVersions.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Operating system version ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/operatingSystemVersions/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.operatingSystemVersions.list\n     *\n     * @desc Retrieves a list of operating system versions.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.operatingSystemVersions.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.operatingSystemVersions.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/operatingSystemVersions',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.operatingSystems = {\n\n    /**\n     * dfareporting.operatingSystems.get\n     *\n     * @desc Gets one operating system by DART ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Operating system DART ID.\n     *     dartId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.operatingSystems.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.operatingSystems.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.dartId Operating system DART ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/operatingSystems/{dartId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'dartId'],\n        pathParams: ['dartId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.operatingSystems.list\n     *\n     * @desc Retrieves a list of operating systems.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.operatingSystems.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.operatingSystems.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/operatingSystems',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.orderDocuments = {\n\n    /**\n     * dfareporting.orderDocuments.get\n     *\n     * @desc Gets one order document by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Project ID for order documents.\n     *     projectId: '',  // TODO: Update placeholder value.\n     *\n     *     // Order document ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.orderDocuments.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.orderDocuments.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Order document ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.projectId Project ID for order documents.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/projects/{projectId}/orderDocuments/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'projectId', 'id'],\n        pathParams: ['id', 'profileId', 'projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.orderDocuments.list\n     *\n     * @desc Retrieves a list of order documents, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Project ID for order documents.\n     *     projectId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var orderDocumentsPage = response['orderDocuments'];\n     *     if (!orderDocumentsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < orderDocumentsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `orderDocumentsPage`:\n     *       console.log(JSON.stringify(orderDocumentsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.orderDocuments.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.orderDocuments.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.orderDocuments.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.approved Select only order documents that have been approved by at least one user.\n     * @param {string=} params.ids Select only order documents with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.orderId Select only order documents for specified orders.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.projectId Project ID for order documents.\n     * @param {string=} params.searchString Allows searching for order documents by name or ID. Wildcards (*) are allowed. For example, \"orderdocument*2015\" will return order documents with names like \"orderdocument June 2015\", \"orderdocument April 2015\", or simply \"orderdocument 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"orderdocument\" will match order documents with name \"my orderdocument\", \"orderdocument 2015\", or simply \"orderdocument\".\n     * @param {string=} params.siteId Select only order documents that are associated with these sites.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/projects/{projectId}/orderDocuments',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'projectId'],\n        pathParams: ['profileId', 'projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.orders = {\n\n    /**\n     * dfareporting.orders.get\n     *\n     * @desc Gets one order by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Project ID for orders.\n     *     projectId: '',  // TODO: Update placeholder value.\n     *\n     *     // Order ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.orders.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.orders.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Order ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.projectId Project ID for orders.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/projects/{projectId}/orders/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'projectId', 'id'],\n        pathParams: ['id', 'profileId', 'projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.orders.list\n     *\n     * @desc Retrieves a list of orders, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Project ID for orders.\n     *     projectId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var ordersPage = response['orders'];\n     *     if (!ordersPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < ordersPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `ordersPage`:\n     *       console.log(JSON.stringify(ordersPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.orders.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.orders.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.orders.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.ids Select only orders with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.projectId Project ID for orders.\n     * @param {string=} params.searchString Allows searching for orders by name or ID. Wildcards (*) are allowed. For example, \"order*2015\" will return orders with names like \"order June 2015\", \"order April 2015\", or simply \"order 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"order\" will match orders with name \"my order\", \"order 2015\", or simply \"order\".\n     * @param {string=} params.siteId Select only orders that are associated with these site IDs.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/projects/{projectId}/orders',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'projectId'],\n        pathParams: ['profileId', 'projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.placementGroups = {\n\n    /**\n     * dfareporting.placementGroups.get\n     *\n     * @desc Gets one placement group by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Placement group ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementGroups.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementGroups.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Placement group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/placementGroups/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementGroups.insert\n     *\n     * @desc Inserts a new placement group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementGroups.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementGroups.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).PlacementGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/placementGroups',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementGroups.list\n     *\n     * @desc Retrieves a list of placement groups, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var placementGroupsPage = response['placementGroups'];\n     *     if (!placementGroupsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < placementGroupsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `placementGroupsPage`:\n     *       console.log(JSON.stringify(placementGroupsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.placementGroups.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.placementGroups.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementGroups.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserIds Select only placement groups that belong to these advertisers.\n     * @param {boolean=} params.archived Select only archived placements. Don't set this field to select both archived and non-archived placements.\n     * @param {string=} params.campaignIds Select only placement groups that belong to these campaigns.\n     * @param {string=} params.contentCategoryIds Select only placement groups that are associated with these content categories.\n     * @param {string=} params.directorySiteIds Select only placement groups that are associated with these directory sites.\n     * @param {string=} params.ids Select only placement groups with these IDs.\n     * @param {string=} params.maxEndDate Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as \"yyyy-MM-dd\".\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.maxStartDate Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as \"yyyy-MM-dd\".\n     * @param {string=} params.minEndDate Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as \"yyyy-MM-dd\".\n     * @param {string=} params.minStartDate Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as \"yyyy-MM-dd\".\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string=} params.placementGroupType Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting.\n     * @param {string=} params.placementStrategyIds Select only placement groups that are associated with these placement strategies.\n     * @param {string=} params.pricingTypes Select only placement groups with these pricing types.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for placement groups by name or ID. Wildcards (*) are allowed. For example, \"placement*2015\" will return placement groups with names like \"placement group June 2015\", \"placement group May 2015\", or simply \"placements 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"placementgroup\" will match placement groups with name \"my placementgroup\", \"placementgroup 2015\", or simply \"placementgroup\".\n     * @param {string=} params.siteIds Select only placement groups that are associated with these sites.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/placementGroups',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementGroups.patch\n     *\n     * @desc Updates an existing placement group. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Placement group ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementGroups.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementGroups.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Placement group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).PlacementGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/placementGroups',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementGroups.update\n     *\n     * @desc Updates an existing placement group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementGroups.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementGroups.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).PlacementGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/placementGroups',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.placementStrategies = {\n\n    /**\n     * dfareporting.placementStrategies.delete\n     *\n     * @desc Deletes an existing placement strategy.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Placement strategy ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementStrategies.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementStrategies.delete\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Placement strategy ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/placementStrategies/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementStrategies.get\n     *\n     * @desc Gets one placement strategy by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Placement strategy ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementStrategies.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementStrategies.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Placement strategy ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/placementStrategies/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementStrategies.insert\n     *\n     * @desc Inserts a new placement strategy.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementStrategies.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementStrategies.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).PlacementStrategy} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/placementStrategies',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementStrategies.list\n     *\n     * @desc Retrieves a list of placement strategies, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var placementStrategiesPage = response['placementStrategies'];\n     *     if (!placementStrategiesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < placementStrategiesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `placementStrategiesPage`:\n     *       console.log(JSON.stringify(placementStrategiesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.placementStrategies.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.placementStrategies.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementStrategies.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.ids Select only placement strategies with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"placementstrategy*2015\" will return objects with names like \"placementstrategy June 2015\", \"placementstrategy April 2015\", or simply \"placementstrategy 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"placementstrategy\" will match objects with name \"my placementstrategy\", \"placementstrategy 2015\", or simply \"placementstrategy\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/placementStrategies',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementStrategies.patch\n     *\n     * @desc Updates an existing placement strategy. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Placement strategy ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementStrategies.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementStrategies.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Placement strategy ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).PlacementStrategy} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/placementStrategies',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementStrategies.update\n     *\n     * @desc Updates an existing placement strategy.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementStrategies.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementStrategies.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).PlacementStrategy} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/placementStrategies',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.placements = {\n\n    /**\n     * dfareporting.placements.generatetags\n     *\n     * @desc Generates tags for a placement.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placements.generatetags(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placements.generatetags\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.campaignId Generate placements belonging to this campaign. This is a required field.\n     * @param {string=} params.placementIds Generate tags for these placements.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.tagFormats Tag formats to generate for these placements.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    generatetags: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/placements/generatetags',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placements.get\n     *\n     * @desc Gets one placement by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Placement ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placements.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placements.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Placement ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/placements/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placements.insert\n     *\n     * @desc Inserts a new placement.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placements.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placements.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Placement} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/placements',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placements.list\n     *\n     * @desc Retrieves a list of placements, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var placementsPage = response['placements'];\n     *     if (!placementsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < placementsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `placementsPage`:\n     *       console.log(JSON.stringify(placementsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.placements.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.placements.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placements.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserIds Select only placements that belong to these advertisers.\n     * @param {boolean=} params.archived Select only archived placements. Don't set this field to select both archived and non-archived placements.\n     * @param {string=} params.campaignIds Select only placements that belong to these campaigns.\n     * @param {string=} params.compatibilities Select only placements that are associated with these compatibilities. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.\n     * @param {string=} params.contentCategoryIds Select only placements that are associated with these content categories.\n     * @param {string=} params.directorySiteIds Select only placements that are associated with these directory sites.\n     * @param {string=} params.groupIds Select only placements that belong to these placement groups.\n     * @param {string=} params.ids Select only placements with these IDs.\n     * @param {string=} params.maxEndDate Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as \"yyyy-MM-dd\".\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.maxStartDate Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as \"yyyy-MM-dd\".\n     * @param {string=} params.minEndDate Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as \"yyyy-MM-dd\".\n     * @param {string=} params.minStartDate Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as \"yyyy-MM-dd\".\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string=} params.paymentSource Select only placements with this payment source.\n     * @param {string=} params.placementStrategyIds Select only placements that are associated with these placement strategies.\n     * @param {string=} params.pricingTypes Select only placements with these pricing types.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for placements by name or ID. Wildcards (*) are allowed. For example, \"placement*2015\" will return placements with names like \"placement June 2015\", \"placement May 2015\", or simply \"placements 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"placement\" will match placements with name \"my placement\", \"placement 2015\", or simply \"placement\".\n     * @param {string=} params.siteIds Select only placements that are associated with these sites.\n     * @param {string=} params.sizeIds Select only placements that are associated with these sizes.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/placements',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placements.patch\n     *\n     * @desc Updates an existing placement. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Placement ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placements.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placements.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Placement ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Placement} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/placements',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placements.update\n     *\n     * @desc Updates an existing placement.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placements.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placements.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Placement} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/placements',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.platformTypes = {\n\n    /**\n     * dfareporting.platformTypes.get\n     *\n     * @desc Gets one platform type by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Platform type ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.platformTypes.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.platformTypes.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Platform type ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/platformTypes/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.platformTypes.list\n     *\n     * @desc Retrieves a list of platform types.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.platformTypes.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.platformTypes.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/platformTypes',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.postalCodes = {\n\n    /**\n     * dfareporting.postalCodes.get\n     *\n     * @desc Gets one postal code by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Postal code ID.\n     *     code: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.postalCodes.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.postalCodes.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.code Postal code ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/postalCodes/{code}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'code'],\n        pathParams: ['code', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.postalCodes.list\n     *\n     * @desc Retrieves a list of postal codes.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.postalCodes.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.postalCodes.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/postalCodes',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.projects = {\n\n    /**\n     * dfareporting.projects.get\n     *\n     * @desc Gets one project by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Project ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.projects.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.projects.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Project ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/projects/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.projects.list\n     *\n     * @desc Retrieves a list of projects, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var projectsPage = response['projects'];\n     *     if (!projectsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < projectsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `projectsPage`:\n     *       console.log(JSON.stringify(projectsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.projects.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.projects.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.projects.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserIds Select only projects with these advertiser IDs.\n     * @param {string=} params.ids Select only projects with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for projects by name or ID. Wildcards (*) are allowed. For example, \"project*2015\" will return projects with names like \"project June 2015\", \"project April 2015\", or simply \"project 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"project\" will match projects with name \"my project\", \"project 2015\", or simply \"project\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/projects',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.regions = {\n\n    /**\n     * dfareporting.regions.list\n     *\n     * @desc Retrieves a list of regions.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.regions.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.regions.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/regions',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.remarketingListShares = {\n\n    /**\n     * dfareporting.remarketingListShares.get\n     *\n     * @desc Gets one remarketing list share by remarketing list ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Remarketing list ID.\n     *     remarketingListId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.remarketingListShares.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.remarketingListShares.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.remarketingListId Remarketing list ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/remarketingListShares/{remarketingListId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'remarketingListId'],\n        pathParams: ['profileId', 'remarketingListId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.remarketingListShares.patch\n     *\n     * @desc Updates an existing remarketing list share. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Remarketing list ID.\n     *     remarketingListId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.remarketingListShares.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.remarketingListShares.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.remarketingListId Remarketing list ID.\n     * @param {dfareporting(v2.6).RemarketingListShare} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/remarketingListShares',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'remarketingListId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.remarketingListShares.update\n     *\n     * @desc Updates an existing remarketing list share.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.remarketingListShares.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.remarketingListShares.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).RemarketingListShare} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/remarketingListShares',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.remarketingLists = {\n\n    /**\n     * dfareporting.remarketingLists.get\n     *\n     * @desc Gets one remarketing list by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Remarketing list ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.remarketingLists.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.remarketingLists.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Remarketing list ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/remarketingLists/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.remarketingLists.insert\n     *\n     * @desc Inserts a new remarketing list.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.remarketingLists.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.remarketingLists.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).RemarketingList} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/remarketingLists',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.remarketingLists.list\n     *\n     * @desc Retrieves a list of remarketing lists, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Select only remarketing lists owned by this advertiser.\n     *     advertiserId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var remarketingListsPage = response['remarketingLists'];\n     *     if (!remarketingListsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < remarketingListsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `remarketingListsPage`:\n     *       console.log(JSON.stringify(remarketingListsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.remarketingLists.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.remarketingLists.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.remarketingLists.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.active Select only active or only inactive remarketing lists.\n     * @param {string} params.advertiserId Select only remarketing lists owned by this advertiser.\n     * @param {string=} params.floodlightActivityId Select only remarketing lists that have this floodlight activity ID.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.name Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"remarketing list*2015\" will return objects with names like \"remarketing list June 2015\", \"remarketing list April 2015\", or simply \"remarketing list 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"remarketing list\" will match objects with name \"my remarketing list\", \"remarketing list 2015\", or simply \"remarketing list\".\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/remarketingLists',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'advertiserId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.remarketingLists.patch\n     *\n     * @desc Updates an existing remarketing list. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Remarketing list ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.remarketingLists.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.remarketingLists.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Remarketing list ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).RemarketingList} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/remarketingLists',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.remarketingLists.update\n     *\n     * @desc Updates an existing remarketing list.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.remarketingLists.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.remarketingLists.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).RemarketingList} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/remarketingLists',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.reports = {\n\n    /**\n     * dfareporting.reports.delete\n     *\n     * @desc Deletes a report by its ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA user profile ID.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // The ID of the report.\n     *     reportId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.reports.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfareporting\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.reports.delete\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId The DFA user profile ID.\n     * @param {string} params.reportId The ID of the report.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/reports/{reportId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'reportId'],\n        pathParams: ['profileId', 'reportId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.reports.get\n     *\n     * @desc Retrieves a report by its ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA user profile ID.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // The ID of the report.\n     *     reportId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.reports.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfareporting\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.reports.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId The DFA user profile ID.\n     * @param {string} params.reportId The ID of the report.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/reports/{reportId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'reportId'],\n        pathParams: ['profileId', 'reportId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.reports.insert\n     *\n     * @desc Creates a report.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA user profile ID.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.reports.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfareporting\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.reports.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId The DFA user profile ID.\n     * @param {dfareporting(v2.6).Report} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/reports',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.reports.list\n     *\n     * @desc Retrieves list of reports.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA user profile ID.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var itemsPage = response['items'];\n     *     if (!itemsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < itemsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `itemsPage`:\n     *       console.log(JSON.stringify(itemsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.reports.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.reports.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfareporting\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.reports.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken The value of the nextToken from the previous result page.\n     * @param {string} params.profileId The DFA user profile ID.\n     * @param {string=} params.scope The scope that defines which results are returned, default is 'MINE'.\n     * @param {string=} params.sortField The field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is 'DESCENDING'.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/reports',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.reports.patch\n     *\n     * @desc Updates a report. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA user profile ID.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // The ID of the report.\n     *     reportId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.reports.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfareporting\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.reports.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId The DFA user profile ID.\n     * @param {string} params.reportId The ID of the report.\n     * @param {dfareporting(v2.6).Report} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/reports/{reportId}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'reportId'],\n        pathParams: ['profileId', 'reportId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.reports.run\n     *\n     * @desc Runs a report.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA profile ID.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // The ID of the report.\n     *     reportId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.reports.run(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfareporting\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.reports.run\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId The DFA profile ID.\n     * @param {string} params.reportId The ID of the report.\n     * @param {boolean=} params.synchronous If set and true, tries to run the report synchronously.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    run: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/reports/{reportId}/run',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'reportId'],\n        pathParams: ['profileId', 'reportId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.reports.update\n     *\n     * @desc Updates a report.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA user profile ID.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // The ID of the report.\n     *     reportId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.reports.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfareporting\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.reports.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId The DFA user profile ID.\n     * @param {string} params.reportId The ID of the report.\n     * @param {dfareporting(v2.6).Report} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/reports/{reportId}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'reportId'],\n        pathParams: ['profileId', 'reportId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    compatibleFields: {\n\n      /**\n       * dfareporting.reports.compatibleFields.query\n       *\n       * @desc Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.\n       *\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/dfareporting\n       * // 2. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var dfareporting = google.dfareporting('v2.6');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     // The DFA user profile ID.\n       *     profileId: '',  // TODO: Update placeholder value.\n       *\n       *     resource: {\n       *       // TODO: Add desired properties of the request body.\n       *     },\n       *\n       *     auth: authClient\n       *   };\n       *\n       *   dfareporting.reports.compatibleFields.query(request, function(err, response) {\n       *     if (err) {\n       *       console.log(err);\n       *       return;\n       *     }\n       *\n       *     // TODO: Change code below to process the `response` object:\n       *     console.log(JSON.stringify(response, null, 2));\n       *   });\n       * });\n       *\n       * function authorize(callback) {\n       *   // TODO: Change placeholder below to generate authentication credentials. See:\n       *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n       *   //\n       *   // Authorize using the following scope:\n       *   //    https://www.googleapis.com/auth/dfareporting\n       *   var authClient = null;\n       *\n       *   if (authClient == null) {\n       *     console.log('authentication failed');\n       *     return;\n       *   }\n       *   callback(authClient);\n       * }\n       *\n       * @alias dfareporting.reports.compatibleFields.query\n       * @memberOf! dfareporting(v2.6)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.profileId The DFA user profile ID.\n       * @param {dfareporting(v2.6).Report} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      query: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/reports/compatiblefields/query',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['profileId'],\n          pathParams: ['profileId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    files: {\n\n      /**\n       * dfareporting.reports.files.get\n       *\n       * @desc Retrieves a report file.\n       *\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/dfareporting\n       * // 2. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var dfareporting = google.dfareporting('v2.6');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     // The DFA profile ID.\n       *     profileId: '',  // TODO: Update placeholder value.\n       *\n       *     // The ID of the report.\n       *     reportId: '',  // TODO: Update placeholder value.\n       *\n       *     // The ID of the report file.\n       *     fileId: '',  // TODO: Update placeholder value.\n       *\n       *     // TODO: To download media content, use:\n       *     //\n       *     // alt: 'media',\n       *\n       *     auth: authClient\n       *   };\n       *\n       *   dfareporting.reports.files.get(request, function(err, response) {\n       *     if (err) {\n       *       console.log(err);\n       *       return;\n       *     }\n       *\n       *     // TODO: Change code below to process the `response` object:\n       *     console.log(JSON.stringify(response, null, 2));\n       *   });\n       * });\n       *\n       * function authorize(callback) {\n       *   // TODO: Change placeholder below to generate authentication credentials. See:\n       *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n       *   //\n       *   // Authorize using the following scope:\n       *   //    https://www.googleapis.com/auth/dfareporting\n       *   var authClient = null;\n       *\n       *   if (authClient == null) {\n       *     console.log('authentication failed');\n       *     return;\n       *   }\n       *   callback(authClient);\n       * }\n       *\n       * @alias dfareporting.reports.files.get\n       * @memberOf! dfareporting(v2.6)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.fileId The ID of the report file.\n       * @param {string} params.profileId The DFA profile ID.\n       * @param {string} params.reportId The ID of the report.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/reports/{reportId}/files/{fileId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['profileId', 'reportId', 'fileId'],\n          pathParams: ['fileId', 'profileId', 'reportId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * dfareporting.reports.files.list\n       *\n       * @desc Lists files for a report.\n       *\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/dfareporting\n       * // 2. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var dfareporting = google.dfareporting('v2.6');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     // The DFA profile ID.\n       *     profileId: '',  // TODO: Update placeholder value.\n       *\n       *     // The ID of the parent report.\n       *     reportId: '',  // TODO: Update placeholder value.\n       *\n       *     auth: authClient\n       *   };\n       *\n       *   var handlePage = function(err, response) {\n       *     if (err) {\n       *       console.log(err);\n       *       return;\n       *     }\n       *\n       *     var itemsPage = response['items'];\n       *     if (!itemsPage) {\n       *       return;\n       *     }\n       *     for (var i = 0; i < itemsPage.length; i++) {\n       *       // TODO: Change code below to process each resource in `itemsPage`:\n       *       console.log(JSON.stringify(itemsPage[i], null, 2));\n       *     }\n       *\n       *     if (response.nextPageToken) {\n       *       request.pageToken = response.nextPageToken;\n       *       dfareporting.reports.files.list(request, handlePage);\n       *     }\n       *   };\n       *\n       *   dfareporting.reports.files.list(request, handlePage);\n       * });\n       *\n       * function authorize(callback) {\n       *   // TODO: Change placeholder below to generate authentication credentials. See:\n       *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n       *   //\n       *   // Authorize using the following scope:\n       *   //    https://www.googleapis.com/auth/dfareporting\n       *   var authClient = null;\n       *\n       *   if (authClient == null) {\n       *     console.log('authentication failed');\n       *     return;\n       *   }\n       *   callback(authClient);\n       * }\n       *\n       * @alias dfareporting.reports.files.list\n       * @memberOf! dfareporting(v2.6)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer=} params.maxResults Maximum number of results to return.\n       * @param {string=} params.pageToken The value of the nextToken from the previous result page.\n       * @param {string} params.profileId The DFA profile ID.\n       * @param {string} params.reportId The ID of the parent report.\n       * @param {string=} params.sortField The field by which to sort the list.\n       * @param {string=} params.sortOrder Order of sorted results, default is 'DESCENDING'.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/reports/{reportId}/files',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['profileId', 'reportId'],\n          pathParams: ['profileId', 'reportId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n\n  self.sites = {\n\n    /**\n     * dfareporting.sites.get\n     *\n     * @desc Gets one site by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Site ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.sites.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.sites.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Site ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/sites/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.sites.insert\n     *\n     * @desc Inserts a new site.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.sites.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.sites.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Site} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/sites',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.sites.list\n     *\n     * @desc Retrieves a list of sites, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var sitesPage = response['sites'];\n     *     if (!sitesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < sitesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `sitesPage`:\n     *       console.log(JSON.stringify(sitesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.sites.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.sites.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.sites.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.acceptsInStreamVideoPlacements This search filter is no longer supported and will have no effect on the results returned.\n     * @param {boolean=} params.acceptsInterstitialPlacements This search filter is no longer supported and will have no effect on the results returned.\n     * @param {boolean=} params.acceptsPublisherPaidPlacements Select only sites that accept publisher paid placements.\n     * @param {boolean=} params.adWordsSite Select only AdWords sites.\n     * @param {boolean=} params.approved Select only approved sites.\n     * @param {string=} params.campaignIds Select only sites with these campaign IDs.\n     * @param {string=} params.directorySiteIds Select only sites with these directory site IDs.\n     * @param {string=} params.ids Select only sites with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name, ID or keyName. Wildcards (*) are allowed. For example, \"site*2015\" will return objects with names like \"site June 2015\", \"site April 2015\", or simply \"site 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"site\" will match objects with name \"my site\", \"site 2015\", or simply \"site\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.subaccountId Select only sites with this subaccount ID.\n     * @param {boolean=} params.unmappedSite Select only sites that have not been mapped to a directory site.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/sites',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.sites.patch\n     *\n     * @desc Updates an existing site. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Site ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.sites.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.sites.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Site ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Site} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/sites',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.sites.update\n     *\n     * @desc Updates an existing site.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.sites.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.sites.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Site} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/sites',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.sizes = {\n\n    /**\n     * dfareporting.sizes.get\n     *\n     * @desc Gets one size by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Size ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.sizes.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.sizes.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Size ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/sizes/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.sizes.insert\n     *\n     * @desc Inserts a new size.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.sizes.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.sizes.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Size} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/sizes',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.sizes.list\n     *\n     * @desc Retrieves a list of sizes, possibly filtered.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.sizes.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.sizes.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer=} params.height Select only sizes with this height.\n     * @param {boolean=} params.iabStandard Select only IAB standard sizes.\n     * @param {string=} params.ids Select only sizes with these IDs.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {integer=} params.width Select only sizes with this width.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/sizes',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.subaccounts = {\n\n    /**\n     * dfareporting.subaccounts.get\n     *\n     * @desc Gets one subaccount by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Subaccount ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.subaccounts.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.subaccounts.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Subaccount ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/subaccounts/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.subaccounts.insert\n     *\n     * @desc Inserts a new subaccount.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.subaccounts.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.subaccounts.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Subaccount} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/subaccounts',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.subaccounts.list\n     *\n     * @desc Gets a list of subaccounts, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var subaccountsPage = response['subaccounts'];\n     *     if (!subaccountsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < subaccountsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `subaccountsPage`:\n     *       console.log(JSON.stringify(subaccountsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.subaccounts.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.subaccounts.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.subaccounts.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.ids Select only subaccounts with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"subaccount*2015\" will return objects with names like \"subaccount June 2015\", \"subaccount April 2015\", or simply \"subaccount 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"subaccount\" will match objects with name \"my subaccount\", \"subaccount 2015\", or simply \"subaccount\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/subaccounts',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.subaccounts.patch\n     *\n     * @desc Updates an existing subaccount. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Subaccount ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.subaccounts.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.subaccounts.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Subaccount ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Subaccount} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/subaccounts',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.subaccounts.update\n     *\n     * @desc Updates an existing subaccount.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.subaccounts.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.subaccounts.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).Subaccount} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/subaccounts',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.targetableRemarketingLists = {\n\n    /**\n     * dfareporting.targetableRemarketingLists.get\n     *\n     * @desc Gets one remarketing list by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Remarketing list ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.targetableRemarketingLists.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.targetableRemarketingLists.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Remarketing list ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/targetableRemarketingLists/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.targetableRemarketingLists.list\n     *\n     * @desc Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Select only targetable remarketing lists targetable by these advertisers.\n     *     advertiserId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var targetableRemarketingListsPage = response['targetableRemarketingLists'];\n     *     if (!targetableRemarketingListsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < targetableRemarketingListsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `targetableRemarketingListsPage`:\n     *       console.log(JSON.stringify(targetableRemarketingListsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.targetableRemarketingLists.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.targetableRemarketingLists.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.targetableRemarketingLists.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.active Select only active or only inactive targetable remarketing lists.\n     * @param {string} params.advertiserId Select only targetable remarketing lists targetable by these advertisers.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.name Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"remarketing list*2015\" will return objects with names like \"remarketing list June 2015\", \"remarketing list April 2015\", or simply \"remarketing list 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"remarketing list\" will match objects with name \"my remarketing list\", \"remarketing list 2015\", or simply \"remarketing list\".\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/targetableRemarketingLists',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'advertiserId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.targetingTemplates = {\n\n    /**\n     * dfareporting.targetingTemplates.get\n     *\n     * @desc Gets one targeting template by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Targeting template ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.targetingTemplates.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.targetingTemplates.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Targeting template ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/targetingTemplates/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.targetingTemplates.insert\n     *\n     * @desc Inserts a new targeting template.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.targetingTemplates.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.targetingTemplates.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).TargetingTemplate} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/targetingTemplates',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.targetingTemplates.list\n     *\n     * @desc Retrieves a list of targeting templates, optionally filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var targetingTemplatesPage = response['targetingTemplates'];\n     *     if (!targetingTemplatesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < targetingTemplatesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `targetingTemplatesPage`:\n     *       console.log(JSON.stringify(targetingTemplatesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.targetingTemplates.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.targetingTemplates.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.targetingTemplates.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserId Select only targeting templates with this advertiser ID.\n     * @param {string=} params.ids Select only targeting templates with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"template*2015\" will return objects with names like \"template June 2015\", \"template April 2015\", or simply \"template 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"template\" will match objects with name \"my template\", \"template 2015\", or simply \"template\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/targetingTemplates',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.targetingTemplates.patch\n     *\n     * @desc Updates an existing targeting template. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // Targeting template ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.targetingTemplates.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.targetingTemplates.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Targeting template ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).TargetingTemplate} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/targetingTemplates',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.targetingTemplates.update\n     *\n     * @desc Updates an existing targeting template.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.targetingTemplates.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.targetingTemplates.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).TargetingTemplate} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/targetingTemplates',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.userProfiles = {\n\n    /**\n     * dfareporting.userProfiles.get\n     *\n     * @desc Gets one user profile by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The user profile ID.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userProfiles.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using one of the following scopes:\n     *   //    https://www.googleapis.com/auth/dfareporting\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userProfiles.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId The user profile ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.userProfiles.list\n     *\n     * @desc Retrieves list of user profiles for a user.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userProfiles.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using one of the following scopes:\n     *   //    https://www.googleapis.com/auth/dfareporting\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userProfiles.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.userRolePermissionGroups = {\n\n    /**\n     * dfareporting.userRolePermissionGroups.get\n     *\n     * @desc Gets one user role permission group by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // User role permission group ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRolePermissionGroups.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRolePermissionGroups.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id User role permission group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/userRolePermissionGroups/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.userRolePermissionGroups.list\n     *\n     * @desc Gets a list of all supported user role permission groups.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRolePermissionGroups.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRolePermissionGroups.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/userRolePermissionGroups',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.userRolePermissions = {\n\n    /**\n     * dfareporting.userRolePermissions.get\n     *\n     * @desc Gets one user role permission by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // User role permission ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRolePermissions.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRolePermissions.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id User role permission ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/userRolePermissions/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.userRolePermissions.list\n     *\n     * @desc Gets a list of user role permissions, possibly filtered.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRolePermissions.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRolePermissions.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.ids Select only user role permissions with these IDs.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/userRolePermissions',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.userRoles = {\n\n    /**\n     * dfareporting.userRoles.delete\n     *\n     * @desc Deletes an existing user role.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // User role ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRoles.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRoles.delete\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id User role ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/userRoles/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.userRoles.get\n     *\n     * @desc Gets one user role by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // User role ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRoles.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRoles.get\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id User role ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/userRoles/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.userRoles.insert\n     *\n     * @desc Inserts a new user role.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRoles.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRoles.insert\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).UserRole} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/userRoles',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.userRoles.list\n     *\n     * @desc Retrieves a list of user roles, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var userRolesPage = response['userRoles'];\n     *     if (!userRolesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < userRolesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `userRolesPage`:\n     *       console.log(JSON.stringify(userRolesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.userRoles.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.userRoles.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRoles.list\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.accountUserRoleOnly Select only account level user roles not associated with any specific subaccount.\n     * @param {string=} params.ids Select only user roles with the specified IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"userrole*2015\" will return objects with names like \"userrole June 2015\", \"userrole April 2015\", or simply \"userrole 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"userrole\" will match objects with name \"my userrole\", \"userrole 2015\", or simply \"userrole\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.subaccountId Select only user roles that belong to this subaccount.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/userRoles',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.userRoles.patch\n     *\n     * @desc Updates an existing user role. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     // User role ID.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body. Only added properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRoles.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRoles.patch\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id User role ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).UserRole} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/userRoles',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.userRoles.update\n     *\n     * @desc Updates an existing user role.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties of the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRoles.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See:\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples,\n     *   //\n     *   // Authorize using the following scope:\n     *   //    https://www.googleapis.com/auth/dfatrafficking\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRoles.update\n     * @memberOf! dfareporting(v2.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.6).UserRole} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.6/userprofiles/{profileId}/userRoles',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef Account\n * @memberOf! dfareporting(v2.6)\n * @type object\n* @property {string[]} accountPermissionIds Account permissions assigned to this account.\n* @property {string} accountProfile Profile for this account. This is a read-only field that can be left blank.\n* @property {boolean} active Whether this account is active.\n* @property {string} activeAdsLimitTier Maximum number of active ads allowed for this account.\n* @property {boolean} activeViewOptOut Whether to serve creatives with Active View tags. If disabled, viewability data will not be available for any impressions.\n* @property {string[]} availablePermissionIds User role permissions available to the user roles of this account.\n* @property {string} countryId ID of the country associated with this account.\n* @property {string} currencyId ID of currency associated with this account. This is a required field.\nAcceptable values are: \n- &quot;1&quot; for USD \n- &quot;2&quot; for GBP \n- &quot;3&quot; for ESP \n- &quot;4&quot; for SEK \n- &quot;5&quot; for CAD \n- &quot;6&quot; for JPY \n- &quot;7&quot; for DEM \n- &quot;8&quot; for AUD \n- &quot;9&quot; for FRF \n- &quot;10&quot; for ITL \n- &quot;11&quot; for DKK \n- &quot;12&quot; for NOK \n- &quot;13&quot; for FIM \n- &quot;14&quot; for ZAR \n- &quot;15&quot; for IEP \n- &quot;16&quot; for NLG \n- &quot;17&quot; for EUR \n- &quot;18&quot; for KRW \n- &quot;19&quot; for TWD \n- &quot;20&quot; for SGD \n- &quot;21&quot; for CNY \n- &quot;22&quot; for HKD \n- &quot;23&quot; for NZD \n- &quot;24&quot; for MYR \n- &quot;25&quot; for BRL \n- &quot;26&quot; for PTE \n- &quot;27&quot; for MXP \n- &quot;28&quot; for CLP \n- &quot;29&quot; for TRY \n- &quot;30&quot; for ARS \n- &quot;31&quot; for PEN \n- &quot;32&quot; for ILS \n- &quot;33&quot; for CHF \n- &quot;34&quot; for VEF \n- &quot;35&quot; for COP \n- &quot;36&quot; for GTQ \n- &quot;37&quot; for PLN \n- &quot;39&quot; for INR \n- &quot;40&quot; for THB \n- &quot;41&quot; for IDR \n- &quot;42&quot; for CZK \n- &quot;43&quot; for RON \n- &quot;44&quot; for HUF \n- &quot;45&quot; for RUB \n- &quot;46&quot; for AED \n- &quot;47&quot; for BGN \n- &quot;48&quot; for HRK\n* @property {string} defaultCreativeSizeId Default placement dimensions for this account.\n* @property {string} description Description of this account.\n* @property {string} id ID of this account. This is a read-only, auto-generated field.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#account&quot;.\n* @property {string} locale Locale of this account.\nAcceptable values are: \n- &quot;cs&quot; (Czech) \n- &quot;de&quot; (German) \n- &quot;en&quot; (English) \n- &quot;en-GB&quot; (English United Kingdom) \n- &quot;es&quot; (Spanish) \n- &quot;fr&quot; (French) \n- &quot;it&quot; (Italian) \n- &quot;ja&quot; (Japanese) \n- &quot;ko&quot; (Korean) \n- &quot;pl&quot; (Polish) \n- &quot;pt-BR&quot; (Portuguese Brazil) \n- &quot;ru&quot; (Russian) \n- &quot;sv&quot; (Swedish) \n- &quot;tr&quot; (Turkish) \n- &quot;zh-CN&quot; (Chinese Simplified) \n- &quot;zh-TW&quot; (Chinese Traditional)\n* @property {string} maximumImageSize Maximum image size allowed for this account.\n* @property {string} name Name of this account. This is a required field, and must be less than 128 characters long and be globally unique.\n* @property {boolean} nielsenOcrEnabled Whether campaigns created in this account will be enabled for Nielsen OCR reach ratings by default.\n* @property {dfareporting(v2.6).ReportsConfiguration} reportsConfiguration Reporting configuration of this account.\n* @property {boolean} shareReportsWithTwitter Share Path to Conversion reports with Twitter.\n* @property {string} teaserSizeLimit File size limit in kilobytes of Rich Media teaser creatives. Must be between 1 and 10240.\n*/\n/**\n * @typedef AccountActiveAdSummary\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId ID of the account.\n * @property {string} activeAds Ads that have been activated for the account\n * @property {string} activeAdsLimitTier Maximum number of active ads allowed for the account.\n * @property {string} availableAds Ads that can be activated for the account.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#accountActiveAdSummary&quot;.\n */\n/**\n * @typedef AccountPermission\n * @memberOf! dfareporting(v2.6)\n * @type object\n* @property {string[]} accountProfiles Account profiles associated with this account permission.\n\nPossible values are:\n- &quot;ACCOUNT_PROFILE_BASIC&quot;\n- &quot;ACCOUNT_PROFILE_STANDARD&quot;\n* @property {string} id ID of this account permission.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#accountPermission&quot;.\n* @property {string} level Administrative level required to enable this account permission.\n* @property {string} name Name of this account permission.\n* @property {string} permissionGroupId Permission group of this account permission.\n*/\n/**\n * @typedef AccountPermissionGroup\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} id ID of this account permission group.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#accountPermissionGroup&quot;.\n * @property {string} name Name of this account permission group.\n */\n/**\n * @typedef AccountPermissionGroupsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).AccountPermissionGroup[]} accountPermissionGroups Account permission group collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#accountPermissionGroupsListResponse&quot;.\n */\n/**\n * @typedef AccountPermissionsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).AccountPermission[]} accountPermissions Account permission collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#accountPermissionsListResponse&quot;.\n */\n/**\n * @typedef AccountUserProfile\n * @memberOf! dfareporting(v2.6)\n * @type object\n* @property {string} accountId Account ID of the user profile. This is a read-only field that can be left blank.\n* @property {boolean} active Whether this user profile is active. This defaults to false, and must be set true on insert for the user profile to be usable.\n* @property {dfareporting(v2.6).ObjectFilter} advertiserFilter Filter that describes which advertisers are visible to the user profile.\n* @property {dfareporting(v2.6).ObjectFilter} campaignFilter Filter that describes which campaigns are visible to the user profile.\n* @property {string} comments Comments for this user profile.\n* @property {string} email Email of the user profile. The email addresss must be linked to a Google Account. This field is required on insertion and is read-only after insertion.\n* @property {string} id ID of the user profile. This is a read-only, auto-generated field.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#accountUserProfile&quot;.\n* @property {string} locale Locale of the user profile. This is a required field.\nAcceptable values are:  \n- &quot;cs&quot; (Czech) \n- &quot;de&quot; (German) \n- &quot;en&quot; (English) \n- &quot;en-GB&quot; (English United Kingdom) \n- &quot;es&quot; (Spanish) \n- &quot;fr&quot; (French) \n- &quot;it&quot; (Italian) \n- &quot;ja&quot; (Japanese) \n- &quot;ko&quot; (Korean) \n- &quot;pl&quot; (Polish) \n- &quot;pt-BR&quot; (Portuguese Brazil)\n- &quot;ru&quot; (Russian) \n- &quot;sv&quot; (Swedish) \n- &quot;tr&quot; (Turkish) \n- &quot;zh-CN&quot; (Chinese Simplified) \n- &quot;zh-TW&quot; (Chinese Traditional)\n* @property {string} name Name of the user profile. This is a required field. Must be less than 64 characters long, must be globally unique, and cannot contain whitespace or any of the following characters: &quot;&amp;;&quot;#%,&quot;.\n* @property {dfareporting(v2.6).ObjectFilter} siteFilter Filter that describes which sites are visible to the user profile.\n* @property {string} subaccountId Subaccount ID of the user profile. This is a read-only field that can be left blank.\n* @property {string} traffickerType Trafficker type of this user profile.\n* @property {string} userAccessType User type of the user profile. This is a read-only field that can be left blank.\n* @property {dfareporting(v2.6).ObjectFilter} userRoleFilter Filter that describes which user roles are visible to the user profile.\n* @property {string} userRoleId User role ID of the user profile. This is a required field.\n*/\n/**\n * @typedef AccountUserProfilesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).AccountUserProfile[]} accountUserProfiles Account user profile collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#accountUserProfilesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef AccountsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).Account[]} accounts Account collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#accountsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef Activities\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).DimensionValue[]} filters List of activity filters. The dimension values need to be all either of type &quot;dfa:activity&quot; or &quot;dfa:activityGroup&quot;.\n * @property {string} kind The kind of resource this is, in this case dfareporting#activities.\n * @property {string[]} metricNames List of names of floodlight activity metrics.\n */\n/**\n * @typedef Ad\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this ad. This is a read-only field that can be left blank.\n * @property {boolean} active Whether this ad is active. When true, archived must be false.\n * @property {string} advertiserId Advertiser ID of this ad. This is a required field on insertion.\n * @property {dfareporting(v2.6).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n * @property {boolean} archived Whether this ad is archived. When true, active must be false.\n * @property {string} audienceSegmentId Audience segment ID that is being targeted for this ad. Applicable when type is AD_SERVING_STANDARD_AD.\n * @property {string} campaignId Campaign ID of this ad. This is a required field on insertion.\n * @property {dfareporting(v2.6).DimensionValue} campaignIdDimensionValue Dimension value for the ID of the campaign. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.6).ClickThroughUrl} clickThroughUrl Click-through URL for this ad. This is a required field on insertion. Applicable when type is AD_SERVING_CLICK_TRACKER.\n * @property {dfareporting(v2.6).ClickThroughUrlSuffixProperties} clickThroughUrlSuffixProperties Click-through URL suffix properties for this ad. Applies to the URL in the ad or (if overriding ad properties) the URL in the creative.\n * @property {string} comments Comments for this ad.\n * @property {string} compatibility Compatibility of this ad. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to either rendering on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are only used for existing default ads. New mobile placements must be assigned DISPLAY or DISPLAY_INTERSTITIAL and default ads created for those placements will be limited to those compatibility types. IN_STREAM_VIDEO refers to rendering in-stream video ads developed with the VAST standard.\n * @property {dfareporting(v2.6).LastModifiedInfo} createInfo Information about the creation of this ad. This is a read-only field.\n * @property {dfareporting(v2.6).CreativeGroupAssignment[]} creativeGroupAssignments Creative group assignments for this ad. Applicable when type is AD_SERVING_CLICK_TRACKER. Only one assignment per creative group number is allowed for a maximum of two assignments.\n * @property {dfareporting(v2.6).CreativeRotation} creativeRotation Creative rotation for this ad. Applicable when type is AD_SERVING_DEFAULT_AD, AD_SERVING_STANDARD_AD, or AD_SERVING_TRACKING. When type is AD_SERVING_DEFAULT_AD, this field should have exactly one creativeAssignment.\n * @property {dfareporting(v2.6).DayPartTargeting} dayPartTargeting Time and day targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.\n * @property {dfareporting(v2.6).DefaultClickThroughEventTagProperties} defaultClickThroughEventTagProperties Default click-through event tag properties for this ad.\n * @property {dfareporting(v2.6).DeliverySchedule} deliverySchedule Delivery schedule information for this ad. Applicable when type is AD_SERVING_STANDARD_AD or AD_SERVING_TRACKING. This field along with subfields priority and impressionRatio are required on insertion when type is AD_SERVING_STANDARD_AD.\n * @property {boolean} dynamicClickTracker Whether this ad is a dynamic click tracker. Applicable when type is AD_SERVING_CLICK_TRACKER. This is a required field on insert, and is read-only after insert.\n * @property {string} endTime Date and time that this ad should stop serving. Must be later than the start time. This is a required field on insertion.\n * @property {dfareporting(v2.6).EventTagOverride[]} eventTagOverrides Event tag overrides for this ad.\n * @property {dfareporting(v2.6).GeoTargeting} geoTargeting Geographical targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.\n * @property {string} id ID of this ad. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.6).DimensionValue} idDimensionValue Dimension value for the ID of this ad. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.6).KeyValueTargetingExpression} keyValueTargetingExpression Key-value targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#ad&quot;.\n * @property {dfareporting(v2.6).LanguageTargeting} languageTargeting Language targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.\n * @property {dfareporting(v2.6).LastModifiedInfo} lastModifiedInfo Information about the most recent modification of this ad. This is a read-only field.\n * @property {string} name Name of this ad. This is a required field and must be less than 256 characters long.\n * @property {dfareporting(v2.6).PlacementAssignment[]} placementAssignments Placement assignments for this ad.\n * @property {dfareporting(v2.6).ListTargetingExpression} remarketingListExpression Remarketing list targeting expression for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.\n * @property {dfareporting(v2.6).Size} size Size of this ad. Applicable when type is AD_SERVING_DEFAULT_AD.\n * @property {boolean} sslCompliant Whether this ad is ssl compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.\n * @property {boolean} sslRequired Whether this ad requires ssl. This is a read-only field that is auto-generated when the ad is inserted or updated.\n * @property {string} startTime Date and time that this ad should start serving. If creating an ad, this field must be a time in the future. This is a required field on insertion.\n * @property {string} subaccountId Subaccount ID of this ad. This is a read-only field that can be left blank.\n * @property {string} targetingTemplateId Targeting template ID, used to apply preconfigured targeting information to this ad. This cannot be set while any of dayPartTargeting, geoTargeting, keyValueTargetingExpression, languageTargeting, remarketingListExpression, or technologyTargeting are set. Applicable when type is AD_SERVING_STANDARD_AD.\n * @property {dfareporting(v2.6).TechnologyTargeting} technologyTargeting Technology platform targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.\n * @property {string} type Type of ad. This is a required field on insertion. Note that default ads (AD_SERVING_DEFAULT_AD) cannot be created directly (see Creative resource).\n */\n/**\n * @typedef AdSlot\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} comment Comment for this ad slot.\n * @property {string} compatibility Ad slot compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop, mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.\n * @property {string} height Height of this ad slot.\n * @property {string} linkedPlacementId ID of the placement from an external platform that is linked to this ad slot.\n * @property {string} name Name of this ad slot.\n * @property {string} paymentSourceType Payment source type of this ad slot.\n * @property {boolean} primary Primary ad slot of a roadblock inventory item.\n * @property {string} width Width of this ad slot.\n */\n/**\n * @typedef AdsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).Ad[]} ads Ad collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#adsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef Advertiser\n * @memberOf! dfareporting(v2.6)\n * @type object\n* @property {string} accountId Account ID of this advertiser.This is a read-only field that can be left blank.\n* @property {string} advertiserGroupId ID of the advertiser group this advertiser belongs to. You can group advertisers for reporting purposes, allowing you to see aggregated information for all advertisers in each group.\n* @property {string} clickThroughUrlSuffix Suffix added to click-through URL of ad creative associations under this advertiser. Must be less than 129 characters long.\n* @property {string} defaultClickThroughEventTagId ID of the click-through event tag to apply by default to the landing pages of this advertiser&#39;s campaigns.\n* @property {string} defaultEmail Default email address used in sender field for tag emails.\n* @property {string} floodlightConfigurationId Floodlight configuration ID of this advertiser. The floodlight configuration ID will be created automatically, so on insert this field should be left blank. This field can be set to another advertiser&#39;s floodlight configuration ID in order to share that advertiser&#39;s floodlight configuration with this advertiser, so long as: \n- This advertiser&#39;s original floodlight configuration is not already associated with floodlight activities or floodlight activity groups. \n- This advertiser&#39;s original floodlight configuration is not already shared with another advertiser.\n* @property {dfareporting(v2.6).DimensionValue} floodlightConfigurationIdDimensionValue Dimension value for the ID of the floodlight configuration. This is a read-only, auto-generated field.\n* @property {string} id ID of this advertiser. This is a read-only, auto-generated field.\n* @property {dfareporting(v2.6).DimensionValue} idDimensionValue Dimension value for the ID of this advertiser. This is a read-only, auto-generated field.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#advertiser&quot;.\n* @property {string} name Name of this advertiser. This is a required field and must be less than 256 characters long and unique among advertisers of the same account.\n* @property {string} originalFloodlightConfigurationId Original floodlight configuration before any sharing occurred. Set the floodlightConfigurationId of this advertiser to originalFloodlightConfigurationId to unshare the advertiser&#39;s current floodlight configuration. You cannot unshare an advertiser&#39;s floodlight configuration if the shared configuration has activities associated with any campaign or placement.\n* @property {string} status Status of this advertiser.\n* @property {string} subaccountId Subaccount ID of this advertiser.This is a read-only field that can be left blank.\n* @property {boolean} suspended Suspension status of this advertiser.\n*/\n/**\n * @typedef AdvertiserGroup\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this advertiser group. This is a read-only field that can be left blank.\n * @property {string} id ID of this advertiser group. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#advertiserGroup&quot;.\n * @property {string} name Name of this advertiser group. This is a required field and must be less than 256 characters long and unique among advertiser groups of the same account.\n */\n/**\n * @typedef AdvertiserGroupsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).AdvertiserGroup[]} advertiserGroups Advertiser group collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#advertiserGroupsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef AdvertisersListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).Advertiser[]} advertisers Advertiser collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#advertisersListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef AudienceSegment\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {integer} allocation Weight allocated to this segment. Must be between 1 and 1000. The weight assigned will be understood in proportion to the weights assigned to other segments in the same segment group.\n * @property {string} id ID of this audience segment. This is a read-only, auto-generated field.\n * @property {string} name Name of this audience segment. This is a required field and must be less than 65 characters long.\n */\n/**\n * @typedef AudienceSegmentGroup\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).AudienceSegment[]} audienceSegments Audience segments assigned to this group. The number of segments must be between 2 and 100.\n * @property {string} id ID of this audience segment group. This is a read-only, auto-generated field.\n * @property {string} name Name of this audience segment group. This is a required field and must be less than 65 characters long.\n */\n/**\n * @typedef Browser\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} browserVersionId ID referring to this grouping of browser and version numbers. This is the ID used for targeting.\n * @property {string} dartId DART ID of this browser. This is the ID used when generating reports.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#browser&quot;.\n * @property {string} majorVersion Major version number (leftmost number) of this browser. For example, for Chrome 5.0.376.86 beta, this field should be set to 5. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can&#39;t tell which version it is.\n * @property {string} minorVersion Minor version number (number after first dot on left) of this browser. For example, for Chrome 5.0.375.86 beta, this field should be set to 0. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can&#39;t tell which version it is.\n * @property {string} name Name of this browser.\n */\n/**\n * @typedef BrowsersListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).Browser[]} browsers Browser collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#browsersListResponse&quot;.\n */\n/**\n * @typedef Campaign\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this campaign. This is a read-only field that can be left blank.\n * @property {dfareporting(v2.6).CreativeOptimizationConfiguration[]} additionalCreativeOptimizationConfigurations Additional creative optimization configurations for the campaign.\n * @property {string} advertiserGroupId Advertiser group ID of the associated advertiser.\n * @property {string} advertiserId Advertiser ID of this campaign. This is a required field.\n * @property {dfareporting(v2.6).DimensionValue} advertiserIdDimensionValue Dimension value for the advertiser ID of this campaign. This is a read-only, auto-generated field.\n * @property {boolean} archived Whether this campaign has been archived.\n * @property {dfareporting(v2.6).AudienceSegmentGroup[]} audienceSegmentGroups Audience segment groups assigned to this campaign. Cannot have more than 300 segment groups.\n * @property {string} billingInvoiceCode Billing invoice code included in the DCM client billing invoices associated with the campaign.\n * @property {dfareporting(v2.6).ClickThroughUrlSuffixProperties} clickThroughUrlSuffixProperties Click-through URL suffix override properties for this campaign.\n * @property {string} comment Arbitrary comments about this campaign. Must be less than 256 characters long.\n * @property {dfareporting(v2.6).LastModifiedInfo} createInfo Information about the creation of this campaign. This is a read-only field.\n * @property {string[]} creativeGroupIds List of creative group IDs that are assigned to the campaign.\n * @property {dfareporting(v2.6).CreativeOptimizationConfiguration} creativeOptimizationConfiguration Creative optimization configuration for the campaign.\n * @property {dfareporting(v2.6).DefaultClickThroughEventTagProperties} defaultClickThroughEventTagProperties Click-through event tag ID override properties for this campaign.\n * @property {string} endDate Date on which the campaign will stop running. On insert, the end date must be today or a future date. The end date must be later than or be the same as the start date. If, for example, you set 6/25/2015 as both the start and end dates, the effective campaign run date is just that day only, 6/25/2015. The hours, minutes, and seconds of the end date should not be set, as doing so will result in an error. This is a required field.\n * @property {dfareporting(v2.6).EventTagOverride[]} eventTagOverrides Overrides that can be used to activate or deactivate advertiser event tags.\n * @property {string} externalId External ID for this campaign.\n * @property {string} id ID of this campaign. This is a read-only auto-generated field.\n * @property {dfareporting(v2.6).DimensionValue} idDimensionValue Dimension value for the ID of this campaign. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#campaign&quot;.\n * @property {dfareporting(v2.6).LastModifiedInfo} lastModifiedInfo Information about the most recent modification of this campaign. This is a read-only field.\n * @property {dfareporting(v2.6).LookbackConfiguration} lookbackConfiguration Lookback window settings for the campaign.\n * @property {string} name Name of this campaign. This is a required field and must be less than 256 characters long and unique among campaigns of the same advertiser.\n * @property {boolean} nielsenOcrEnabled Whether Nielsen reports are enabled for this campaign.\n * @property {string} startDate Date on which the campaign starts running. The start date can be any date. The hours, minutes, and seconds of the start date should not be set, as doing so will result in an error. This is a required field.\n * @property {string} subaccountId Subaccount ID of this campaign. This is a read-only field that can be left blank.\n * @property {string[]} traffickerEmails Campaign trafficker contact emails.\n */\n/**\n * @typedef CampaignCreativeAssociation\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} creativeId ID of the creative associated with the campaign. This is a required field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#campaignCreativeAssociation&quot;.\n */\n/**\n * @typedef CampaignCreativeAssociationsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).CampaignCreativeAssociation[]} campaignCreativeAssociations Campaign creative association collection\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#campaignCreativeAssociationsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef CampaignsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).Campaign[]} campaigns Campaign collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#campaignsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef ChangeLog\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of the modified object.\n * @property {string} action Action which caused the change.\n * @property {string} changeTime Time when the object was modified.\n * @property {string} fieldName Field name of the object which changed.\n * @property {string} id ID of this change log.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#changeLog&quot;.\n * @property {string} newValue New value of the object field.\n * @property {string} objectId ID of the object of this change log. The object could be a campaign, placement, ad, or other type.\n * @property {string} objectType Object type of the change log.\n * @property {string} oldValue Old value of the object field.\n * @property {string} subaccountId Subaccount ID of the modified object.\n * @property {string} transactionId Transaction ID of this change log. When a single API call results in many changes, each change will have a separate ID in the change log but will share the same transactionId.\n * @property {string} userProfileId ID of the user who modified the object.\n * @property {string} userProfileName User profile name of the user who modified the object.\n */\n/**\n * @typedef ChangeLogsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).ChangeLog[]} changeLogs Change log collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#changeLogsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef CitiesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).City[]} cities City collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#citiesListResponse&quot;.\n */\n/**\n * @typedef City\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} countryCode Country code of the country to which this city belongs.\n * @property {string} countryDartId DART ID of the country to which this city belongs.\n * @property {string} dartId DART ID of this city. This is the ID used for targeting and generating reports.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#city&quot;.\n * @property {string} metroCode Metro region code of the metro region (DMA) to which this city belongs.\n * @property {string} metroDmaId ID of the metro region (DMA) to which this city belongs.\n * @property {string} name Name of this city.\n * @property {string} regionCode Region code of the region to which this city belongs.\n * @property {string} regionDartId DART ID of the region to which this city belongs.\n */\n/**\n * @typedef ClickTag\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} eventName Advertiser event name associated with the click tag. This field is used by DISPLAY_IMAGE_GALLERY and HTML5_BANNER creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n * @property {string} name Parameter name for the specified click tag. For DISPLAY_IMAGE_GALLERY creative assets, this field must match the value of the creative asset&#39;s creativeAssetId.name field.\n * @property {string} value Parameter value for the specified click tag. This field contains a click-through url.\n */\n/**\n * @typedef ClickThroughUrl\n * @memberOf! dfareporting(v2.6)\n * @type object\n* @property {string} computedClickThroughUrl Read-only convenience field representing the actual URL that will be used for this click-through. The URL is computed as follows: \n- If defaultLandingPage is enabled then the campaign&#39;s default landing page URL is assigned to this field.\n- If defaultLandingPage is not enabled and a landingPageId is specified then that landing page&#39;s URL is assigned to this field.\n- If neither of the above cases apply, then the customClickThroughUrl is assigned to this field.\n* @property {string} customClickThroughUrl Custom click-through URL. Applicable if the defaultLandingPage field is set to false and the landingPageId field is left unset.\n* @property {boolean} defaultLandingPage Whether the campaign default landing page is used.\n* @property {string} landingPageId ID of the landing page for the click-through URL. Applicable if the defaultLandingPage field is set to false.\n*/\n/**\n * @typedef ClickThroughUrlSuffixProperties\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} clickThroughUrlSuffix Click-through URL suffix to apply to all ads in this entity&#39;s scope. Must be less than 128 characters long.\n * @property {boolean} overrideInheritedSuffix Whether this entity should override the inherited click-through URL suffix with its own defined value.\n */\n/**\n * @typedef CompanionClickThroughOverride\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).ClickThroughUrl} clickThroughUrl Click-through URL of this companion click-through override.\n * @property {string} creativeId ID of the creative for this companion click-through override.\n */\n/**\n * @typedef CompatibleFields\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).CrossDimensionReachReportCompatibleFields} crossDimensionReachReportCompatibleFields Contains items that are compatible to be selected for a report of type &quot;CROSS_DIMENSION_REACH&quot;.\n * @property {dfareporting(v2.6).FloodlightReportCompatibleFields} floodlightReportCompatibleFields Contains items that are compatible to be selected for a report of type &quot;FLOODLIGHT&quot;.\n * @property {string} kind The kind of resource this is, in this case dfareporting#compatibleFields.\n * @property {dfareporting(v2.6).PathToConversionReportCompatibleFields} pathToConversionReportCompatibleFields Contains items that are compatible to be selected for a report of type &quot;PATH_TO_CONVERSION&quot;.\n * @property {dfareporting(v2.6).ReachReportCompatibleFields} reachReportCompatibleFields Contains items that are compatible to be selected for a report of type &quot;REACH&quot;.\n * @property {dfareporting(v2.6).ReportCompatibleFields} reportCompatibleFields Contains items that are compatible to be selected for a report of type &quot;STANDARD&quot;.\n */\n/**\n * @typedef ConnectionType\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} id ID of this connection type.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#connectionType&quot;.\n * @property {string} name Name of this connection type.\n */\n/**\n * @typedef ConnectionTypesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).ConnectionType[]} connectionTypes Collection of connection types such as broadband and mobile.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#connectionTypesListResponse&quot;.\n */\n/**\n * @typedef ContentCategoriesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).ContentCategory[]} contentCategories Content category collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#contentCategoriesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef ContentCategory\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this content category. This is a read-only field that can be left blank.\n * @property {string} id ID of this content category. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#contentCategory&quot;.\n * @property {string} name Name of this content category. This is a required field and must be less than 256 characters long and unique among content categories of the same account.\n */\n/**\n * @typedef Conversion\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {boolean} childDirectedTreatment Whether the conversion was directed toward children.\n * @property {dfareporting(v2.6).CustomFloodlightVariable[]} customVariables Custom floodlight variables.\n * @property {string} encryptedUserId The alphanumeric encrypted user ID. When set, encryptionInfo should also be specified. This field is mutually exclusive with encryptedUserIdCandidates[] and mobileDeviceId. This or encryptedUserIdCandidates[] or mobileDeviceId is a required field.\n * @property {string[]} encryptedUserIdCandidates A list of the alphanumeric encrypted user IDs. Any user ID with exposure prior to the conversion timestamp will be used in the inserted conversion. If no such user ID is found then the conversion will be rejected with NO_COOKIE_MATCH_FOUND error. When set, encryptionInfo should also be specified. This field should only be used when calling conversions.batchinsert. This field is mutually exclusive with encryptedUserId and mobileDeviceId. This or encryptedUserId or mobileDeviceId is a required field.\n * @property {string} floodlightActivityId Floodlight Activity ID of this conversion. This is a required field.\n * @property {string} floodlightConfigurationId Floodlight Configuration ID of this conversion. This is a required field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#conversion&quot;.\n * @property {boolean} limitAdTracking Whether Limit Ad Tracking is enabled. When set to true, the conversion will be used for reporting but not targeting. This will prevent remarketing.\n * @property {string} mobileDeviceId The mobile device ID. This field is mutually exclusive with encryptedUserId and encryptedUserIdCandidates[]. This or encryptedUserId or encryptedUserIdCandidates[] is a required field.\n * @property {string} ordinal The ordinal of the conversion. Use this field to control how conversions of the same user and day are de-duplicated. This is a required field.\n * @property {string} quantity The quantity of the conversion.\n * @property {string} timestampMicros The timestamp of conversion, in Unix epoch micros. This is a required field.\n * @property {number} value The value of the conversion.\n */\n/**\n * @typedef ConversionError\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} code The error code.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#conversionError&quot;.\n * @property {string} message A description of the error.\n */\n/**\n * @typedef ConversionStatus\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).Conversion} conversion The original conversion that was inserted or updated.\n * @property {dfareporting(v2.6).ConversionError[]} errors A list of errors related to this conversion.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#conversionStatus&quot;.\n */\n/**\n * @typedef ConversionsBatchInsertRequest\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).Conversion[]} conversions The set of conversions to insert.\n * @property {dfareporting(v2.6).EncryptionInfo} encryptionInfo Describes how encryptedUserId or encryptedUserIdCandidates[] is encrypted. This is a required field if encryptedUserId or encryptedUserIdCandidates[] is used.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#conversionsBatchInsertRequest&quot;.\n */\n/**\n * @typedef ConversionsBatchInsertResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {boolean} hasFailures Indicates that some or all conversions failed to insert.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#conversionsBatchInsertResponse&quot;.\n * @property {dfareporting(v2.6).ConversionStatus[]} status The status of each conversion&#39;s insertion status. The status is returned in the same order that conversions are inserted.\n */\n/**\n * @typedef CountriesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).Country[]} countries Country collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#countriesListResponse&quot;.\n */\n/**\n * @typedef Country\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} countryCode Country code.\n * @property {string} dartId DART ID of this country. This is the ID used for targeting and generating reports.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#country&quot;.\n * @property {string} name Name of this country.\n * @property {boolean} sslEnabled Whether ad serving supports secure servers in this country.\n */\n/**\n * @typedef Creative\n * @memberOf! dfareporting(v2.6)\n * @type object\n* @property {string} accountId Account ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types.\n* @property {boolean} active Whether the creative is active. Applicable to all creative types.\n* @property {string} adParameters Ad parameters user for VPAID creative. This is a read-only field. Applicable to the following creative types: all VPAID.\n* @property {string[]} adTagKeys Keywords for a Rich Media creative. Keywords let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use keywords to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {string} advertiserId Advertiser ID of this creative. This is a required field. Applicable to all creative types.\n* @property {boolean} allowScriptAccess Whether script access is allowed for this creative. This is a read-only and deprecated field which will automatically be set to true on update. Applicable to the following creative types: FLASH_INPAGE.\n* @property {boolean} archived Whether the creative is archived. Applicable to all creative types.\n* @property {string} artworkType Type of artwork used for the creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {string} authoringSource Source application where creative was authored. Presently, only DBM authored creatives will have this field set. Applicable to all creative types.\n* @property {string} authoringTool Authoring tool for HTML5 banner creatives. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.\n* @property {boolean} auto_advance_images Whether images are automatically advanced for image gallery creatives. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY.\n* @property {string} backgroundColor The 6-character HTML color code, beginning with #, for the background of the window area where the Flash file is displayed. Default is white. Applicable to the following creative types: FLASH_INPAGE.\n* @property {string} backupImageClickThroughUrl Click-through URL for backup image. Applicable to the following creative types: FLASH_INPAGE and HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {string[]} backupImageFeatures List of feature dependencies that will cause a backup image to be served if the browser that serves the ad does not support them. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative asset correctly. This field is initially auto-generated to contain all features detected by DCM for all the assets of this creative and can then be modified by the client. To reset this field, copy over all the creativeAssets&#39; detected features. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {string} backupImageReportingLabel Reporting label used for HTML5 banner backup image. Applicable to the following creative types: DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {dfareporting(v2.6).TargetWindow} backupImageTargetWindow Target window for backup image. Applicable to the following creative types: FLASH_INPAGE and HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {dfareporting(v2.6).ClickTag[]} clickTags Click tags of the creative. For DISPLAY, FLASH_INPAGE, and HTML5_BANNER creatives, this is a subset of detected click tags for the assets associated with this creative. After creating a flash asset, detected click tags will be returned in the creativeAssetMetadata. When inserting the creative, populate the creative clickTags field using the creativeAssetMetadata.clickTags field. For DISPLAY_IMAGE_GALLERY creatives, there should be exactly one entry in this list for each image creative asset. A click tag is matched with a corresponding creative asset by matching the clickTag.name field with the creativeAsset.assetIdentifier.name field. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {string} commercialId Industry standard ID assigned to creative for reach and frequency. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID.\n* @property {string[]} companionCreatives List of companion creatives assigned to an in-Stream videocreative. Acceptable values include IDs of existing flash and image creatives. Applicable to the following creative types: all VPAID and all INSTREAM_VIDEO with dynamicAssetSelection set to false.\n* @property {string[]} compatibility Compatibilities associated with this creative. This is a read-only field. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. Only pre-existing creatives may have these compatibilities since new creatives will either be assigned DISPLAY or DISPLAY_INTERSTITIAL instead. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. Applicable to all creative types.\n\nAcceptable values are:\n- &quot;APP&quot;\n- &quot;APP_INTERSTITIAL&quot;\n- &quot;IN_STREAM_VIDEO&quot;\n- &quot;DISPLAY&quot;\n- &quot;DISPLAY_INTERSTITIAL&quot;\n* @property {boolean} convertFlashToHtml5 Whether Flash assets associated with the creative need to be automatically converted to HTML5. This flag is enabled by default and users can choose to disable it if they don&#39;t want the system to generate and use HTML5 asset for this creative. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {dfareporting(v2.6).CreativeCustomEvent[]} counterCustomEvents List of counter events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID.\n* @property {dfareporting(v2.6).CreativeAssetSelection} creativeAssetSelection Required if dynamicAssetSelection is true.\n* @property {dfareporting(v2.6).CreativeAsset[]} creativeAssets Assets associated with a creative. Applicable to all but the following creative types: INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and REDIRECT\n* @property {dfareporting(v2.6).CreativeFieldAssignment[]} creativeFieldAssignments Creative field assignments for this creative. Applicable to all creative types.\n* @property {string[]} customKeyValues Custom key-values for a Rich Media creative. Key-values let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use key-values to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {boolean} dynamicAssetSelection Set this to true to enable the use of rules to target individual assets in this creative. When set to true creativeAssetSelection must be set. This also controls asset-level companions. When this is true, companion creatives should be assigned to creative assets. Learn more. Applicable to INSTREAM_VIDEO creatives.\n* @property {dfareporting(v2.6).CreativeCustomEvent[]} exitCustomEvents List of exit events configured for the creative. For DISPLAY and DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags, For DISPLAY, an event is also created from the backupImageReportingLabel. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {dfareporting(v2.6).FsCommand} fsCommand OpenWindow FSCommand of this creative. This lets the SWF file communicate with either Flash Player or the program hosting Flash Player, such as a web browser. This is only triggered if allowScriptAccess field is true. Applicable to the following creative types: FLASH_INPAGE.\n* @property {string} htmlCode HTML code for the creative. This is a required field when applicable. This field is ignored if htmlCodeLocked is false. Applicable to the following creative types: all CUSTOM, FLASH_INPAGE, and HTML5_BANNER, and all RICH_MEDIA.\n* @property {boolean} htmlCodeLocked Whether HTML code is DCM-generated or manually entered. Set to true to ignore changes to htmlCode. Applicable to the following creative types: FLASH_INPAGE and HTML5_BANNER.\n* @property {string} id ID of this creative. This is a read-only, auto-generated field. Applicable to all creative types.\n* @property {dfareporting(v2.6).DimensionValue} idDimensionValue Dimension value for the ID of this creative. This is a read-only field. Applicable to all creative types.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creative&quot;.\n* @property {dfareporting(v2.6).LastModifiedInfo} lastModifiedInfo Creative last modification information. This is a read-only field. Applicable to all creative types.\n* @property {string} latestTraffickedCreativeId Latest Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {string} name Name of the creative. This is a required field and must be less than 256 characters long. Applicable to all creative types.\n* @property {string} overrideCss Override CSS value for rich media creatives. Applicable to the following creative types: all RICH_MEDIA.\n* @property {string} redirectUrl URL of hosted image or hosted video or another ad tag. For INSTREAM_VIDEO_REDIRECT creatives this is the in-stream video redirect URL. The standard for a VAST (Video Ad Serving Template) ad response allows for a redirect link to another VAST 2.0 or 3.0 call. This is a required field when applicable. Applicable to the following creative types: DISPLAY_REDIRECT, INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO_REDIRECT\n* @property {string} renderingId ID of current rendering version. This is a read-only field. Applicable to all creative types.\n* @property {dfareporting(v2.6).DimensionValue} renderingIdDimensionValue Dimension value for the rendering ID of this creative. This is a read-only field. Applicable to all creative types.\n* @property {string} requiredFlashPluginVersion The minimum required Flash plugin version for this creative. For example, 11.2.202.235. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {integer} requiredFlashVersion The internal Flash version for this creative as calculated by DoubleClick Studio. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {dfareporting(v2.6).Size} size Size associated with this creative. When inserting or updating a creative either the size ID field or size width and height fields can be used. This is a required field when applicable; however for IMAGE, FLASH_INPAGE creatives, and for DISPLAY creatives with a primary asset of type HTML_IMAGE, if left blank, this field will be automatically set using the actual size of the associated image assets. Applicable to the following creative types: DISPLAY, DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER, IMAGE, and all RICH_MEDIA.\n* @property {boolean} skippable Whether the user can choose to skip the creative. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID.\n* @property {boolean} sslCompliant Whether the creative is SSL-compliant. This is a read-only field. Applicable to all creative types.\n* @property {boolean} sslOverride Whether creative should be treated as SSL compliant even if the system scan shows it&#39;s not. Applicable to all creative types.\n* @property {string} studioAdvertiserId Studio advertiser ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {string} studioCreativeId Studio creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {string} studioTraffickedCreativeId Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {string} subaccountId Subaccount ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types.\n* @property {string} thirdPartyBackupImageImpressionsUrl Third-party URL used to record backup image impressions. Applicable to the following creative types: all RICH_MEDIA.\n* @property {string} thirdPartyRichMediaImpressionsUrl Third-party URL used to record rich media impressions. Applicable to the following creative types: all RICH_MEDIA.\n* @property {dfareporting(v2.6).ThirdPartyTrackingUrl[]} thirdPartyUrls Third-party URLs for tracking in-stream video creative events. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID.\n* @property {dfareporting(v2.6).CreativeCustomEvent[]} timerCustomEvents List of timer events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset is not HTML_IMAGE.\n* @property {string} totalFileSize Combined size of all creative assets. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {string} type Type of this creative. This is a required field. Applicable to all creative types.\n\nNote: FLASH_INPAGE, HTML5_BANNER, and IMAGE are only used for existing creatives. New creatives should use DISPLAY as a replacement for these types.\n* @property {integer} version The version number helps you keep track of multiple versions of your creative in your reports. The version number will always be auto-generated during insert operations to start at 1. For tracking creatives the version cannot be incremented and will always remain at 1. For all other creative types the version can be incremented only by 1 during update operations. In addition, the version will be automatically incremented by 1 when undergoing Rich Media creative merging. Applicable to all creative types.\n* @property {string} videoDescription Description of the video ad. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID.\n* @property {number} videoDuration Creative video duration in seconds. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO, all RICH_MEDIA, and all VPAID.\n*/\n/**\n * @typedef CreativeAsset\n * @memberOf! dfareporting(v2.6)\n * @type object\n* @property {boolean} actionScript3 Whether ActionScript3 is enabled for the flash asset. This is a read-only field. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {boolean} active Whether the video asset is active. This is a read-only field for VPAID_NON_LINEAR_VIDEO assets. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.\n* @property {string} alignment Possible alignments for an asset. This is a read-only field. Applicable to the following creative types: RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL.\n* @property {string} artworkType Artwork type of rich media creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.\n* @property {dfareporting(v2.6).CreativeAssetId} assetIdentifier Identifier of this asset. This is the same identifier returned during creative asset insert operation. This is a required field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.\n* @property {dfareporting(v2.6).CreativeCustomEvent} backupImageExit Exit event configured for the backup image. Applicable to the following creative types: all RICH_MEDIA.\n* @property {integer} bitRate Detected bit-rate for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.\n* @property {string} childAssetType Rich media child asset type. This is a read-only field. Applicable to the following creative types: all VPAID.\n* @property {dfareporting(v2.6).Size} collapsedSize Size of an asset when collapsed. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA and all VPAID. Additionally, applicable to assets whose displayType is ASSET_DISPLAY_TYPE_EXPANDING or ASSET_DISPLAY_TYPE_PEEL_DOWN.\n* @property {string[]} companionCreativeIds List of companion creatives assigned to an in-stream video creative asset. Acceptable values include IDs of existing flash and image creatives. Applicable to INSTREAM_VIDEO creative type with dynamicAssetSelection set to true.\n* @property {integer} customStartTimeValue Custom start time in seconds for making the asset visible. Applicable to the following creative types: all RICH_MEDIA.\n* @property {string[]} detectedFeatures List of feature dependencies for the creative asset that are detected by DCM. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {string} displayType Type of rich media asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.\n* @property {integer} duration Duration in seconds for which an asset will be displayed. Applicable to the following creative types: INSTREAM_VIDEO and VPAID_LINEAR_VIDEO.\n* @property {string} durationType Duration type for which an asset will be displayed. Applicable to the following creative types: all RICH_MEDIA.\n* @property {dfareporting(v2.6).Size} expandedDimension Detected expanded dimension for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.\n* @property {string} fileSize File size associated with this creative asset. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.\n* @property {integer} flashVersion Flash version of the asset. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {boolean} hideFlashObjects Whether to hide Flash objects flag for an asset. Applicable to the following creative types: all RICH_MEDIA.\n* @property {boolean} hideSelectionBoxes Whether to hide selection boxes flag for an asset. Applicable to the following creative types: all RICH_MEDIA.\n* @property {boolean} horizontallyLocked Whether the asset is horizontally locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.\n* @property {string} id Numeric ID of this creative asset. This is a required field and should not be modified. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.\n* @property {dfareporting(v2.6).DimensionValue} idDimensionValue Dimension value for the ID of the asset. This is a read-only, auto-generated field.\n* @property {string} mimeType Detected MIME type for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.\n* @property {dfareporting(v2.6).OffsetPosition} offset Offset position for an asset in collapsed mode. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA and all VPAID. Additionally, only applicable to assets whose displayType is ASSET_DISPLAY_TYPE_EXPANDING or ASSET_DISPLAY_TYPE_PEEL_DOWN.\n* @property {boolean} originalBackup Whether the backup asset is original or changed by the user in DCM. Applicable to the following creative types: all RICH_MEDIA.\n* @property {dfareporting(v2.6).OffsetPosition} position Offset position for an asset. Applicable to the following creative types: all RICH_MEDIA.\n* @property {string} positionLeftUnit Offset left unit for an asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.\n* @property {string} positionTopUnit Offset top unit for an asset. This is a read-only field if the asset displayType is ASSET_DISPLAY_TYPE_OVERLAY. Applicable to the following creative types: all RICH_MEDIA.\n* @property {string} progressiveServingUrl Progressive URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.\n* @property {boolean} pushdown Whether the asset pushes down other content. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable when the asset offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height.\n* @property {number} pushdownDuration Pushdown duration in seconds for an asset. Must be between 0 and 9.99. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable when the asset pushdown field is true, the offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height.\n* @property {string} role Role of the asset in relation to creative. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT. This is a required field.\nPRIMARY applies to DISPLAY, FLASH_INPAGE, HTML5_BANNER, IMAGE, DISPLAY_IMAGE_GALLERY, all RICH_MEDIA (which may contain multiple primary assets), and all VPAID creatives.\nBACKUP_IMAGE applies to FLASH_INPAGE, HTML5_BANNER, all RICH_MEDIA, and all VPAID creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\nADDITIONAL_IMAGE and ADDITIONAL_FLASH apply to FLASH_INPAGE creatives.\nOTHER refers to assets from sources other than DCM, such as Studio uploaded assets, applicable to all RICH_MEDIA and all VPAID creatives.\nPARENT_VIDEO refers to videos uploaded by the user in DCM and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives.\nTRANSCODED_VIDEO refers to videos transcoded by DCM from PARENT_VIDEO assets and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives.\nALTERNATE_VIDEO refers to the DCM representation of child asset videos from Studio, and is applicable to VPAID_LINEAR_VIDEO creatives. These cannot be added or removed within DCM.\nFor VPAID_LINEAR_VIDEO creatives, PARENT_VIDEO, TRANSCODED_VIDEO and ALTERNATE_VIDEO assets that are marked active serve as backup in case the VPAID creative cannot be served. Only PARENT_VIDEO assets can be added or removed for an INSTREAM_VIDEO or VPAID_LINEAR_VIDEO creative.\n* @property {dfareporting(v2.6).Size} size Size associated with this creative asset. This is a required field when applicable; however for IMAGE and FLASH_INPAGE, creatives if left blank, this field will be automatically set using the actual size of the associated image asset. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER, IMAGE, and all RICH_MEDIA. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {boolean} sslCompliant Whether the asset is SSL-compliant. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.\n* @property {string} startTimeType Initial wait time type before making the asset visible. Applicable to the following creative types: all RICH_MEDIA.\n* @property {string} streamingServingUrl Streaming URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.\n* @property {boolean} transparency Whether the asset is transparent. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable to HTML5 assets.\n* @property {boolean} verticallyLocked Whether the asset is vertically locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.\n* @property {number} videoDuration Detected video duration for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.\n* @property {string} windowMode Window mode options for flash assets. Applicable to the following creative types: FLASH_INPAGE, RICH_MEDIA_DISPLAY_EXPANDING, RICH_MEDIA_IM_EXPAND, RICH_MEDIA_DISPLAY_BANNER, and RICH_MEDIA_INPAGE_FLOATING.\n* @property {integer} zIndex zIndex value of an asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable to assets whose displayType is NOT one of the following types: ASSET_DISPLAY_TYPE_INPAGE or ASSET_DISPLAY_TYPE_OVERLAY.\n* @property {string} zipFilename File name of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.\n* @property {string} zipFilesize Size of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.\n*/\n/**\n * @typedef CreativeAssetId\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} name Name of the creative asset. This is a required field while inserting an asset. After insertion, this assetIdentifier is used to identify the uploaded asset. Characters in the name must be alphanumeric or one of the following: &quot;.-_ &quot;. Spaces are allowed.\n * @property {string} type Type of asset to upload. This is a required field. FLASH and IMAGE are no longer supported for new uploads. All image assets should use HTML_IMAGE.\n */\n/**\n * @typedef CreativeAssetMetadata\n * @memberOf! dfareporting(v2.6)\n * @type object\n* @property {dfareporting(v2.6).CreativeAssetId} assetIdentifier ID of the creative asset. This is a required field.\n* @property {dfareporting(v2.6).ClickTag[]} clickTags List of detected click tags for assets. This is a read-only auto-generated field.\n* @property {string[]} detectedFeatures List of feature dependencies for the creative asset that are detected by DCM. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field.\n* @property {string} id Numeric ID of the asset. This is a read-only, auto-generated field.\n* @property {dfareporting(v2.6).DimensionValue} idDimensionValue Dimension value for the numeric ID of the asset. This is a read-only, auto-generated field.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creativeAssetMetadata&quot;.\n* @property {string[]} warnedValidationRules Rules validated during code generation that generated a warning. This is a read-only, auto-generated field.\n\nPossible values are:\n- &quot;ADMOB_REFERENCED&quot;\n- &quot;ASSET_FORMAT_UNSUPPORTED_DCM&quot;\n- &quot;ASSET_INVALID&quot;\n- &quot;CLICK_TAG_HARD_CODED&quot;\n- &quot;CLICK_TAG_INVALID&quot;\n- &quot;CLICK_TAG_IN_GWD&quot;\n- &quot;CLICK_TAG_MISSING&quot;\n- &quot;CLICK_TAG_MORE_THAN_ONE&quot;\n- &quot;CLICK_TAG_NON_TOP_LEVEL&quot;\n- &quot;COMPONENT_UNSUPPORTED_DCM&quot;\n- &quot;ENABLER_UNSUPPORTED_METHOD_DCM&quot;\n- &quot;EXTERNAL_FILE_REFERENCED&quot;\n- &quot;FILE_DETAIL_EMPTY&quot;\n- &quot;FILE_TYPE_INVALID&quot;\n- &quot;GWD_PROPERTIES_INVALID&quot;\n- &quot;HTML5_FEATURE_UNSUPPORTED&quot;\n- &quot;LINKED_FILE_NOT_FOUND&quot;\n- &quot;MAX_FLASH_VERSION_11&quot;\n- &quot;MRAID_REFERENCED&quot;\n- &quot;NOT_SSL_COMPLIANT&quot;\n- &quot;ORPHANED_ASSET&quot;\n- &quot;PRIMARY_HTML_MISSING&quot;\n- &quot;SVG_INVALID&quot;\n- &quot;ZIP_INVALID&quot;\n*/\n/**\n * @typedef CreativeAssetSelection\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} defaultAssetId A creativeAssets[].id. This should refer to one of the parent assets in this creative, and will be served if none of the rules match. This is a required field.\n * @property {dfareporting(v2.6).Rule[]} rules Rules determine which asset will be served to a viewer. Rules will be evaluated in the order in which they are stored in this list. This list must contain at least one rule. Applicable to INSTREAM_VIDEO creatives.\n */\n/**\n * @typedef CreativeAssignment\n * @memberOf! dfareporting(v2.6)\n * @type object\n* @property {boolean} active Whether this creative assignment is active. When true, the creative will be included in the ad&#39;s rotation.\n* @property {boolean} applyEventTags Whether applicable event tags should fire when this creative assignment is rendered. If this value is unset when the ad is inserted or updated, it will default to true for all creative types EXCEPT for INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO.\n* @property {dfareporting(v2.6).ClickThroughUrl} clickThroughUrl Click-through URL of the creative assignment.\n* @property {dfareporting(v2.6).CompanionClickThroughOverride[]} companionCreativeOverrides Companion creative overrides for this creative assignment. Applicable to video ads.\n* @property {dfareporting(v2.6).CreativeGroupAssignment[]} creativeGroupAssignments Creative group assignments for this creative assignment. Only one assignment per creative group number is allowed for a maximum of two assignments.\n* @property {string} creativeId ID of the creative to be assigned. This is a required field.\n* @property {dfareporting(v2.6).DimensionValue} creativeIdDimensionValue Dimension value for the ID of the creative. This is a read-only, auto-generated field.\n* @property {string} endTime Date and time that the assigned creative should stop serving. Must be later than the start time.\n* @property {dfareporting(v2.6).RichMediaExitOverride[]} richMediaExitOverrides Rich media exit overrides for this creative assignment.\nApplicable when the creative type is any of the following: \n- RICH_MEDIA_INPAGE\n- RICH_MEDIA_INPAGE_FLOATING\n- RICH_MEDIA_IM_EXPAND\n- RICH_MEDIA_EXPANDING\n- RICH_MEDIA_INTERSTITIAL_FLOAT\n- RICH_MEDIA_MOBILE_IN_APP\n- RICH_MEDIA_MULTI_FLOATING\n- RICH_MEDIA_PEEL_DOWN\n- ADVANCED_BANNER\n- VPAID_LINEAR\n- VPAID_NON_LINEAR\n* @property {integer} sequence Sequence number of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_SEQUENTIAL.\n* @property {boolean} sslCompliant Whether the creative to be assigned is SSL-compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.\n* @property {string} startTime Date and time that the assigned creative should start serving.\n* @property {integer} weight Weight of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_RANDOM.\n*/\n/**\n * @typedef CreativeCustomEvent\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} advertiserCustomEventId Unique ID of this event used by DDM Reporting and Data Transfer. This is a read-only field.\n * @property {string} advertiserCustomEventName User-entered name for the event.\n * @property {string} advertiserCustomEventType Type of the event. This is a read-only field.\n * @property {string} artworkLabel Artwork label column, used to link events in DCM back to events in Studio. This is a required field and should not be modified after insertion.\n * @property {string} artworkType Artwork type used by the creative.This is a read-only field.\n * @property {string} exitUrl Exit URL of the event. This field is used only for exit events.\n * @property {string} id ID of this event. This is a required field and should not be modified after insertion.\n * @property {dfareporting(v2.6).PopupWindowProperties} popupWindowProperties Properties for rich media popup windows. This field is used only for exit events.\n * @property {string} targetType Target type used by the event.\n * @property {string} videoReportingId Video reporting ID, used to differentiate multiple videos in a single creative. This is a read-only field.\n */\n/**\n * @typedef CreativeField\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this creative field. This is a read-only field that can be left blank.\n * @property {string} advertiserId Advertiser ID of this creative field. This is a required field on insertion.\n * @property {dfareporting(v2.6).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n * @property {string} id ID of this creative field. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creativeField&quot;.\n * @property {string} name Name of this creative field. This is a required field and must be less than 256 characters long and unique among creative fields of the same advertiser.\n * @property {string} subaccountId Subaccount ID of this creative field. This is a read-only field that can be left blank.\n */\n/**\n * @typedef CreativeFieldAssignment\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} creativeFieldId ID of the creative field.\n * @property {string} creativeFieldValueId ID of the creative field value.\n */\n/**\n * @typedef CreativeFieldValue\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} id ID of this creative field value. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creativeFieldValue&quot;.\n * @property {string} value Value of this creative field value. It needs to be less than 256 characters in length and unique per creative field.\n */\n/**\n * @typedef CreativeFieldValuesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).CreativeFieldValue[]} creativeFieldValues Creative field value collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creativeFieldValuesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef CreativeFieldsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).CreativeField[]} creativeFields Creative field collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creativeFieldsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef CreativeGroup\n * @memberOf! dfareporting(v2.6)\n * @type object\n* @property {string} accountId Account ID of this creative group. This is a read-only field that can be left blank.\n* @property {string} advertiserId Advertiser ID of this creative group. This is a required field on insertion.\n* @property {dfareporting(v2.6).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n* @property {integer} groupNumber Subgroup of the creative group. Assign your creative groups to one of the following subgroups in order to filter or manage them more easily. This field is required on insertion and is read-only after insertion.\nAcceptable values are: \n- 1\n- 2\n* @property {string} id ID of this creative group. This is a read-only, auto-generated field.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creativeGroup&quot;.\n* @property {string} name Name of this creative group. This is a required field and must be less than 256 characters long and unique among creative groups of the same advertiser.\n* @property {string} subaccountId Subaccount ID of this creative group. This is a read-only field that can be left blank.\n*/\n/**\n * @typedef CreativeGroupAssignment\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} creativeGroupId ID of the creative group to be assigned.\n * @property {string} creativeGroupNumber Creative group number of the creative group assignment.\n */\n/**\n * @typedef CreativeGroupsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).CreativeGroup[]} creativeGroups Creative group collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creativeGroupsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef CreativeOptimizationConfiguration\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} id ID of this creative optimization config. This field is auto-generated when the campaign is inserted or updated. It can be null for existing campaigns.\n * @property {string} name Name of this creative optimization config. This is a required field and must be less than 129 characters long.\n * @property {dfareporting(v2.6).OptimizationActivity[]} optimizationActivitys List of optimization activities associated with this configuration.\n * @property {string} optimizationModel Optimization model for this configuration.\n */\n/**\n * @typedef CreativeRotation\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).CreativeAssignment[]} creativeAssignments Creative assignments in this creative rotation.\n * @property {string} creativeOptimizationConfigurationId Creative optimization configuration that is used by this ad. It should refer to one of the existing optimization configurations in the ad&#39;s campaign. If it is unset or set to 0, then the campaign&#39;s default optimization configuration will be used for this ad.\n * @property {string} type Type of creative rotation. Can be used to specify whether to use sequential or random rotation.\n * @property {string} weightCalculationStrategy Strategy for calculating weights. Used with CREATIVE_ROTATION_TYPE_RANDOM.\n */\n/**\n * @typedef CreativeSettings\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} iFrameFooter Header text for iFrames for this site. Must be less than or equal to 2000 characters long.\n * @property {string} iFrameHeader Header text for iFrames for this site. Must be less than or equal to 2000 characters long.\n */\n/**\n * @typedef CreativesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).Creative[]} creatives Creative collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creativesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef CrossDimensionReachReportCompatibleFields\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).Dimension[]} breakdown Dimensions which are compatible to be selected in the &quot;breakdown&quot; section of the report.\n * @property {dfareporting(v2.6).Dimension[]} dimensionFilters Dimensions which are compatible to be selected in the &quot;dimensionFilters&quot; section of the report.\n * @property {string} kind The kind of resource this is, in this case dfareporting#crossDimensionReachReportCompatibleFields.\n * @property {dfareporting(v2.6).Metric[]} metrics Metrics which are compatible to be selected in the &quot;metricNames&quot; section of the report.\n * @property {dfareporting(v2.6).Metric[]} overlapMetrics Metrics which are compatible to be selected in the &quot;overlapMetricNames&quot; section of the report.\n */\n/**\n * @typedef CustomFloodlightVariable\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#customFloodlightVariable&quot;.\n * @property {string} type The type of custom floodlight variable to supply a value for. These map to the &quot;u[1-20]=&quot; in the tags.\n * @property {string} value The value of the custom floodlight variable. The length of string must not exceed 50 characters.\n */\n/**\n * @typedef CustomRichMediaEvents\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).DimensionValue[]} filteredEventIds List of custom rich media event IDs. Dimension values must be all of type dfa:richMediaEventTypeIdAndName.\n * @property {string} kind The kind of resource this is, in this case dfareporting#customRichMediaEvents.\n */\n/**\n * @typedef DateRange\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} endDate The end date of the date range, inclusive. A string of the format: &quot;yyyy-MM-dd&quot;.\n * @property {string} kind The kind of resource this is, in this case dfareporting#dateRange.\n * @property {string} relativeDateRange The date range relative to the date of when the report is run.\n * @property {string} startDate The start date of the date range, inclusive. A string of the format: &quot;yyyy-MM-dd&quot;.\n */\n/**\n * @typedef DayPartTargeting\n * @memberOf! dfareporting(v2.6)\n * @type object\n* @property {string[]} daysOfWeek Days of the week when the ad will serve.\n\nAcceptable values are:\n- &quot;SUNDAY&quot;\n- &quot;MONDAY&quot;\n- &quot;TUESDAY&quot;\n- &quot;WEDNESDAY&quot;\n- &quot;THURSDAY&quot;\n- &quot;FRIDAY&quot;\n- &quot;SATURDAY&quot;\n* @property {integer[]} hoursOfDay Hours of the day when the ad will serve. Must be an integer between 0 and 23 (inclusive), where 0 is midnight to 1 AM, and 23 is 11 PM to midnight. Can be specified with days of week, in which case the ad would serve during these hours on the specified days. For example, if Monday, Wednesday, Friday are the days of week specified and 9-10am, 3-5pm (hours 9, 15, and 16) is specified, the ad would serve Monday, Wednesdays, and Fridays at 9-10am and 3-5pm.\n* @property {boolean} userLocalTime Whether or not to use the user&#39;s local time. If false, the America/New York time zone applies.\n*/\n/**\n * @typedef DefaultClickThroughEventTagProperties\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} defaultClickThroughEventTagId ID of the click-through event tag to apply to all ads in this entity&#39;s scope.\n * @property {boolean} overrideInheritedEventTag Whether this entity should override the inherited default click-through event tag with its own defined value.\n */\n/**\n * @typedef DeliverySchedule\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).FrequencyCap} frequencyCap Limit on the number of times an individual user can be served the ad within a specified period of time.\n * @property {boolean} hardCutoff Whether or not hard cutoff is enabled. If true, the ad will not serve after the end date and time. Otherwise the ad will continue to be served until it has reached its delivery goals.\n * @property {string} impressionRatio Impression ratio for this ad. This ratio determines how often each ad is served relative to the others. For example, if ad A has an impression ratio of 1 and ad B has an impression ratio of 3, then DCM will serve ad B three times as often as ad A. Must be between 1 and 10.\n * @property {string} priority Serving priority of an ad, with respect to other ads. The lower the priority number, the greater the priority with which it is served.\n */\n/**\n * @typedef DfpSettings\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} dfp_network_code DFP network code for this directory site.\n * @property {string} dfp_network_name DFP network name for this directory site.\n * @property {boolean} programmaticPlacementAccepted Whether this directory site accepts programmatic placements.\n * @property {boolean} pubPaidPlacementAccepted Whether this directory site accepts publisher-paid tags.\n * @property {boolean} publisherPortalOnly Whether this directory site is available only via DoubleClick Publisher Portal.\n */\n/**\n * @typedef Dimension\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind The kind of resource this is, in this case dfareporting#dimension.\n * @property {string} name The dimension name, e.g. dfa:advertiser\n */\n/**\n * @typedef DimensionFilter\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} dimensionName The name of the dimension to filter.\n * @property {string} kind The kind of resource this is, in this case dfareporting#dimensionFilter.\n * @property {string} value The value of the dimension to filter.\n */\n/**\n * @typedef DimensionValue\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} dimensionName The name of the dimension.\n * @property {string} etag The eTag of this response for caching purposes.\n * @property {string} id The ID associated with the value if available.\n * @property {string} kind The kind of resource this is, in this case dfareporting#dimensionValue.\n * @property {string} matchType Determines how the &#39;value&#39; field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, &#39;*&#39; is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions (&#39;dfa:paidSearch*&#39;) allow a matchType other than EXACT.\n * @property {string} value The value of the dimension.\n */\n/**\n * @typedef DimensionValueList\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} etag The eTag of this response for caching purposes.\n * @property {dfareporting(v2.6).DimensionValue[]} items The dimension values returned in this response.\n * @property {string} kind The kind of list this is, in this case dfareporting#dimensionValueList.\n * @property {string} nextPageToken Continuation token used to page through dimension values. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; to the value of this field. The page token is only valid for a limited amount of time and should not be persisted.\n */\n/**\n * @typedef DimensionValueRequest\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} dimensionName The name of the dimension for which values should be requested.\n * @property {string} endDate The end date of the date range for which to retrieve dimension values. A string of the format &quot;yyyy-MM-dd&quot;.\n * @property {dfareporting(v2.6).DimensionFilter[]} filters The list of filters by which to filter values. The filters are ANDed.\n * @property {string} kind The kind of request this is, in this case dfareporting#dimensionValueRequest.\n * @property {string} startDate The start date of the date range for which to retrieve dimension values. A string of the format &quot;yyyy-MM-dd&quot;.\n */\n/**\n * @typedef DirectorySite\n * @memberOf! dfareporting(v2.6)\n * @type object\n* @property {boolean} active Whether this directory site is active.\n* @property {dfareporting(v2.6).DirectorySiteContactAssignment[]} contactAssignments Directory site contacts.\n* @property {string} countryId Country ID of this directory site.\n* @property {string} currencyId Currency ID of this directory site.\nPossible values are: \n- &quot;1&quot; for USD \n- &quot;2&quot; for GBP \n- &quot;3&quot; for ESP \n- &quot;4&quot; for SEK \n- &quot;5&quot; for CAD \n- &quot;6&quot; for JPY \n- &quot;7&quot; for DEM \n- &quot;8&quot; for AUD \n- &quot;9&quot; for FRF \n- &quot;10&quot; for ITL \n- &quot;11&quot; for DKK \n- &quot;12&quot; for NOK \n- &quot;13&quot; for FIM \n- &quot;14&quot; for ZAR \n- &quot;15&quot; for IEP \n- &quot;16&quot; for NLG \n- &quot;17&quot; for EUR \n- &quot;18&quot; for KRW \n- &quot;19&quot; for TWD \n- &quot;20&quot; for SGD \n- &quot;21&quot; for CNY \n- &quot;22&quot; for HKD \n- &quot;23&quot; for NZD \n- &quot;24&quot; for MYR \n- &quot;25&quot; for BRL \n- &quot;26&quot; for PTE \n- &quot;27&quot; for MXP \n- &quot;28&quot; for CLP \n- &quot;29&quot; for TRY \n- &quot;30&quot; for ARS \n- &quot;31&quot; for PEN \n- &quot;32&quot; for ILS \n- &quot;33&quot; for CHF \n- &quot;34&quot; for VEF \n- &quot;35&quot; for COP \n- &quot;36&quot; for GTQ \n- &quot;37&quot; for PLN \n- &quot;39&quot; for INR \n- &quot;40&quot; for THB \n- &quot;41&quot; for IDR \n- &quot;42&quot; for CZK \n- &quot;43&quot; for RON \n- &quot;44&quot; for HUF \n- &quot;45&quot; for RUB \n- &quot;46&quot; for AED \n- &quot;47&quot; for BGN \n- &quot;48&quot; for HRK\n* @property {string} description Description of this directory site.\n* @property {string} id ID of this directory site. This is a read-only, auto-generated field.\n* @property {dfareporting(v2.6).DimensionValue} idDimensionValue Dimension value for the ID of this directory site. This is a read-only, auto-generated field.\n* @property {string[]} inpageTagFormats Tag types for regular placements.\n\nAcceptable values are:\n- &quot;STANDARD&quot;\n- &quot;IFRAME_JAVASCRIPT_INPAGE&quot;\n- &quot;INTERNAL_REDIRECT_INPAGE&quot;\n- &quot;JAVASCRIPT_INPAGE&quot;\n* @property {string[]} interstitialTagFormats Tag types for interstitial placements.\n\nAcceptable values are:\n- &quot;IFRAME_JAVASCRIPT_INTERSTITIAL&quot;\n- &quot;INTERNAL_REDIRECT_INTERSTITIAL&quot;\n- &quot;JAVASCRIPT_INTERSTITIAL&quot;\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#directorySite&quot;.\n* @property {string} name Name of this directory site.\n* @property {string} parentId Parent directory site ID.\n* @property {dfareporting(v2.6).DirectorySiteSettings} settings Directory site settings.\n* @property {string} url URL of this directory site.\n*/\n/**\n * @typedef DirectorySiteContact\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} address Address of this directory site contact.\n * @property {string} email Email address of this directory site contact.\n * @property {string} firstName First name of this directory site contact.\n * @property {string} id ID of this directory site contact. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#directorySiteContact&quot;.\n * @property {string} lastName Last name of this directory site contact.\n * @property {string} phone Phone number of this directory site contact.\n * @property {string} role Directory site contact role.\n * @property {string} title Title or designation of this directory site contact.\n * @property {string} type Directory site contact type.\n */\n/**\n * @typedef DirectorySiteContactAssignment\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} contactId ID of this directory site contact. This is a read-only, auto-generated field.\n * @property {string} visibility Visibility of this directory site contact assignment. When set to PUBLIC this contact assignment is visible to all account and agency users; when set to PRIVATE it is visible only to the site.\n */\n/**\n * @typedef DirectorySiteContactsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).DirectorySiteContact[]} directorySiteContacts Directory site contact collection\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#directorySiteContactsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef DirectorySiteSettings\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {boolean} activeViewOptOut Whether this directory site has disabled active view creatives.\n * @property {dfareporting(v2.6).DfpSettings} dfp_settings Directory site DFP settings.\n * @property {boolean} instream_video_placement_accepted Whether this site accepts in-stream video ads.\n * @property {boolean} interstitialPlacementAccepted Whether this site accepts interstitial ads.\n * @property {boolean} nielsenOcrOptOut Whether this directory site has disabled Nielsen OCR reach ratings.\n * @property {boolean} verificationTagOptOut Whether this directory site has disabled generation of Verification ins tags.\n * @property {boolean} videoActiveViewOptOut Whether this directory site has disabled active view for in-stream video creatives.\n */\n/**\n * @typedef DirectorySitesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).DirectorySite[]} directorySites Directory site collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#directorySitesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef DynamicTargetingKey\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#dynamicTargetingKey&quot;.\n * @property {string} name Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.\n * @property {string} objectId ID of the object of this dynamic targeting key. This is a required field.\n * @property {string} objectType Type of the object of this dynamic targeting key. This is a required field.\n */\n/**\n * @typedef DynamicTargetingKeysListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).DynamicTargetingKey[]} dynamicTargetingKeys Dynamic targeting key collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#dynamicTargetingKeysListResponse&quot;.\n */\n/**\n * @typedef EncryptionInfo\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} encryptionEntityId The encryption entity ID. This should match the encryption configuration for ad serving or Data Transfer.\n * @property {string} encryptionEntityType The encryption entity type. This should match the encryption configuration for ad serving or Data Transfer.\n * @property {string} encryptionSource Describes whether the encrypted cookie was received from ad serving (the %m macro) or from Data Transfer.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#encryptionInfo&quot;.\n */\n/**\n * @typedef EventTag\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this event tag. This is a read-only field that can be left blank.\n * @property {string} advertiserId Advertiser ID of this event tag. This field or the campaignId field is required on insertion.\n * @property {dfareporting(v2.6).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n * @property {string} campaignId Campaign ID of this event tag. This field or the advertiserId field is required on insertion.\n * @property {dfareporting(v2.6).DimensionValue} campaignIdDimensionValue Dimension value for the ID of the campaign. This is a read-only, auto-generated field.\n * @property {boolean} enabledByDefault Whether this event tag should be automatically enabled for all of the advertiser&#39;s campaigns and ads.\n * @property {boolean} excludeFromAdxRequests Whether to remove this event tag from ads that are trafficked through DoubleClick Bid Manager to Ad Exchange. This may be useful if the event tag uses a pixel that is unapproved for Ad Exchange bids on one or more networks, such as the Google Display Network.\n * @property {string} id ID of this event tag. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#eventTag&quot;.\n * @property {string} name Name of this event tag. This is a required field and must be less than 256 characters long.\n * @property {string} siteFilterType Site filter type for this event tag. If no type is specified then the event tag will be applied to all sites.\n * @property {string[]} siteIds Filter list of site IDs associated with this event tag. The siteFilterType determines whether this is a whitelist or blacklist filter.\n * @property {boolean} sslCompliant Whether this tag is SSL-compliant or not. This is a read-only field.\n * @property {string} status Status of this event tag. Must be ENABLED for this event tag to fire. This is a required field.\n * @property {string} subaccountId Subaccount ID of this event tag. This is a read-only field that can be left blank.\n * @property {string} type Event tag type. Can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking. This is a required field.\n * @property {string} url Payload URL for this event tag. The URL on a click-through event tag should have a landing page URL appended to the end of it. This field is required on insertion.\n * @property {integer} urlEscapeLevels Number of times the landing page URL should be URL-escaped before being appended to the click-through event tag URL. Only applies to click-through event tags as specified by the event tag type.\n */\n/**\n * @typedef EventTagOverride\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {boolean} enabled Whether this override is enabled.\n * @property {string} id ID of this event tag override. This is a read-only, auto-generated field.\n */\n/**\n * @typedef EventTagsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).EventTag[]} eventTags Event tag collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#eventTagsListResponse&quot;.\n */\n/**\n * @typedef File\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).DateRange} dateRange The date range for which the file has report data. The date range will always be the absolute date range for which the report is run.\n * @property {string} etag The eTag of this response for caching purposes.\n * @property {string} fileName The filename of the file.\n * @property {string} format The output format of the report. Only available once the file is available.\n * @property {string} id The unique ID of this report file.\n * @property {string} kind The kind of resource this is, in this case dfareporting#file.\n * @property {string} lastModifiedTime The timestamp in milliseconds since epoch when this file was last modified.\n * @property {string} reportId The ID of the report this file was generated from.\n * @property {string} status The status of the report file.\n * @property {object} urls The URLs where the completed report file can be downloaded.\n */\n/**\n * @typedef FileList\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} etag The eTag of this response for caching purposes.\n * @property {dfareporting(v2.6).File[]} items The files returned in this response.\n * @property {string} kind The kind of list this is, in this case dfareporting#fileList.\n * @property {string} nextPageToken Continuation token used to page through files. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; to the value of this field. The page token is only valid for a limited amount of time and should not be persisted.\n */\n/**\n * @typedef Flight\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} endDate Inventory item flight end date.\n * @property {string} rateOrCost Rate or cost of this flight.\n * @property {string} startDate Inventory item flight start date.\n * @property {string} units Units of this flight.\n */\n/**\n * @typedef FloodlightActivitiesGenerateTagResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} floodlightActivityTag Generated tag for this floodlight activity.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#floodlightActivitiesGenerateTagResponse&quot;.\n */\n/**\n * @typedef FloodlightActivitiesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).FloodlightActivity[]} floodlightActivities Floodlight activity collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#floodlightActivitiesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef FloodlightActivity\n * @memberOf! dfareporting(v2.6)\n * @type object\n* @property {string} accountId Account ID of this floodlight activity. This is a read-only field that can be left blank.\n* @property {string} advertiserId Advertiser ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group&#39;s advertiser or the existing activity&#39;s advertiser.\n* @property {dfareporting(v2.6).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n* @property {string} cacheBustingType Code type used for cache busting in the generated tag.\n* @property {string} countingMethod Counting method for conversions for this floodlight activity. This is a required field.\n* @property {dfareporting(v2.6).FloodlightActivityDynamicTag[]} defaultTags Dynamic floodlight tags.\n* @property {string} expectedUrl URL where this tag will be deployed. If specified, must be less than 256 characters long.\n* @property {string} floodlightActivityGroupId Floodlight activity group ID of this floodlight activity. This is a required field.\n* @property {string} floodlightActivityGroupName Name of the associated floodlight activity group. This is a read-only field.\n* @property {string} floodlightActivityGroupTagString Tag string of the associated floodlight activity group. This is a read-only field.\n* @property {string} floodlightActivityGroupType Type of the associated floodlight activity group. This is a read-only field.\n* @property {string} floodlightConfigurationId Floodlight configuration ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group&#39;s floodlight configuration or from the existing activity&#39;s floodlight configuration.\n* @property {dfareporting(v2.6).DimensionValue} floodlightConfigurationIdDimensionValue Dimension value for the ID of the floodlight configuration. This is a read-only, auto-generated field.\n* @property {boolean} hidden Whether this activity is archived.\n* @property {string} id ID of this floodlight activity. This is a read-only, auto-generated field.\n* @property {dfareporting(v2.6).DimensionValue} idDimensionValue Dimension value for the ID of this floodlight activity. This is a read-only, auto-generated field.\n* @property {boolean} imageTagEnabled Whether the image tag is enabled for this activity.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#floodlightActivity&quot;.\n* @property {string} name Name of this floodlight activity. This is a required field. Must be less than 129 characters long and cannot contain quotes.\n* @property {string} notes General notes or implementation instructions for the tag.\n* @property {dfareporting(v2.6).FloodlightActivityPublisherDynamicTag[]} publisherTags Publisher dynamic floodlight tags.\n* @property {boolean} secure Whether this tag should use SSL.\n* @property {boolean} sslCompliant Whether the floodlight activity is SSL-compliant. This is a read-only field, its value detected by the system from the floodlight tags.\n* @property {boolean} sslRequired Whether this floodlight activity must be SSL-compliant.\n* @property {string} subaccountId Subaccount ID of this floodlight activity. This is a read-only field that can be left blank.\n* @property {string} tagFormat Tag format type for the floodlight activity. If left blank, the tag format will default to HTML.\n* @property {string} tagString Value of the cat= paramter in the floodlight tag, which the ad servers use to identify the activity. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being [a-z][A-Z][0-9][-][ _ ]. This tag string must also be unique among activities of the same activity group. This field is read-only after insertion.\n* @property {string[]} userDefinedVariableTypes List of the user-defined variables used by this conversion tag. These map to the &quot;u[1-20]=&quot; in the tags. Each of these can have a user defined type.\nAcceptable values are:\n- &quot;U1&quot;\n- &quot;U2&quot;\n- &quot;U3&quot;\n- &quot;U4&quot;\n- &quot;U5&quot;\n- &quot;U6&quot;\n- &quot;U7&quot;\n- &quot;U8&quot;\n- &quot;U9&quot;\n- &quot;U10&quot;\n- &quot;U11&quot;\n- &quot;U12&quot;\n- &quot;U13&quot;\n- &quot;U14&quot;\n- &quot;U15&quot;\n- &quot;U16&quot;\n- &quot;U17&quot;\n- &quot;U18&quot;\n- &quot;U19&quot;\n- &quot;U20&quot;\n*/\n/**\n * @typedef FloodlightActivityDynamicTag\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} id ID of this dynamic tag. This is a read-only, auto-generated field.\n * @property {string} name Name of this tag.\n * @property {string} tag Tag code.\n */\n/**\n * @typedef FloodlightActivityGroup\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this floodlight activity group. This is a read-only field that can be left blank.\n * @property {string} advertiserId Advertiser ID of this floodlight activity group. If this field is left blank, the value will be copied over either from the floodlight configuration&#39;s advertiser or from the existing activity group&#39;s advertiser.\n * @property {dfareporting(v2.6).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n * @property {string} floodlightConfigurationId Floodlight configuration ID of this floodlight activity group. This is a required field.\n * @property {dfareporting(v2.6).DimensionValue} floodlightConfigurationIdDimensionValue Dimension value for the ID of the floodlight configuration. This is a read-only, auto-generated field.\n * @property {string} id ID of this floodlight activity group. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.6).DimensionValue} idDimensionValue Dimension value for the ID of this floodlight activity group. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#floodlightActivityGroup&quot;.\n * @property {string} name Name of this floodlight activity group. This is a required field. Must be less than 65 characters long and cannot contain quotes.\n * @property {string} subaccountId Subaccount ID of this floodlight activity group. This is a read-only field that can be left blank.\n * @property {string} tagString Value of the type= parameter in the floodlight tag, which the ad servers use to identify the activity group that the activity belongs to. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being [a-z][A-Z][0-9][-][ _ ]. This tag string must also be unique among activity groups of the same floodlight configuration. This field is read-only after insertion.\n * @property {string} type Type of the floodlight activity group. This is a required field that is read-only after insertion.\n */\n/**\n * @typedef FloodlightActivityGroupsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).FloodlightActivityGroup[]} floodlightActivityGroups Floodlight activity group collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#floodlightActivityGroupsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef FloodlightActivityPublisherDynamicTag\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {boolean} clickThrough Whether this tag is applicable only for click-throughs.\n * @property {string} directorySiteId Directory site ID of this dynamic tag. This is a write-only field that can be used as an alternative to the siteId field. When this resource is retrieved, only the siteId field will be populated.\n * @property {dfareporting(v2.6).FloodlightActivityDynamicTag} dynamicTag Dynamic floodlight tag.\n * @property {string} siteId Site ID of this dynamic tag.\n * @property {dfareporting(v2.6).DimensionValue} siteIdDimensionValue Dimension value for the ID of the site. This is a read-only, auto-generated field.\n * @property {boolean} viewThrough Whether this tag is applicable only for view-throughs.\n */\n/**\n * @typedef FloodlightConfiguration\n * @memberOf! dfareporting(v2.6)\n * @type object\n* @property {string} accountId Account ID of this floodlight configuration. This is a read-only field that can be left blank.\n* @property {string} advertiserId Advertiser ID of the parent advertiser of this floodlight configuration.\n* @property {dfareporting(v2.6).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n* @property {boolean} analyticsDataSharingEnabled Whether advertiser data is shared with Google Analytics.\n* @property {boolean} exposureToConversionEnabled Whether the exposure-to-conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting.\n* @property {string} firstDayOfWeek Day that will be counted as the first day of the week in reports. This is a required field.\n* @property {string} id ID of this floodlight configuration. This is a read-only, auto-generated field.\n* @property {dfareporting(v2.6).DimensionValue} idDimensionValue Dimension value for the ID of this floodlight configuration. This is a read-only, auto-generated field.\n* @property {boolean} inAppAttributionTrackingEnabled Whether in-app attribution tracking is enabled.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#floodlightConfiguration&quot;.\n* @property {dfareporting(v2.6).LookbackConfiguration} lookbackConfiguration Lookback window settings for this floodlight configuration.\n* @property {string} naturalSearchConversionAttributionOption Types of attribution options for natural search conversions.\n* @property {dfareporting(v2.6).OmnitureSettings} omnitureSettings Settings for DCM Omniture integration.\n* @property {string[]} standardVariableTypes List of standard variables enabled for this configuration.\n\nAcceptable values are:\n- &quot;ORD&quot;\n- &quot;NUM&quot;\n* @property {string} subaccountId Subaccount ID of this floodlight configuration. This is a read-only field that can be left blank.\n* @property {dfareporting(v2.6).TagSettings} tagSettings Configuration settings for dynamic and image floodlight tags.\n* @property {dfareporting(v2.6).ThirdPartyAuthenticationToken[]} thirdPartyAuthenticationTokens List of third-party authentication tokens enabled for this configuration.\n* @property {dfareporting(v2.6).UserDefinedVariableConfiguration[]} userDefinedVariableConfigurations List of user defined variables enabled for this configuration.\n*/\n/**\n * @typedef FloodlightConfigurationsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).FloodlightConfiguration[]} floodlightConfigurations Floodlight configuration collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#floodlightConfigurationsListResponse&quot;.\n */\n/**\n * @typedef FloodlightReportCompatibleFields\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).Dimension[]} dimensionFilters Dimensions which are compatible to be selected in the &quot;dimensionFilters&quot; section of the report.\n * @property {dfareporting(v2.6).Dimension[]} dimensions Dimensions which are compatible to be selected in the &quot;dimensions&quot; section of the report.\n * @property {string} kind The kind of resource this is, in this case dfareporting#floodlightReportCompatibleFields.\n * @property {dfareporting(v2.6).Metric[]} metrics Metrics which are compatible to be selected in the &quot;metricNames&quot; section of the report.\n */\n/**\n * @typedef FrequencyCap\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} duration Duration of time, in seconds, for this frequency cap. The maximum duration is 90 days in seconds, or 7,776,000.\n * @property {string} impressions Number of times an individual user can be served the ad within the specified duration. The maximum allowed is 15.\n */\n/**\n * @typedef FsCommand\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {integer} left Distance from the left of the browser.Applicable when positionOption is DISTANCE_FROM_TOP_LEFT_CORNER.\n * @property {string} positionOption Position in the browser where the window will open.\n * @property {integer} top Distance from the top of the browser. Applicable when positionOption is DISTANCE_FROM_TOP_LEFT_CORNER.\n * @property {integer} windowHeight Height of the window.\n * @property {integer} windowWidth Width of the window.\n */\n/**\n * @typedef GeoTargeting\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).City[]} cities Cities to be targeted. For each city only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a city, do not target or exclude the country of the city, and do not target the metro or region of the city.\n * @property {dfareporting(v2.6).Country[]} countries Countries to be targeted or excluded from targeting, depending on the setting of the excludeCountries field. For each country only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting or excluding a country, do not target regions, cities, metros, or postal codes in the same country.\n * @property {boolean} excludeCountries Whether or not to exclude the countries in the countries field from targeting. If false, the countries field refers to countries which will be targeted by the ad.\n * @property {dfareporting(v2.6).Metro[]} metros Metros to be targeted. For each metro only dmaId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a metro, do not target or exclude the country of the metro.\n * @property {dfareporting(v2.6).PostalCode[]} postalCodes Postal codes to be targeted. For each postal code only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a postal code, do not target or exclude the country of the postal code.\n * @property {dfareporting(v2.6).Region[]} regions Regions to be targeted. For each region only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a region, do not target or exclude the country of the region.\n */\n/**\n * @typedef InventoryItem\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this inventory item.\n * @property {dfareporting(v2.6).AdSlot[]} adSlots Ad slots of this inventory item. If this inventory item represents a standalone placement, there will be exactly one ad slot. If this inventory item represents a placement group, there will be more than one ad slot, each representing one child placement in that placement group.\n * @property {string} advertiserId Advertiser ID of this inventory item.\n * @property {string} contentCategoryId Content category ID of this inventory item.\n * @property {string} estimatedClickThroughRate Estimated click-through rate of this inventory item.\n * @property {string} estimatedConversionRate Estimated conversion rate of this inventory item.\n * @property {string} id ID of this inventory item.\n * @property {boolean} inPlan Whether this inventory item is in plan.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#inventoryItem&quot;.\n * @property {dfareporting(v2.6).LastModifiedInfo} lastModifiedInfo Information about the most recent modification of this inventory item.\n * @property {string} name Name of this inventory item. For standalone inventory items, this is the same name as that of its only ad slot. For group inventory items, this can differ from the name of any of its ad slots.\n * @property {string} negotiationChannelId Negotiation channel ID of this inventory item.\n * @property {string} orderId Order ID of this inventory item.\n * @property {string} placementStrategyId Placement strategy ID of this inventory item.\n * @property {dfareporting(v2.6).Pricing} pricing Pricing of this inventory item.\n * @property {string} projectId Project ID of this inventory item.\n * @property {string} rfpId RFP ID of this inventory item.\n * @property {string} siteId ID of the site this inventory item is associated with.\n * @property {string} subaccountId Subaccount ID of this inventory item.\n * @property {string} type Type of inventory item.\n */\n/**\n * @typedef InventoryItemsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).InventoryItem[]} inventoryItems Inventory item collection\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#inventoryItemsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef KeyValueTargetingExpression\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} expression Keyword expression being targeted by the ad.\n */\n/**\n * @typedef LandingPage\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {boolean} default Whether or not this landing page will be assigned to any ads or creatives that do not have a landing page assigned explicitly. Only one default landing page is allowed per campaign.\n * @property {string} id ID of this landing page. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#landingPage&quot;.\n * @property {string} name Name of this landing page. This is a required field. It must be less than 256 characters long, and must be unique among landing pages of the same campaign.\n * @property {string} url URL of this landing page. This is a required field.\n */\n/**\n * @typedef LandingPagesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#landingPagesListResponse&quot;.\n * @property {dfareporting(v2.6).LandingPage[]} landingPages Landing page collection\n */\n/**\n * @typedef Language\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} id Language ID of this language. This is the ID used for targeting and generating reports.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#language&quot;.\n * @property {string} languageCode Format of language code is an ISO 639 two-letter language code optionally followed by an underscore followed by an ISO 3166 code. Examples are &quot;en&quot; for English or &quot;zh_CN&quot; for Simplified Chinese.\n * @property {string} name Name of this language.\n */\n/**\n * @typedef LanguageTargeting\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).Language[]} languages Languages that this ad targets. For each language only languageId is required. The other fields are populated automatically when the ad is inserted or updated.\n */\n/**\n * @typedef LanguagesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#languagesListResponse&quot;.\n * @property {dfareporting(v2.6).Language[]} languages Language collection.\n */\n/**\n * @typedef LastModifiedInfo\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} time Timestamp of the last change in milliseconds since epoch.\n */\n/**\n * @typedef ListPopulationClause\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).ListPopulationTerm[]} terms Terms of this list population clause. Each clause is made up of list population terms representing constraints and are joined by ORs.\n */\n/**\n * @typedef ListPopulationRule\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} floodlightActivityId Floodlight activity ID associated with this rule. This field can be left blank.\n * @property {string} floodlightActivityName Name of floodlight activity associated with this rule. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.6).ListPopulationClause[]} listPopulationClauses Clauses that make up this list population rule. Clauses are joined by ANDs, and the clauses themselves are made up of list population terms which are joined by ORs.\n */\n/**\n * @typedef ListPopulationTerm\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {boolean} contains Will be true if the term should check if the user is in the list and false if the term should check if the user is not in the list. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM. False by default.\n * @property {boolean} negation Whether to negate the comparison result of this term during rule evaluation. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.\n * @property {string} operator Comparison operator of this term. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.\n * @property {string} remarketingListId ID of the list in question. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM.\n * @property {string} type List population term type determines the applicable fields in this object. If left unset or set to CUSTOM_VARIABLE_TERM, then variableName, variableFriendlyName, operator, value, and negation are applicable. If set to LIST_MEMBERSHIP_TERM then remarketingListId and contains are applicable. If set to REFERRER_TERM then operator, value, and negation are applicable.\n * @property {string} value Literal to compare the variable to. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.\n * @property {string} variableFriendlyName Friendly name of this term&#39;s variable. This is a read-only, auto-generated field. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM.\n * @property {string} variableName Name of the variable (U1, U2, etc.) being compared in this term. This field is only relevant when type is set to null, CUSTOM_VARIABLE_TERM or REFERRER_TERM.\n */\n/**\n * @typedef ListTargetingExpression\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} expression Expression describing which lists are being targeted by the ad.\n */\n/**\n * @typedef LookbackConfiguration\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {integer} clickDuration Lookback window, in days, from the last time a given user clicked on one of your ads. If you enter 0, clicks will not be considered as triggering events for floodlight tracking. If you leave this field blank, the default value for your account will be used.\n * @property {integer} postImpressionActivitiesDuration Lookback window, in days, from the last time a given user viewed one of your ads. If you enter 0, impressions will not be considered as triggering events for floodlight tracking. If you leave this field blank, the default value for your account will be used.\n */\n/**\n * @typedef Metric\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind The kind of resource this is, in this case dfareporting#metric.\n * @property {string} name The metric name, e.g. dfa:impressions\n */\n/**\n * @typedef Metro\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} countryCode Country code of the country to which this metro region belongs.\n * @property {string} countryDartId DART ID of the country to which this metro region belongs.\n * @property {string} dartId DART ID of this metro region.\n * @property {string} dmaId DMA ID of this metro region. This is the ID used for targeting and generating reports, and is equivalent to metro_code.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#metro&quot;.\n * @property {string} metroCode Metro code of this metro region. This is equivalent to dma_id.\n * @property {string} name Name of this metro region.\n */\n/**\n * @typedef MetrosListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#metrosListResponse&quot;.\n * @property {dfareporting(v2.6).Metro[]} metros Metro collection.\n */\n/**\n * @typedef MobileCarrier\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} countryCode Country code of the country to which this mobile carrier belongs.\n * @property {string} countryDartId DART ID of the country to which this mobile carrier belongs.\n * @property {string} id ID of this mobile carrier.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#mobileCarrier&quot;.\n * @property {string} name Name of this mobile carrier.\n */\n/**\n * @typedef MobileCarriersListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#mobileCarriersListResponse&quot;.\n * @property {dfareporting(v2.6).MobileCarrier[]} mobileCarriers Mobile carrier collection.\n */\n/**\n * @typedef ObjectFilter\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#objectFilter&quot;.\n * @property {string[]} objectIds Applicable when status is ASSIGNED. The user has access to objects with these object IDs.\n * @property {string} status Status of the filter. NONE means the user has access to none of the objects. ALL means the user has access to all objects. ASSIGNED means the user has access to the objects with IDs in the objectIds list.\n */\n/**\n * @typedef OffsetPosition\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {integer} left Offset distance from left side of an asset or a window.\n * @property {integer} top Offset distance from top side of an asset or a window.\n */\n/**\n * @typedef OmnitureSettings\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {boolean} omnitureCostDataEnabled Whether placement cost data will be sent to Omniture. This property can be enabled only if omnitureIntegrationEnabled is true.\n * @property {boolean} omnitureIntegrationEnabled Whether Omniture integration is enabled. This property can be enabled only when the &quot;Advanced Ad Serving&quot; account setting is enabled.\n */\n/**\n * @typedef OperatingSystem\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} dartId DART ID of this operating system. This is the ID used for targeting.\n * @property {boolean} desktop Whether this operating system is for desktop.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#operatingSystem&quot;.\n * @property {boolean} mobile Whether this operating system is for mobile.\n * @property {string} name Name of this operating system.\n */\n/**\n * @typedef OperatingSystemVersion\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} id ID of this operating system version.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#operatingSystemVersion&quot;.\n * @property {string} majorVersion Major version (leftmost number) of this operating system version.\n * @property {string} minorVersion Minor version (number after the first dot) of this operating system version.\n * @property {string} name Name of this operating system version.\n * @property {dfareporting(v2.6).OperatingSystem} operatingSystem Operating system of this operating system version.\n */\n/**\n * @typedef OperatingSystemVersionsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#operatingSystemVersionsListResponse&quot;.\n * @property {dfareporting(v2.6).OperatingSystemVersion[]} operatingSystemVersions Operating system version collection.\n */\n/**\n * @typedef OperatingSystemsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#operatingSystemsListResponse&quot;.\n * @property {dfareporting(v2.6).OperatingSystem[]} operatingSystems Operating system collection.\n */\n/**\n * @typedef OptimizationActivity\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} floodlightActivityId Floodlight activity ID of this optimization activity. This is a required field.\n * @property {dfareporting(v2.6).DimensionValue} floodlightActivityIdDimensionValue Dimension value for the ID of the floodlight activity. This is a read-only, auto-generated field.\n * @property {integer} weight Weight associated with this optimization. Must be greater than 1. The weight assigned will be understood in proportion to the weights assigned to the other optimization activities.\n */\n/**\n * @typedef Order\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this order.\n * @property {string} advertiserId Advertiser ID of this order.\n * @property {string[]} approverUserProfileIds IDs for users that have to approve documents created for this order.\n * @property {string} buyerInvoiceId Buyer invoice ID associated with this order.\n * @property {string} buyerOrganizationName Name of the buyer organization.\n * @property {string} comments Comments in this order.\n * @property {dfareporting(v2.6).OrderContact[]} contacts Contacts for this order.\n * @property {string} id ID of this order. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#order&quot;.\n * @property {dfareporting(v2.6).LastModifiedInfo} lastModifiedInfo Information about the most recent modification of this order.\n * @property {string} name Name of this order.\n * @property {string} notes Notes of this order.\n * @property {string} planningTermId ID of the terms and conditions template used in this order.\n * @property {string} projectId Project ID of this order.\n * @property {string} sellerOrderId Seller order ID associated with this order.\n * @property {string} sellerOrganizationName Name of the seller organization.\n * @property {string[]} siteId Site IDs this order is associated with.\n * @property {string[]} siteNames Free-form site names this order is associated with.\n * @property {string} subaccountId Subaccount ID of this order.\n * @property {string} termsAndConditions Terms and conditions of this order.\n */\n/**\n * @typedef OrderContact\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} contactInfo Free-form information about this contact. It could be any information related to this contact in addition to type, title, name, and signature user profile ID.\n * @property {string} contactName Name of this contact.\n * @property {string} contactTitle Title of this contact.\n * @property {string} contactType Type of this contact.\n * @property {string} signatureUserProfileId ID of the user profile containing the signature that will be embedded into order documents.\n */\n/**\n * @typedef OrderDocument\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this order document.\n * @property {string} advertiserId Advertiser ID of this order document.\n * @property {string} amendedOrderDocumentId The amended order document ID of this order document. An order document can be created by optionally amending another order document so that the change history can be preserved.\n * @property {string[]} approvedByUserProfileIds IDs of users who have approved this order document.\n * @property {boolean} cancelled Whether this order document is cancelled.\n * @property {dfareporting(v2.6).LastModifiedInfo} createdInfo Information about the creation of this order document.\n * @property {string} effectiveDate Effective date of this order document.\n * @property {string} id ID of this order document.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#orderDocument&quot;.\n * @property {string[]} lastSentRecipients List of email addresses that received the last sent document.\n * @property {string} lastSentTime Timestamp of the last email sent with this order document.\n * @property {string} orderId ID of the order from which this order document is created.\n * @property {string} projectId Project ID of this order document.\n * @property {boolean} signed Whether this order document has been signed.\n * @property {string} subaccountId Subaccount ID of this order document.\n * @property {string} title Title of this order document.\n * @property {string} type Type of this order document\n */\n/**\n * @typedef OrderDocumentsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#orderDocumentsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.6).OrderDocument[]} orderDocuments Order document collection\n */\n/**\n * @typedef OrdersListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#ordersListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.6).Order[]} orders Order collection.\n */\n/**\n * @typedef PathToConversionReportCompatibleFields\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).Dimension[]} conversionDimensions Conversion dimensions which are compatible to be selected in the &quot;conversionDimensions&quot; section of the report.\n * @property {dfareporting(v2.6).Dimension[]} customFloodlightVariables Custom floodlight variables which are compatible to be selected in the &quot;customFloodlightVariables&quot; section of the report.\n * @property {string} kind The kind of resource this is, in this case dfareporting#pathToConversionReportCompatibleFields.\n * @property {dfareporting(v2.6).Metric[]} metrics Metrics which are compatible to be selected in the &quot;metricNames&quot; section of the report.\n * @property {dfareporting(v2.6).Dimension[]} perInteractionDimensions Per-interaction dimensions which are compatible to be selected in the &quot;perInteractionDimensions&quot; section of the report.\n */\n/**\n * @typedef Placement\n * @memberOf! dfareporting(v2.6)\n * @type object\n* @property {string} accountId Account ID of this placement. This field can be left blank.\n* @property {string} advertiserId Advertiser ID of this placement. This field can be left blank.\n* @property {dfareporting(v2.6).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n* @property {boolean} archived Whether this placement is archived.\n* @property {string} campaignId Campaign ID of this placement. This field is a required field on insertion.\n* @property {dfareporting(v2.6).DimensionValue} campaignIdDimensionValue Dimension value for the ID of the campaign. This is a read-only, auto-generated field.\n* @property {string} comment Comments for this placement.\n* @property {string} compatibility Placement compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering on desktop, on mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are no longer allowed for new placement insertions. Instead, use DISPLAY or DISPLAY_INTERSTITIAL. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. This field is required on insertion.\n* @property {string} contentCategoryId ID of the content category assigned to this placement.\n* @property {dfareporting(v2.6).LastModifiedInfo} createInfo Information about the creation of this placement. This is a read-only field.\n* @property {string} directorySiteId Directory site ID of this placement. On insert, you must set either this field or the siteId field to specify the site associated with this placement. This is a required field that is read-only after insertion.\n* @property {dfareporting(v2.6).DimensionValue} directorySiteIdDimensionValue Dimension value for the ID of the directory site. This is a read-only, auto-generated field.\n* @property {string} externalId External ID for this placement.\n* @property {string} id ID of this placement. This is a read-only, auto-generated field.\n* @property {dfareporting(v2.6).DimensionValue} idDimensionValue Dimension value for the ID of this placement. This is a read-only, auto-generated field.\n* @property {string} keyName Key name of this placement. This is a read-only, auto-generated field.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#placement&quot;.\n* @property {dfareporting(v2.6).LastModifiedInfo} lastModifiedInfo Information about the most recent modification of this placement. This is a read-only field.\n* @property {dfareporting(v2.6).LookbackConfiguration} lookbackConfiguration Lookback window settings for this placement.\n* @property {string} name Name of this placement.This is a required field and must be less than 256 characters long.\n* @property {boolean} paymentApproved Whether payment was approved for this placement. This is a read-only field relevant only to publisher-paid placements.\n* @property {string} paymentSource Payment source for this placement. This is a required field that is read-only after insertion.\n* @property {string} placementGroupId ID of this placement&#39;s group, if applicable.\n* @property {dfareporting(v2.6).DimensionValue} placementGroupIdDimensionValue Dimension value for the ID of the placement group. This is a read-only, auto-generated field.\n* @property {string} placementStrategyId ID of the placement strategy assigned to this placement.\n* @property {dfareporting(v2.6).PricingSchedule} pricingSchedule Pricing schedule of this placement. This field is required on insertion, specifically subfields startDate, endDate and pricingType.\n* @property {boolean} primary Whether this placement is the primary placement of a roadblock (placement group). You cannot change this field from true to false. Setting this field to true will automatically set the primary field on the original primary placement of the roadblock to false, and it will automatically set the roadblock&#39;s primaryPlacementId field to the ID of this placement.\n* @property {dfareporting(v2.6).LastModifiedInfo} publisherUpdateInfo Information about the last publisher update. This is a read-only field.\n* @property {string} siteId Site ID associated with this placement. On insert, you must set either this field or the directorySiteId field to specify the site associated with this placement. This is a required field that is read-only after insertion.\n* @property {dfareporting(v2.6).DimensionValue} siteIdDimensionValue Dimension value for the ID of the site. This is a read-only, auto-generated field.\n* @property {dfareporting(v2.6).Size} size Size associated with this placement. When inserting or updating a placement, only the size ID field is used. This field is required on insertion.\n* @property {boolean} sslRequired Whether creatives assigned to this placement must be SSL-compliant.\n* @property {string} status Third-party placement status.\n* @property {string} subaccountId Subaccount ID of this placement. This field can be left blank.\n* @property {string[]} tagFormats Tag formats to generate for this placement. This field is required on insertion.\nAcceptable values are:\n- &quot;PLACEMENT_TAG_STANDARD&quot;\n- &quot;PLACEMENT_TAG_IFRAME_JAVASCRIPT&quot;\n- &quot;PLACEMENT_TAG_IFRAME_ILAYER&quot;\n- &quot;PLACEMENT_TAG_INTERNAL_REDIRECT&quot;\n- &quot;PLACEMENT_TAG_JAVASCRIPT&quot;\n- &quot;PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT&quot;\n- &quot;PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT&quot;\n- &quot;PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT&quot;\n- &quot;PLACEMENT_TAG_CLICK_COMMANDS&quot;\n- &quot;PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH&quot;\n- &quot;PLACEMENT_TAG_TRACKING&quot;\n- &quot;PLACEMENT_TAG_TRACKING_IFRAME&quot;\n- &quot;PLACEMENT_TAG_TRACKING_JAVASCRIPT&quot;\n* @property {dfareporting(v2.6).TagSetting} tagSetting Tag settings for this placement.\n*/\n/**\n * @typedef PlacementAssignment\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {boolean} active Whether this placement assignment is active. When true, the placement will be included in the ad&#39;s rotation.\n * @property {string} placementId ID of the placement to be assigned. This is a required field.\n * @property {dfareporting(v2.6).DimensionValue} placementIdDimensionValue Dimension value for the ID of the placement. This is a read-only, auto-generated field.\n * @property {boolean} sslRequired Whether the placement to be assigned requires SSL. This is a read-only field that is auto-generated when the ad is inserted or updated.\n */\n/**\n * @typedef PlacementGroup\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this placement group. This is a read-only field that can be left blank.\n * @property {string} advertiserId Advertiser ID of this placement group. This is a required field on insertion.\n * @property {dfareporting(v2.6).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n * @property {boolean} archived Whether this placement group is archived.\n * @property {string} campaignId Campaign ID of this placement group. This field is required on insertion.\n * @property {dfareporting(v2.6).DimensionValue} campaignIdDimensionValue Dimension value for the ID of the campaign. This is a read-only, auto-generated field.\n * @property {string[]} childPlacementIds IDs of placements which are assigned to this placement group. This is a read-only, auto-generated field.\n * @property {string} comment Comments for this placement group.\n * @property {string} contentCategoryId ID of the content category assigned to this placement group.\n * @property {dfareporting(v2.6).LastModifiedInfo} createInfo Information about the creation of this placement group. This is a read-only field.\n * @property {string} directorySiteId Directory site ID associated with this placement group. On insert, you must set either this field or the site_id field to specify the site associated with this placement group. This is a required field that is read-only after insertion.\n * @property {dfareporting(v2.6).DimensionValue} directorySiteIdDimensionValue Dimension value for the ID of the directory site. This is a read-only, auto-generated field.\n * @property {string} externalId External ID for this placement.\n * @property {string} id ID of this placement group. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.6).DimensionValue} idDimensionValue Dimension value for the ID of this placement group. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#placementGroup&quot;.\n * @property {dfareporting(v2.6).LastModifiedInfo} lastModifiedInfo Information about the most recent modification of this placement group. This is a read-only field.\n * @property {string} name Name of this placement group. This is a required field and must be less than 256 characters long.\n * @property {string} placementGroupType Type of this placement group. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting. This field is required on insertion.\n * @property {string} placementStrategyId ID of the placement strategy assigned to this placement group.\n * @property {dfareporting(v2.6).PricingSchedule} pricingSchedule Pricing schedule of this placement group. This field is required on insertion.\n * @property {string} primaryPlacementId ID of the primary placement, used to calculate the media cost of a roadblock (placement group). Modifying this field will automatically modify the primary field on all affected roadblock child placements.\n * @property {dfareporting(v2.6).DimensionValue} primaryPlacementIdDimensionValue Dimension value for the ID of the primary placement. This is a read-only, auto-generated field.\n * @property {string} siteId Site ID associated with this placement group. On insert, you must set either this field or the directorySiteId field to specify the site associated with this placement group. This is a required field that is read-only after insertion.\n * @property {dfareporting(v2.6).DimensionValue} siteIdDimensionValue Dimension value for the ID of the site. This is a read-only, auto-generated field.\n * @property {string} subaccountId Subaccount ID of this placement group. This is a read-only field that can be left blank.\n */\n/**\n * @typedef PlacementGroupsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#placementGroupsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.6).PlacementGroup[]} placementGroups Placement group collection.\n */\n/**\n * @typedef PlacementStrategiesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#placementStrategiesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.6).PlacementStrategy[]} placementStrategies Placement strategy collection.\n */\n/**\n * @typedef PlacementStrategy\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this placement strategy.This is a read-only field that can be left blank.\n * @property {string} id ID of this placement strategy. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#placementStrategy&quot;.\n * @property {string} name Name of this placement strategy. This is a required field. It must be less than 256 characters long and unique among placement strategies of the same account.\n */\n/**\n * @typedef PlacementTag\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} placementId Placement ID\n * @property {dfareporting(v2.6).TagData[]} tagDatas Tags generated for this placement.\n */\n/**\n * @typedef PlacementsGenerateTagsResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#placementsGenerateTagsResponse&quot;.\n * @property {dfareporting(v2.6).PlacementTag[]} placementTags Set of generated tags for the specified placements.\n */\n/**\n * @typedef PlacementsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#placementsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.6).Placement[]} placements Placement collection.\n */\n/**\n * @typedef PlatformType\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} id ID of this platform type.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#platformType&quot;.\n * @property {string} name Name of this platform type.\n */\n/**\n * @typedef PlatformTypesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#platformTypesListResponse&quot;.\n * @property {dfareporting(v2.6).PlatformType[]} platformTypes Platform type collection.\n */\n/**\n * @typedef PopupWindowProperties\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).Size} dimension Popup dimension for a creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA and all VPAID\n * @property {dfareporting(v2.6).OffsetPosition} offset Upper-left corner coordinates of the popup window. Applicable if positionType is COORDINATES.\n * @property {string} positionType Popup window position either centered or at specific coordinate.\n * @property {boolean} showAddressBar Whether to display the browser address bar.\n * @property {boolean} showMenuBar Whether to display the browser menu bar.\n * @property {boolean} showScrollBar Whether to display the browser scroll bar.\n * @property {boolean} showStatusBar Whether to display the browser status bar.\n * @property {boolean} showToolBar Whether to display the browser tool bar.\n * @property {string} title Title of popup window.\n */\n/**\n * @typedef PostalCode\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} code Postal code. This is equivalent to the id field.\n * @property {string} countryCode Country code of the country to which this postal code belongs.\n * @property {string} countryDartId DART ID of the country to which this postal code belongs.\n * @property {string} id ID of this postal code.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#postalCode&quot;.\n */\n/**\n * @typedef PostalCodesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#postalCodesListResponse&quot;.\n * @property {dfareporting(v2.6).PostalCode[]} postalCodes Postal code collection.\n */\n/**\n * @typedef Pricing\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} capCostType Cap cost type of this inventory item.\n * @property {string} endDate End date of this inventory item.\n * @property {dfareporting(v2.6).Flight[]} flights Flights of this inventory item. A flight (a.k.a. pricing period) represents the inventory item pricing information for a specific period of time.\n * @property {string} groupType Group type of this inventory item if it represents a placement group. Is null otherwise. There are two type of placement groups: PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE is a simple group of inventory items that acts as a single pricing point for a group of tags. PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK is a group of inventory items that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned inventory items to be marked as primary.\n * @property {string} pricingType Pricing type of this inventory item.\n * @property {string} startDate Start date of this inventory item.\n */\n/**\n * @typedef PricingSchedule\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} capCostOption Placement cap cost option.\n * @property {boolean} disregardOverdelivery Whether cap costs are ignored by ad serving.\n * @property {string} endDate Placement end date. This date must be later than, or the same day as, the placement start date, but not later than the campaign end date. If, for example, you set 6/25/2015 as both the start and end dates, the effective placement date is just that day only, 6/25/2015. The hours, minutes, and seconds of the end date should not be set, as doing so will result in an error. This field is required on insertion.\n * @property {boolean} flighted Whether this placement is flighted. If true, pricing periods will be computed automatically.\n * @property {string} floodlightActivityId Floodlight activity ID associated with this placement. This field should be set when placement pricing type is set to PRICING_TYPE_CPA.\n * @property {dfareporting(v2.6).PricingSchedulePricingPeriod[]} pricingPeriods Pricing periods for this placement.\n * @property {string} pricingType Placement pricing type. This field is required on insertion.\n * @property {string} startDate Placement start date. This date must be later than, or the same day as, the campaign start date. The hours, minutes, and seconds of the start date should not be set, as doing so will result in an error. This field is required on insertion.\n * @property {string} testingStartDate Testing start date of this placement. The hours, minutes, and seconds of the start date should not be set, as doing so will result in an error.\n */\n/**\n * @typedef PricingSchedulePricingPeriod\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} endDate Pricing period end date. This date must be later than, or the same day as, the pricing period start date, but not later than the placement end date. The period end date can be the same date as the period start date. If, for example, you set 6/25/2015 as both the start and end dates, the effective pricing period date is just that day only, 6/25/2015. The hours, minutes, and seconds of the end date should not be set, as doing so will result in an error.\n * @property {string} pricingComment Comments for this pricing period.\n * @property {string} rateOrCostNanos Rate or cost of this pricing period.\n * @property {string} startDate Pricing period start date. This date must be later than, or the same day as, the placement start date. The hours, minutes, and seconds of the start date should not be set, as doing so will result in an error.\n * @property {string} units Units of this pricing period.\n */\n/**\n * @typedef Project\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this project.\n * @property {string} advertiserId Advertiser ID of this project.\n * @property {string} audienceAgeGroup Audience age group of this project.\n * @property {string} audienceGender Audience gender of this project.\n * @property {string} budget Budget of this project in the currency specified by the current account. The value stored in this field represents only the non-fractional amount. For example, for USD, the smallest value that can be represented by this field is 1 US dollar.\n * @property {string} clientBillingCode Client billing code of this project.\n * @property {string} clientName Name of the project client.\n * @property {string} endDate End date of the project.\n * @property {string} id ID of this project. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#project&quot;.\n * @property {dfareporting(v2.6).LastModifiedInfo} lastModifiedInfo Information about the most recent modification of this project.\n * @property {string} name Name of this project.\n * @property {string} overview Overview of this project.\n * @property {string} startDate Start date of the project.\n * @property {string} subaccountId Subaccount ID of this project.\n * @property {string} targetClicks Number of clicks that the advertiser is targeting.\n * @property {string} targetConversions Number of conversions that the advertiser is targeting.\n * @property {string} targetCpaNanos CPA that the advertiser is targeting.\n * @property {string} targetCpcNanos CPC that the advertiser is targeting.\n * @property {string} targetCpmActiveViewNanos vCPM from Active View that the advertiser is targeting.\n * @property {string} targetCpmNanos CPM that the advertiser is targeting.\n * @property {string} targetImpressions Number of impressions that the advertiser is targeting.\n */\n/**\n * @typedef ProjectsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#projectsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.6).Project[]} projects Project collection.\n */\n/**\n * @typedef ReachReportCompatibleFields\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).Dimension[]} dimensionFilters Dimensions which are compatible to be selected in the &quot;dimensionFilters&quot; section of the report.\n * @property {dfareporting(v2.6).Dimension[]} dimensions Dimensions which are compatible to be selected in the &quot;dimensions&quot; section of the report.\n * @property {string} kind The kind of resource this is, in this case dfareporting#reachReportCompatibleFields.\n * @property {dfareporting(v2.6).Metric[]} metrics Metrics which are compatible to be selected in the &quot;metricNames&quot; section of the report.\n * @property {dfareporting(v2.6).Metric[]} pivotedActivityMetrics Metrics which are compatible to be selected as activity metrics to pivot on in the &quot;activities&quot; section of the report.\n * @property {dfareporting(v2.6).Metric[]} reachByFrequencyMetrics Metrics which are compatible to be selected in the &quot;reachByFrequencyMetricNames&quot; section of the report.\n */\n/**\n * @typedef Recipient\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} deliveryType The delivery type for the recipient.\n * @property {string} email The email address of the recipient.\n * @property {string} kind The kind of resource this is, in this case dfareporting#recipient.\n */\n/**\n * @typedef Region\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} countryCode Country code of the country to which this region belongs.\n * @property {string} countryDartId DART ID of the country to which this region belongs.\n * @property {string} dartId DART ID of this region.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#region&quot;.\n * @property {string} name Name of this region.\n * @property {string} regionCode Region code.\n */\n/**\n * @typedef RegionsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#regionsListResponse&quot;.\n * @property {dfareporting(v2.6).Region[]} regions Region collection.\n */\n/**\n * @typedef RemarketingList\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.\n * @property {boolean} active Whether this remarketing list is active.\n * @property {string} advertiserId Dimension value for the advertiser ID that owns this remarketing list. This is a required field.\n * @property {dfareporting(v2.6).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n * @property {string} description Remarketing list description.\n * @property {string} id Remarketing list ID. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#remarketingList&quot;.\n * @property {string} lifeSpan Number of days that a user should remain in the remarketing list without an impression.\n * @property {dfareporting(v2.6).ListPopulationRule} listPopulationRule Rule used to populate the remarketing list with users.\n * @property {string} listSize Number of users currently in the list. This is a read-only field.\n * @property {string} listSource Product from which this remarketing list was originated.\n * @property {string} name Name of the remarketing list. This is a required field. Must be no greater than 128 characters long.\n * @property {string} subaccountId Subaccount ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.\n */\n/**\n * @typedef RemarketingListShare\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#remarketingListShare&quot;.\n * @property {string} remarketingListId Remarketing list ID. This is a read-only, auto-generated field.\n * @property {string[]} sharedAccountIds Accounts that the remarketing list is shared with.\n * @property {string[]} sharedAdvertiserIds Advertisers that the remarketing list is shared with.\n */\n/**\n * @typedef RemarketingListsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#remarketingListsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.6).RemarketingList[]} remarketingLists Remarketing list collection.\n */\n/**\n * @typedef Report\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId The account ID to which this report belongs.\n * @property {object} criteria The report criteria for a report of type &quot;STANDARD&quot;.\n * @property {object} crossDimensionReachCriteria The report criteria for a report of type &quot;CROSS_DIMENSION_REACH&quot;.\n * @property {object} delivery The report&#39;s email delivery settings.\n * @property {string} etag The eTag of this response for caching purposes.\n * @property {string} fileName The filename used when generating report files for this report.\n * @property {object} floodlightCriteria The report criteria for a report of type &quot;FLOODLIGHT&quot;.\n * @property {string} format The output format of the report. If not specified, default format is &quot;CSV&quot;. Note that the actual format in the completed report file might differ if for instance the report&#39;s size exceeds the format&#39;s capabilities. &quot;CSV&quot; will then be the fallback format.\n * @property {string} id The unique ID identifying this report resource.\n * @property {string} kind The kind of resource this is, in this case dfareporting#report.\n * @property {string} lastModifiedTime The timestamp (in milliseconds since epoch) of when this report was last modified.\n * @property {string} name The name of the report.\n * @property {string} ownerProfileId The user profile id of the owner of this report.\n * @property {object} pathToConversionCriteria The report criteria for a report of type &quot;PATH_TO_CONVERSION&quot;.\n * @property {object} reachCriteria The report criteria for a report of type &quot;REACH&quot;.\n * @property {object} schedule The report&#39;s schedule. Can only be set if the report&#39;s &#39;dateRange&#39; is a relative date range and the relative date range is not &quot;TODAY&quot;.\n * @property {string} subAccountId The subaccount ID to which this report belongs if applicable.\n * @property {string} type The type of the report.\n */\n/**\n * @typedef ReportCompatibleFields\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).Dimension[]} dimensionFilters Dimensions which are compatible to be selected in the &quot;dimensionFilters&quot; section of the report.\n * @property {dfareporting(v2.6).Dimension[]} dimensions Dimensions which are compatible to be selected in the &quot;dimensions&quot; section of the report.\n * @property {string} kind The kind of resource this is, in this case dfareporting#reportCompatibleFields.\n * @property {dfareporting(v2.6).Metric[]} metrics Metrics which are compatible to be selected in the &quot;metricNames&quot; section of the report.\n * @property {dfareporting(v2.6).Metric[]} pivotedActivityMetrics Metrics which are compatible to be selected as activity metrics to pivot on in the &quot;activities&quot; section of the report.\n */\n/**\n * @typedef ReportList\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} etag The eTag of this response for caching purposes.\n * @property {dfareporting(v2.6).Report[]} items The reports returned in this response.\n * @property {string} kind The kind of list this is, in this case dfareporting#reportList.\n * @property {string} nextPageToken Continuation token used to page through reports. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; to the value of this field. The page token is only valid for a limited amount of time and should not be persisted.\n */\n/**\n * @typedef ReportsConfiguration\n * @memberOf! dfareporting(v2.6)\n * @type object\n* @property {boolean} exposureToConversionEnabled Whether the exposure to conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting.\n* @property {dfareporting(v2.6).LookbackConfiguration} lookbackConfiguration Default lookback windows for new advertisers in this account.\n* @property {string} reportGenerationTimeZoneId Report generation time zone ID of this account. This is a required field that can only be changed by a superuser.\nAcceptable values are:\n\n- &quot;1&quot; for &quot;America/New_York&quot; \n- &quot;2&quot; for &quot;Europe/London&quot; \n- &quot;3&quot; for &quot;Europe/Paris&quot; \n- &quot;4&quot; for &quot;Africa/Johannesburg&quot; \n- &quot;5&quot; for &quot;Asia/Jerusalem&quot; \n- &quot;6&quot; for &quot;Asia/Shanghai&quot; \n- &quot;7&quot; for &quot;Asia/Hong_Kong&quot; \n- &quot;8&quot; for &quot;Asia/Tokyo&quot; \n- &quot;9&quot; for &quot;Australia/Sydney&quot; \n- &quot;10&quot; for &quot;Asia/Dubai&quot; \n- &quot;11&quot; for &quot;America/Los_Angeles&quot; \n- &quot;12&quot; for &quot;Pacific/Auckland&quot; \n- &quot;13&quot; for &quot;America/Sao_Paulo&quot;\n*/\n/**\n * @typedef RichMediaExitOverride\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).ClickThroughUrl} clickThroughUrl Click-through URL of this rich media exit override. Applicable if the enabled field is set to true.\n * @property {boolean} enabled Whether to use the clickThroughUrl. If false, the creative-level exit will be used.\n * @property {string} exitId ID for the override to refer to a specific exit in the creative.\n */\n/**\n * @typedef Rule\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} assetId A creativeAssets[].id. This should refer to one of the parent assets in this creative. This is a required field.\n * @property {string} name A user-friendly name for this rule. This is a required field.\n * @property {string} targetingTemplateId A targeting template ID. The targeting from the targeting template will be used to determine whether this asset should be served. This is a required field.\n */\n/**\n * @typedef Site\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this site. This is a read-only field that can be left blank.\n * @property {boolean} approved Whether this site is approved.\n * @property {string} directorySiteId Directory site associated with this site. This is a required field that is read-only after insertion.\n * @property {dfareporting(v2.6).DimensionValue} directorySiteIdDimensionValue Dimension value for the ID of the directory site. This is a read-only, auto-generated field.\n * @property {string} id ID of this site. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.6).DimensionValue} idDimensionValue Dimension value for the ID of this site. This is a read-only, auto-generated field.\n * @property {string} keyName Key name of this site. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#site&quot;.\n * @property {string} name Name of this site.This is a required field. Must be less than 128 characters long. If this site is under a subaccount, the name must be unique among sites of the same subaccount. Otherwise, this site is a top-level site, and the name must be unique among top-level sites of the same account.\n * @property {dfareporting(v2.6).SiteContact[]} siteContacts Site contacts.\n * @property {dfareporting(v2.6).SiteSettings} siteSettings Site-wide settings.\n * @property {string} subaccountId Subaccount ID of this site. This is a read-only field that can be left blank.\n */\n/**\n * @typedef SiteContact\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} address Address of this site contact.\n * @property {string} contactType Site contact type.\n * @property {string} email Email address of this site contact. This is a required field.\n * @property {string} firstName First name of this site contact.\n * @property {string} id ID of this site contact. This is a read-only, auto-generated field.\n * @property {string} lastName Last name of this site contact.\n * @property {string} phone Primary phone number of this site contact.\n * @property {string} title Title or designation of this site contact.\n */\n/**\n * @typedef SiteSettings\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {boolean} activeViewOptOut Whether active view creatives are disabled for this site.\n * @property {dfareporting(v2.6).CreativeSettings} creativeSettings Site-wide creative settings.\n * @property {boolean} disableBrandSafeAds Whether brand safe ads are disabled for this site.\n * @property {boolean} disableNewCookie Whether new cookies are disabled for this site.\n * @property {dfareporting(v2.6).LookbackConfiguration} lookbackConfiguration Lookback window settings for this site.\n * @property {dfareporting(v2.6).TagSetting} tagSetting Configuration settings for dynamic and image floodlight tags.\n * @property {boolean} videoActiveViewOptOut Whether Verification and ActiveView are disabled for in-stream video creatives on this site. The same setting videoActiveViewOptOut exists on the directory site level -- the opt out occurs if either of these settings are true. These settings are distinct from DirectorySites.settings.activeViewOptOut or Sites.siteSettings.activeViewOptOut which only apply to display ads. However, Accounts.activeViewOptOut opts out both video traffic, as well as display ads, from Verification and ActiveView.\n */\n/**\n * @typedef SitesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#sitesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.6).Site[]} sites Site collection.\n */\n/**\n * @typedef Size\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {integer} height Height of this size.\n * @property {boolean} iab IAB standard size. This is a read-only, auto-generated field.\n * @property {string} id ID of this size. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#size&quot;.\n * @property {integer} width Width of this size.\n */\n/**\n * @typedef SizesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#sizesListResponse&quot;.\n * @property {dfareporting(v2.6).Size[]} sizes Size collection.\n */\n/**\n * @typedef SortedDimension\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind The kind of resource this is, in this case dfareporting#sortedDimension.\n * @property {string} name The name of the dimension.\n * @property {string} sortOrder An optional sort order for the dimension column.\n */\n/**\n * @typedef Subaccount\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId ID of the account that contains this subaccount. This is a read-only field that can be left blank.\n * @property {string[]} availablePermissionIds IDs of the available user role permissions for this subaccount.\n * @property {string} id ID of this subaccount. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#subaccount&quot;.\n * @property {string} name Name of this subaccount. This is a required field. Must be less than 128 characters long and be unique among subaccounts of the same account.\n */\n/**\n * @typedef SubaccountsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#subaccountsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.6).Subaccount[]} subaccounts Subaccount collection.\n */\n/**\n * @typedef TagData\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} adId Ad associated with this placement tag.\n * @property {string} clickTag Tag string to record a click.\n * @property {string} creativeId Creative associated with this placement tag.\n * @property {string} format TagData tag format of this tag.\n * @property {string} impressionTag Tag string for serving an ad.\n */\n/**\n * @typedef TagSetting\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} additionalKeyValues Additional key-values to be included in tags. Each key-value pair must be of the form key=value, and pairs must be separated by a semicolon (;). Keys and values must not contain commas. For example, id=2;color=red is a valid value for this field.\n * @property {boolean} includeClickThroughUrls Whether static landing page URLs should be included in the tags. This setting applies only to placements.\n * @property {boolean} includeClickTracking Whether click-tracking string should be included in the tags.\n * @property {string} keywordOption Option specifying how keywords are embedded in ad tags. This setting can be used to specify whether keyword placeholders are inserted in placement tags for this site. Publishers can then add keywords to those placeholders.\n */\n/**\n * @typedef TagSettings\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {boolean} dynamicTagEnabled Whether dynamic floodlight tags are enabled.\n * @property {boolean} imageTagEnabled Whether image tags are enabled.\n */\n/**\n * @typedef TargetWindow\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} customHtml User-entered value.\n * @property {string} targetWindowOption Type of browser window for which the backup image of the flash creative can be displayed.\n */\n/**\n * @typedef TargetableRemarketingList\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.\n * @property {boolean} active Whether this targetable remarketing list is active.\n * @property {string} advertiserId Dimension value for the advertiser ID that owns this targetable remarketing list.\n * @property {dfareporting(v2.6).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser.\n * @property {string} description Targetable remarketing list description.\n * @property {string} id Targetable remarketing list ID.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#targetableRemarketingList&quot;.\n * @property {string} lifeSpan Number of days that a user should remain in the targetable remarketing list without an impression.\n * @property {string} listSize Number of users currently in the list. This is a read-only field.\n * @property {string} listSource Product from which this targetable remarketing list was originated.\n * @property {string} name Name of the targetable remarketing list. Is no greater than 128 characters long.\n * @property {string} subaccountId Subaccount ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.\n */\n/**\n * @typedef TargetableRemarketingListsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#targetableRemarketingListsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.6).TargetableRemarketingList[]} targetableRemarketingLists Targetable remarketing list collection.\n */\n/**\n * @typedef TargetingTemplate\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this targeting template. This field, if left unset, will be auto-generated on insert and is read-only after insert.\n * @property {string} advertiserId Advertiser ID of this targeting template. This is a required field on insert and is read-only after insert.\n * @property {dfareporting(v2.6).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.6).DayPartTargeting} dayPartTargeting Time and day targeting criteria.\n * @property {dfareporting(v2.6).GeoTargeting} geoTargeting Geographical targeting criteria.\n * @property {string} id ID of this targeting template. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.6).KeyValueTargetingExpression} keyValueTargetingExpression Key-value targeting criteria.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#targetingTemplate&quot;.\n * @property {dfareporting(v2.6).LanguageTargeting} languageTargeting Language targeting criteria.\n * @property {dfareporting(v2.6).ListTargetingExpression} listTargetingExpression Remarketing list targeting criteria.\n * @property {string} name Name of this targeting template. This field is required. It must be less than 256 characters long and unique within an advertiser.\n * @property {string} subaccountId Subaccount ID of this targeting template. This field, if left unset, will be auto-generated on insert and is read-only after insert.\n * @property {dfareporting(v2.6).TechnologyTargeting} technologyTargeting Technology platform targeting criteria.\n */\n/**\n * @typedef TargetingTemplatesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#targetingTemplatesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.6).TargetingTemplate[]} targetingTemplates Targeting template collection.\n */\n/**\n * @typedef TechnologyTargeting\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {dfareporting(v2.6).Browser[]} browsers Browsers that this ad targets. For each browser either set browserVersionId or dartId along with the version numbers. If both are specified, only browserVersionId will be used. The other fields are populated automatically when the ad is inserted or updated.\n * @property {dfareporting(v2.6).ConnectionType[]} connectionTypes Connection types that this ad targets. For each connection type only id is required. The other fields are populated automatically when the ad is inserted or updated.\n * @property {dfareporting(v2.6).MobileCarrier[]} mobileCarriers Mobile carriers that this ad targets. For each mobile carrier only id is required, and the other fields are populated automatically when the ad is inserted or updated. If targeting a mobile carrier, do not set targeting for any zip codes.\n * @property {dfareporting(v2.6).OperatingSystemVersion[]} operatingSystemVersions Operating system versions that this ad targets. To target all versions, use operatingSystems. For each operating system version, only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system version, do not set targeting for the corresponding operating system in operatingSystems.\n * @property {dfareporting(v2.6).OperatingSystem[]} operatingSystems Operating systems that this ad targets. To target specific versions, use operatingSystemVersions. For each operating system only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system, do not set targeting for operating system versions for the same operating system.\n * @property {dfareporting(v2.6).PlatformType[]} platformTypes Platform types that this ad targets. For example, desktop, mobile, or tablet. For each platform type, only id is required, and the other fields are populated automatically when the ad is inserted or updated.\n */\n/**\n * @typedef ThirdPartyAuthenticationToken\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} name Name of the third-party authentication token.\n * @property {string} value Value of the third-party authentication token. This is a read-only, auto-generated field.\n */\n/**\n * @typedef ThirdPartyTrackingUrl\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} thirdPartyUrlType Third-party URL type for in-stream video creatives.\n * @property {string} url URL for the specified third-party URL type.\n */\n/**\n * @typedef UserDefinedVariableConfiguration\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} dataType Data type for the variable. This is a required field.\n * @property {string} reportName User-friendly name for the variable which will appear in reports. This is a required field, must be less than 64 characters long, and cannot contain the following characters: &quot;&quot;&lt;&gt;&quot;.\n * @property {string} variableType Variable name in the tag. This is a required field.\n */\n/**\n * @typedef UserProfile\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId The account ID to which this profile belongs.\n * @property {string} accountName The account name this profile belongs to.\n * @property {string} etag The eTag of this response for caching purposes.\n * @property {string} kind The kind of resource this is, in this case dfareporting#userProfile.\n * @property {string} profileId The unique ID of the user profile.\n * @property {string} subAccountId The sub account ID this profile belongs to if applicable.\n * @property {string} subAccountName The sub account name this profile belongs to if applicable.\n * @property {string} userName The user name.\n */\n/**\n * @typedef UserProfileList\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} etag The eTag of this response for caching purposes.\n * @property {dfareporting(v2.6).UserProfile[]} items The user profiles returned in this response.\n * @property {string} kind The kind of list this is, in this case dfareporting#userProfileList.\n */\n/**\n * @typedef UserRole\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} accountId Account ID of this user role. This is a read-only field that can be left blank.\n * @property {boolean} defaultUserRole Whether this is a default user role. Default user roles are created by the system for the account/subaccount and cannot be modified or deleted. Each default user role comes with a basic set of preassigned permissions.\n * @property {string} id ID of this user role. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#userRole&quot;.\n * @property {string} name Name of this user role. This is a required field. Must be less than 256 characters long. If this user role is under a subaccount, the name must be unique among sites of the same subaccount. Otherwise, this user role is a top-level user role, and the name must be unique among top-level user roles of the same account.\n * @property {string} parentUserRoleId ID of the user role that this user role is based on or copied from. This is a required field.\n * @property {dfareporting(v2.6).UserRolePermission[]} permissions List of permissions associated with this user role.\n * @property {string} subaccountId Subaccount ID of this user role. This is a read-only field that can be left blank.\n */\n/**\n * @typedef UserRolePermission\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} availability Levels of availability for a user role permission.\n * @property {string} id ID of this user role permission.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#userRolePermission&quot;.\n * @property {string} name Name of this user role permission.\n * @property {string} permissionGroupId ID of the permission group that this user role permission belongs to.\n */\n/**\n * @typedef UserRolePermissionGroup\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} id ID of this user role permission.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#userRolePermissionGroup&quot;.\n * @property {string} name Name of this user role permission group.\n */\n/**\n * @typedef UserRolePermissionGroupsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#userRolePermissionGroupsListResponse&quot;.\n * @property {dfareporting(v2.6).UserRolePermissionGroup[]} userRolePermissionGroups User role permission group collection.\n */\n/**\n * @typedef UserRolePermissionsListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#userRolePermissionsListResponse&quot;.\n * @property {dfareporting(v2.6).UserRolePermission[]} userRolePermissions User role permission collection.\n */\n/**\n * @typedef UserRolesListResponse\n * @memberOf! dfareporting(v2.6)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#userRolesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.6).UserRole[]} userRoles User role collection.\n */\nmodule.exports = Dfareporting;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/dfareporting/v2.7.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * DCM/DFA Reporting And Trafficking API\n *\n * Manages your DoubleClick Campaign Manager ad campaigns and reports.\n *\n * @example\n * var google = require('googleapis');\n * var dfareporting = google.dfareporting('v2.7');\n *\n * @namespace dfareporting\n * @type {Function}\n * @version v2.7\n * @variation v2.7\n * @param {object=} options Options for Dfareporting\n */\nfunction Dfareporting(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.accountActiveAdSummaries = {\n\n    /**\n     * dfareporting.accountActiveAdSummaries.get\n     *\n     * @desc Gets the account's active ad summary by account ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Account ID.\n     *     summaryAccountId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountActiveAdSummaries.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountActiveAdSummaries.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.summaryAccountId Account ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/accountActiveAdSummaries/{summaryAccountId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'summaryAccountId'],\n        pathParams: ['profileId', 'summaryAccountId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.accountPermissionGroups = {\n\n    /**\n     * dfareporting.accountPermissionGroups.get\n     *\n     * @desc Gets one account permission group by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Account permission group ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountPermissionGroups.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountPermissionGroups.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Account permission group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/accountPermissionGroups/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accountPermissionGroups.list\n     *\n     * @desc Retrieves the list of account permission groups.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountPermissionGroups.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountPermissionGroups.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/accountPermissionGroups',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.accountPermissions = {\n\n    /**\n     * dfareporting.accountPermissions.get\n     *\n     * @desc Gets one account permission by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Account permission ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountPermissions.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountPermissions.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Account permission ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/accountPermissions/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accountPermissions.list\n     *\n     * @desc Retrieves the list of account permissions.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountPermissions.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountPermissions.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/accountPermissions',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.accountUserProfiles = {\n\n    /**\n     * dfareporting.accountUserProfiles.get\n     *\n     * @desc Gets one account user profile by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // User profile ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountUserProfiles.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountUserProfiles.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id User profile ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/accountUserProfiles/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accountUserProfiles.insert\n     *\n     * @desc Inserts a new account user profile.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountUserProfiles.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountUserProfiles.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).AccountUserProfile} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/accountUserProfiles',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accountUserProfiles.list\n     *\n     * @desc Retrieves a list of account user profiles, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var accountUserProfilesPage = response['accountUserProfiles'];\n     *     if (!accountUserProfilesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < accountUserProfilesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `accountUserProfilesPage`:\n     *       console.log(JSON.stringify(accountUserProfilesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.accountUserProfiles.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.accountUserProfiles.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountUserProfiles.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.active Select only active user profiles.\n     * @param {string=} params.ids Select only user profiles with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, \"user profile*2015\" will return objects with names like \"user profile June 2015\", \"user profile April 2015\", or simply \"user profile 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"user profile\" will match objects with name \"my user profile\", \"user profile 2015\", or simply \"user profile\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.subaccountId Select only user profiles with the specified subaccount ID.\n     * @param {string=} params.userRoleId Select only user profiles with the specified user role ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/accountUserProfiles',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accountUserProfiles.patch\n     *\n     * @desc Updates an existing account user profile. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // User profile ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountUserProfiles.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountUserProfiles.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id User profile ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).AccountUserProfile} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/accountUserProfiles',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accountUserProfiles.update\n     *\n     * @desc Updates an existing account user profile.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accountUserProfiles.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accountUserProfiles.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).AccountUserProfile} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/accountUserProfiles',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.accounts = {\n\n    /**\n     * dfareporting.accounts.get\n     *\n     * @desc Gets one account by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Account ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accounts.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accounts.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Account ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/accounts/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accounts.list\n     *\n     * @desc Retrieves the list of accounts, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var accountsPage = response['accounts'];\n     *     if (!accountsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < accountsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `accountsPage`:\n     *       console.log(JSON.stringify(accountsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.accounts.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.accounts.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accounts.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.active Select only active accounts. Don't set this field to select both active and non-active accounts.\n     * @param {string=} params.ids Select only accounts with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"account*2015\" will return objects with names like \"account June 2015\", \"account April 2015\", or simply \"account 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"account\" will match objects with name \"my account\", \"account 2015\", or simply \"account\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/accounts',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accounts.patch\n     *\n     * @desc Updates an existing account. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Account ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accounts.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accounts.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Account ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Account} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/accounts',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.accounts.update\n     *\n     * @desc Updates an existing account.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.accounts.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.accounts.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Account} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/accounts',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.ads = {\n\n    /**\n     * dfareporting.ads.get\n     *\n     * @desc Gets one ad by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Ad ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.ads.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.ads.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Ad ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/ads/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.ads.insert\n     *\n     * @desc Inserts a new ad.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.ads.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.ads.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Ad} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/ads',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.ads.list\n     *\n     * @desc Retrieves a list of ads, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var adsPage = response['ads'];\n     *     if (!adsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < adsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `adsPage`:\n     *       console.log(JSON.stringify(adsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.ads.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.ads.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.ads.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.active Select only active ads.\n     * @param {string=} params.advertiserId Select only ads with this advertiser ID.\n     * @param {boolean=} params.archived Select only archived ads.\n     * @param {string=} params.audienceSegmentIds Select only ads with these audience segment IDs.\n     * @param {string=} params.campaignIds Select only ads with these campaign IDs.\n     * @param {string=} params.compatibility Select default ads with the specified compatibility. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering an in-stream video ads developed with the VAST standard.\n     * @param {string=} params.creativeIds Select only ads with these creative IDs assigned.\n     * @param {string=} params.creativeOptimizationConfigurationIds Select only ads with these creative optimization configuration IDs.\n     * @param {boolean=} params.dynamicClickTracker Select only dynamic click trackers. Applicable when type is AD_SERVING_CLICK_TRACKER. If true, select dynamic click trackers. If false, select static click trackers. Leave unset to select both.\n     * @param {string=} params.ids Select only ads with these IDs.\n     * @param {string=} params.landingPageIds Select only ads with these landing page IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.overriddenEventTagId Select only ads with this event tag override ID.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string=} params.placementIds Select only ads with these placement IDs assigned.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.remarketingListIds Select only ads whose list targeting expression use these remarketing list IDs.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"ad*2015\" will return objects with names like \"ad June 2015\", \"ad April 2015\", or simply \"ad 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"ad\" will match objects with name \"my ad\", \"ad 2015\", or simply \"ad\".\n     * @param {string=} params.sizeIds Select only ads with these size IDs.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {boolean=} params.sslCompliant Select only ads that are SSL-compliant.\n     * @param {boolean=} params.sslRequired Select only ads that require SSL.\n     * @param {string=} params.type Select only ads with these types.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/ads',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.ads.patch\n     *\n     * @desc Updates an existing ad. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Ad ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.ads.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.ads.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Ad ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Ad} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/ads',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.ads.update\n     *\n     * @desc Updates an existing ad.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.ads.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.ads.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Ad} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/ads',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.advertiserGroups = {\n\n    /**\n     * dfareporting.advertiserGroups.delete\n     *\n     * @desc Deletes an existing advertiser group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Advertiser group ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertiserGroups.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertiserGroups.delete\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Advertiser group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/advertiserGroups/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertiserGroups.get\n     *\n     * @desc Gets one advertiser group by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Advertiser group ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertiserGroups.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertiserGroups.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Advertiser group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/advertiserGroups/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertiserGroups.insert\n     *\n     * @desc Inserts a new advertiser group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertiserGroups.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertiserGroups.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).AdvertiserGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/advertiserGroups',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertiserGroups.list\n     *\n     * @desc Retrieves a list of advertiser groups, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var advertiserGroupsPage = response['advertiserGroups'];\n     *     if (!advertiserGroupsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < advertiserGroupsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `advertiserGroupsPage`:\n     *       console.log(JSON.stringify(advertiserGroupsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.advertiserGroups.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.advertiserGroups.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertiserGroups.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.ids Select only advertiser groups with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"advertiser*2015\" will return objects with names like \"advertiser group June 2015\", \"advertiser group April 2015\", or simply \"advertiser group 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"advertisergroup\" will match objects with name \"my advertisergroup\", \"advertisergroup 2015\", or simply \"advertisergroup\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/advertiserGroups',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertiserGroups.patch\n     *\n     * @desc Updates an existing advertiser group. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Advertiser group ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertiserGroups.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertiserGroups.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Advertiser group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).AdvertiserGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/advertiserGroups',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertiserGroups.update\n     *\n     * @desc Updates an existing advertiser group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertiserGroups.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertiserGroups.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).AdvertiserGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/advertiserGroups',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.advertisers = {\n\n    /**\n     * dfareporting.advertisers.get\n     *\n     * @desc Gets one advertiser by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Advertiser ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertisers.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertisers.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Advertiser ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/advertisers/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertisers.insert\n     *\n     * @desc Inserts a new advertiser.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertisers.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertisers.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Advertiser} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/advertisers',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertisers.list\n     *\n     * @desc Retrieves a list of advertisers, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var advertisersPage = response['advertisers'];\n     *     if (!advertisersPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < advertisersPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `advertisersPage`:\n     *       console.log(JSON.stringify(advertisersPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.advertisers.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.advertisers.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertisers.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserGroupIds Select only advertisers with these advertiser group IDs.\n     * @param {string=} params.floodlightConfigurationIds Select only advertisers with these floodlight configuration IDs.\n     * @param {string=} params.ids Select only advertisers with these IDs.\n     * @param {boolean=} params.includeAdvertisersWithoutGroupsOnly Select only advertisers which do not belong to any advertiser group.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {boolean=} params.onlyParent Select only advertisers which use another advertiser's floodlight configuration.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"advertiser*2015\" will return objects with names like \"advertiser June 2015\", \"advertiser April 2015\", or simply \"advertiser 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"advertiser\" will match objects with name \"my advertiser\", \"advertiser 2015\", or simply \"advertiser\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.status Select only advertisers with the specified status.\n     * @param {string=} params.subaccountId Select only advertisers with these subaccount IDs.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/advertisers',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertisers.patch\n     *\n     * @desc Updates an existing advertiser. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Advertiser ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertisers.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertisers.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Advertiser ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Advertiser} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/advertisers',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.advertisers.update\n     *\n     * @desc Updates an existing advertiser.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.advertisers.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.advertisers.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Advertiser} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/advertisers',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.browsers = {\n\n    /**\n     * dfareporting.browsers.list\n     *\n     * @desc Retrieves a list of browsers.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.browsers.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.browsers.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/browsers',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.campaignCreativeAssociations = {\n\n    /**\n     * dfareporting.campaignCreativeAssociations.insert\n     *\n     * @desc Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Campaign ID in this association.\n     *     campaignId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.campaignCreativeAssociations.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.campaignCreativeAssociations.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.campaignId Campaign ID in this association.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).CampaignCreativeAssociation} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'campaignId'],\n        pathParams: ['campaignId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.campaignCreativeAssociations.list\n     *\n     * @desc Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Campaign ID in this association.\n     *     campaignId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var campaignCreativeAssociationsPage = response['campaignCreativeAssociations'];\n     *     if (!campaignCreativeAssociationsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < campaignCreativeAssociationsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `campaignCreativeAssociationsPage`:\n     *       console.log(JSON.stringify(campaignCreativeAssociationsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.campaignCreativeAssociations.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.campaignCreativeAssociations.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.campaignCreativeAssociations.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.campaignId Campaign ID in this association.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'campaignId'],\n        pathParams: ['campaignId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.campaigns = {\n\n    /**\n     * dfareporting.campaigns.get\n     *\n     * @desc Gets one campaign by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Campaign ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.campaigns.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.campaigns.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Campaign ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/campaigns/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.campaigns.insert\n     *\n     * @desc Inserts a new campaign.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Default landing page name for this new campaign. Must be less than 256 characters long.\n     *     defaultLandingPageName: '',  // TODO: Update placeholder value.\n     *\n     *     // Default landing page URL for this new campaign.\n     *     defaultLandingPageUrl: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.campaigns.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.campaigns.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.defaultLandingPageName Default landing page name for this new campaign. Must be less than 256 characters long.\n     * @param {string} params.defaultLandingPageUrl Default landing page URL for this new campaign.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Campaign} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/campaigns',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'defaultLandingPageName', 'defaultLandingPageUrl'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.campaigns.list\n     *\n     * @desc Retrieves a list of campaigns, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var campaignsPage = response['campaigns'];\n     *     if (!campaignsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < campaignsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `campaignsPage`:\n     *       console.log(JSON.stringify(campaignsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.campaigns.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.campaigns.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.campaigns.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserGroupIds Select only campaigns whose advertisers belong to these advertiser groups.\n     * @param {string=} params.advertiserIds Select only campaigns that belong to these advertisers.\n     * @param {boolean=} params.archived Select only archived campaigns. Don't set this field to select both archived and non-archived campaigns.\n     * @param {boolean=} params.atLeastOneOptimizationActivity Select only campaigns that have at least one optimization activity.\n     * @param {string=} params.excludedIds Exclude campaigns with these IDs.\n     * @param {string=} params.ids Select only campaigns with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.overriddenEventTagId Select only campaigns that have overridden this event tag ID.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for campaigns by name or ID. Wildcards (*) are allowed. For example, \"campaign*2015\" will return campaigns with names like \"campaign June 2015\", \"campaign April 2015\", or simply \"campaign 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"campaign\" will match campaigns with name \"my campaign\", \"campaign 2015\", or simply \"campaign\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.subaccountId Select only campaigns that belong to this subaccount.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/campaigns',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.campaigns.patch\n     *\n     * @desc Updates an existing campaign. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Campaign ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.campaigns.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.campaigns.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Campaign ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Campaign} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/campaigns',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.campaigns.update\n     *\n     * @desc Updates an existing campaign.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.campaigns.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.campaigns.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Campaign} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/campaigns',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.changeLogs = {\n\n    /**\n     * dfareporting.changeLogs.get\n     *\n     * @desc Gets one change log by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Change log ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.changeLogs.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.changeLogs.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Change log ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/changeLogs/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.changeLogs.list\n     *\n     * @desc Retrieves a list of change logs. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var changeLogsPage = response['changeLogs'];\n     *     if (!changeLogsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < changeLogsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `changeLogsPage`:\n     *       console.log(JSON.stringify(changeLogsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.changeLogs.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.changeLogs.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.changeLogs.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.action Select only change logs with the specified action.\n     * @param {string=} params.ids Select only change logs with these IDs.\n     * @param {string=} params.maxChangeTime Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is \"2015-07-18T22:54:00-04:00\". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.minChangeTime Select only change logs whose change time is before the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is \"2015-07-18T22:54:00-04:00\". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.\n     * @param {string=} params.objectIds Select only change logs with these object IDs.\n     * @param {string=} params.objectType Select only change logs with the specified object type.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Select only change logs whose object ID, user name, old or new values match the search string.\n     * @param {string=} params.userProfileIds Select only change logs with these user profile IDs.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/changeLogs',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.cities = {\n\n    /**\n     * dfareporting.cities.list\n     *\n     * @desc Retrieves a list of cities, possibly filtered.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.cities.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.cities.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.countryDartIds Select only cities from these countries.\n     * @param {string=} params.dartIds Select only cities with these DART IDs.\n     * @param {string=} params.namePrefix Select only cities with names starting with this prefix.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.regionDartIds Select only cities from these regions.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/cities',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.connectionTypes = {\n\n    /**\n     * dfareporting.connectionTypes.get\n     *\n     * @desc Gets one connection type by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Connection type ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.connectionTypes.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.connectionTypes.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Connection type ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/connectionTypes/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.connectionTypes.list\n     *\n     * @desc Retrieves a list of connection types.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.connectionTypes.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.connectionTypes.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/connectionTypes',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.contentCategories = {\n\n    /**\n     * dfareporting.contentCategories.delete\n     *\n     * @desc Deletes an existing content category.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Content category ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.contentCategories.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.contentCategories.delete\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Content category ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/contentCategories/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.contentCategories.get\n     *\n     * @desc Gets one content category by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Content category ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.contentCategories.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.contentCategories.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Content category ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/contentCategories/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.contentCategories.insert\n     *\n     * @desc Inserts a new content category.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.contentCategories.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.contentCategories.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).ContentCategory} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/contentCategories',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.contentCategories.list\n     *\n     * @desc Retrieves a list of content categories, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var contentCategoriesPage = response['contentCategories'];\n     *     if (!contentCategoriesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < contentCategoriesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `contentCategoriesPage`:\n     *       console.log(JSON.stringify(contentCategoriesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.contentCategories.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.contentCategories.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.contentCategories.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.ids Select only content categories with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"contentcategory*2015\" will return objects with names like \"contentcategory June 2015\", \"contentcategory April 2015\", or simply \"contentcategory 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"contentcategory\" will match objects with name \"my contentcategory\", \"contentcategory 2015\", or simply \"contentcategory\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/contentCategories',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.contentCategories.patch\n     *\n     * @desc Updates an existing content category. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Content category ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.contentCategories.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.contentCategories.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Content category ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).ContentCategory} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/contentCategories',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.contentCategories.update\n     *\n     * @desc Updates an existing content category.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.contentCategories.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.contentCategories.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).ContentCategory} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/contentCategories',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.conversions = {\n\n    /**\n     * dfareporting.conversions.batchinsert\n     *\n     * @desc Inserts conversions.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.conversions.batchinsert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/ddmconversions'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.conversions.batchinsert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).ConversionsBatchInsertRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    batchinsert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/conversions/batchinsert',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.countries = {\n\n    /**\n     * dfareporting.countries.get\n     *\n     * @desc Gets one country by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Country DART ID.\n     *     dartId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.countries.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.countries.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.dartId Country DART ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/countries/{dartId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'dartId'],\n        pathParams: ['dartId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.countries.list\n     *\n     * @desc Retrieves a list of countries.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.countries.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.countries.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/countries',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.creativeAssets = {\n\n    /**\n     * dfareporting.creativeAssets.insert\n     *\n     * @desc Inserts a new creative asset.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Advertiser ID of this creative. This is a required field.\n     *     advertiserId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     media: {\n     *       // TODO: Add desired media content for upload. See\n     *       // https://github.com/google/google-api-nodejs-client#media-uploads\n     *       mimeType: '',  // See https://www.w3.org/Protocols/rfc1341/4_Content-Type.html\n     *       body: {}\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeAssets.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeAssets.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.advertiserId Advertiser ID of this creative. This is a required field.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param  {object} params.resource Media resource metadata\n     * @param {object} params.media Media object\n     * @param {string} params.media.mimeType Media mime-type\n     * @param {string|object} params.media.body Media body contents\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets',\n          method: 'POST'\n        }, options),\n        params: params,\n        mediaUrl: 'https://www.googleapis.com/upload/dfareporting/v2.7/userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets',\n        requiredParams: ['profileId', 'advertiserId'],\n        pathParams: ['advertiserId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.creativeFieldValues = {\n\n    /**\n     * dfareporting.creativeFieldValues.delete\n     *\n     * @desc Deletes an existing creative field value.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Creative field ID for this creative field value.\n     *     creativeFieldId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Creative Field Value ID\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFieldValues.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFieldValues.delete\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.creativeFieldId Creative field ID for this creative field value.\n     * @param {string} params.id Creative Field Value ID\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'creativeFieldId', 'id'],\n        pathParams: ['creativeFieldId', 'id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFieldValues.get\n     *\n     * @desc Gets one creative field value by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Creative field ID for this creative field value.\n     *     creativeFieldId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Creative Field Value ID\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFieldValues.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFieldValues.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.creativeFieldId Creative field ID for this creative field value.\n     * @param {string} params.id Creative Field Value ID\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'creativeFieldId', 'id'],\n        pathParams: ['creativeFieldId', 'id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFieldValues.insert\n     *\n     * @desc Inserts a new creative field value.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Creative field ID for this creative field value.\n     *     creativeFieldId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFieldValues.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFieldValues.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.creativeFieldId Creative field ID for this creative field value.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).CreativeFieldValue} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'creativeFieldId'],\n        pathParams: ['creativeFieldId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFieldValues.list\n     *\n     * @desc Retrieves a list of creative field values, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Creative field ID for this creative field value.\n     *     creativeFieldId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var creativeFieldValuesPage = response['creativeFieldValues'];\n     *     if (!creativeFieldValuesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < creativeFieldValuesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `creativeFieldValuesPage`:\n     *       console.log(JSON.stringify(creativeFieldValuesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.creativeFieldValues.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.creativeFieldValues.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFieldValues.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.creativeFieldId Creative field ID for this creative field value.\n     * @param {string=} params.ids Select only creative field values with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for creative field values by their values. Wildcards (e.g. *) are not allowed.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'creativeFieldId'],\n        pathParams: ['creativeFieldId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFieldValues.patch\n     *\n     * @desc Updates an existing creative field value. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Creative field ID for this creative field value.\n     *     creativeFieldId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Creative Field Value ID\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFieldValues.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFieldValues.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.creativeFieldId Creative field ID for this creative field value.\n     * @param {string} params.id Creative Field Value ID\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).CreativeFieldValue} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'creativeFieldId', 'id'],\n        pathParams: ['creativeFieldId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFieldValues.update\n     *\n     * @desc Updates an existing creative field value.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Creative field ID for this creative field value.\n     *     creativeFieldId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFieldValues.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFieldValues.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.creativeFieldId Creative field ID for this creative field value.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).CreativeFieldValue} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'creativeFieldId'],\n        pathParams: ['creativeFieldId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.creativeFields = {\n\n    /**\n     * dfareporting.creativeFields.delete\n     *\n     * @desc Deletes an existing creative field.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Creative Field ID\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFields.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFields.delete\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Creative Field ID\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeFields/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFields.get\n     *\n     * @desc Gets one creative field by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Creative Field ID\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFields.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFields.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Creative Field ID\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeFields/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFields.insert\n     *\n     * @desc Inserts a new creative field.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFields.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFields.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).CreativeField} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeFields',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFields.list\n     *\n     * @desc Retrieves a list of creative fields, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var creativeFieldsPage = response['creativeFields'];\n     *     if (!creativeFieldsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < creativeFieldsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `creativeFieldsPage`:\n     *       console.log(JSON.stringify(creativeFieldsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.creativeFields.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.creativeFields.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFields.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserIds Select only creative fields that belong to these advertisers.\n     * @param {string=} params.ids Select only creative fields with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for creative fields by name or ID. Wildcards (*) are allowed. For example, \"creativefield*2015\" will return creative fields with names like \"creativefield June 2015\", \"creativefield April 2015\", or simply \"creativefield 2015\". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of \"creativefield\" will match creative fields with the name \"my creativefield\", \"creativefield 2015\", or simply \"creativefield\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeFields',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFields.patch\n     *\n     * @desc Updates an existing creative field. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Creative Field ID\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFields.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFields.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Creative Field ID\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).CreativeField} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeFields',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeFields.update\n     *\n     * @desc Updates an existing creative field.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeFields.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeFields.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).CreativeField} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeFields',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.creativeGroups = {\n\n    /**\n     * dfareporting.creativeGroups.get\n     *\n     * @desc Gets one creative group by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Creative group ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeGroups.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeGroups.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Creative group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeGroups/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeGroups.insert\n     *\n     * @desc Inserts a new creative group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeGroups.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeGroups.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).CreativeGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeGroups',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeGroups.list\n     *\n     * @desc Retrieves a list of creative groups, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var creativeGroupsPage = response['creativeGroups'];\n     *     if (!creativeGroupsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < creativeGroupsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `creativeGroupsPage`:\n     *       console.log(JSON.stringify(creativeGroupsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.creativeGroups.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.creativeGroups.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeGroups.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserIds Select only creative groups that belong to these advertisers.\n     * @param {integer=} params.groupNumber Select only creative groups that belong to this subgroup.\n     * @param {string=} params.ids Select only creative groups with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for creative groups by name or ID. Wildcards (*) are allowed. For example, \"creativegroup*2015\" will return creative groups with names like \"creativegroup June 2015\", \"creativegroup April 2015\", or simply \"creativegroup 2015\". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of \"creativegroup\" will match creative groups with the name \"my creativegroup\", \"creativegroup 2015\", or simply \"creativegroup\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeGroups',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeGroups.patch\n     *\n     * @desc Updates an existing creative group. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Creative group ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeGroups.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeGroups.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Creative group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).CreativeGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeGroups',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creativeGroups.update\n     *\n     * @desc Updates an existing creative group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creativeGroups.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creativeGroups.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).CreativeGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creativeGroups',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.creatives = {\n\n    /**\n     * dfareporting.creatives.get\n     *\n     * @desc Gets one creative by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Creative ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creatives.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creatives.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Creative ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creatives/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creatives.insert\n     *\n     * @desc Inserts a new creative.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creatives.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creatives.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Creative} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creatives',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creatives.list\n     *\n     * @desc Retrieves a list of creatives, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var creativesPage = response['creatives'];\n     *     if (!creativesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < creativesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `creativesPage`:\n     *       console.log(JSON.stringify(creativesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.creatives.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.creatives.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creatives.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.active Select only active creatives. Leave blank to select active and inactive creatives.\n     * @param {string=} params.advertiserId Select only creatives with this advertiser ID.\n     * @param {boolean=} params.archived Select only archived creatives. Leave blank to select archived and unarchived creatives.\n     * @param {string=} params.campaignId Select only creatives with this campaign ID.\n     * @param {string=} params.companionCreativeIds Select only in-stream video creatives with these companion IDs.\n     * @param {string=} params.creativeFieldIds Select only creatives with these creative field IDs.\n     * @param {string=} params.ids Select only creatives with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.renderingIds Select only creatives with these rendering IDs.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"creative*2015\" will return objects with names like \"creative June 2015\", \"creative April 2015\", or simply \"creative 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"creative\" will match objects with name \"my creative\", \"creative 2015\", or simply \"creative\".\n     * @param {string=} params.sizeIds Select only creatives with these size IDs.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.studioCreativeId Select only creatives corresponding to this Studio creative ID.\n     * @param {string=} params.types Select only creatives with these creative types.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creatives',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creatives.patch\n     *\n     * @desc Updates an existing creative. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Creative ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creatives.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creatives.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Creative ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Creative} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creatives',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.creatives.update\n     *\n     * @desc Updates an existing creative.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.creatives.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.creatives.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Creative} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/creatives',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.dimensionValues = {\n\n    /**\n     * dfareporting.dimensionValues.query\n     *\n     * @desc Retrieves list of report dimension values for a list of filters.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA user profile ID.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var itemsPage = response['items'];\n     *     if (!itemsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < itemsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `itemsPage`:\n     *       console.log(JSON.stringify(itemsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.dimensionValues.query(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.dimensionValues.query(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfareporting'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.dimensionValues.query\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken The value of the nextToken from the previous result page.\n     * @param {string} params.profileId The DFA user profile ID.\n     * @param {dfareporting(v2.7).DimensionValueRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    query: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/dimensionvalues/query',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.directorySiteContacts = {\n\n    /**\n     * dfareporting.directorySiteContacts.get\n     *\n     * @desc Gets one directory site contact by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Directory site contact ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.directorySiteContacts.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.directorySiteContacts.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Directory site contact ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/directorySiteContacts/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.directorySiteContacts.list\n     *\n     * @desc Retrieves a list of directory site contacts, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var directorySiteContactsPage = response['directorySiteContacts'];\n     *     if (!directorySiteContactsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < directorySiteContactsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `directorySiteContactsPage`:\n     *       console.log(JSON.stringify(directorySiteContactsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.directorySiteContacts.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.directorySiteContacts.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.directorySiteContacts.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.directorySiteIds Select only directory site contacts with these directory site IDs. This is a required field.\n     * @param {string=} params.ids Select only directory site contacts with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, \"directory site contact*2015\" will return objects with names like \"directory site contact June 2015\", \"directory site contact April 2015\", or simply \"directory site contact 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"directory site contact\" will match objects with name \"my directory site contact\", \"directory site contact 2015\", or simply \"directory site contact\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/directorySiteContacts',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.directorySites = {\n\n    /**\n     * dfareporting.directorySites.get\n     *\n     * @desc Gets one directory site by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Directory site ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.directorySites.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.directorySites.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Directory site ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/directorySites/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.directorySites.insert\n     *\n     * @desc Inserts a new directory site.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.directorySites.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.directorySites.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).DirectorySite} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/directorySites',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.directorySites.list\n     *\n     * @desc Retrieves a list of directory sites, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var directorySitesPage = response['directorySites'];\n     *     if (!directorySitesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < directorySitesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `directorySitesPage`:\n     *       console.log(JSON.stringify(directorySitesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.directorySites.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.directorySites.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.directorySites.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.acceptsInStreamVideoPlacements This search filter is no longer supported and will have no effect on the results returned.\n     * @param {boolean=} params.acceptsInterstitialPlacements This search filter is no longer supported and will have no effect on the results returned.\n     * @param {boolean=} params.acceptsPublisherPaidPlacements Select only directory sites that accept publisher paid placements. This field can be left blank.\n     * @param {boolean=} params.active Select only active directory sites. Leave blank to retrieve both active and inactive directory sites.\n     * @param {string=} params.countryId Select only directory sites with this country ID.\n     * @param {string=} params.dfp_network_code Select only directory sites with this DFP network code.\n     * @param {string=} params.ids Select only directory sites with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string=} params.parentId Select only directory sites with this parent ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name, ID or URL. Wildcards (*) are allowed. For example, \"directory site*2015\" will return objects with names like \"directory site June 2015\", \"directory site April 2015\", or simply \"directory site 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"directory site\" will match objects with name \"my directory site\", \"directory site 2015\" or simply, \"directory site\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/directorySites',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.dynamicTargetingKeys = {\n\n    /**\n     * dfareporting.dynamicTargetingKeys.delete\n     *\n     * @desc Deletes an existing dynamic targeting key.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // ID of the object of this dynamic targeting key. This is a required field.\n     *     objectId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long\n     *     // and cannot contain commas. All characters are converted to lowercase.\n     *     name: '',  // TODO: Update placeholder value.\n     *\n     *     // Type of the object of this dynamic targeting key. This is a required field.\n     *     objectType: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.dynamicTargetingKeys.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.dynamicTargetingKeys.delete\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.name Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.\n     * @param {string} params.objectId ID of the object of this dynamic targeting key. This is a required field.\n     * @param {string} params.objectType Type of the object of this dynamic targeting key. This is a required field.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/dynamicTargetingKeys/{objectId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'objectId', 'name', 'objectType'],\n        pathParams: ['objectId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.dynamicTargetingKeys.insert\n     *\n     * @desc Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.dynamicTargetingKeys.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.dynamicTargetingKeys.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).DynamicTargetingKey} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/dynamicTargetingKeys',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.dynamicTargetingKeys.list\n     *\n     * @desc Retrieves a list of dynamic targeting keys.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.dynamicTargetingKeys.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.dynamicTargetingKeys.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserId Select only dynamic targeting keys whose object has this advertiser ID.\n     * @param {string=} params.names Select only dynamic targeting keys exactly matching these names.\n     * @param {string=} params.objectId Select only dynamic targeting keys with this object ID.\n     * @param {string=} params.objectType Select only dynamic targeting keys with this object type.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/dynamicTargetingKeys',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.eventTags = {\n\n    /**\n     * dfareporting.eventTags.delete\n     *\n     * @desc Deletes an existing event tag.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Event tag ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.eventTags.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.eventTags.delete\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Event tag ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/eventTags/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.eventTags.get\n     *\n     * @desc Gets one event tag by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Event tag ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.eventTags.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.eventTags.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Event tag ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/eventTags/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.eventTags.insert\n     *\n     * @desc Inserts a new event tag.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.eventTags.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.eventTags.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).EventTag} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/eventTags',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.eventTags.list\n     *\n     * @desc Retrieves a list of event tags, possibly filtered.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.eventTags.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.eventTags.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.adId Select only event tags that belong to this ad.\n     * @param {string=} params.advertiserId Select only event tags that belong to this advertiser.\n     * @param {string=} params.campaignId Select only event tags that belong to this campaign.\n     * @param {boolean=} params.definitionsOnly Examine only the specified campaign or advertiser's event tags for matching selector criteria. When set to false, the parent advertiser and parent campaign of the specified ad or campaign is examined as well. In addition, when set to false, the status field is examined as well, along with the enabledByDefault field. This parameter can not be set to true when adId is specified as ads do not define their own even tags.\n     * @param {boolean=} params.enabled Select only enabled event tags. What is considered enabled or disabled depends on the definitionsOnly parameter. When definitionsOnly is set to true, only the specified advertiser or campaign's event tags' enabledByDefault field is examined. When definitionsOnly is set to false, the specified ad or specified campaign's parent advertiser's or parent campaign's event tags' enabledByDefault and status fields are examined as well.\n     * @param {string=} params.eventTagTypes Select only event tags with the specified event tag types. Event tag types can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking.\n     * @param {string=} params.ids Select only event tags with these IDs.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"eventtag*2015\" will return objects with names like \"eventtag June 2015\", \"eventtag April 2015\", or simply \"eventtag 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"eventtag\" will match objects with name \"my eventtag\", \"eventtag 2015\", or simply \"eventtag\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/eventTags',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.eventTags.patch\n     *\n     * @desc Updates an existing event tag. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Event tag ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.eventTags.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.eventTags.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Event tag ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).EventTag} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/eventTags',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.eventTags.update\n     *\n     * @desc Updates an existing event tag.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.eventTags.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.eventTags.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).EventTag} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/eventTags',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.files = {\n\n    /**\n     * dfareporting.files.get\n     *\n     * @desc Retrieves a report file by its report ID and file ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The ID of the report.\n     *     reportId: '0',  // TODO: Update placeholder value.\n     *\n     *     // The ID of the report file.\n     *     fileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // TODO: To download media content, use:\n     *     //\n     *     // alt: 'media',\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.files.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfareporting'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.files.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.fileId The ID of the report file.\n     * @param {string} params.reportId The ID of the report.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/reports/{reportId}/files/{fileId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['reportId', 'fileId'],\n        pathParams: ['fileId', 'reportId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.files.list\n     *\n     * @desc Lists files for a user profile.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA profile ID.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var itemsPage = response['items'];\n     *     if (!itemsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < itemsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `itemsPage`:\n     *       console.log(JSON.stringify(itemsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.files.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.files.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfareporting'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.files.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken The value of the nextToken from the previous result page.\n     * @param {string} params.profileId The DFA profile ID.\n     * @param {string=} params.scope The scope that defines which results are returned, default is 'MINE'.\n     * @param {string=} params.sortField The field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is 'DESCENDING'.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/files',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.floodlightActivities = {\n\n    /**\n     * dfareporting.floodlightActivities.delete\n     *\n     * @desc Deletes an existing floodlight activity.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Floodlight activity ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivities.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivities.delete\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Floodlight activity ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivities/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivities.generatetag\n     *\n     * @desc Generates a tag for a floodlight activity.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivities.generatetag(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivities.generatetag\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.floodlightActivityId Floodlight activity ID for which we want to generate a tag.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    generatetag: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivities/generatetag',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivities.get\n     *\n     * @desc Gets one floodlight activity by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Floodlight activity ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivities.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivities.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Floodlight activity ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivities/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivities.insert\n     *\n     * @desc Inserts a new floodlight activity.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivities.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivities.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).FloodlightActivity} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivities',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivities.list\n     *\n     * @desc Retrieves a list of floodlight activities, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var floodlightActivitiesPage = response['floodlightActivities'];\n     *     if (!floodlightActivitiesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < floodlightActivitiesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `floodlightActivitiesPage`:\n     *       console.log(JSON.stringify(floodlightActivitiesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.floodlightActivities.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.floodlightActivities.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivities.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserId Select only floodlight activities for the specified advertiser ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.\n     * @param {string=} params.floodlightActivityGroupIds Select only floodlight activities with the specified floodlight activity group IDs.\n     * @param {string=} params.floodlightActivityGroupName Select only floodlight activities with the specified floodlight activity group name.\n     * @param {string=} params.floodlightActivityGroupTagString Select only floodlight activities with the specified floodlight activity group tag string.\n     * @param {string=} params.floodlightActivityGroupType Select only floodlight activities with the specified floodlight activity group type.\n     * @param {string=} params.floodlightConfigurationId Select only floodlight activities for the specified floodlight configuration ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.\n     * @param {string=} params.ids Select only floodlight activities with the specified IDs. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"floodlightactivity*2015\" will return objects with names like \"floodlightactivity June 2015\", \"floodlightactivity April 2015\", or simply \"floodlightactivity 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"floodlightactivity\" will match objects with name \"my floodlightactivity activity\", \"floodlightactivity 2015\", or simply \"floodlightactivity\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.tagString Select only floodlight activities with the specified tag string.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivities',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivities.patch\n     *\n     * @desc Updates an existing floodlight activity. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Floodlight activity ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivities.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivities.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Floodlight activity ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).FloodlightActivity} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivities',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivities.update\n     *\n     * @desc Updates an existing floodlight activity.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivities.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivities.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).FloodlightActivity} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivities',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.floodlightActivityGroups = {\n\n    /**\n     * dfareporting.floodlightActivityGroups.get\n     *\n     * @desc Gets one floodlight activity group by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Floodlight activity Group ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivityGroups.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivityGroups.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Floodlight activity Group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivityGroups/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivityGroups.insert\n     *\n     * @desc Inserts a new floodlight activity group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivityGroups.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivityGroups.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).FloodlightActivityGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivityGroups',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivityGroups.list\n     *\n     * @desc Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var floodlightActivityGroupsPage = response['floodlightActivityGroups'];\n     *     if (!floodlightActivityGroupsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < floodlightActivityGroupsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `floodlightActivityGroupsPage`:\n     *       console.log(JSON.stringify(floodlightActivityGroupsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.floodlightActivityGroups.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.floodlightActivityGroups.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivityGroups.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserId Select only floodlight activity groups with the specified advertiser ID. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.\n     * @param {string=} params.floodlightConfigurationId Select only floodlight activity groups with the specified floodlight configuration ID. Must specify either advertiserId, or floodlightConfigurationId for a non-empty result.\n     * @param {string=} params.ids Select only floodlight activity groups with the specified IDs. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"floodlightactivitygroup*2015\" will return objects with names like \"floodlightactivitygroup June 2015\", \"floodlightactivitygroup April 2015\", or simply \"floodlightactivitygroup 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"floodlightactivitygroup\" will match objects with name \"my floodlightactivitygroup activity\", \"floodlightactivitygroup 2015\", or simply \"floodlightactivitygroup\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.type Select only floodlight activity groups with the specified floodlight activity group type.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivityGroups',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivityGroups.patch\n     *\n     * @desc Updates an existing floodlight activity group. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Floodlight activity Group ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivityGroups.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivityGroups.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Floodlight activity Group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).FloodlightActivityGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivityGroups',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightActivityGroups.update\n     *\n     * @desc Updates an existing floodlight activity group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightActivityGroups.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightActivityGroups.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).FloodlightActivityGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/floodlightActivityGroups',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.floodlightConfigurations = {\n\n    /**\n     * dfareporting.floodlightConfigurations.get\n     *\n     * @desc Gets one floodlight configuration by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Floodlight configuration ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightConfigurations.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightConfigurations.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Floodlight configuration ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/floodlightConfigurations/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightConfigurations.list\n     *\n     * @desc Retrieves a list of floodlight configurations, possibly filtered.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightConfigurations.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightConfigurations.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.ids Set of IDs of floodlight configurations to retrieve. Required field; otherwise an empty list will be returned.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/floodlightConfigurations',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightConfigurations.patch\n     *\n     * @desc Updates an existing floodlight configuration. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Floodlight configuration ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightConfigurations.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightConfigurations.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Floodlight configuration ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).FloodlightConfiguration} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/floodlightConfigurations',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.floodlightConfigurations.update\n     *\n     * @desc Updates an existing floodlight configuration.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.floodlightConfigurations.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.floodlightConfigurations.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).FloodlightConfiguration} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/floodlightConfigurations',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.inventoryItems = {\n\n    /**\n     * dfareporting.inventoryItems.get\n     *\n     * @desc Gets one inventory item by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Project ID for order documents.\n     *     projectId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Inventory item ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.inventoryItems.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.inventoryItems.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Inventory item ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.projectId Project ID for order documents.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/projects/{projectId}/inventoryItems/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'projectId', 'id'],\n        pathParams: ['id', 'profileId', 'projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.inventoryItems.list\n     *\n     * @desc Retrieves a list of inventory items, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Project ID for order documents.\n     *     projectId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var inventoryItemsPage = response['inventoryItems'];\n     *     if (!inventoryItemsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < inventoryItemsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `inventoryItemsPage`:\n     *       console.log(JSON.stringify(inventoryItemsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.inventoryItems.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.inventoryItems.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.inventoryItems.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.ids Select only inventory items with these IDs.\n     * @param {boolean=} params.inPlan Select only inventory items that are in plan.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.orderId Select only inventory items that belong to specified orders.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.projectId Project ID for order documents.\n     * @param {string=} params.siteId Select only inventory items that are associated with these sites.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.type Select only inventory items with this type.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/projects/{projectId}/inventoryItems',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'projectId'],\n        pathParams: ['profileId', 'projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.landingPages = {\n\n    /**\n     * dfareporting.landingPages.delete\n     *\n     * @desc Deletes an existing campaign landing page.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Landing page campaign ID.\n     *     campaignId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Landing page ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.landingPages.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.landingPages.delete\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.campaignId Landing page campaign ID.\n     * @param {string} params.id Landing page ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/campaigns/{campaignId}/landingPages/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'campaignId', 'id'],\n        pathParams: ['campaignId', 'id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.landingPages.get\n     *\n     * @desc Gets one campaign landing page by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Landing page campaign ID.\n     *     campaignId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Landing page ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.landingPages.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.landingPages.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.campaignId Landing page campaign ID.\n     * @param {string} params.id Landing page ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/campaigns/{campaignId}/landingPages/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'campaignId', 'id'],\n        pathParams: ['campaignId', 'id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.landingPages.insert\n     *\n     * @desc Inserts a new landing page for the specified campaign.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Landing page campaign ID.\n     *     campaignId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.landingPages.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.landingPages.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.campaignId Landing page campaign ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).LandingPage} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/campaigns/{campaignId}/landingPages',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'campaignId'],\n        pathParams: ['campaignId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.landingPages.list\n     *\n     * @desc Retrieves the list of landing pages for the specified campaign.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Landing page campaign ID.\n     *     campaignId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.landingPages.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.landingPages.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.campaignId Landing page campaign ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/campaigns/{campaignId}/landingPages',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'campaignId'],\n        pathParams: ['campaignId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.landingPages.patch\n     *\n     * @desc Updates an existing campaign landing page. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Landing page campaign ID.\n     *     campaignId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Landing page ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.landingPages.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.landingPages.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.campaignId Landing page campaign ID.\n     * @param {string} params.id Landing page ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).LandingPage} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/campaigns/{campaignId}/landingPages',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'campaignId', 'id'],\n        pathParams: ['campaignId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.landingPages.update\n     *\n     * @desc Updates an existing campaign landing page.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Landing page campaign ID.\n     *     campaignId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.landingPages.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.landingPages.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.campaignId Landing page campaign ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).LandingPage} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/campaigns/{campaignId}/landingPages',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'campaignId'],\n        pathParams: ['campaignId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.languages = {\n\n    /**\n     * dfareporting.languages.list\n     *\n     * @desc Retrieves a list of languages.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.languages.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.languages.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/languages',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.metros = {\n\n    /**\n     * dfareporting.metros.list\n     *\n     * @desc Retrieves a list of metros.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.metros.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.metros.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/metros',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.mobileCarriers = {\n\n    /**\n     * dfareporting.mobileCarriers.get\n     *\n     * @desc Gets one mobile carrier by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Mobile carrier ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.mobileCarriers.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.mobileCarriers.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Mobile carrier ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/mobileCarriers/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.mobileCarriers.list\n     *\n     * @desc Retrieves a list of mobile carriers.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.mobileCarriers.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.mobileCarriers.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/mobileCarriers',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.operatingSystemVersions = {\n\n    /**\n     * dfareporting.operatingSystemVersions.get\n     *\n     * @desc Gets one operating system version by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Operating system version ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.operatingSystemVersions.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.operatingSystemVersions.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Operating system version ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/operatingSystemVersions/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.operatingSystemVersions.list\n     *\n     * @desc Retrieves a list of operating system versions.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.operatingSystemVersions.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.operatingSystemVersions.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/operatingSystemVersions',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.operatingSystems = {\n\n    /**\n     * dfareporting.operatingSystems.get\n     *\n     * @desc Gets one operating system by DART ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Operating system DART ID.\n     *     dartId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.operatingSystems.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.operatingSystems.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.dartId Operating system DART ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/operatingSystems/{dartId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'dartId'],\n        pathParams: ['dartId', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.operatingSystems.list\n     *\n     * @desc Retrieves a list of operating systems.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.operatingSystems.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.operatingSystems.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/operatingSystems',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.orderDocuments = {\n\n    /**\n     * dfareporting.orderDocuments.get\n     *\n     * @desc Gets one order document by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Project ID for order documents.\n     *     projectId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Order document ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.orderDocuments.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.orderDocuments.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Order document ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.projectId Project ID for order documents.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/projects/{projectId}/orderDocuments/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'projectId', 'id'],\n        pathParams: ['id', 'profileId', 'projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.orderDocuments.list\n     *\n     * @desc Retrieves a list of order documents, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Project ID for order documents.\n     *     projectId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var orderDocumentsPage = response['orderDocuments'];\n     *     if (!orderDocumentsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < orderDocumentsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `orderDocumentsPage`:\n     *       console.log(JSON.stringify(orderDocumentsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.orderDocuments.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.orderDocuments.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.orderDocuments.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.approved Select only order documents that have been approved by at least one user.\n     * @param {string=} params.ids Select only order documents with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.orderId Select only order documents for specified orders.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.projectId Project ID for order documents.\n     * @param {string=} params.searchString Allows searching for order documents by name or ID. Wildcards (*) are allowed. For example, \"orderdocument*2015\" will return order documents with names like \"orderdocument June 2015\", \"orderdocument April 2015\", or simply \"orderdocument 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"orderdocument\" will match order documents with name \"my orderdocument\", \"orderdocument 2015\", or simply \"orderdocument\".\n     * @param {string=} params.siteId Select only order documents that are associated with these sites.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/projects/{projectId}/orderDocuments',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'projectId'],\n        pathParams: ['profileId', 'projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.orders = {\n\n    /**\n     * dfareporting.orders.get\n     *\n     * @desc Gets one order by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Project ID for orders.\n     *     projectId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Order ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.orders.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.orders.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Order ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.projectId Project ID for orders.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/projects/{projectId}/orders/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'projectId', 'id'],\n        pathParams: ['id', 'profileId', 'projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.orders.list\n     *\n     * @desc Retrieves a list of orders, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Project ID for orders.\n     *     projectId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var ordersPage = response['orders'];\n     *     if (!ordersPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < ordersPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `ordersPage`:\n     *       console.log(JSON.stringify(ordersPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.orders.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.orders.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.orders.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.ids Select only orders with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.projectId Project ID for orders.\n     * @param {string=} params.searchString Allows searching for orders by name or ID. Wildcards (*) are allowed. For example, \"order*2015\" will return orders with names like \"order June 2015\", \"order April 2015\", or simply \"order 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"order\" will match orders with name \"my order\", \"order 2015\", or simply \"order\".\n     * @param {string=} params.siteId Select only orders that are associated with these site IDs.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/projects/{projectId}/orders',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'projectId'],\n        pathParams: ['profileId', 'projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.placementGroups = {\n\n    /**\n     * dfareporting.placementGroups.get\n     *\n     * @desc Gets one placement group by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Placement group ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementGroups.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementGroups.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Placement group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/placementGroups/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementGroups.insert\n     *\n     * @desc Inserts a new placement group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementGroups.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementGroups.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).PlacementGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/placementGroups',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementGroups.list\n     *\n     * @desc Retrieves a list of placement groups, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var placementGroupsPage = response['placementGroups'];\n     *     if (!placementGroupsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < placementGroupsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `placementGroupsPage`:\n     *       console.log(JSON.stringify(placementGroupsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.placementGroups.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.placementGroups.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementGroups.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserIds Select only placement groups that belong to these advertisers.\n     * @param {boolean=} params.archived Select only archived placements. Don't set this field to select both archived and non-archived placements.\n     * @param {string=} params.campaignIds Select only placement groups that belong to these campaigns.\n     * @param {string=} params.contentCategoryIds Select only placement groups that are associated with these content categories.\n     * @param {string=} params.directorySiteIds Select only placement groups that are associated with these directory sites.\n     * @param {string=} params.ids Select only placement groups with these IDs.\n     * @param {string=} params.maxEndDate Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as \"yyyy-MM-dd\".\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.maxStartDate Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as \"yyyy-MM-dd\".\n     * @param {string=} params.minEndDate Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as \"yyyy-MM-dd\".\n     * @param {string=} params.minStartDate Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as \"yyyy-MM-dd\".\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string=} params.placementGroupType Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting.\n     * @param {string=} params.placementStrategyIds Select only placement groups that are associated with these placement strategies.\n     * @param {string=} params.pricingTypes Select only placement groups with these pricing types.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for placement groups by name or ID. Wildcards (*) are allowed. For example, \"placement*2015\" will return placement groups with names like \"placement group June 2015\", \"placement group May 2015\", or simply \"placements 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"placementgroup\" will match placement groups with name \"my placementgroup\", \"placementgroup 2015\", or simply \"placementgroup\".\n     * @param {string=} params.siteIds Select only placement groups that are associated with these sites.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/placementGroups',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementGroups.patch\n     *\n     * @desc Updates an existing placement group. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Placement group ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementGroups.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementGroups.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Placement group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).PlacementGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/placementGroups',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementGroups.update\n     *\n     * @desc Updates an existing placement group.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementGroups.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementGroups.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).PlacementGroup} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/placementGroups',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.placementStrategies = {\n\n    /**\n     * dfareporting.placementStrategies.delete\n     *\n     * @desc Deletes an existing placement strategy.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Placement strategy ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementStrategies.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementStrategies.delete\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Placement strategy ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/placementStrategies/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementStrategies.get\n     *\n     * @desc Gets one placement strategy by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Placement strategy ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementStrategies.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementStrategies.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Placement strategy ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/placementStrategies/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementStrategies.insert\n     *\n     * @desc Inserts a new placement strategy.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementStrategies.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementStrategies.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).PlacementStrategy} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/placementStrategies',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementStrategies.list\n     *\n     * @desc Retrieves a list of placement strategies, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var placementStrategiesPage = response['placementStrategies'];\n     *     if (!placementStrategiesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < placementStrategiesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `placementStrategiesPage`:\n     *       console.log(JSON.stringify(placementStrategiesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.placementStrategies.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.placementStrategies.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementStrategies.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.ids Select only placement strategies with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"placementstrategy*2015\" will return objects with names like \"placementstrategy June 2015\", \"placementstrategy April 2015\", or simply \"placementstrategy 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"placementstrategy\" will match objects with name \"my placementstrategy\", \"placementstrategy 2015\", or simply \"placementstrategy\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/placementStrategies',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementStrategies.patch\n     *\n     * @desc Updates an existing placement strategy. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Placement strategy ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementStrategies.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementStrategies.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Placement strategy ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).PlacementStrategy} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/placementStrategies',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placementStrategies.update\n     *\n     * @desc Updates an existing placement strategy.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placementStrategies.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placementStrategies.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).PlacementStrategy} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/placementStrategies',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.placements = {\n\n    /**\n     * dfareporting.placements.generatetags\n     *\n     * @desc Generates tags for a placement.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placements.generatetags(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placements.generatetags\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.campaignId Generate placements belonging to this campaign. This is a required field.\n     * @param {string=} params.placementIds Generate tags for these placements.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.tagFormats Tag formats to generate for these placements.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    generatetags: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/placements/generatetags',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placements.get\n     *\n     * @desc Gets one placement by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Placement ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placements.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placements.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Placement ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/placements/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placements.insert\n     *\n     * @desc Inserts a new placement.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placements.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placements.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Placement} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/placements',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placements.list\n     *\n     * @desc Retrieves a list of placements, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var placementsPage = response['placements'];\n     *     if (!placementsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < placementsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `placementsPage`:\n     *       console.log(JSON.stringify(placementsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.placements.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.placements.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placements.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserIds Select only placements that belong to these advertisers.\n     * @param {boolean=} params.archived Select only archived placements. Don't set this field to select both archived and non-archived placements.\n     * @param {string=} params.campaignIds Select only placements that belong to these campaigns.\n     * @param {string=} params.compatibilities Select only placements that are associated with these compatibilities. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.\n     * @param {string=} params.contentCategoryIds Select only placements that are associated with these content categories.\n     * @param {string=} params.directorySiteIds Select only placements that are associated with these directory sites.\n     * @param {string=} params.groupIds Select only placements that belong to these placement groups.\n     * @param {string=} params.ids Select only placements with these IDs.\n     * @param {string=} params.maxEndDate Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as \"yyyy-MM-dd\".\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.maxStartDate Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as \"yyyy-MM-dd\".\n     * @param {string=} params.minEndDate Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as \"yyyy-MM-dd\".\n     * @param {string=} params.minStartDate Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as \"yyyy-MM-dd\".\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string=} params.paymentSource Select only placements with this payment source.\n     * @param {string=} params.placementStrategyIds Select only placements that are associated with these placement strategies.\n     * @param {string=} params.pricingTypes Select only placements with these pricing types.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for placements by name or ID. Wildcards (*) are allowed. For example, \"placement*2015\" will return placements with names like \"placement June 2015\", \"placement May 2015\", or simply \"placements 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"placement\" will match placements with name \"my placement\", \"placement 2015\", or simply \"placement\".\n     * @param {string=} params.siteIds Select only placements that are associated with these sites.\n     * @param {string=} params.sizeIds Select only placements that are associated with these sizes.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/placements',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placements.patch\n     *\n     * @desc Updates an existing placement. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Placement ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placements.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placements.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Placement ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Placement} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/placements',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.placements.update\n     *\n     * @desc Updates an existing placement.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.placements.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.placements.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Placement} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/placements',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.platformTypes = {\n\n    /**\n     * dfareporting.platformTypes.get\n     *\n     * @desc Gets one platform type by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Platform type ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.platformTypes.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.platformTypes.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Platform type ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/platformTypes/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.platformTypes.list\n     *\n     * @desc Retrieves a list of platform types.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.platformTypes.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.platformTypes.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/platformTypes',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.postalCodes = {\n\n    /**\n     * dfareporting.postalCodes.get\n     *\n     * @desc Gets one postal code by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Postal code ID.\n     *     code: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.postalCodes.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.postalCodes.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.code Postal code ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/postalCodes/{code}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'code'],\n        pathParams: ['code', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.postalCodes.list\n     *\n     * @desc Retrieves a list of postal codes.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.postalCodes.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.postalCodes.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/postalCodes',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.projects = {\n\n    /**\n     * dfareporting.projects.get\n     *\n     * @desc Gets one project by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Project ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.projects.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.projects.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Project ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/projects/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.projects.list\n     *\n     * @desc Retrieves a list of projects, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var projectsPage = response['projects'];\n     *     if (!projectsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < projectsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `projectsPage`:\n     *       console.log(JSON.stringify(projectsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.projects.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.projects.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.projects.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserIds Select only projects with these advertiser IDs.\n     * @param {string=} params.ids Select only projects with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for projects by name or ID. Wildcards (*) are allowed. For example, \"project*2015\" will return projects with names like \"project June 2015\", \"project April 2015\", or simply \"project 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"project\" will match projects with name \"my project\", \"project 2015\", or simply \"project\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/projects',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.regions = {\n\n    /**\n     * dfareporting.regions.list\n     *\n     * @desc Retrieves a list of regions.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.regions.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.regions.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/regions',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.remarketingListShares = {\n\n    /**\n     * dfareporting.remarketingListShares.get\n     *\n     * @desc Gets one remarketing list share by remarketing list ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Remarketing list ID.\n     *     remarketingListId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.remarketingListShares.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.remarketingListShares.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.remarketingListId Remarketing list ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/remarketingListShares/{remarketingListId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'remarketingListId'],\n        pathParams: ['profileId', 'remarketingListId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.remarketingListShares.patch\n     *\n     * @desc Updates an existing remarketing list share. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Remarketing list ID.\n     *     remarketingListId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.remarketingListShares.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.remarketingListShares.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string} params.remarketingListId Remarketing list ID.\n     * @param {dfareporting(v2.7).RemarketingListShare} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/remarketingListShares',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'remarketingListId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.remarketingListShares.update\n     *\n     * @desc Updates an existing remarketing list share.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.remarketingListShares.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.remarketingListShares.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).RemarketingListShare} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/remarketingListShares',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.remarketingLists = {\n\n    /**\n     * dfareporting.remarketingLists.get\n     *\n     * @desc Gets one remarketing list by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Remarketing list ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.remarketingLists.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.remarketingLists.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Remarketing list ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/remarketingLists/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.remarketingLists.insert\n     *\n     * @desc Inserts a new remarketing list.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.remarketingLists.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.remarketingLists.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).RemarketingList} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/remarketingLists',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.remarketingLists.list\n     *\n     * @desc Retrieves a list of remarketing lists, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Select only remarketing lists owned by this advertiser.\n     *     advertiserId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var remarketingListsPage = response['remarketingLists'];\n     *     if (!remarketingListsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < remarketingListsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `remarketingListsPage`:\n     *       console.log(JSON.stringify(remarketingListsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.remarketingLists.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.remarketingLists.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.remarketingLists.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.active Select only active or only inactive remarketing lists.\n     * @param {string} params.advertiserId Select only remarketing lists owned by this advertiser.\n     * @param {string=} params.floodlightActivityId Select only remarketing lists that have this floodlight activity ID.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.name Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"remarketing list*2015\" will return objects with names like \"remarketing list June 2015\", \"remarketing list April 2015\", or simply \"remarketing list 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"remarketing list\" will match objects with name \"my remarketing list\", \"remarketing list 2015\", or simply \"remarketing list\".\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/remarketingLists',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'advertiserId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.remarketingLists.patch\n     *\n     * @desc Updates an existing remarketing list. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Remarketing list ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.remarketingLists.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.remarketingLists.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Remarketing list ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).RemarketingList} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/remarketingLists',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.remarketingLists.update\n     *\n     * @desc Updates an existing remarketing list.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.remarketingLists.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.remarketingLists.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).RemarketingList} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/remarketingLists',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.reports = {\n\n    /**\n     * dfareporting.reports.delete\n     *\n     * @desc Deletes a report by its ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA user profile ID.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // The ID of the report.\n     *     reportId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.reports.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfareporting'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.reports.delete\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId The DFA user profile ID.\n     * @param {string} params.reportId The ID of the report.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/reports/{reportId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'reportId'],\n        pathParams: ['profileId', 'reportId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.reports.get\n     *\n     * @desc Retrieves a report by its ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA user profile ID.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // The ID of the report.\n     *     reportId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.reports.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfareporting'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.reports.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId The DFA user profile ID.\n     * @param {string} params.reportId The ID of the report.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/reports/{reportId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'reportId'],\n        pathParams: ['profileId', 'reportId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.reports.insert\n     *\n     * @desc Creates a report.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA user profile ID.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.reports.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfareporting'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.reports.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId The DFA user profile ID.\n     * @param {dfareporting(v2.7).Report} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/reports',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.reports.list\n     *\n     * @desc Retrieves list of reports.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA user profile ID.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var itemsPage = response['items'];\n     *     if (!itemsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < itemsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `itemsPage`:\n     *       console.log(JSON.stringify(itemsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.reports.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.reports.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfareporting'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.reports.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken The value of the nextToken from the previous result page.\n     * @param {string} params.profileId The DFA user profile ID.\n     * @param {string=} params.scope The scope that defines which results are returned, default is 'MINE'.\n     * @param {string=} params.sortField The field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is 'DESCENDING'.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/reports',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.reports.patch\n     *\n     * @desc Updates a report. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA user profile ID.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // The ID of the report.\n     *     reportId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.reports.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfareporting'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.reports.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId The DFA user profile ID.\n     * @param {string} params.reportId The ID of the report.\n     * @param {dfareporting(v2.7).Report} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/reports/{reportId}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'reportId'],\n        pathParams: ['profileId', 'reportId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.reports.run\n     *\n     * @desc Runs a report.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA profile ID.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // The ID of the report.\n     *     reportId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.reports.run(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfareporting'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.reports.run\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId The DFA profile ID.\n     * @param {string} params.reportId The ID of the report.\n     * @param {boolean=} params.synchronous If set and true, tries to run the report synchronously.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    run: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/reports/{reportId}/run',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'reportId'],\n        pathParams: ['profileId', 'reportId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.reports.update\n     *\n     * @desc Updates a report.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The DFA user profile ID.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // The ID of the report.\n     *     reportId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.reports.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfareporting'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.reports.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId The DFA user profile ID.\n     * @param {string} params.reportId The ID of the report.\n     * @param {dfareporting(v2.7).Report} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/reports/{reportId}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'reportId'],\n        pathParams: ['profileId', 'reportId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    compatibleFields: {\n\n      /**\n       * dfareporting.reports.compatibleFields.query\n       *\n       * @desc Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.\n       *\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/dfareporting\n       * // 2. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var dfareporting = google.dfareporting('v2.7');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     // The DFA user profile ID.\n       *     profileId: '0',  // TODO: Update placeholder value.\n       *\n       *     resource: {\n       *       // TODO: Add desired properties to the request body.\n       *     },\n       *\n       *     auth: authClient\n       *   };\n       *\n       *   dfareporting.reports.compatibleFields.query(request, function(err, response) {\n       *     if (err) {\n       *       console.log(err);\n       *       return;\n       *     }\n       *\n       *     // TODO: Change code below to process the `response` object:\n       *     console.log(JSON.stringify(response, null, 2));\n       *   });\n       * });\n       *\n       * function authorize(callback) {\n       *   // TODO: Change placeholder below to generate authentication credentials. See\n       *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n       *   //\n       *   // Authorize using the following scope:\n       *   //   'https://www.googleapis.com/auth/dfareporting'\n       *   var authClient = null;\n       *\n       *   if (authClient == null) {\n       *     console.log('authentication failed');\n       *     return;\n       *   }\n       *   callback(authClient);\n       * }\n       *\n       * @alias dfareporting.reports.compatibleFields.query\n       * @memberOf! dfareporting(v2.7)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.profileId The DFA user profile ID.\n       * @param {dfareporting(v2.7).Report} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      query: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/reports/compatiblefields/query',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['profileId'],\n          pathParams: ['profileId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    },\n\n    files: {\n\n      /**\n       * dfareporting.reports.files.get\n       *\n       * @desc Retrieves a report file.\n       *\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/dfareporting\n       * // 2. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var dfareporting = google.dfareporting('v2.7');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     // The DFA profile ID.\n       *     profileId: '0',  // TODO: Update placeholder value.\n       *\n       *     // The ID of the report.\n       *     reportId: '0',  // TODO: Update placeholder value.\n       *\n       *     // The ID of the report file.\n       *     fileId: '0',  // TODO: Update placeholder value.\n       *\n       *     // TODO: To download media content, use:\n       *     //\n       *     // alt: 'media',\n       *\n       *     auth: authClient\n       *   };\n       *\n       *   dfareporting.reports.files.get(request, function(err, response) {\n       *     if (err) {\n       *       console.log(err);\n       *       return;\n       *     }\n       *\n       *     // TODO: Change code below to process the `response` object:\n       *     console.log(JSON.stringify(response, null, 2));\n       *   });\n       * });\n       *\n       * function authorize(callback) {\n       *   // TODO: Change placeholder below to generate authentication credentials. See\n       *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n       *   //\n       *   // Authorize using the following scope:\n       *   //   'https://www.googleapis.com/auth/dfareporting'\n       *   var authClient = null;\n       *\n       *   if (authClient == null) {\n       *     console.log('authentication failed');\n       *     return;\n       *   }\n       *   callback(authClient);\n       * }\n       *\n       * @alias dfareporting.reports.files.get\n       * @memberOf! dfareporting(v2.7)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.fileId The ID of the report file.\n       * @param {string} params.profileId The DFA profile ID.\n       * @param {string} params.reportId The ID of the report.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/reports/{reportId}/files/{fileId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['profileId', 'reportId', 'fileId'],\n          pathParams: ['fileId', 'profileId', 'reportId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * dfareporting.reports.files.list\n       *\n       * @desc Lists files for a report.\n       *\n       * @example\n       * // BEFORE RUNNING:\n       * // ---------------\n       * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n       * //    and check the quota for your project at\n       * //    https://console.developers.google.com/apis/api/dfareporting\n       * // 2. Install the Node.js client library by running\n       * //    `npm install googleapis --save`\n       *\n       * var google = require('googleapis');\n       * var dfareporting = google.dfareporting('v2.7');\n       *\n       * authorize(function(authClient) {\n       *   var request = {\n       *     // The DFA profile ID.\n       *     profileId: '0',  // TODO: Update placeholder value.\n       *\n       *     // The ID of the parent report.\n       *     reportId: '0',  // TODO: Update placeholder value.\n       *\n       *     auth: authClient\n       *   };\n       *\n       *   var handlePage = function(err, response) {\n       *     if (err) {\n       *       console.log(err);\n       *       return;\n       *     }\n       *\n       *     var itemsPage = response['items'];\n       *     if (!itemsPage) {\n       *       return;\n       *     }\n       *     for (var i = 0; i < itemsPage.length; i++) {\n       *       // TODO: Change code below to process each resource in `itemsPage`:\n       *       console.log(JSON.stringify(itemsPage[i], null, 2));\n       *     }\n       *\n       *     if (response.nextPageToken) {\n       *       request.pageToken = response.nextPageToken;\n       *       dfareporting.reports.files.list(request, handlePage);\n       *     }\n       *   };\n       *\n       *   dfareporting.reports.files.list(request, handlePage);\n       * });\n       *\n       * function authorize(callback) {\n       *   // TODO: Change placeholder below to generate authentication credentials. See\n       *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n       *   //\n       *   // Authorize using the following scope:\n       *   //   'https://www.googleapis.com/auth/dfareporting'\n       *   var authClient = null;\n       *\n       *   if (authClient == null) {\n       *     console.log('authentication failed');\n       *     return;\n       *   }\n       *   callback(authClient);\n       * }\n       *\n       * @alias dfareporting.reports.files.list\n       * @memberOf! dfareporting(v2.7)\n       *\n       * @param {object} params Parameters for request\n       * @param {integer=} params.maxResults Maximum number of results to return.\n       * @param {string=} params.pageToken The value of the nextToken from the previous result page.\n       * @param {string} params.profileId The DFA profile ID.\n       * @param {string} params.reportId The ID of the parent report.\n       * @param {string=} params.sortField The field by which to sort the list.\n       * @param {string=} params.sortOrder Order of sorted results, default is 'DESCENDING'.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/reports/{reportId}/files',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['profileId', 'reportId'],\n          pathParams: ['profileId', 'reportId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      }\n    }\n  };\n\n  self.sites = {\n\n    /**\n     * dfareporting.sites.get\n     *\n     * @desc Gets one site by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Site ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.sites.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.sites.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Site ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/sites/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.sites.insert\n     *\n     * @desc Inserts a new site.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.sites.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.sites.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Site} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/sites',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.sites.list\n     *\n     * @desc Retrieves a list of sites, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var sitesPage = response['sites'];\n     *     if (!sitesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < sitesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `sitesPage`:\n     *       console.log(JSON.stringify(sitesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.sites.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.sites.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.sites.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.acceptsInStreamVideoPlacements This search filter is no longer supported and will have no effect on the results returned.\n     * @param {boolean=} params.acceptsInterstitialPlacements This search filter is no longer supported and will have no effect on the results returned.\n     * @param {boolean=} params.acceptsPublisherPaidPlacements Select only sites that accept publisher paid placements.\n     * @param {boolean=} params.adWordsSite Select only AdWords sites.\n     * @param {boolean=} params.approved Select only approved sites.\n     * @param {string=} params.campaignIds Select only sites with these campaign IDs.\n     * @param {string=} params.directorySiteIds Select only sites with these directory site IDs.\n     * @param {string=} params.ids Select only sites with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name, ID or keyName. Wildcards (*) are allowed. For example, \"site*2015\" will return objects with names like \"site June 2015\", \"site April 2015\", or simply \"site 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"site\" will match objects with name \"my site\", \"site 2015\", or simply \"site\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.subaccountId Select only sites with this subaccount ID.\n     * @param {boolean=} params.unmappedSite Select only sites that have not been mapped to a directory site.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/sites',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.sites.patch\n     *\n     * @desc Updates an existing site. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Site ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.sites.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.sites.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Site ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Site} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/sites',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.sites.update\n     *\n     * @desc Updates an existing site.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.sites.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.sites.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Site} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/sites',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.sizes = {\n\n    /**\n     * dfareporting.sizes.get\n     *\n     * @desc Gets one size by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Size ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.sizes.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.sizes.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Size ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/sizes/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.sizes.insert\n     *\n     * @desc Inserts a new size.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.sizes.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.sizes.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Size} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/sizes',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.sizes.list\n     *\n     * @desc Retrieves a list of sizes, possibly filtered.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.sizes.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.sizes.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer=} params.height Select only sizes with this height.\n     * @param {boolean=} params.iabStandard Select only IAB standard sizes.\n     * @param {string=} params.ids Select only sizes with these IDs.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {integer=} params.width Select only sizes with this width.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/sizes',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.subaccounts = {\n\n    /**\n     * dfareporting.subaccounts.get\n     *\n     * @desc Gets one subaccount by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Subaccount ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.subaccounts.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.subaccounts.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Subaccount ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/subaccounts/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.subaccounts.insert\n     *\n     * @desc Inserts a new subaccount.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.subaccounts.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.subaccounts.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Subaccount} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/subaccounts',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.subaccounts.list\n     *\n     * @desc Gets a list of subaccounts, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var subaccountsPage = response['subaccounts'];\n     *     if (!subaccountsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < subaccountsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `subaccountsPage`:\n     *       console.log(JSON.stringify(subaccountsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.subaccounts.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.subaccounts.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.subaccounts.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.ids Select only subaccounts with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"subaccount*2015\" will return objects with names like \"subaccount June 2015\", \"subaccount April 2015\", or simply \"subaccount 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"subaccount\" will match objects with name \"my subaccount\", \"subaccount 2015\", or simply \"subaccount\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/subaccounts',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.subaccounts.patch\n     *\n     * @desc Updates an existing subaccount. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Subaccount ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.subaccounts.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.subaccounts.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Subaccount ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Subaccount} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/subaccounts',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.subaccounts.update\n     *\n     * @desc Updates an existing subaccount.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.subaccounts.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.subaccounts.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).Subaccount} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/subaccounts',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.targetableRemarketingLists = {\n\n    /**\n     * dfareporting.targetableRemarketingLists.get\n     *\n     * @desc Gets one remarketing list by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Remarketing list ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.targetableRemarketingLists.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.targetableRemarketingLists.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Remarketing list ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/targetableRemarketingLists/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.targetableRemarketingLists.list\n     *\n     * @desc Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Select only targetable remarketing lists targetable by these advertisers.\n     *     advertiserId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var targetableRemarketingListsPage = response['targetableRemarketingLists'];\n     *     if (!targetableRemarketingListsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < targetableRemarketingListsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `targetableRemarketingListsPage`:\n     *       console.log(JSON.stringify(targetableRemarketingListsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.targetableRemarketingLists.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.targetableRemarketingLists.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.targetableRemarketingLists.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.active Select only active or only inactive targetable remarketing lists.\n     * @param {string} params.advertiserId Select only targetable remarketing lists targetable by these advertisers.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.name Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"remarketing list*2015\" will return objects with names like \"remarketing list June 2015\", \"remarketing list April 2015\", or simply \"remarketing list 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"remarketing list\" will match objects with name \"my remarketing list\", \"remarketing list 2015\", or simply \"remarketing list\".\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/targetableRemarketingLists',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'advertiserId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.targetingTemplates = {\n\n    /**\n     * dfareporting.targetingTemplates.get\n     *\n     * @desc Gets one targeting template by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Targeting template ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.targetingTemplates.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.targetingTemplates.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Targeting template ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/targetingTemplates/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.targetingTemplates.insert\n     *\n     * @desc Inserts a new targeting template.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.targetingTemplates.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.targetingTemplates.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).TargetingTemplate} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/targetingTemplates',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.targetingTemplates.list\n     *\n     * @desc Retrieves a list of targeting templates, optionally filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var targetingTemplatesPage = response['targetingTemplates'];\n     *     if (!targetingTemplatesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < targetingTemplatesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `targetingTemplatesPage`:\n     *       console.log(JSON.stringify(targetingTemplatesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.targetingTemplates.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.targetingTemplates.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.targetingTemplates.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.advertiserId Select only targeting templates with this advertiser ID.\n     * @param {string=} params.ids Select only targeting templates with these IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"template*2015\" will return objects with names like \"template June 2015\", \"template April 2015\", or simply \"template 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"template\" will match objects with name \"my template\", \"template 2015\", or simply \"template\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/targetingTemplates',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.targetingTemplates.patch\n     *\n     * @desc Updates an existing targeting template. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Targeting template ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.targetingTemplates.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.targetingTemplates.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id Targeting template ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).TargetingTemplate} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/targetingTemplates',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.targetingTemplates.update\n     *\n     * @desc Updates an existing targeting template.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.targetingTemplates.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.targetingTemplates.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).TargetingTemplate} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/targetingTemplates',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.userProfiles = {\n\n    /**\n     * dfareporting.userProfiles.get\n     *\n     * @desc Gets one user profile by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The user profile ID.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userProfiles.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using one of the following scopes:\n     *   //   'https://www.googleapis.com/auth/dfareporting'\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userProfiles.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId The user profile ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.userProfiles.list\n     *\n     * @desc Retrieves list of user profiles for a user.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userProfiles.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using one of the following scopes:\n     *   //   'https://www.googleapis.com/auth/dfareporting'\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userProfiles.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.userRolePermissionGroups = {\n\n    /**\n     * dfareporting.userRolePermissionGroups.get\n     *\n     * @desc Gets one user role permission group by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // User role permission group ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRolePermissionGroups.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRolePermissionGroups.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id User role permission group ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/userRolePermissionGroups/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.userRolePermissionGroups.list\n     *\n     * @desc Gets a list of all supported user role permission groups.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRolePermissionGroups.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRolePermissionGroups.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/userRolePermissionGroups',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.userRolePermissions = {\n\n    /**\n     * dfareporting.userRolePermissions.get\n     *\n     * @desc Gets one user role permission by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // User role permission ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRolePermissions.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRolePermissions.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id User role permission ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/userRolePermissions/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.userRolePermissions.list\n     *\n     * @desc Gets a list of user role permissions, possibly filtered.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRolePermissions.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRolePermissions.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.ids Select only user role permissions with these IDs.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/userRolePermissions',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.userRoles = {\n\n    /**\n     * dfareporting.userRoles.delete\n     *\n     * @desc Deletes an existing user role.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // User role ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRoles.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRoles.delete\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id User role ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/userRoles/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.userRoles.get\n     *\n     * @desc Gets one user role by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // User role ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRoles.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRoles.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id User role ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/userRoles/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.userRoles.insert\n     *\n     * @desc Inserts a new user role.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRoles.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRoles.insert\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).UserRole} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/userRoles',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.userRoles.list\n     *\n     * @desc Retrieves a list of user roles, possibly filtered. This method supports paging.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var userRolesPage = response['userRoles'];\n     *     if (!userRolesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < userRolesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `userRolesPage`:\n     *       console.log(JSON.stringify(userRolesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       dfareporting.userRoles.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   dfareporting.userRoles.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRoles.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {boolean=} params.accountUserRoleOnly Select only account level user roles not associated with any specific subaccount.\n     * @param {string=} params.ids Select only user roles with the specified IDs.\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Value of the nextPageToken from the previous result page.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {string=} params.searchString Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \"userrole*2015\" will return objects with names like \"userrole June 2015\", \"userrole April 2015\", or simply \"userrole 2015\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \"userrole\" will match objects with name \"my userrole\", \"userrole 2015\", or simply \"userrole\".\n     * @param {string=} params.sortField Field by which to sort the list.\n     * @param {string=} params.sortOrder Order of sorted results, default is ASCENDING.\n     * @param {string=} params.subaccountId Select only user roles that belong to this subaccount.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/userRoles',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.userRoles.patch\n     *\n     * @desc Updates an existing user role. This method supports patch semantics.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // User role ID.\n     *     id: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. Only these properties\n     *       // will be changed.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRoles.patch(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRoles.patch\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id User role ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).UserRole} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/userRoles',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.userRoles.update\n     *\n     * @desc Updates an existing user role.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.userRoles.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.userRoles.update\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {dfareporting(v2.7).UserRole} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/userRoles',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.videoFormats = {\n\n    /**\n     * dfareporting.videoFormats.get\n     *\n     * @desc Gets one video format by ID.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     // Video format ID.\n     *     id: 0,  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.videoFormats.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.videoFormats.get\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer} params.id Video format ID.\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/videoFormats/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * dfareporting.videoFormats.list\n     *\n     * @desc Lists available video formats.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the DCM/DFA Reporting And Trafficking API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/dfareporting\n     * // 2. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var dfareporting = google.dfareporting('v2.7');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // User profile ID associated with this request.\n     *     profileId: '0',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   dfareporting.videoFormats.list(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   // TODO: Change placeholder below to generate authentication credentials. See\n     *   // https://developers.google.com/doubleclick-advertisers/authorizing#examples\n     *   //\n     *   // Authorize using the following scope:\n     *   //   'https://www.googleapis.com/auth/dfatrafficking'\n     *   var authClient = null;\n     *\n     *   if (authClient == null) {\n     *     console.log('authentication failed');\n     *     return;\n     *   }\n     *   callback(authClient);\n     * }\n     *\n     * @alias dfareporting.videoFormats.list\n     * @memberOf! dfareporting(v2.7)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.profileId User profile ID associated with this request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/dfareporting/v2.7/userprofiles/{profileId}/videoFormats',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef Account\n * @memberOf! dfareporting(v2.7)\n * @type object\n* @property {string[]} accountPermissionIds Account permissions assigned to this account.\n* @property {string} accountProfile Profile for this account. This is a read-only field that can be left blank.\n* @property {boolean} active Whether this account is active.\n* @property {string} activeAdsLimitTier Maximum number of active ads allowed for this account.\n* @property {boolean} activeViewOptOut Whether to serve creatives with Active View tags. If disabled, viewability data will not be available for any impressions.\n* @property {string[]} availablePermissionIds User role permissions available to the user roles of this account.\n* @property {string} countryId ID of the country associated with this account.\n* @property {string} currencyId ID of currency associated with this account. This is a required field.\nAcceptable values are: \n- &quot;1&quot; for USD \n- &quot;2&quot; for GBP \n- &quot;3&quot; for ESP \n- &quot;4&quot; for SEK \n- &quot;5&quot; for CAD \n- &quot;6&quot; for JPY \n- &quot;7&quot; for DEM \n- &quot;8&quot; for AUD \n- &quot;9&quot; for FRF \n- &quot;10&quot; for ITL \n- &quot;11&quot; for DKK \n- &quot;12&quot; for NOK \n- &quot;13&quot; for FIM \n- &quot;14&quot; for ZAR \n- &quot;15&quot; for IEP \n- &quot;16&quot; for NLG \n- &quot;17&quot; for EUR \n- &quot;18&quot; for KRW \n- &quot;19&quot; for TWD \n- &quot;20&quot; for SGD \n- &quot;21&quot; for CNY \n- &quot;22&quot; for HKD \n- &quot;23&quot; for NZD \n- &quot;24&quot; for MYR \n- &quot;25&quot; for BRL \n- &quot;26&quot; for PTE \n- &quot;27&quot; for MXP \n- &quot;28&quot; for CLP \n- &quot;29&quot; for TRY \n- &quot;30&quot; for ARS \n- &quot;31&quot; for PEN \n- &quot;32&quot; for ILS \n- &quot;33&quot; for CHF \n- &quot;34&quot; for VEF \n- &quot;35&quot; for COP \n- &quot;36&quot; for GTQ \n- &quot;37&quot; for PLN \n- &quot;39&quot; for INR \n- &quot;40&quot; for THB \n- &quot;41&quot; for IDR \n- &quot;42&quot; for CZK \n- &quot;43&quot; for RON \n- &quot;44&quot; for HUF \n- &quot;45&quot; for RUB \n- &quot;46&quot; for AED \n- &quot;47&quot; for BGN \n- &quot;48&quot; for HRK\n* @property {string} defaultCreativeSizeId Default placement dimensions for this account.\n* @property {string} description Description of this account.\n* @property {string} id ID of this account. This is a read-only, auto-generated field.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#account&quot;.\n* @property {string} locale Locale of this account.\nAcceptable values are: \n- &quot;cs&quot; (Czech) \n- &quot;de&quot; (German) \n- &quot;en&quot; (English) \n- &quot;en-GB&quot; (English United Kingdom) \n- &quot;es&quot; (Spanish) \n- &quot;fr&quot; (French) \n- &quot;it&quot; (Italian) \n- &quot;ja&quot; (Japanese) \n- &quot;ko&quot; (Korean) \n- &quot;pl&quot; (Polish) \n- &quot;pt-BR&quot; (Portuguese Brazil) \n- &quot;ru&quot; (Russian) \n- &quot;sv&quot; (Swedish) \n- &quot;tr&quot; (Turkish) \n- &quot;zh-CN&quot; (Chinese Simplified) \n- &quot;zh-TW&quot; (Chinese Traditional)\n* @property {string} maximumImageSize Maximum image size allowed for this account.\n* @property {string} name Name of this account. This is a required field, and must be less than 128 characters long and be globally unique.\n* @property {boolean} nielsenOcrEnabled Whether campaigns created in this account will be enabled for Nielsen OCR reach ratings by default.\n* @property {dfareporting(v2.7).ReportsConfiguration} reportsConfiguration Reporting configuration of this account.\n* @property {boolean} shareReportsWithTwitter Share Path to Conversion reports with Twitter.\n* @property {string} teaserSizeLimit File size limit in kilobytes of Rich Media teaser creatives. Must be between 1 and 10240.\n*/\n/**\n * @typedef AccountActiveAdSummary\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId ID of the account.\n * @property {string} activeAds Ads that have been activated for the account\n * @property {string} activeAdsLimitTier Maximum number of active ads allowed for the account.\n * @property {string} availableAds Ads that can be activated for the account.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#accountActiveAdSummary&quot;.\n */\n/**\n * @typedef AccountPermission\n * @memberOf! dfareporting(v2.7)\n * @type object\n* @property {string[]} accountProfiles Account profiles associated with this account permission.\n\nPossible values are:\n- &quot;ACCOUNT_PROFILE_BASIC&quot;\n- &quot;ACCOUNT_PROFILE_STANDARD&quot;\n* @property {string} id ID of this account permission.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#accountPermission&quot;.\n* @property {string} level Administrative level required to enable this account permission.\n* @property {string} name Name of this account permission.\n* @property {string} permissionGroupId Permission group of this account permission.\n*/\n/**\n * @typedef AccountPermissionGroup\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} id ID of this account permission group.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#accountPermissionGroup&quot;.\n * @property {string} name Name of this account permission group.\n */\n/**\n * @typedef AccountPermissionGroupsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).AccountPermissionGroup[]} accountPermissionGroups Account permission group collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#accountPermissionGroupsListResponse&quot;.\n */\n/**\n * @typedef AccountPermissionsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).AccountPermission[]} accountPermissions Account permission collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#accountPermissionsListResponse&quot;.\n */\n/**\n * @typedef AccountUserProfile\n * @memberOf! dfareporting(v2.7)\n * @type object\n* @property {string} accountId Account ID of the user profile. This is a read-only field that can be left blank.\n* @property {boolean} active Whether this user profile is active. This defaults to false, and must be set true on insert for the user profile to be usable.\n* @property {dfareporting(v2.7).ObjectFilter} advertiserFilter Filter that describes which advertisers are visible to the user profile.\n* @property {dfareporting(v2.7).ObjectFilter} campaignFilter Filter that describes which campaigns are visible to the user profile.\n* @property {string} comments Comments for this user profile.\n* @property {string} email Email of the user profile. The email addresss must be linked to a Google Account. This field is required on insertion and is read-only after insertion.\n* @property {string} id ID of the user profile. This is a read-only, auto-generated field.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#accountUserProfile&quot;.\n* @property {string} locale Locale of the user profile. This is a required field.\nAcceptable values are:  \n- &quot;cs&quot; (Czech) \n- &quot;de&quot; (German) \n- &quot;en&quot; (English) \n- &quot;en-GB&quot; (English United Kingdom) \n- &quot;es&quot; (Spanish) \n- &quot;fr&quot; (French) \n- &quot;it&quot; (Italian) \n- &quot;ja&quot; (Japanese) \n- &quot;ko&quot; (Korean) \n- &quot;pl&quot; (Polish) \n- &quot;pt-BR&quot; (Portuguese Brazil)\n- &quot;ru&quot; (Russian) \n- &quot;sv&quot; (Swedish) \n- &quot;tr&quot; (Turkish) \n- &quot;zh-CN&quot; (Chinese Simplified) \n- &quot;zh-TW&quot; (Chinese Traditional)\n* @property {string} name Name of the user profile. This is a required field. Must be less than 64 characters long, must be globally unique, and cannot contain whitespace or any of the following characters: &quot;&amp;;&quot;#%,&quot;.\n* @property {dfareporting(v2.7).ObjectFilter} siteFilter Filter that describes which sites are visible to the user profile.\n* @property {string} subaccountId Subaccount ID of the user profile. This is a read-only field that can be left blank.\n* @property {string} traffickerType Trafficker type of this user profile.\n* @property {string} userAccessType User type of the user profile. This is a read-only field that can be left blank.\n* @property {dfareporting(v2.7).ObjectFilter} userRoleFilter Filter that describes which user roles are visible to the user profile.\n* @property {string} userRoleId User role ID of the user profile. This is a required field.\n*/\n/**\n * @typedef AccountUserProfilesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).AccountUserProfile[]} accountUserProfiles Account user profile collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#accountUserProfilesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef AccountsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).Account[]} accounts Account collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#accountsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef Activities\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).DimensionValue[]} filters List of activity filters. The dimension values need to be all either of type &quot;dfa:activity&quot; or &quot;dfa:activityGroup&quot;.\n * @property {string} kind The kind of resource this is, in this case dfareporting#activities.\n * @property {string[]} metricNames List of names of floodlight activity metrics.\n */\n/**\n * @typedef Ad\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this ad. This is a read-only field that can be left blank.\n * @property {boolean} active Whether this ad is active. When true, archived must be false.\n * @property {string} advertiserId Advertiser ID of this ad. This is a required field on insertion.\n * @property {dfareporting(v2.7).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n * @property {boolean} archived Whether this ad is archived. When true, active must be false.\n * @property {string} audienceSegmentId Audience segment ID that is being targeted for this ad. Applicable when type is AD_SERVING_STANDARD_AD.\n * @property {string} campaignId Campaign ID of this ad. This is a required field on insertion.\n * @property {dfareporting(v2.7).DimensionValue} campaignIdDimensionValue Dimension value for the ID of the campaign. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.7).ClickThroughUrl} clickThroughUrl Click-through URL for this ad. This is a required field on insertion. Applicable when type is AD_SERVING_CLICK_TRACKER.\n * @property {dfareporting(v2.7).ClickThroughUrlSuffixProperties} clickThroughUrlSuffixProperties Click-through URL suffix properties for this ad. Applies to the URL in the ad or (if overriding ad properties) the URL in the creative.\n * @property {string} comments Comments for this ad.\n * @property {string} compatibility Compatibility of this ad. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to either rendering on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are only used for existing default ads. New mobile placements must be assigned DISPLAY or DISPLAY_INTERSTITIAL and default ads created for those placements will be limited to those compatibility types. IN_STREAM_VIDEO refers to rendering in-stream video ads developed with the VAST standard.\n * @property {dfareporting(v2.7).LastModifiedInfo} createInfo Information about the creation of this ad. This is a read-only field.\n * @property {dfareporting(v2.7).CreativeGroupAssignment[]} creativeGroupAssignments Creative group assignments for this ad. Applicable when type is AD_SERVING_CLICK_TRACKER. Only one assignment per creative group number is allowed for a maximum of two assignments.\n * @property {dfareporting(v2.7).CreativeRotation} creativeRotation Creative rotation for this ad. Applicable when type is AD_SERVING_DEFAULT_AD, AD_SERVING_STANDARD_AD, or AD_SERVING_TRACKING. When type is AD_SERVING_DEFAULT_AD, this field should have exactly one creativeAssignment.\n * @property {dfareporting(v2.7).DayPartTargeting} dayPartTargeting Time and day targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.\n * @property {dfareporting(v2.7).DefaultClickThroughEventTagProperties} defaultClickThroughEventTagProperties Default click-through event tag properties for this ad.\n * @property {dfareporting(v2.7).DeliverySchedule} deliverySchedule Delivery schedule information for this ad. Applicable when type is AD_SERVING_STANDARD_AD or AD_SERVING_TRACKING. This field along with subfields priority and impressionRatio are required on insertion when type is AD_SERVING_STANDARD_AD.\n * @property {boolean} dynamicClickTracker Whether this ad is a dynamic click tracker. Applicable when type is AD_SERVING_CLICK_TRACKER. This is a required field on insert, and is read-only after insert.\n * @property {string} endTime Date and time that this ad should stop serving. Must be later than the start time. This is a required field on insertion.\n * @property {dfareporting(v2.7).EventTagOverride[]} eventTagOverrides Event tag overrides for this ad.\n * @property {dfareporting(v2.7).GeoTargeting} geoTargeting Geographical targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.\n * @property {string} id ID of this ad. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.7).DimensionValue} idDimensionValue Dimension value for the ID of this ad. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.7).KeyValueTargetingExpression} keyValueTargetingExpression Key-value targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#ad&quot;.\n * @property {dfareporting(v2.7).LanguageTargeting} languageTargeting Language targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.\n * @property {dfareporting(v2.7).LastModifiedInfo} lastModifiedInfo Information about the most recent modification of this ad. This is a read-only field.\n * @property {string} name Name of this ad. This is a required field and must be less than 256 characters long.\n * @property {dfareporting(v2.7).PlacementAssignment[]} placementAssignments Placement assignments for this ad.\n * @property {dfareporting(v2.7).ListTargetingExpression} remarketingListExpression Remarketing list targeting expression for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.\n * @property {dfareporting(v2.7).Size} size Size of this ad. Applicable when type is AD_SERVING_DEFAULT_AD.\n * @property {boolean} sslCompliant Whether this ad is ssl compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.\n * @property {boolean} sslRequired Whether this ad requires ssl. This is a read-only field that is auto-generated when the ad is inserted or updated.\n * @property {string} startTime Date and time that this ad should start serving. If creating an ad, this field must be a time in the future. This is a required field on insertion.\n * @property {string} subaccountId Subaccount ID of this ad. This is a read-only field that can be left blank.\n * @property {string} targetingTemplateId Targeting template ID, used to apply preconfigured targeting information to this ad. This cannot be set while any of dayPartTargeting, geoTargeting, keyValueTargetingExpression, languageTargeting, remarketingListExpression, or technologyTargeting are set. Applicable when type is AD_SERVING_STANDARD_AD.\n * @property {dfareporting(v2.7).TechnologyTargeting} technologyTargeting Technology platform targeting information for this ad. This field must be left blank if the ad is using a targeting template. Applicable when type is AD_SERVING_STANDARD_AD.\n * @property {string} type Type of ad. This is a required field on insertion. Note that default ads (AD_SERVING_DEFAULT_AD) cannot be created directly (see Creative resource).\n */\n/**\n * @typedef AdSlot\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} comment Comment for this ad slot.\n * @property {string} compatibility Ad slot compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop, mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.\n * @property {string} height Height of this ad slot.\n * @property {string} linkedPlacementId ID of the placement from an external platform that is linked to this ad slot.\n * @property {string} name Name of this ad slot.\n * @property {string} paymentSourceType Payment source type of this ad slot.\n * @property {boolean} primary Primary ad slot of a roadblock inventory item.\n * @property {string} width Width of this ad slot.\n */\n/**\n * @typedef AdsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).Ad[]} ads Ad collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#adsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef Advertiser\n * @memberOf! dfareporting(v2.7)\n * @type object\n* @property {string} accountId Account ID of this advertiser.This is a read-only field that can be left blank.\n* @property {string} advertiserGroupId ID of the advertiser group this advertiser belongs to. You can group advertisers for reporting purposes, allowing you to see aggregated information for all advertisers in each group.\n* @property {string} clickThroughUrlSuffix Suffix added to click-through URL of ad creative associations under this advertiser. Must be less than 129 characters long.\n* @property {string} defaultClickThroughEventTagId ID of the click-through event tag to apply by default to the landing pages of this advertiser&#39;s campaigns.\n* @property {string} defaultEmail Default email address used in sender field for tag emails.\n* @property {string} floodlightConfigurationId Floodlight configuration ID of this advertiser. The floodlight configuration ID will be created automatically, so on insert this field should be left blank. This field can be set to another advertiser&#39;s floodlight configuration ID in order to share that advertiser&#39;s floodlight configuration with this advertiser, so long as: \n- This advertiser&#39;s original floodlight configuration is not already associated with floodlight activities or floodlight activity groups. \n- This advertiser&#39;s original floodlight configuration is not already shared with another advertiser.\n* @property {dfareporting(v2.7).DimensionValue} floodlightConfigurationIdDimensionValue Dimension value for the ID of the floodlight configuration. This is a read-only, auto-generated field.\n* @property {string} id ID of this advertiser. This is a read-only, auto-generated field.\n* @property {dfareporting(v2.7).DimensionValue} idDimensionValue Dimension value for the ID of this advertiser. This is a read-only, auto-generated field.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#advertiser&quot;.\n* @property {string} name Name of this advertiser. This is a required field and must be less than 256 characters long and unique among advertisers of the same account.\n* @property {string} originalFloodlightConfigurationId Original floodlight configuration before any sharing occurred. Set the floodlightConfigurationId of this advertiser to originalFloodlightConfigurationId to unshare the advertiser&#39;s current floodlight configuration. You cannot unshare an advertiser&#39;s floodlight configuration if the shared configuration has activities associated with any campaign or placement.\n* @property {string} status Status of this advertiser.\n* @property {string} subaccountId Subaccount ID of this advertiser.This is a read-only field that can be left blank.\n* @property {boolean} suspended Suspension status of this advertiser.\n*/\n/**\n * @typedef AdvertiserGroup\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this advertiser group. This is a read-only field that can be left blank.\n * @property {string} id ID of this advertiser group. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#advertiserGroup&quot;.\n * @property {string} name Name of this advertiser group. This is a required field and must be less than 256 characters long and unique among advertiser groups of the same account.\n */\n/**\n * @typedef AdvertiserGroupsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).AdvertiserGroup[]} advertiserGroups Advertiser group collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#advertiserGroupsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef AdvertisersListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).Advertiser[]} advertisers Advertiser collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#advertisersListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef AudienceSegment\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {integer} allocation Weight allocated to this segment. Must be between 1 and 1000. The weight assigned will be understood in proportion to the weights assigned to other segments in the same segment group.\n * @property {string} id ID of this audience segment. This is a read-only, auto-generated field.\n * @property {string} name Name of this audience segment. This is a required field and must be less than 65 characters long.\n */\n/**\n * @typedef AudienceSegmentGroup\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).AudienceSegment[]} audienceSegments Audience segments assigned to this group. The number of segments must be between 2 and 100.\n * @property {string} id ID of this audience segment group. This is a read-only, auto-generated field.\n * @property {string} name Name of this audience segment group. This is a required field and must be less than 65 characters long.\n */\n/**\n * @typedef Browser\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} browserVersionId ID referring to this grouping of browser and version numbers. This is the ID used for targeting.\n * @property {string} dartId DART ID of this browser. This is the ID used when generating reports.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#browser&quot;.\n * @property {string} majorVersion Major version number (leftmost number) of this browser. For example, for Chrome 5.0.376.86 beta, this field should be set to 5. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can&#39;t tell which version it is.\n * @property {string} minorVersion Minor version number (number after first dot on left) of this browser. For example, for Chrome 5.0.375.86 beta, this field should be set to 0. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can&#39;t tell which version it is.\n * @property {string} name Name of this browser.\n */\n/**\n * @typedef BrowsersListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).Browser[]} browsers Browser collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#browsersListResponse&quot;.\n */\n/**\n * @typedef Campaign\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this campaign. This is a read-only field that can be left blank.\n * @property {dfareporting(v2.7).CreativeOptimizationConfiguration[]} additionalCreativeOptimizationConfigurations Additional creative optimization configurations for the campaign.\n * @property {string} advertiserGroupId Advertiser group ID of the associated advertiser.\n * @property {string} advertiserId Advertiser ID of this campaign. This is a required field.\n * @property {dfareporting(v2.7).DimensionValue} advertiserIdDimensionValue Dimension value for the advertiser ID of this campaign. This is a read-only, auto-generated field.\n * @property {boolean} archived Whether this campaign has been archived.\n * @property {dfareporting(v2.7).AudienceSegmentGroup[]} audienceSegmentGroups Audience segment groups assigned to this campaign. Cannot have more than 300 segment groups.\n * @property {string} billingInvoiceCode Billing invoice code included in the DCM client billing invoices associated with the campaign.\n * @property {dfareporting(v2.7).ClickThroughUrlSuffixProperties} clickThroughUrlSuffixProperties Click-through URL suffix override properties for this campaign.\n * @property {string} comment Arbitrary comments about this campaign. Must be less than 256 characters long.\n * @property {dfareporting(v2.7).LastModifiedInfo} createInfo Information about the creation of this campaign. This is a read-only field.\n * @property {string[]} creativeGroupIds List of creative group IDs that are assigned to the campaign.\n * @property {dfareporting(v2.7).CreativeOptimizationConfiguration} creativeOptimizationConfiguration Creative optimization configuration for the campaign.\n * @property {dfareporting(v2.7).DefaultClickThroughEventTagProperties} defaultClickThroughEventTagProperties Click-through event tag ID override properties for this campaign.\n * @property {string} endDate Date on which the campaign will stop running. On insert, the end date must be today or a future date. The end date must be later than or be the same as the start date. If, for example, you set 6/25/2015 as both the start and end dates, the effective campaign run date is just that day only, 6/25/2015. The hours, minutes, and seconds of the end date should not be set, as doing so will result in an error. This is a required field.\n * @property {dfareporting(v2.7).EventTagOverride[]} eventTagOverrides Overrides that can be used to activate or deactivate advertiser event tags.\n * @property {string} externalId External ID for this campaign.\n * @property {string} id ID of this campaign. This is a read-only auto-generated field.\n * @property {dfareporting(v2.7).DimensionValue} idDimensionValue Dimension value for the ID of this campaign. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#campaign&quot;.\n * @property {dfareporting(v2.7).LastModifiedInfo} lastModifiedInfo Information about the most recent modification of this campaign. This is a read-only field.\n * @property {dfareporting(v2.7).LookbackConfiguration} lookbackConfiguration Lookback window settings for the campaign.\n * @property {string} name Name of this campaign. This is a required field and must be less than 256 characters long and unique among campaigns of the same advertiser.\n * @property {boolean} nielsenOcrEnabled Whether Nielsen reports are enabled for this campaign.\n * @property {string} startDate Date on which the campaign starts running. The start date can be any date. The hours, minutes, and seconds of the start date should not be set, as doing so will result in an error. This is a required field.\n * @property {string} subaccountId Subaccount ID of this campaign. This is a read-only field that can be left blank.\n * @property {string[]} traffickerEmails Campaign trafficker contact emails.\n */\n/**\n * @typedef CampaignCreativeAssociation\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} creativeId ID of the creative associated with the campaign. This is a required field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#campaignCreativeAssociation&quot;.\n */\n/**\n * @typedef CampaignCreativeAssociationsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).CampaignCreativeAssociation[]} campaignCreativeAssociations Campaign creative association collection\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#campaignCreativeAssociationsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef CampaignsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).Campaign[]} campaigns Campaign collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#campaignsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef ChangeLog\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of the modified object.\n * @property {string} action Action which caused the change.\n * @property {string} changeTime Time when the object was modified.\n * @property {string} fieldName Field name of the object which changed.\n * @property {string} id ID of this change log.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#changeLog&quot;.\n * @property {string} newValue New value of the object field.\n * @property {string} objectId ID of the object of this change log. The object could be a campaign, placement, ad, or other type.\n * @property {string} objectType Object type of the change log.\n * @property {string} oldValue Old value of the object field.\n * @property {string} subaccountId Subaccount ID of the modified object.\n * @property {string} transactionId Transaction ID of this change log. When a single API call results in many changes, each change will have a separate ID in the change log but will share the same transactionId.\n * @property {string} userProfileId ID of the user who modified the object.\n * @property {string} userProfileName User profile name of the user who modified the object.\n */\n/**\n * @typedef ChangeLogsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).ChangeLog[]} changeLogs Change log collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#changeLogsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef CitiesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).City[]} cities City collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#citiesListResponse&quot;.\n */\n/**\n * @typedef City\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} countryCode Country code of the country to which this city belongs.\n * @property {string} countryDartId DART ID of the country to which this city belongs.\n * @property {string} dartId DART ID of this city. This is the ID used for targeting and generating reports.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#city&quot;.\n * @property {string} metroCode Metro region code of the metro region (DMA) to which this city belongs.\n * @property {string} metroDmaId ID of the metro region (DMA) to which this city belongs.\n * @property {string} name Name of this city.\n * @property {string} regionCode Region code of the region to which this city belongs.\n * @property {string} regionDartId DART ID of the region to which this city belongs.\n */\n/**\n * @typedef ClickTag\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} eventName Advertiser event name associated with the click tag. This field is used by DISPLAY_IMAGE_GALLERY and HTML5_BANNER creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n * @property {string} name Parameter name for the specified click tag. For DISPLAY_IMAGE_GALLERY creative assets, this field must match the value of the creative asset&#39;s creativeAssetId.name field.\n * @property {string} value Parameter value for the specified click tag. This field contains a click-through url.\n */\n/**\n * @typedef ClickThroughUrl\n * @memberOf! dfareporting(v2.7)\n * @type object\n* @property {string} computedClickThroughUrl Read-only convenience field representing the actual URL that will be used for this click-through. The URL is computed as follows: \n- If defaultLandingPage is enabled then the campaign&#39;s default landing page URL is assigned to this field.\n- If defaultLandingPage is not enabled and a landingPageId is specified then that landing page&#39;s URL is assigned to this field.\n- If neither of the above cases apply, then the customClickThroughUrl is assigned to this field.\n* @property {string} customClickThroughUrl Custom click-through URL. Applicable if the defaultLandingPage field is set to false and the landingPageId field is left unset.\n* @property {boolean} defaultLandingPage Whether the campaign default landing page is used.\n* @property {string} landingPageId ID of the landing page for the click-through URL. Applicable if the defaultLandingPage field is set to false.\n*/\n/**\n * @typedef ClickThroughUrlSuffixProperties\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} clickThroughUrlSuffix Click-through URL suffix to apply to all ads in this entity&#39;s scope. Must be less than 128 characters long.\n * @property {boolean} overrideInheritedSuffix Whether this entity should override the inherited click-through URL suffix with its own defined value.\n */\n/**\n * @typedef CompanionClickThroughOverride\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).ClickThroughUrl} clickThroughUrl Click-through URL of this companion click-through override.\n * @property {string} creativeId ID of the creative for this companion click-through override.\n */\n/**\n * @typedef CompanionSetting\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {boolean} companionsDisabled Whether companions are disabled for this placement.\n * @property {dfareporting(v2.7).Size[]} enabledSizes Whitelist of companion sizes to be served to this placement. Set this list to null or empty to serve all companion sizes.\n * @property {boolean} imageOnly Whether to serve only static images as companions.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#companionSetting&quot;.\n */\n/**\n * @typedef CompatibleFields\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).CrossDimensionReachReportCompatibleFields} crossDimensionReachReportCompatibleFields Contains items that are compatible to be selected for a report of type &quot;CROSS_DIMENSION_REACH&quot;.\n * @property {dfareporting(v2.7).FloodlightReportCompatibleFields} floodlightReportCompatibleFields Contains items that are compatible to be selected for a report of type &quot;FLOODLIGHT&quot;.\n * @property {string} kind The kind of resource this is, in this case dfareporting#compatibleFields.\n * @property {dfareporting(v2.7).PathToConversionReportCompatibleFields} pathToConversionReportCompatibleFields Contains items that are compatible to be selected for a report of type &quot;PATH_TO_CONVERSION&quot;.\n * @property {dfareporting(v2.7).ReachReportCompatibleFields} reachReportCompatibleFields Contains items that are compatible to be selected for a report of type &quot;REACH&quot;.\n * @property {dfareporting(v2.7).ReportCompatibleFields} reportCompatibleFields Contains items that are compatible to be selected for a report of type &quot;STANDARD&quot;.\n */\n/**\n * @typedef ConnectionType\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} id ID of this connection type.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#connectionType&quot;.\n * @property {string} name Name of this connection type.\n */\n/**\n * @typedef ConnectionTypesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).ConnectionType[]} connectionTypes Collection of connection types such as broadband and mobile.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#connectionTypesListResponse&quot;.\n */\n/**\n * @typedef ContentCategoriesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).ContentCategory[]} contentCategories Content category collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#contentCategoriesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef ContentCategory\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this content category. This is a read-only field that can be left blank.\n * @property {string} id ID of this content category. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#contentCategory&quot;.\n * @property {string} name Name of this content category. This is a required field and must be less than 256 characters long and unique among content categories of the same account.\n */\n/**\n * @typedef Conversion\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {boolean} childDirectedTreatment Whether the conversion was directed toward children.\n * @property {dfareporting(v2.7).CustomFloodlightVariable[]} customVariables Custom floodlight variables.\n * @property {string} encryptedUserId The alphanumeric encrypted user ID. When set, encryptionInfo should also be specified. This field is mutually exclusive with encryptedUserIdCandidates[] and mobileDeviceId. This or encryptedUserIdCandidates[] or mobileDeviceId is a required field.\n * @property {string[]} encryptedUserIdCandidates A list of the alphanumeric encrypted user IDs. Any user ID with exposure prior to the conversion timestamp will be used in the inserted conversion. If no such user ID is found then the conversion will be rejected with NO_COOKIE_MATCH_FOUND error. When set, encryptionInfo should also be specified. This field should only be used when calling conversions.batchinsert. This field is mutually exclusive with encryptedUserId and mobileDeviceId. This or encryptedUserId or mobileDeviceId is a required field.\n * @property {string} floodlightActivityId Floodlight Activity ID of this conversion. This is a required field.\n * @property {string} floodlightConfigurationId Floodlight Configuration ID of this conversion. This is a required field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#conversion&quot;.\n * @property {boolean} limitAdTracking Whether Limit Ad Tracking is enabled. When set to true, the conversion will be used for reporting but not targeting. This will prevent remarketing.\n * @property {string} mobileDeviceId The mobile device ID. This field is mutually exclusive with encryptedUserId and encryptedUserIdCandidates[]. This or encryptedUserId or encryptedUserIdCandidates[] is a required field.\n * @property {string} ordinal The ordinal of the conversion. Use this field to control how conversions of the same user and day are de-duplicated. This is a required field.\n * @property {string} quantity The quantity of the conversion.\n * @property {string} timestampMicros The timestamp of conversion, in Unix epoch micros. This is a required field.\n * @property {number} value The value of the conversion.\n */\n/**\n * @typedef ConversionError\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} code The error code.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#conversionError&quot;.\n * @property {string} message A description of the error.\n */\n/**\n * @typedef ConversionStatus\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).Conversion} conversion The original conversion that was inserted or updated.\n * @property {dfareporting(v2.7).ConversionError[]} errors A list of errors related to this conversion.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#conversionStatus&quot;.\n */\n/**\n * @typedef ConversionsBatchInsertRequest\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).Conversion[]} conversions The set of conversions to insert.\n * @property {dfareporting(v2.7).EncryptionInfo} encryptionInfo Describes how encryptedUserId or encryptedUserIdCandidates[] is encrypted. This is a required field if encryptedUserId or encryptedUserIdCandidates[] is used.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#conversionsBatchInsertRequest&quot;.\n */\n/**\n * @typedef ConversionsBatchInsertResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {boolean} hasFailures Indicates that some or all conversions failed to insert.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#conversionsBatchInsertResponse&quot;.\n * @property {dfareporting(v2.7).ConversionStatus[]} status The status of each conversion&#39;s insertion status. The status is returned in the same order that conversions are inserted.\n */\n/**\n * @typedef CountriesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).Country[]} countries Country collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#countriesListResponse&quot;.\n */\n/**\n * @typedef Country\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} countryCode Country code.\n * @property {string} dartId DART ID of this country. This is the ID used for targeting and generating reports.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#country&quot;.\n * @property {string} name Name of this country.\n * @property {boolean} sslEnabled Whether ad serving supports secure servers in this country.\n */\n/**\n * @typedef Creative\n * @memberOf! dfareporting(v2.7)\n * @type object\n* @property {string} accountId Account ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types.\n* @property {boolean} active Whether the creative is active. Applicable to all creative types.\n* @property {string} adParameters Ad parameters user for VPAID creative. This is a read-only field. Applicable to the following creative types: all VPAID.\n* @property {string[]} adTagKeys Keywords for a Rich Media creative. Keywords let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use keywords to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {string} advertiserId Advertiser ID of this creative. This is a required field. Applicable to all creative types.\n* @property {boolean} allowScriptAccess Whether script access is allowed for this creative. This is a read-only and deprecated field which will automatically be set to true on update. Applicable to the following creative types: FLASH_INPAGE.\n* @property {boolean} archived Whether the creative is archived. Applicable to all creative types.\n* @property {string} artworkType Type of artwork used for the creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {string} authoringSource Source application where creative was authored. Presently, only DBM authored creatives will have this field set. Applicable to all creative types.\n* @property {string} authoringTool Authoring tool for HTML5 banner creatives. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.\n* @property {boolean} auto_advance_images Whether images are automatically advanced for image gallery creatives. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY.\n* @property {string} backgroundColor The 6-character HTML color code, beginning with #, for the background of the window area where the Flash file is displayed. Default is white. Applicable to the following creative types: FLASH_INPAGE.\n* @property {string} backupImageClickThroughUrl Click-through URL for backup image. Applicable to the following creative types: FLASH_INPAGE and HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {string[]} backupImageFeatures List of feature dependencies that will cause a backup image to be served if the browser that serves the ad does not support them. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative asset correctly. This field is initially auto-generated to contain all features detected by DCM for all the assets of this creative and can then be modified by the client. To reset this field, copy over all the creativeAssets&#39; detected features. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {string} backupImageReportingLabel Reporting label used for HTML5 banner backup image. Applicable to the following creative types: DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {dfareporting(v2.7).TargetWindow} backupImageTargetWindow Target window for backup image. Applicable to the following creative types: FLASH_INPAGE and HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {dfareporting(v2.7).ClickTag[]} clickTags Click tags of the creative. For DISPLAY, FLASH_INPAGE, and HTML5_BANNER creatives, this is a subset of detected click tags for the assets associated with this creative. After creating a flash asset, detected click tags will be returned in the creativeAssetMetadata. When inserting the creative, populate the creative clickTags field using the creativeAssetMetadata.clickTags field. For DISPLAY_IMAGE_GALLERY creatives, there should be exactly one entry in this list for each image creative asset. A click tag is matched with a corresponding creative asset by matching the clickTag.name field with the creativeAsset.assetIdentifier.name field. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {string} commercialId Industry standard ID assigned to creative for reach and frequency. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID.\n* @property {string[]} companionCreatives List of companion creatives assigned to an in-Stream videocreative. Acceptable values include IDs of existing flash and image creatives. Applicable to the following creative types: all VPAID and all INSTREAM_VIDEO with dynamicAssetSelection set to false.\n* @property {string[]} compatibility Compatibilities associated with this creative. This is a read-only field. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. Only pre-existing creatives may have these compatibilities since new creatives will either be assigned DISPLAY or DISPLAY_INTERSTITIAL instead. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. Applicable to all creative types.\n\nAcceptable values are:\n- &quot;APP&quot;\n- &quot;APP_INTERSTITIAL&quot;\n- &quot;IN_STREAM_VIDEO&quot;\n- &quot;DISPLAY&quot;\n- &quot;DISPLAY_INTERSTITIAL&quot;\n* @property {boolean} convertFlashToHtml5 Whether Flash assets associated with the creative need to be automatically converted to HTML5. This flag is enabled by default and users can choose to disable it if they don&#39;t want the system to generate and use HTML5 asset for this creative. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {dfareporting(v2.7).CreativeCustomEvent[]} counterCustomEvents List of counter events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID.\n* @property {dfareporting(v2.7).CreativeAssetSelection} creativeAssetSelection Required if dynamicAssetSelection is true.\n* @property {dfareporting(v2.7).CreativeAsset[]} creativeAssets Assets associated with a creative. Applicable to all but the following creative types: INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and REDIRECT\n* @property {dfareporting(v2.7).CreativeFieldAssignment[]} creativeFieldAssignments Creative field assignments for this creative. Applicable to all creative types.\n* @property {string[]} customKeyValues Custom key-values for a Rich Media creative. Key-values let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use key-values to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {boolean} dynamicAssetSelection Set this to true to enable the use of rules to target individual assets in this creative. When set to true creativeAssetSelection must be set. This also controls asset-level companions. When this is true, companion creatives should be assigned to creative assets. Learn more. Applicable to INSTREAM_VIDEO creatives.\n* @property {dfareporting(v2.7).CreativeCustomEvent[]} exitCustomEvents List of exit events configured for the creative. For DISPLAY and DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags, For DISPLAY, an event is also created from the backupImageReportingLabel. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {dfareporting(v2.7).FsCommand} fsCommand OpenWindow FSCommand of this creative. This lets the SWF file communicate with either Flash Player or the program hosting Flash Player, such as a web browser. This is only triggered if allowScriptAccess field is true. Applicable to the following creative types: FLASH_INPAGE.\n* @property {string} htmlCode HTML code for the creative. This is a required field when applicable. This field is ignored if htmlCodeLocked is false. Applicable to the following creative types: all CUSTOM, FLASH_INPAGE, and HTML5_BANNER, and all RICH_MEDIA.\n* @property {boolean} htmlCodeLocked Whether HTML code is DCM-generated or manually entered. Set to true to ignore changes to htmlCode. Applicable to the following creative types: FLASH_INPAGE and HTML5_BANNER.\n* @property {string} id ID of this creative. This is a read-only, auto-generated field. Applicable to all creative types.\n* @property {dfareporting(v2.7).DimensionValue} idDimensionValue Dimension value for the ID of this creative. This is a read-only field. Applicable to all creative types.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creative&quot;.\n* @property {dfareporting(v2.7).LastModifiedInfo} lastModifiedInfo Creative last modification information. This is a read-only field. Applicable to all creative types.\n* @property {string} latestTraffickedCreativeId Latest Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {string} name Name of the creative. This is a required field and must be less than 256 characters long. Applicable to all creative types.\n* @property {string} overrideCss Override CSS value for rich media creatives. Applicable to the following creative types: all RICH_MEDIA.\n* @property {dfareporting(v2.7).VideoOffset} progressOffset Amount of time to play the video before counting a view. Applicable to the following creative types: all INSTREAM_VIDEO.\n* @property {string} redirectUrl URL of hosted image or hosted video or another ad tag. For INSTREAM_VIDEO_REDIRECT creatives this is the in-stream video redirect URL. The standard for a VAST (Video Ad Serving Template) ad response allows for a redirect link to another VAST 2.0 or 3.0 call. This is a required field when applicable. Applicable to the following creative types: DISPLAY_REDIRECT, INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO_REDIRECT\n* @property {string} renderingId ID of current rendering version. This is a read-only field. Applicable to all creative types.\n* @property {dfareporting(v2.7).DimensionValue} renderingIdDimensionValue Dimension value for the rendering ID of this creative. This is a read-only field. Applicable to all creative types.\n* @property {string} requiredFlashPluginVersion The minimum required Flash plugin version for this creative. For example, 11.2.202.235. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {integer} requiredFlashVersion The internal Flash version for this creative as calculated by DoubleClick Studio. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {dfareporting(v2.7).Size} size Size associated with this creative. When inserting or updating a creative either the size ID field or size width and height fields can be used. This is a required field when applicable; however for IMAGE, FLASH_INPAGE creatives, and for DISPLAY creatives with a primary asset of type HTML_IMAGE, if left blank, this field will be automatically set using the actual size of the associated image assets. Applicable to the following creative types: DISPLAY, DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER, IMAGE, and all RICH_MEDIA.\n* @property {dfareporting(v2.7).VideoOffset} skipOffset Amount of time to play the video before the skip button appears. Applicable to the following creative types: all INSTREAM_VIDEO.\n* @property {boolean} skippable Whether the user can choose to skip the creative. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID.\n* @property {boolean} sslCompliant Whether the creative is SSL-compliant. This is a read-only field. Applicable to all creative types.\n* @property {boolean} sslOverride Whether creative should be treated as SSL compliant even if the system scan shows it&#39;s not. Applicable to all creative types.\n* @property {string} studioAdvertiserId Studio advertiser ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {string} studioCreativeId Studio creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {string} studioTraffickedCreativeId Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {string} subaccountId Subaccount ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types.\n* @property {string} thirdPartyBackupImageImpressionsUrl Third-party URL used to record backup image impressions. Applicable to the following creative types: all RICH_MEDIA.\n* @property {string} thirdPartyRichMediaImpressionsUrl Third-party URL used to record rich media impressions. Applicable to the following creative types: all RICH_MEDIA.\n* @property {dfareporting(v2.7).ThirdPartyTrackingUrl[]} thirdPartyUrls Third-party URLs for tracking in-stream video creative events. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID.\n* @property {dfareporting(v2.7).CreativeCustomEvent[]} timerCustomEvents List of timer events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset is not HTML_IMAGE.\n* @property {string} totalFileSize Combined size of all creative assets. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.\n* @property {string} type Type of this creative. This is a required field. Applicable to all creative types.\n\nNote: FLASH_INPAGE, HTML5_BANNER, and IMAGE are only used for existing creatives. New creatives should use DISPLAY as a replacement for these types.\n* @property {integer} version The version number helps you keep track of multiple versions of your creative in your reports. The version number will always be auto-generated during insert operations to start at 1. For tracking creatives the version cannot be incremented and will always remain at 1. For all other creative types the version can be incremented only by 1 during update operations. In addition, the version will be automatically incremented by 1 when undergoing Rich Media creative merging. Applicable to all creative types.\n* @property {string} videoDescription Description of the video ad. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID.\n* @property {number} videoDuration Creative video duration in seconds. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO, all RICH_MEDIA, and all VPAID.\n*/\n/**\n * @typedef CreativeAsset\n * @memberOf! dfareporting(v2.7)\n * @type object\n* @property {boolean} actionScript3 Whether ActionScript3 is enabled for the flash asset. This is a read-only field. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {boolean} active Whether the video asset is active. This is a read-only field for VPAID_NON_LINEAR_VIDEO assets. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.\n* @property {string} alignment Possible alignments for an asset. This is a read-only field. Applicable to the following creative types: RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL.\n* @property {string} artworkType Artwork type of rich media creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.\n* @property {dfareporting(v2.7).CreativeAssetId} assetIdentifier Identifier of this asset. This is the same identifier returned during creative asset insert operation. This is a required field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.\n* @property {dfareporting(v2.7).CreativeCustomEvent} backupImageExit Exit event configured for the backup image. Applicable to the following creative types: all RICH_MEDIA.\n* @property {integer} bitRate Detected bit-rate for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.\n* @property {string} childAssetType Rich media child asset type. This is a read-only field. Applicable to the following creative types: all VPAID.\n* @property {dfareporting(v2.7).Size} collapsedSize Size of an asset when collapsed. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA and all VPAID. Additionally, applicable to assets whose displayType is ASSET_DISPLAY_TYPE_EXPANDING or ASSET_DISPLAY_TYPE_PEEL_DOWN.\n* @property {string[]} companionCreativeIds List of companion creatives assigned to an in-stream video creative asset. Acceptable values include IDs of existing flash and image creatives. Applicable to INSTREAM_VIDEO creative type with dynamicAssetSelection set to true.\n* @property {integer} customStartTimeValue Custom start time in seconds for making the asset visible. Applicable to the following creative types: all RICH_MEDIA.\n* @property {string[]} detectedFeatures List of feature dependencies for the creative asset that are detected by DCM. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {string} displayType Type of rich media asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.\n* @property {integer} duration Duration in seconds for which an asset will be displayed. Applicable to the following creative types: INSTREAM_VIDEO and VPAID_LINEAR_VIDEO.\n* @property {string} durationType Duration type for which an asset will be displayed. Applicable to the following creative types: all RICH_MEDIA.\n* @property {dfareporting(v2.7).Size} expandedDimension Detected expanded dimension for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.\n* @property {string} fileSize File size associated with this creative asset. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.\n* @property {integer} flashVersion Flash version of the asset. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {boolean} hideFlashObjects Whether to hide Flash objects flag for an asset. Applicable to the following creative types: all RICH_MEDIA.\n* @property {boolean} hideSelectionBoxes Whether to hide selection boxes flag for an asset. Applicable to the following creative types: all RICH_MEDIA.\n* @property {boolean} horizontallyLocked Whether the asset is horizontally locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.\n* @property {string} id Numeric ID of this creative asset. This is a required field and should not be modified. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.\n* @property {dfareporting(v2.7).DimensionValue} idDimensionValue Dimension value for the ID of the asset. This is a read-only, auto-generated field.\n* @property {string} mimeType Detected MIME type for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.\n* @property {dfareporting(v2.7).OffsetPosition} offset Offset position for an asset in collapsed mode. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA and all VPAID. Additionally, only applicable to assets whose displayType is ASSET_DISPLAY_TYPE_EXPANDING or ASSET_DISPLAY_TYPE_PEEL_DOWN.\n* @property {boolean} originalBackup Whether the backup asset is original or changed by the user in DCM. Applicable to the following creative types: all RICH_MEDIA.\n* @property {dfareporting(v2.7).OffsetPosition} position Offset position for an asset. Applicable to the following creative types: all RICH_MEDIA.\n* @property {string} positionLeftUnit Offset left unit for an asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.\n* @property {string} positionTopUnit Offset top unit for an asset. This is a read-only field if the asset displayType is ASSET_DISPLAY_TYPE_OVERLAY. Applicable to the following creative types: all RICH_MEDIA.\n* @property {string} progressiveServingUrl Progressive URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.\n* @property {boolean} pushdown Whether the asset pushes down other content. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable when the asset offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height.\n* @property {number} pushdownDuration Pushdown duration in seconds for an asset. Must be between 0 and 9.99. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable when the asset pushdown field is true, the offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height.\n* @property {string} role Role of the asset in relation to creative. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT. This is a required field.\nPRIMARY applies to DISPLAY, FLASH_INPAGE, HTML5_BANNER, IMAGE, DISPLAY_IMAGE_GALLERY, all RICH_MEDIA (which may contain multiple primary assets), and all VPAID creatives.\nBACKUP_IMAGE applies to FLASH_INPAGE, HTML5_BANNER, all RICH_MEDIA, and all VPAID creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\nADDITIONAL_IMAGE and ADDITIONAL_FLASH apply to FLASH_INPAGE creatives.\nOTHER refers to assets from sources other than DCM, such as Studio uploaded assets, applicable to all RICH_MEDIA and all VPAID creatives.\nPARENT_VIDEO refers to videos uploaded by the user in DCM and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives.\nTRANSCODED_VIDEO refers to videos transcoded by DCM from PARENT_VIDEO assets and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives.\nALTERNATE_VIDEO refers to the DCM representation of child asset videos from Studio, and is applicable to VPAID_LINEAR_VIDEO creatives. These cannot be added or removed within DCM.\nFor VPAID_LINEAR_VIDEO creatives, PARENT_VIDEO, TRANSCODED_VIDEO and ALTERNATE_VIDEO assets that are marked active serve as backup in case the VPAID creative cannot be served. Only PARENT_VIDEO assets can be added or removed for an INSTREAM_VIDEO or VPAID_LINEAR_VIDEO creative.\n* @property {dfareporting(v2.7).Size} size Size associated with this creative asset. This is a required field when applicable; however for IMAGE and FLASH_INPAGE, creatives if left blank, this field will be automatically set using the actual size of the associated image asset. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER, IMAGE, and all RICH_MEDIA. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.\n* @property {boolean} sslCompliant Whether the asset is SSL-compliant. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.\n* @property {string} startTimeType Initial wait time type before making the asset visible. Applicable to the following creative types: all RICH_MEDIA.\n* @property {string} streamingServingUrl Streaming URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.\n* @property {boolean} transparency Whether the asset is transparent. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable to HTML5 assets.\n* @property {boolean} verticallyLocked Whether the asset is vertically locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.\n* @property {number} videoDuration Detected video duration for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.\n* @property {string} windowMode Window mode options for flash assets. Applicable to the following creative types: FLASH_INPAGE, RICH_MEDIA_DISPLAY_EXPANDING, RICH_MEDIA_IM_EXPAND, RICH_MEDIA_DISPLAY_BANNER, and RICH_MEDIA_INPAGE_FLOATING.\n* @property {integer} zIndex zIndex value of an asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable to assets whose displayType is NOT one of the following types: ASSET_DISPLAY_TYPE_INPAGE or ASSET_DISPLAY_TYPE_OVERLAY.\n* @property {string} zipFilename File name of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.\n* @property {string} zipFilesize Size of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.\n*/\n/**\n * @typedef CreativeAssetId\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} name Name of the creative asset. This is a required field while inserting an asset. After insertion, this assetIdentifier is used to identify the uploaded asset. Characters in the name must be alphanumeric or one of the following: &quot;.-_ &quot;. Spaces are allowed.\n * @property {string} type Type of asset to upload. This is a required field. FLASH and IMAGE are no longer supported for new uploads. All image assets should use HTML_IMAGE.\n */\n/**\n * @typedef CreativeAssetMetadata\n * @memberOf! dfareporting(v2.7)\n * @type object\n* @property {dfareporting(v2.7).CreativeAssetId} assetIdentifier ID of the creative asset. This is a required field.\n* @property {dfareporting(v2.7).ClickTag[]} clickTags List of detected click tags for assets. This is a read-only auto-generated field.\n* @property {string[]} detectedFeatures List of feature dependencies for the creative asset that are detected by DCM. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field.\n* @property {string} id Numeric ID of the asset. This is a read-only, auto-generated field.\n* @property {dfareporting(v2.7).DimensionValue} idDimensionValue Dimension value for the numeric ID of the asset. This is a read-only, auto-generated field.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creativeAssetMetadata&quot;.\n* @property {string[]} warnedValidationRules Rules validated during code generation that generated a warning. This is a read-only, auto-generated field.\n\nPossible values are:\n- &quot;ADMOB_REFERENCED&quot;\n- &quot;ASSET_FORMAT_UNSUPPORTED_DCM&quot;\n- &quot;ASSET_INVALID&quot;\n- &quot;CLICK_TAG_HARD_CODED&quot;\n- &quot;CLICK_TAG_INVALID&quot;\n- &quot;CLICK_TAG_IN_GWD&quot;\n- &quot;CLICK_TAG_MISSING&quot;\n- &quot;CLICK_TAG_MORE_THAN_ONE&quot;\n- &quot;CLICK_TAG_NON_TOP_LEVEL&quot;\n- &quot;COMPONENT_UNSUPPORTED_DCM&quot;\n- &quot;ENABLER_UNSUPPORTED_METHOD_DCM&quot;\n- &quot;EXTERNAL_FILE_REFERENCED&quot;\n- &quot;FILE_DETAIL_EMPTY&quot;\n- &quot;FILE_TYPE_INVALID&quot;\n- &quot;GWD_PROPERTIES_INVALID&quot;\n- &quot;HTML5_FEATURE_UNSUPPORTED&quot;\n- &quot;LINKED_FILE_NOT_FOUND&quot;\n- &quot;MAX_FLASH_VERSION_11&quot;\n- &quot;MRAID_REFERENCED&quot;\n- &quot;NOT_SSL_COMPLIANT&quot;\n- &quot;ORPHANED_ASSET&quot;\n- &quot;PRIMARY_HTML_MISSING&quot;\n- &quot;SVG_INVALID&quot;\n- &quot;ZIP_INVALID&quot;\n*/\n/**\n * @typedef CreativeAssetSelection\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} defaultAssetId A creativeAssets[].id. This should refer to one of the parent assets in this creative, and will be served if none of the rules match. This is a required field.\n * @property {dfareporting(v2.7).Rule[]} rules Rules determine which asset will be served to a viewer. Rules will be evaluated in the order in which they are stored in this list. This list must contain at least one rule. Applicable to INSTREAM_VIDEO creatives.\n */\n/**\n * @typedef CreativeAssignment\n * @memberOf! dfareporting(v2.7)\n * @type object\n* @property {boolean} active Whether this creative assignment is active. When true, the creative will be included in the ad&#39;s rotation.\n* @property {boolean} applyEventTags Whether applicable event tags should fire when this creative assignment is rendered. If this value is unset when the ad is inserted or updated, it will default to true for all creative types EXCEPT for INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO.\n* @property {dfareporting(v2.7).ClickThroughUrl} clickThroughUrl Click-through URL of the creative assignment.\n* @property {dfareporting(v2.7).CompanionClickThroughOverride[]} companionCreativeOverrides Companion creative overrides for this creative assignment. Applicable to video ads.\n* @property {dfareporting(v2.7).CreativeGroupAssignment[]} creativeGroupAssignments Creative group assignments for this creative assignment. Only one assignment per creative group number is allowed for a maximum of two assignments.\n* @property {string} creativeId ID of the creative to be assigned. This is a required field.\n* @property {dfareporting(v2.7).DimensionValue} creativeIdDimensionValue Dimension value for the ID of the creative. This is a read-only, auto-generated field.\n* @property {string} endTime Date and time that the assigned creative should stop serving. Must be later than the start time.\n* @property {dfareporting(v2.7).RichMediaExitOverride[]} richMediaExitOverrides Rich media exit overrides for this creative assignment.\nApplicable when the creative type is any of the following: \n- RICH_MEDIA_INPAGE\n- RICH_MEDIA_INPAGE_FLOATING\n- RICH_MEDIA_IM_EXPAND\n- RICH_MEDIA_EXPANDING\n- RICH_MEDIA_INTERSTITIAL_FLOAT\n- RICH_MEDIA_MOBILE_IN_APP\n- RICH_MEDIA_MULTI_FLOATING\n- RICH_MEDIA_PEEL_DOWN\n- ADVANCED_BANNER\n- VPAID_LINEAR\n- VPAID_NON_LINEAR\n* @property {integer} sequence Sequence number of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_SEQUENTIAL.\n* @property {boolean} sslCompliant Whether the creative to be assigned is SSL-compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.\n* @property {string} startTime Date and time that the assigned creative should start serving.\n* @property {integer} weight Weight of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_RANDOM.\n*/\n/**\n * @typedef CreativeCustomEvent\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} advertiserCustomEventId Unique ID of this event used by DDM Reporting and Data Transfer. This is a read-only field.\n * @property {string} advertiserCustomEventName User-entered name for the event.\n * @property {string} advertiserCustomEventType Type of the event. This is a read-only field.\n * @property {string} artworkLabel Artwork label column, used to link events in DCM back to events in Studio. This is a required field and should not be modified after insertion.\n * @property {string} artworkType Artwork type used by the creative.This is a read-only field.\n * @property {string} exitUrl Exit URL of the event. This field is used only for exit events.\n * @property {string} id ID of this event. This is a required field and should not be modified after insertion.\n * @property {dfareporting(v2.7).PopupWindowProperties} popupWindowProperties Properties for rich media popup windows. This field is used only for exit events.\n * @property {string} targetType Target type used by the event.\n * @property {string} videoReportingId Video reporting ID, used to differentiate multiple videos in a single creative. This is a read-only field.\n */\n/**\n * @typedef CreativeField\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this creative field. This is a read-only field that can be left blank.\n * @property {string} advertiserId Advertiser ID of this creative field. This is a required field on insertion.\n * @property {dfareporting(v2.7).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n * @property {string} id ID of this creative field. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creativeField&quot;.\n * @property {string} name Name of this creative field. This is a required field and must be less than 256 characters long and unique among creative fields of the same advertiser.\n * @property {string} subaccountId Subaccount ID of this creative field. This is a read-only field that can be left blank.\n */\n/**\n * @typedef CreativeFieldAssignment\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} creativeFieldId ID of the creative field.\n * @property {string} creativeFieldValueId ID of the creative field value.\n */\n/**\n * @typedef CreativeFieldValue\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} id ID of this creative field value. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creativeFieldValue&quot;.\n * @property {string} value Value of this creative field value. It needs to be less than 256 characters in length and unique per creative field.\n */\n/**\n * @typedef CreativeFieldValuesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).CreativeFieldValue[]} creativeFieldValues Creative field value collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creativeFieldValuesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef CreativeFieldsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).CreativeField[]} creativeFields Creative field collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creativeFieldsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef CreativeGroup\n * @memberOf! dfareporting(v2.7)\n * @type object\n* @property {string} accountId Account ID of this creative group. This is a read-only field that can be left blank.\n* @property {string} advertiserId Advertiser ID of this creative group. This is a required field on insertion.\n* @property {dfareporting(v2.7).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n* @property {integer} groupNumber Subgroup of the creative group. Assign your creative groups to one of the following subgroups in order to filter or manage them more easily. This field is required on insertion and is read-only after insertion.\nAcceptable values are: \n- 1\n- 2\n* @property {string} id ID of this creative group. This is a read-only, auto-generated field.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creativeGroup&quot;.\n* @property {string} name Name of this creative group. This is a required field and must be less than 256 characters long and unique among creative groups of the same advertiser.\n* @property {string} subaccountId Subaccount ID of this creative group. This is a read-only field that can be left blank.\n*/\n/**\n * @typedef CreativeGroupAssignment\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} creativeGroupId ID of the creative group to be assigned.\n * @property {string} creativeGroupNumber Creative group number of the creative group assignment.\n */\n/**\n * @typedef CreativeGroupsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).CreativeGroup[]} creativeGroups Creative group collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creativeGroupsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef CreativeOptimizationConfiguration\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} id ID of this creative optimization config. This field is auto-generated when the campaign is inserted or updated. It can be null for existing campaigns.\n * @property {string} name Name of this creative optimization config. This is a required field and must be less than 129 characters long.\n * @property {dfareporting(v2.7).OptimizationActivity[]} optimizationActivitys List of optimization activities associated with this configuration.\n * @property {string} optimizationModel Optimization model for this configuration.\n */\n/**\n * @typedef CreativeRotation\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).CreativeAssignment[]} creativeAssignments Creative assignments in this creative rotation.\n * @property {string} creativeOptimizationConfigurationId Creative optimization configuration that is used by this ad. It should refer to one of the existing optimization configurations in the ad&#39;s campaign. If it is unset or set to 0, then the campaign&#39;s default optimization configuration will be used for this ad.\n * @property {string} type Type of creative rotation. Can be used to specify whether to use sequential or random rotation.\n * @property {string} weightCalculationStrategy Strategy for calculating weights. Used with CREATIVE_ROTATION_TYPE_RANDOM.\n */\n/**\n * @typedef CreativeSettings\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} iFrameFooter Header text for iFrames for this site. Must be less than or equal to 2000 characters long.\n * @property {string} iFrameHeader Header text for iFrames for this site. Must be less than or equal to 2000 characters long.\n */\n/**\n * @typedef CreativesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).Creative[]} creatives Creative collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#creativesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef CrossDimensionReachReportCompatibleFields\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).Dimension[]} breakdown Dimensions which are compatible to be selected in the &quot;breakdown&quot; section of the report.\n * @property {dfareporting(v2.7).Dimension[]} dimensionFilters Dimensions which are compatible to be selected in the &quot;dimensionFilters&quot; section of the report.\n * @property {string} kind The kind of resource this is, in this case dfareporting#crossDimensionReachReportCompatibleFields.\n * @property {dfareporting(v2.7).Metric[]} metrics Metrics which are compatible to be selected in the &quot;metricNames&quot; section of the report.\n * @property {dfareporting(v2.7).Metric[]} overlapMetrics Metrics which are compatible to be selected in the &quot;overlapMetricNames&quot; section of the report.\n */\n/**\n * @typedef CustomFloodlightVariable\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#customFloodlightVariable&quot;.\n * @property {string} type The type of custom floodlight variable to supply a value for. These map to the &quot;u[1-20]=&quot; in the tags.\n * @property {string} value The value of the custom floodlight variable. The length of string must not exceed 50 characters.\n */\n/**\n * @typedef CustomRichMediaEvents\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).DimensionValue[]} filteredEventIds List of custom rich media event IDs. Dimension values must be all of type dfa:richMediaEventTypeIdAndName.\n * @property {string} kind The kind of resource this is, in this case dfareporting#customRichMediaEvents.\n */\n/**\n * @typedef DateRange\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} endDate The end date of the date range, inclusive. A string of the format: &quot;yyyy-MM-dd&quot;.\n * @property {string} kind The kind of resource this is, in this case dfareporting#dateRange.\n * @property {string} relativeDateRange The date range relative to the date of when the report is run.\n * @property {string} startDate The start date of the date range, inclusive. A string of the format: &quot;yyyy-MM-dd&quot;.\n */\n/**\n * @typedef DayPartTargeting\n * @memberOf! dfareporting(v2.7)\n * @type object\n* @property {string[]} daysOfWeek Days of the week when the ad will serve.\n\nAcceptable values are:\n- &quot;SUNDAY&quot;\n- &quot;MONDAY&quot;\n- &quot;TUESDAY&quot;\n- &quot;WEDNESDAY&quot;\n- &quot;THURSDAY&quot;\n- &quot;FRIDAY&quot;\n- &quot;SATURDAY&quot;\n* @property {integer[]} hoursOfDay Hours of the day when the ad will serve. Must be an integer between 0 and 23 (inclusive), where 0 is midnight to 1 AM, and 23 is 11 PM to midnight. Can be specified with days of week, in which case the ad would serve during these hours on the specified days. For example, if Monday, Wednesday, Friday are the days of week specified and 9-10am, 3-5pm (hours 9, 15, and 16) is specified, the ad would serve Monday, Wednesdays, and Fridays at 9-10am and 3-5pm.\n* @property {boolean} userLocalTime Whether or not to use the user&#39;s local time. If false, the America/New York time zone applies.\n*/\n/**\n * @typedef DefaultClickThroughEventTagProperties\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} defaultClickThroughEventTagId ID of the click-through event tag to apply to all ads in this entity&#39;s scope.\n * @property {boolean} overrideInheritedEventTag Whether this entity should override the inherited default click-through event tag with its own defined value.\n */\n/**\n * @typedef DeliverySchedule\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).FrequencyCap} frequencyCap Limit on the number of times an individual user can be served the ad within a specified period of time.\n * @property {boolean} hardCutoff Whether or not hard cutoff is enabled. If true, the ad will not serve after the end date and time. Otherwise the ad will continue to be served until it has reached its delivery goals.\n * @property {string} impressionRatio Impression ratio for this ad. This ratio determines how often each ad is served relative to the others. For example, if ad A has an impression ratio of 1 and ad B has an impression ratio of 3, then DCM will serve ad B three times as often as ad A. Must be between 1 and 10.\n * @property {string} priority Serving priority of an ad, with respect to other ads. The lower the priority number, the greater the priority with which it is served.\n */\n/**\n * @typedef DfpSettings\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} dfp_network_code DFP network code for this directory site.\n * @property {string} dfp_network_name DFP network name for this directory site.\n * @property {boolean} programmaticPlacementAccepted Whether this directory site accepts programmatic placements.\n * @property {boolean} pubPaidPlacementAccepted Whether this directory site accepts publisher-paid tags.\n * @property {boolean} publisherPortalOnly Whether this directory site is available only via DoubleClick Publisher Portal.\n */\n/**\n * @typedef Dimension\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind The kind of resource this is, in this case dfareporting#dimension.\n * @property {string} name The dimension name, e.g. dfa:advertiser\n */\n/**\n * @typedef DimensionFilter\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} dimensionName The name of the dimension to filter.\n * @property {string} kind The kind of resource this is, in this case dfareporting#dimensionFilter.\n * @property {string} value The value of the dimension to filter.\n */\n/**\n * @typedef DimensionValue\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} dimensionName The name of the dimension.\n * @property {string} etag The eTag of this response for caching purposes.\n * @property {string} id The ID associated with the value if available.\n * @property {string} kind The kind of resource this is, in this case dfareporting#dimensionValue.\n * @property {string} matchType Determines how the &#39;value&#39; field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, &#39;*&#39; is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions (&#39;dfa:paidSearch*&#39;) allow a matchType other than EXACT.\n * @property {string} value The value of the dimension.\n */\n/**\n * @typedef DimensionValueList\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} etag The eTag of this response for caching purposes.\n * @property {dfareporting(v2.7).DimensionValue[]} items The dimension values returned in this response.\n * @property {string} kind The kind of list this is, in this case dfareporting#dimensionValueList.\n * @property {string} nextPageToken Continuation token used to page through dimension values. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; to the value of this field. The page token is only valid for a limited amount of time and should not be persisted.\n */\n/**\n * @typedef DimensionValueRequest\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} dimensionName The name of the dimension for which values should be requested.\n * @property {string} endDate The end date of the date range for which to retrieve dimension values. A string of the format &quot;yyyy-MM-dd&quot;.\n * @property {dfareporting(v2.7).DimensionFilter[]} filters The list of filters by which to filter values. The filters are ANDed.\n * @property {string} kind The kind of request this is, in this case dfareporting#dimensionValueRequest.\n * @property {string} startDate The start date of the date range for which to retrieve dimension values. A string of the format &quot;yyyy-MM-dd&quot;.\n */\n/**\n * @typedef DirectorySite\n * @memberOf! dfareporting(v2.7)\n * @type object\n* @property {boolean} active Whether this directory site is active.\n* @property {dfareporting(v2.7).DirectorySiteContactAssignment[]} contactAssignments Directory site contacts.\n* @property {string} countryId Country ID of this directory site.\n* @property {string} currencyId Currency ID of this directory site.\nPossible values are: \n- &quot;1&quot; for USD \n- &quot;2&quot; for GBP \n- &quot;3&quot; for ESP \n- &quot;4&quot; for SEK \n- &quot;5&quot; for CAD \n- &quot;6&quot; for JPY \n- &quot;7&quot; for DEM \n- &quot;8&quot; for AUD \n- &quot;9&quot; for FRF \n- &quot;10&quot; for ITL \n- &quot;11&quot; for DKK \n- &quot;12&quot; for NOK \n- &quot;13&quot; for FIM \n- &quot;14&quot; for ZAR \n- &quot;15&quot; for IEP \n- &quot;16&quot; for NLG \n- &quot;17&quot; for EUR \n- &quot;18&quot; for KRW \n- &quot;19&quot; for TWD \n- &quot;20&quot; for SGD \n- &quot;21&quot; for CNY \n- &quot;22&quot; for HKD \n- &quot;23&quot; for NZD \n- &quot;24&quot; for MYR \n- &quot;25&quot; for BRL \n- &quot;26&quot; for PTE \n- &quot;27&quot; for MXP \n- &quot;28&quot; for CLP \n- &quot;29&quot; for TRY \n- &quot;30&quot; for ARS \n- &quot;31&quot; for PEN \n- &quot;32&quot; for ILS \n- &quot;33&quot; for CHF \n- &quot;34&quot; for VEF \n- &quot;35&quot; for COP \n- &quot;36&quot; for GTQ \n- &quot;37&quot; for PLN \n- &quot;39&quot; for INR \n- &quot;40&quot; for THB \n- &quot;41&quot; for IDR \n- &quot;42&quot; for CZK \n- &quot;43&quot; for RON \n- &quot;44&quot; for HUF \n- &quot;45&quot; for RUB \n- &quot;46&quot; for AED \n- &quot;47&quot; for BGN \n- &quot;48&quot; for HRK\n* @property {string} description Description of this directory site.\n* @property {string} id ID of this directory site. This is a read-only, auto-generated field.\n* @property {dfareporting(v2.7).DimensionValue} idDimensionValue Dimension value for the ID of this directory site. This is a read-only, auto-generated field.\n* @property {string[]} inpageTagFormats Tag types for regular placements.\n\nAcceptable values are:\n- &quot;STANDARD&quot;\n- &quot;IFRAME_JAVASCRIPT_INPAGE&quot;\n- &quot;INTERNAL_REDIRECT_INPAGE&quot;\n- &quot;JAVASCRIPT_INPAGE&quot;\n* @property {string[]} interstitialTagFormats Tag types for interstitial placements.\n\nAcceptable values are:\n- &quot;IFRAME_JAVASCRIPT_INTERSTITIAL&quot;\n- &quot;INTERNAL_REDIRECT_INTERSTITIAL&quot;\n- &quot;JAVASCRIPT_INTERSTITIAL&quot;\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#directorySite&quot;.\n* @property {string} name Name of this directory site.\n* @property {string} parentId Parent directory site ID.\n* @property {dfareporting(v2.7).DirectorySiteSettings} settings Directory site settings.\n* @property {string} url URL of this directory site.\n*/\n/**\n * @typedef DirectorySiteContact\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} address Address of this directory site contact.\n * @property {string} email Email address of this directory site contact.\n * @property {string} firstName First name of this directory site contact.\n * @property {string} id ID of this directory site contact. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#directorySiteContact&quot;.\n * @property {string} lastName Last name of this directory site contact.\n * @property {string} phone Phone number of this directory site contact.\n * @property {string} role Directory site contact role.\n * @property {string} title Title or designation of this directory site contact.\n * @property {string} type Directory site contact type.\n */\n/**\n * @typedef DirectorySiteContactAssignment\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} contactId ID of this directory site contact. This is a read-only, auto-generated field.\n * @property {string} visibility Visibility of this directory site contact assignment. When set to PUBLIC this contact assignment is visible to all account and agency users; when set to PRIVATE it is visible only to the site.\n */\n/**\n * @typedef DirectorySiteContactsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).DirectorySiteContact[]} directorySiteContacts Directory site contact collection\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#directorySiteContactsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef DirectorySiteSettings\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {boolean} activeViewOptOut Whether this directory site has disabled active view creatives.\n * @property {dfareporting(v2.7).DfpSettings} dfp_settings Directory site DFP settings.\n * @property {boolean} instream_video_placement_accepted Whether this site accepts in-stream video ads.\n * @property {boolean} interstitialPlacementAccepted Whether this site accepts interstitial ads.\n * @property {boolean} nielsenOcrOptOut Whether this directory site has disabled Nielsen OCR reach ratings.\n * @property {boolean} verificationTagOptOut Whether this directory site has disabled generation of Verification ins tags.\n * @property {boolean} videoActiveViewOptOut Whether this directory site has disabled active view for in-stream video creatives.\n */\n/**\n * @typedef DirectorySitesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).DirectorySite[]} directorySites Directory site collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#directorySitesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef DynamicTargetingKey\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#dynamicTargetingKey&quot;.\n * @property {string} name Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.\n * @property {string} objectId ID of the object of this dynamic targeting key. This is a required field.\n * @property {string} objectType Type of the object of this dynamic targeting key. This is a required field.\n */\n/**\n * @typedef DynamicTargetingKeysListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).DynamicTargetingKey[]} dynamicTargetingKeys Dynamic targeting key collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#dynamicTargetingKeysListResponse&quot;.\n */\n/**\n * @typedef EncryptionInfo\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} encryptionEntityId The encryption entity ID. This should match the encryption configuration for ad serving or Data Transfer.\n * @property {string} encryptionEntityType The encryption entity type. This should match the encryption configuration for ad serving or Data Transfer.\n * @property {string} encryptionSource Describes whether the encrypted cookie was received from ad serving (the %m macro) or from Data Transfer.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#encryptionInfo&quot;.\n */\n/**\n * @typedef EventTag\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this event tag. This is a read-only field that can be left blank.\n * @property {string} advertiserId Advertiser ID of this event tag. This field or the campaignId field is required on insertion.\n * @property {dfareporting(v2.7).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n * @property {string} campaignId Campaign ID of this event tag. This field or the advertiserId field is required on insertion.\n * @property {dfareporting(v2.7).DimensionValue} campaignIdDimensionValue Dimension value for the ID of the campaign. This is a read-only, auto-generated field.\n * @property {boolean} enabledByDefault Whether this event tag should be automatically enabled for all of the advertiser&#39;s campaigns and ads.\n * @property {boolean} excludeFromAdxRequests Whether to remove this event tag from ads that are trafficked through DoubleClick Bid Manager to Ad Exchange. This may be useful if the event tag uses a pixel that is unapproved for Ad Exchange bids on one or more networks, such as the Google Display Network.\n * @property {string} id ID of this event tag. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#eventTag&quot;.\n * @property {string} name Name of this event tag. This is a required field and must be less than 256 characters long.\n * @property {string} siteFilterType Site filter type for this event tag. If no type is specified then the event tag will be applied to all sites.\n * @property {string[]} siteIds Filter list of site IDs associated with this event tag. The siteFilterType determines whether this is a whitelist or blacklist filter.\n * @property {boolean} sslCompliant Whether this tag is SSL-compliant or not. This is a read-only field.\n * @property {string} status Status of this event tag. Must be ENABLED for this event tag to fire. This is a required field.\n * @property {string} subaccountId Subaccount ID of this event tag. This is a read-only field that can be left blank.\n * @property {string} type Event tag type. Can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking. This is a required field.\n * @property {string} url Payload URL for this event tag. The URL on a click-through event tag should have a landing page URL appended to the end of it. This field is required on insertion.\n * @property {integer} urlEscapeLevels Number of times the landing page URL should be URL-escaped before being appended to the click-through event tag URL. Only applies to click-through event tags as specified by the event tag type.\n */\n/**\n * @typedef EventTagOverride\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {boolean} enabled Whether this override is enabled.\n * @property {string} id ID of this event tag override. This is a read-only, auto-generated field.\n */\n/**\n * @typedef EventTagsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).EventTag[]} eventTags Event tag collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#eventTagsListResponse&quot;.\n */\n/**\n * @typedef File\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).DateRange} dateRange The date range for which the file has report data. The date range will always be the absolute date range for which the report is run.\n * @property {string} etag The eTag of this response for caching purposes.\n * @property {string} fileName The filename of the file.\n * @property {string} format The output format of the report. Only available once the file is available.\n * @property {string} id The unique ID of this report file.\n * @property {string} kind The kind of resource this is, in this case dfareporting#file.\n * @property {string} lastModifiedTime The timestamp in milliseconds since epoch when this file was last modified.\n * @property {string} reportId The ID of the report this file was generated from.\n * @property {string} status The status of the report file.\n * @property {object} urls The URLs where the completed report file can be downloaded.\n */\n/**\n * @typedef FileList\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} etag The eTag of this response for caching purposes.\n * @property {dfareporting(v2.7).File[]} items The files returned in this response.\n * @property {string} kind The kind of list this is, in this case dfareporting#fileList.\n * @property {string} nextPageToken Continuation token used to page through files. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; to the value of this field. The page token is only valid for a limited amount of time and should not be persisted.\n */\n/**\n * @typedef Flight\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} endDate Inventory item flight end date.\n * @property {string} rateOrCost Rate or cost of this flight.\n * @property {string} startDate Inventory item flight start date.\n * @property {string} units Units of this flight.\n */\n/**\n * @typedef FloodlightActivitiesGenerateTagResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} floodlightActivityTag Generated tag for this floodlight activity.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#floodlightActivitiesGenerateTagResponse&quot;.\n */\n/**\n * @typedef FloodlightActivitiesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).FloodlightActivity[]} floodlightActivities Floodlight activity collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#floodlightActivitiesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef FloodlightActivity\n * @memberOf! dfareporting(v2.7)\n * @type object\n* @property {string} accountId Account ID of this floodlight activity. This is a read-only field that can be left blank.\n* @property {string} advertiserId Advertiser ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group&#39;s advertiser or the existing activity&#39;s advertiser.\n* @property {dfareporting(v2.7).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n* @property {string} cacheBustingType Code type used for cache busting in the generated tag.\n* @property {string} countingMethod Counting method for conversions for this floodlight activity. This is a required field.\n* @property {dfareporting(v2.7).FloodlightActivityDynamicTag[]} defaultTags Dynamic floodlight tags.\n* @property {string} expectedUrl URL where this tag will be deployed. If specified, must be less than 256 characters long.\n* @property {string} floodlightActivityGroupId Floodlight activity group ID of this floodlight activity. This is a required field.\n* @property {string} floodlightActivityGroupName Name of the associated floodlight activity group. This is a read-only field.\n* @property {string} floodlightActivityGroupTagString Tag string of the associated floodlight activity group. This is a read-only field.\n* @property {string} floodlightActivityGroupType Type of the associated floodlight activity group. This is a read-only field.\n* @property {string} floodlightConfigurationId Floodlight configuration ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group&#39;s floodlight configuration or from the existing activity&#39;s floodlight configuration.\n* @property {dfareporting(v2.7).DimensionValue} floodlightConfigurationIdDimensionValue Dimension value for the ID of the floodlight configuration. This is a read-only, auto-generated field.\n* @property {boolean} hidden Whether this activity is archived.\n* @property {string} id ID of this floodlight activity. This is a read-only, auto-generated field.\n* @property {dfareporting(v2.7).DimensionValue} idDimensionValue Dimension value for the ID of this floodlight activity. This is a read-only, auto-generated field.\n* @property {boolean} imageTagEnabled Whether the image tag is enabled for this activity.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#floodlightActivity&quot;.\n* @property {string} name Name of this floodlight activity. This is a required field. Must be less than 129 characters long and cannot contain quotes.\n* @property {string} notes General notes or implementation instructions for the tag.\n* @property {dfareporting(v2.7).FloodlightActivityPublisherDynamicTag[]} publisherTags Publisher dynamic floodlight tags.\n* @property {boolean} secure Whether this tag should use SSL.\n* @property {boolean} sslCompliant Whether the floodlight activity is SSL-compliant. This is a read-only field, its value detected by the system from the floodlight tags.\n* @property {boolean} sslRequired Whether this floodlight activity must be SSL-compliant.\n* @property {string} subaccountId Subaccount ID of this floodlight activity. This is a read-only field that can be left blank.\n* @property {string} tagFormat Tag format type for the floodlight activity. If left blank, the tag format will default to HTML.\n* @property {string} tagString Value of the cat= paramter in the floodlight tag, which the ad servers use to identify the activity. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being [a-z][A-Z][0-9][-][ _ ]. This tag string must also be unique among activities of the same activity group. This field is read-only after insertion.\n* @property {string[]} userDefinedVariableTypes List of the user-defined variables used by this conversion tag. These map to the &quot;u[1-20]=&quot; in the tags. Each of these can have a user defined type.\nAcceptable values are:\n- &quot;U1&quot;\n- &quot;U2&quot;\n- &quot;U3&quot;\n- &quot;U4&quot;\n- &quot;U5&quot;\n- &quot;U6&quot;\n- &quot;U7&quot;\n- &quot;U8&quot;\n- &quot;U9&quot;\n- &quot;U10&quot;\n- &quot;U11&quot;\n- &quot;U12&quot;\n- &quot;U13&quot;\n- &quot;U14&quot;\n- &quot;U15&quot;\n- &quot;U16&quot;\n- &quot;U17&quot;\n- &quot;U18&quot;\n- &quot;U19&quot;\n- &quot;U20&quot;\n*/\n/**\n * @typedef FloodlightActivityDynamicTag\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} id ID of this dynamic tag. This is a read-only, auto-generated field.\n * @property {string} name Name of this tag.\n * @property {string} tag Tag code.\n */\n/**\n * @typedef FloodlightActivityGroup\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this floodlight activity group. This is a read-only field that can be left blank.\n * @property {string} advertiserId Advertiser ID of this floodlight activity group. If this field is left blank, the value will be copied over either from the floodlight configuration&#39;s advertiser or from the existing activity group&#39;s advertiser.\n * @property {dfareporting(v2.7).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n * @property {string} floodlightConfigurationId Floodlight configuration ID of this floodlight activity group. This is a required field.\n * @property {dfareporting(v2.7).DimensionValue} floodlightConfigurationIdDimensionValue Dimension value for the ID of the floodlight configuration. This is a read-only, auto-generated field.\n * @property {string} id ID of this floodlight activity group. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.7).DimensionValue} idDimensionValue Dimension value for the ID of this floodlight activity group. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#floodlightActivityGroup&quot;.\n * @property {string} name Name of this floodlight activity group. This is a required field. Must be less than 65 characters long and cannot contain quotes.\n * @property {string} subaccountId Subaccount ID of this floodlight activity group. This is a read-only field that can be left blank.\n * @property {string} tagString Value of the type= parameter in the floodlight tag, which the ad servers use to identify the activity group that the activity belongs to. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being [a-z][A-Z][0-9][-][ _ ]. This tag string must also be unique among activity groups of the same floodlight configuration. This field is read-only after insertion.\n * @property {string} type Type of the floodlight activity group. This is a required field that is read-only after insertion.\n */\n/**\n * @typedef FloodlightActivityGroupsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).FloodlightActivityGroup[]} floodlightActivityGroups Floodlight activity group collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#floodlightActivityGroupsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef FloodlightActivityPublisherDynamicTag\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {boolean} clickThrough Whether this tag is applicable only for click-throughs.\n * @property {string} directorySiteId Directory site ID of this dynamic tag. This is a write-only field that can be used as an alternative to the siteId field. When this resource is retrieved, only the siteId field will be populated.\n * @property {dfareporting(v2.7).FloodlightActivityDynamicTag} dynamicTag Dynamic floodlight tag.\n * @property {string} siteId Site ID of this dynamic tag.\n * @property {dfareporting(v2.7).DimensionValue} siteIdDimensionValue Dimension value for the ID of the site. This is a read-only, auto-generated field.\n * @property {boolean} viewThrough Whether this tag is applicable only for view-throughs.\n */\n/**\n * @typedef FloodlightConfiguration\n * @memberOf! dfareporting(v2.7)\n * @type object\n* @property {string} accountId Account ID of this floodlight configuration. This is a read-only field that can be left blank.\n* @property {string} advertiserId Advertiser ID of the parent advertiser of this floodlight configuration.\n* @property {dfareporting(v2.7).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n* @property {boolean} analyticsDataSharingEnabled Whether advertiser data is shared with Google Analytics.\n* @property {boolean} exposureToConversionEnabled Whether the exposure-to-conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting.\n* @property {string} firstDayOfWeek Day that will be counted as the first day of the week in reports. This is a required field.\n* @property {string} id ID of this floodlight configuration. This is a read-only, auto-generated field.\n* @property {dfareporting(v2.7).DimensionValue} idDimensionValue Dimension value for the ID of this floodlight configuration. This is a read-only, auto-generated field.\n* @property {boolean} inAppAttributionTrackingEnabled Whether in-app attribution tracking is enabled.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#floodlightConfiguration&quot;.\n* @property {dfareporting(v2.7).LookbackConfiguration} lookbackConfiguration Lookback window settings for this floodlight configuration.\n* @property {string} naturalSearchConversionAttributionOption Types of attribution options for natural search conversions.\n* @property {dfareporting(v2.7).OmnitureSettings} omnitureSettings Settings for DCM Omniture integration.\n* @property {string[]} standardVariableTypes List of standard variables enabled for this configuration.\n\nAcceptable values are:\n- &quot;ORD&quot;\n- &quot;NUM&quot;\n* @property {string} subaccountId Subaccount ID of this floodlight configuration. This is a read-only field that can be left blank.\n* @property {dfareporting(v2.7).TagSettings} tagSettings Configuration settings for dynamic and image floodlight tags.\n* @property {dfareporting(v2.7).ThirdPartyAuthenticationToken[]} thirdPartyAuthenticationTokens List of third-party authentication tokens enabled for this configuration.\n* @property {dfareporting(v2.7).UserDefinedVariableConfiguration[]} userDefinedVariableConfigurations List of user defined variables enabled for this configuration.\n*/\n/**\n * @typedef FloodlightConfigurationsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).FloodlightConfiguration[]} floodlightConfigurations Floodlight configuration collection.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#floodlightConfigurationsListResponse&quot;.\n */\n/**\n * @typedef FloodlightReportCompatibleFields\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).Dimension[]} dimensionFilters Dimensions which are compatible to be selected in the &quot;dimensionFilters&quot; section of the report.\n * @property {dfareporting(v2.7).Dimension[]} dimensions Dimensions which are compatible to be selected in the &quot;dimensions&quot; section of the report.\n * @property {string} kind The kind of resource this is, in this case dfareporting#floodlightReportCompatibleFields.\n * @property {dfareporting(v2.7).Metric[]} metrics Metrics which are compatible to be selected in the &quot;metricNames&quot; section of the report.\n */\n/**\n * @typedef FrequencyCap\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} duration Duration of time, in seconds, for this frequency cap. The maximum duration is 90 days in seconds, or 7,776,000.\n * @property {string} impressions Number of times an individual user can be served the ad within the specified duration. The maximum allowed is 15.\n */\n/**\n * @typedef FsCommand\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {integer} left Distance from the left of the browser.Applicable when positionOption is DISTANCE_FROM_TOP_LEFT_CORNER.\n * @property {string} positionOption Position in the browser where the window will open.\n * @property {integer} top Distance from the top of the browser. Applicable when positionOption is DISTANCE_FROM_TOP_LEFT_CORNER.\n * @property {integer} windowHeight Height of the window.\n * @property {integer} windowWidth Width of the window.\n */\n/**\n * @typedef GeoTargeting\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).City[]} cities Cities to be targeted. For each city only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a city, do not target or exclude the country of the city, and do not target the metro or region of the city.\n * @property {dfareporting(v2.7).Country[]} countries Countries to be targeted or excluded from targeting, depending on the setting of the excludeCountries field. For each country only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting or excluding a country, do not target regions, cities, metros, or postal codes in the same country.\n * @property {boolean} excludeCountries Whether or not to exclude the countries in the countries field from targeting. If false, the countries field refers to countries which will be targeted by the ad.\n * @property {dfareporting(v2.7).Metro[]} metros Metros to be targeted. For each metro only dmaId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a metro, do not target or exclude the country of the metro.\n * @property {dfareporting(v2.7).PostalCode[]} postalCodes Postal codes to be targeted. For each postal code only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a postal code, do not target or exclude the country of the postal code.\n * @property {dfareporting(v2.7).Region[]} regions Regions to be targeted. For each region only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a region, do not target or exclude the country of the region.\n */\n/**\n * @typedef InventoryItem\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this inventory item.\n * @property {dfareporting(v2.7).AdSlot[]} adSlots Ad slots of this inventory item. If this inventory item represents a standalone placement, there will be exactly one ad slot. If this inventory item represents a placement group, there will be more than one ad slot, each representing one child placement in that placement group.\n * @property {string} advertiserId Advertiser ID of this inventory item.\n * @property {string} contentCategoryId Content category ID of this inventory item.\n * @property {string} estimatedClickThroughRate Estimated click-through rate of this inventory item.\n * @property {string} estimatedConversionRate Estimated conversion rate of this inventory item.\n * @property {string} id ID of this inventory item.\n * @property {boolean} inPlan Whether this inventory item is in plan.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#inventoryItem&quot;.\n * @property {dfareporting(v2.7).LastModifiedInfo} lastModifiedInfo Information about the most recent modification of this inventory item.\n * @property {string} name Name of this inventory item. For standalone inventory items, this is the same name as that of its only ad slot. For group inventory items, this can differ from the name of any of its ad slots.\n * @property {string} negotiationChannelId Negotiation channel ID of this inventory item.\n * @property {string} orderId Order ID of this inventory item.\n * @property {string} placementStrategyId Placement strategy ID of this inventory item.\n * @property {dfareporting(v2.7).Pricing} pricing Pricing of this inventory item.\n * @property {string} projectId Project ID of this inventory item.\n * @property {string} rfpId RFP ID of this inventory item.\n * @property {string} siteId ID of the site this inventory item is associated with.\n * @property {string} subaccountId Subaccount ID of this inventory item.\n * @property {string} type Type of inventory item.\n */\n/**\n * @typedef InventoryItemsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).InventoryItem[]} inventoryItems Inventory item collection\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#inventoryItemsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n */\n/**\n * @typedef KeyValueTargetingExpression\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} expression Keyword expression being targeted by the ad.\n */\n/**\n * @typedef LandingPage\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {boolean} default Whether or not this landing page will be assigned to any ads or creatives that do not have a landing page assigned explicitly. Only one default landing page is allowed per campaign.\n * @property {string} id ID of this landing page. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#landingPage&quot;.\n * @property {string} name Name of this landing page. This is a required field. It must be less than 256 characters long, and must be unique among landing pages of the same campaign.\n * @property {string} url URL of this landing page. This is a required field.\n */\n/**\n * @typedef LandingPagesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#landingPagesListResponse&quot;.\n * @property {dfareporting(v2.7).LandingPage[]} landingPages Landing page collection\n */\n/**\n * @typedef Language\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} id Language ID of this language. This is the ID used for targeting and generating reports.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#language&quot;.\n * @property {string} languageCode Format of language code is an ISO 639 two-letter language code optionally followed by an underscore followed by an ISO 3166 code. Examples are &quot;en&quot; for English or &quot;zh_CN&quot; for Simplified Chinese.\n * @property {string} name Name of this language.\n */\n/**\n * @typedef LanguageTargeting\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).Language[]} languages Languages that this ad targets. For each language only languageId is required. The other fields are populated automatically when the ad is inserted or updated.\n */\n/**\n * @typedef LanguagesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#languagesListResponse&quot;.\n * @property {dfareporting(v2.7).Language[]} languages Language collection.\n */\n/**\n * @typedef LastModifiedInfo\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} time Timestamp of the last change in milliseconds since epoch.\n */\n/**\n * @typedef ListPopulationClause\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).ListPopulationTerm[]} terms Terms of this list population clause. Each clause is made up of list population terms representing constraints and are joined by ORs.\n */\n/**\n * @typedef ListPopulationRule\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} floodlightActivityId Floodlight activity ID associated with this rule. This field can be left blank.\n * @property {string} floodlightActivityName Name of floodlight activity associated with this rule. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.7).ListPopulationClause[]} listPopulationClauses Clauses that make up this list population rule. Clauses are joined by ANDs, and the clauses themselves are made up of list population terms which are joined by ORs.\n */\n/**\n * @typedef ListPopulationTerm\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {boolean} contains Will be true if the term should check if the user is in the list and false if the term should check if the user is not in the list. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM. False by default.\n * @property {boolean} negation Whether to negate the comparison result of this term during rule evaluation. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.\n * @property {string} operator Comparison operator of this term. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.\n * @property {string} remarketingListId ID of the list in question. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM.\n * @property {string} type List population term type determines the applicable fields in this object. If left unset or set to CUSTOM_VARIABLE_TERM, then variableName, variableFriendlyName, operator, value, and negation are applicable. If set to LIST_MEMBERSHIP_TERM then remarketingListId and contains are applicable. If set to REFERRER_TERM then operator, value, and negation are applicable.\n * @property {string} value Literal to compare the variable to. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.\n * @property {string} variableFriendlyName Friendly name of this term&#39;s variable. This is a read-only, auto-generated field. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM.\n * @property {string} variableName Name of the variable (U1, U2, etc.) being compared in this term. This field is only relevant when type is set to null, CUSTOM_VARIABLE_TERM or REFERRER_TERM.\n */\n/**\n * @typedef ListTargetingExpression\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} expression Expression describing which lists are being targeted by the ad.\n */\n/**\n * @typedef LookbackConfiguration\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {integer} clickDuration Lookback window, in days, from the last time a given user clicked on one of your ads. If you enter 0, clicks will not be considered as triggering events for floodlight tracking. If you leave this field blank, the default value for your account will be used.\n * @property {integer} postImpressionActivitiesDuration Lookback window, in days, from the last time a given user viewed one of your ads. If you enter 0, impressions will not be considered as triggering events for floodlight tracking. If you leave this field blank, the default value for your account will be used.\n */\n/**\n * @typedef Metric\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind The kind of resource this is, in this case dfareporting#metric.\n * @property {string} name The metric name, e.g. dfa:impressions\n */\n/**\n * @typedef Metro\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} countryCode Country code of the country to which this metro region belongs.\n * @property {string} countryDartId DART ID of the country to which this metro region belongs.\n * @property {string} dartId DART ID of this metro region.\n * @property {string} dmaId DMA ID of this metro region. This is the ID used for targeting and generating reports, and is equivalent to metro_code.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#metro&quot;.\n * @property {string} metroCode Metro code of this metro region. This is equivalent to dma_id.\n * @property {string} name Name of this metro region.\n */\n/**\n * @typedef MetrosListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#metrosListResponse&quot;.\n * @property {dfareporting(v2.7).Metro[]} metros Metro collection.\n */\n/**\n * @typedef MobileCarrier\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} countryCode Country code of the country to which this mobile carrier belongs.\n * @property {string} countryDartId DART ID of the country to which this mobile carrier belongs.\n * @property {string} id ID of this mobile carrier.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#mobileCarrier&quot;.\n * @property {string} name Name of this mobile carrier.\n */\n/**\n * @typedef MobileCarriersListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#mobileCarriersListResponse&quot;.\n * @property {dfareporting(v2.7).MobileCarrier[]} mobileCarriers Mobile carrier collection.\n */\n/**\n * @typedef ObjectFilter\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#objectFilter&quot;.\n * @property {string[]} objectIds Applicable when status is ASSIGNED. The user has access to objects with these object IDs.\n * @property {string} status Status of the filter. NONE means the user has access to none of the objects. ALL means the user has access to all objects. ASSIGNED means the user has access to the objects with IDs in the objectIds list.\n */\n/**\n * @typedef OffsetPosition\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {integer} left Offset distance from left side of an asset or a window.\n * @property {integer} top Offset distance from top side of an asset or a window.\n */\n/**\n * @typedef OmnitureSettings\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {boolean} omnitureCostDataEnabled Whether placement cost data will be sent to Omniture. This property can be enabled only if omnitureIntegrationEnabled is true.\n * @property {boolean} omnitureIntegrationEnabled Whether Omniture integration is enabled. This property can be enabled only when the &quot;Advanced Ad Serving&quot; account setting is enabled.\n */\n/**\n * @typedef OperatingSystem\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} dartId DART ID of this operating system. This is the ID used for targeting.\n * @property {boolean} desktop Whether this operating system is for desktop.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#operatingSystem&quot;.\n * @property {boolean} mobile Whether this operating system is for mobile.\n * @property {string} name Name of this operating system.\n */\n/**\n * @typedef OperatingSystemVersion\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} id ID of this operating system version.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#operatingSystemVersion&quot;.\n * @property {string} majorVersion Major version (leftmost number) of this operating system version.\n * @property {string} minorVersion Minor version (number after the first dot) of this operating system version.\n * @property {string} name Name of this operating system version.\n * @property {dfareporting(v2.7).OperatingSystem} operatingSystem Operating system of this operating system version.\n */\n/**\n * @typedef OperatingSystemVersionsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#operatingSystemVersionsListResponse&quot;.\n * @property {dfareporting(v2.7).OperatingSystemVersion[]} operatingSystemVersions Operating system version collection.\n */\n/**\n * @typedef OperatingSystemsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#operatingSystemsListResponse&quot;.\n * @property {dfareporting(v2.7).OperatingSystem[]} operatingSystems Operating system collection.\n */\n/**\n * @typedef OptimizationActivity\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} floodlightActivityId Floodlight activity ID of this optimization activity. This is a required field.\n * @property {dfareporting(v2.7).DimensionValue} floodlightActivityIdDimensionValue Dimension value for the ID of the floodlight activity. This is a read-only, auto-generated field.\n * @property {integer} weight Weight associated with this optimization. Must be greater than 1. The weight assigned will be understood in proportion to the weights assigned to the other optimization activities.\n */\n/**\n * @typedef Order\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this order.\n * @property {string} advertiserId Advertiser ID of this order.\n * @property {string[]} approverUserProfileIds IDs for users that have to approve documents created for this order.\n * @property {string} buyerInvoiceId Buyer invoice ID associated with this order.\n * @property {string} buyerOrganizationName Name of the buyer organization.\n * @property {string} comments Comments in this order.\n * @property {dfareporting(v2.7).OrderContact[]} contacts Contacts for this order.\n * @property {string} id ID of this order. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#order&quot;.\n * @property {dfareporting(v2.7).LastModifiedInfo} lastModifiedInfo Information about the most recent modification of this order.\n * @property {string} name Name of this order.\n * @property {string} notes Notes of this order.\n * @property {string} planningTermId ID of the terms and conditions template used in this order.\n * @property {string} projectId Project ID of this order.\n * @property {string} sellerOrderId Seller order ID associated with this order.\n * @property {string} sellerOrganizationName Name of the seller organization.\n * @property {string[]} siteId Site IDs this order is associated with.\n * @property {string[]} siteNames Free-form site names this order is associated with.\n * @property {string} subaccountId Subaccount ID of this order.\n * @property {string} termsAndConditions Terms and conditions of this order.\n */\n/**\n * @typedef OrderContact\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} contactInfo Free-form information about this contact. It could be any information related to this contact in addition to type, title, name, and signature user profile ID.\n * @property {string} contactName Name of this contact.\n * @property {string} contactTitle Title of this contact.\n * @property {string} contactType Type of this contact.\n * @property {string} signatureUserProfileId ID of the user profile containing the signature that will be embedded into order documents.\n */\n/**\n * @typedef OrderDocument\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this order document.\n * @property {string} advertiserId Advertiser ID of this order document.\n * @property {string} amendedOrderDocumentId The amended order document ID of this order document. An order document can be created by optionally amending another order document so that the change history can be preserved.\n * @property {string[]} approvedByUserProfileIds IDs of users who have approved this order document.\n * @property {boolean} cancelled Whether this order document is cancelled.\n * @property {dfareporting(v2.7).LastModifiedInfo} createdInfo Information about the creation of this order document.\n * @property {string} effectiveDate Effective date of this order document.\n * @property {string} id ID of this order document.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#orderDocument&quot;.\n * @property {string[]} lastSentRecipients List of email addresses that received the last sent document.\n * @property {string} lastSentTime Timestamp of the last email sent with this order document.\n * @property {string} orderId ID of the order from which this order document is created.\n * @property {string} projectId Project ID of this order document.\n * @property {boolean} signed Whether this order document has been signed.\n * @property {string} subaccountId Subaccount ID of this order document.\n * @property {string} title Title of this order document.\n * @property {string} type Type of this order document\n */\n/**\n * @typedef OrderDocumentsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#orderDocumentsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.7).OrderDocument[]} orderDocuments Order document collection\n */\n/**\n * @typedef OrdersListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#ordersListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.7).Order[]} orders Order collection.\n */\n/**\n * @typedef PathToConversionReportCompatibleFields\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).Dimension[]} conversionDimensions Conversion dimensions which are compatible to be selected in the &quot;conversionDimensions&quot; section of the report.\n * @property {dfareporting(v2.7).Dimension[]} customFloodlightVariables Custom floodlight variables which are compatible to be selected in the &quot;customFloodlightVariables&quot; section of the report.\n * @property {string} kind The kind of resource this is, in this case dfareporting#pathToConversionReportCompatibleFields.\n * @property {dfareporting(v2.7).Metric[]} metrics Metrics which are compatible to be selected in the &quot;metricNames&quot; section of the report.\n * @property {dfareporting(v2.7).Dimension[]} perInteractionDimensions Per-interaction dimensions which are compatible to be selected in the &quot;perInteractionDimensions&quot; section of the report.\n */\n/**\n * @typedef Placement\n * @memberOf! dfareporting(v2.7)\n * @type object\n* @property {string} accountId Account ID of this placement. This field can be left blank.\n* @property {string} advertiserId Advertiser ID of this placement. This field can be left blank.\n* @property {dfareporting(v2.7).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n* @property {boolean} archived Whether this placement is archived.\n* @property {string} campaignId Campaign ID of this placement. This field is a required field on insertion.\n* @property {dfareporting(v2.7).DimensionValue} campaignIdDimensionValue Dimension value for the ID of the campaign. This is a read-only, auto-generated field.\n* @property {string} comment Comments for this placement.\n* @property {string} compatibility Placement compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering on desktop, on mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are no longer allowed for new placement insertions. Instead, use DISPLAY or DISPLAY_INTERSTITIAL. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. This field is required on insertion.\n* @property {string} contentCategoryId ID of the content category assigned to this placement.\n* @property {dfareporting(v2.7).LastModifiedInfo} createInfo Information about the creation of this placement. This is a read-only field.\n* @property {string} directorySiteId Directory site ID of this placement. On insert, you must set either this field or the siteId field to specify the site associated with this placement. This is a required field that is read-only after insertion.\n* @property {dfareporting(v2.7).DimensionValue} directorySiteIdDimensionValue Dimension value for the ID of the directory site. This is a read-only, auto-generated field.\n* @property {string} externalId External ID for this placement.\n* @property {string} id ID of this placement. This is a read-only, auto-generated field.\n* @property {dfareporting(v2.7).DimensionValue} idDimensionValue Dimension value for the ID of this placement. This is a read-only, auto-generated field.\n* @property {string} keyName Key name of this placement. This is a read-only, auto-generated field.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#placement&quot;.\n* @property {dfareporting(v2.7).LastModifiedInfo} lastModifiedInfo Information about the most recent modification of this placement. This is a read-only field.\n* @property {dfareporting(v2.7).LookbackConfiguration} lookbackConfiguration Lookback window settings for this placement.\n* @property {string} name Name of this placement.This is a required field and must be less than 256 characters long.\n* @property {boolean} paymentApproved Whether payment was approved for this placement. This is a read-only field relevant only to publisher-paid placements.\n* @property {string} paymentSource Payment source for this placement. This is a required field that is read-only after insertion.\n* @property {string} placementGroupId ID of this placement&#39;s group, if applicable.\n* @property {dfareporting(v2.7).DimensionValue} placementGroupIdDimensionValue Dimension value for the ID of the placement group. This is a read-only, auto-generated field.\n* @property {string} placementStrategyId ID of the placement strategy assigned to this placement.\n* @property {dfareporting(v2.7).PricingSchedule} pricingSchedule Pricing schedule of this placement. This field is required on insertion, specifically subfields startDate, endDate and pricingType.\n* @property {boolean} primary Whether this placement is the primary placement of a roadblock (placement group). You cannot change this field from true to false. Setting this field to true will automatically set the primary field on the original primary placement of the roadblock to false, and it will automatically set the roadblock&#39;s primaryPlacementId field to the ID of this placement.\n* @property {dfareporting(v2.7).LastModifiedInfo} publisherUpdateInfo Information about the last publisher update. This is a read-only field.\n* @property {string} siteId Site ID associated with this placement. On insert, you must set either this field or the directorySiteId field to specify the site associated with this placement. This is a required field that is read-only after insertion.\n* @property {dfareporting(v2.7).DimensionValue} siteIdDimensionValue Dimension value for the ID of the site. This is a read-only, auto-generated field.\n* @property {dfareporting(v2.7).Size} size Size associated with this placement. When inserting or updating a placement, only the size ID field is used. This field is required on insertion.\n* @property {boolean} sslRequired Whether creatives assigned to this placement must be SSL-compliant.\n* @property {string} status Third-party placement status.\n* @property {string} subaccountId Subaccount ID of this placement. This field can be left blank.\n* @property {string[]} tagFormats Tag formats to generate for this placement. This field is required on insertion.\nAcceptable values are:\n- &quot;PLACEMENT_TAG_STANDARD&quot;\n- &quot;PLACEMENT_TAG_IFRAME_JAVASCRIPT&quot;\n- &quot;PLACEMENT_TAG_IFRAME_ILAYER&quot;\n- &quot;PLACEMENT_TAG_INTERNAL_REDIRECT&quot;\n- &quot;PLACEMENT_TAG_JAVASCRIPT&quot;\n- &quot;PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT&quot;\n- &quot;PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT&quot;\n- &quot;PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT&quot;\n- &quot;PLACEMENT_TAG_CLICK_COMMANDS&quot;\n- &quot;PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH&quot;\n- &quot;PLACEMENT_TAG_TRACKING&quot;\n- &quot;PLACEMENT_TAG_TRACKING_IFRAME&quot;\n- &quot;PLACEMENT_TAG_TRACKING_JAVASCRIPT&quot;\n* @property {dfareporting(v2.7).TagSetting} tagSetting Tag settings for this placement.\n* @property {boolean} videoActiveViewOptOut Whether Verification and ActiveView are disabled for in-stream video creatives for this placement. The same setting videoActiveViewOptOut exists on the site level -- the opt out occurs if either of these settings are true. These settings are distinct from DirectorySites.settings.activeViewOptOut or Sites.siteSettings.activeViewOptOut which only apply to display ads. However, Accounts.activeViewOptOut opts out both video traffic, as well as display ads, from Verification and ActiveView.\n* @property {dfareporting(v2.7).VideoSettings} videoSettings A collection of settings which affect video creatives served through this placement. Applicable to placements with IN_STREAM_VIDEO compatibility.\n* @property {string} vpaidAdapterChoice VPAID adapter setting for this placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to this placement.\n*/\n/**\n * @typedef PlacementAssignment\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {boolean} active Whether this placement assignment is active. When true, the placement will be included in the ad&#39;s rotation.\n * @property {string} placementId ID of the placement to be assigned. This is a required field.\n * @property {dfareporting(v2.7).DimensionValue} placementIdDimensionValue Dimension value for the ID of the placement. This is a read-only, auto-generated field.\n * @property {boolean} sslRequired Whether the placement to be assigned requires SSL. This is a read-only field that is auto-generated when the ad is inserted or updated.\n */\n/**\n * @typedef PlacementGroup\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this placement group. This is a read-only field that can be left blank.\n * @property {string} advertiserId Advertiser ID of this placement group. This is a required field on insertion.\n * @property {dfareporting(v2.7).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n * @property {boolean} archived Whether this placement group is archived.\n * @property {string} campaignId Campaign ID of this placement group. This field is required on insertion.\n * @property {dfareporting(v2.7).DimensionValue} campaignIdDimensionValue Dimension value for the ID of the campaign. This is a read-only, auto-generated field.\n * @property {string[]} childPlacementIds IDs of placements which are assigned to this placement group. This is a read-only, auto-generated field.\n * @property {string} comment Comments for this placement group.\n * @property {string} contentCategoryId ID of the content category assigned to this placement group.\n * @property {dfareporting(v2.7).LastModifiedInfo} createInfo Information about the creation of this placement group. This is a read-only field.\n * @property {string} directorySiteId Directory site ID associated with this placement group. On insert, you must set either this field or the site_id field to specify the site associated with this placement group. This is a required field that is read-only after insertion.\n * @property {dfareporting(v2.7).DimensionValue} directorySiteIdDimensionValue Dimension value for the ID of the directory site. This is a read-only, auto-generated field.\n * @property {string} externalId External ID for this placement.\n * @property {string} id ID of this placement group. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.7).DimensionValue} idDimensionValue Dimension value for the ID of this placement group. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#placementGroup&quot;.\n * @property {dfareporting(v2.7).LastModifiedInfo} lastModifiedInfo Information about the most recent modification of this placement group. This is a read-only field.\n * @property {string} name Name of this placement group. This is a required field and must be less than 256 characters long.\n * @property {string} placementGroupType Type of this placement group. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting. This field is required on insertion.\n * @property {string} placementStrategyId ID of the placement strategy assigned to this placement group.\n * @property {dfareporting(v2.7).PricingSchedule} pricingSchedule Pricing schedule of this placement group. This field is required on insertion.\n * @property {string} primaryPlacementId ID of the primary placement, used to calculate the media cost of a roadblock (placement group). Modifying this field will automatically modify the primary field on all affected roadblock child placements.\n * @property {dfareporting(v2.7).DimensionValue} primaryPlacementIdDimensionValue Dimension value for the ID of the primary placement. This is a read-only, auto-generated field.\n * @property {string} siteId Site ID associated with this placement group. On insert, you must set either this field or the directorySiteId field to specify the site associated with this placement group. This is a required field that is read-only after insertion.\n * @property {dfareporting(v2.7).DimensionValue} siteIdDimensionValue Dimension value for the ID of the site. This is a read-only, auto-generated field.\n * @property {string} subaccountId Subaccount ID of this placement group. This is a read-only field that can be left blank.\n */\n/**\n * @typedef PlacementGroupsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#placementGroupsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.7).PlacementGroup[]} placementGroups Placement group collection.\n */\n/**\n * @typedef PlacementStrategiesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#placementStrategiesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.7).PlacementStrategy[]} placementStrategies Placement strategy collection.\n */\n/**\n * @typedef PlacementStrategy\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this placement strategy.This is a read-only field that can be left blank.\n * @property {string} id ID of this placement strategy. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#placementStrategy&quot;.\n * @property {string} name Name of this placement strategy. This is a required field. It must be less than 256 characters long and unique among placement strategies of the same account.\n */\n/**\n * @typedef PlacementTag\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} placementId Placement ID\n * @property {dfareporting(v2.7).TagData[]} tagDatas Tags generated for this placement.\n */\n/**\n * @typedef PlacementsGenerateTagsResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#placementsGenerateTagsResponse&quot;.\n * @property {dfareporting(v2.7).PlacementTag[]} placementTags Set of generated tags for the specified placements.\n */\n/**\n * @typedef PlacementsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#placementsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.7).Placement[]} placements Placement collection.\n */\n/**\n * @typedef PlatformType\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} id ID of this platform type.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#platformType&quot;.\n * @property {string} name Name of this platform type.\n */\n/**\n * @typedef PlatformTypesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#platformTypesListResponse&quot;.\n * @property {dfareporting(v2.7).PlatformType[]} platformTypes Platform type collection.\n */\n/**\n * @typedef PopupWindowProperties\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).Size} dimension Popup dimension for a creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA and all VPAID\n * @property {dfareporting(v2.7).OffsetPosition} offset Upper-left corner coordinates of the popup window. Applicable if positionType is COORDINATES.\n * @property {string} positionType Popup window position either centered or at specific coordinate.\n * @property {boolean} showAddressBar Whether to display the browser address bar.\n * @property {boolean} showMenuBar Whether to display the browser menu bar.\n * @property {boolean} showScrollBar Whether to display the browser scroll bar.\n * @property {boolean} showStatusBar Whether to display the browser status bar.\n * @property {boolean} showToolBar Whether to display the browser tool bar.\n * @property {string} title Title of popup window.\n */\n/**\n * @typedef PostalCode\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} code Postal code. This is equivalent to the id field.\n * @property {string} countryCode Country code of the country to which this postal code belongs.\n * @property {string} countryDartId DART ID of the country to which this postal code belongs.\n * @property {string} id ID of this postal code.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#postalCode&quot;.\n */\n/**\n * @typedef PostalCodesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#postalCodesListResponse&quot;.\n * @property {dfareporting(v2.7).PostalCode[]} postalCodes Postal code collection.\n */\n/**\n * @typedef Pricing\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} capCostType Cap cost type of this inventory item.\n * @property {string} endDate End date of this inventory item.\n * @property {dfareporting(v2.7).Flight[]} flights Flights of this inventory item. A flight (a.k.a. pricing period) represents the inventory item pricing information for a specific period of time.\n * @property {string} groupType Group type of this inventory item if it represents a placement group. Is null otherwise. There are two type of placement groups: PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE is a simple group of inventory items that acts as a single pricing point for a group of tags. PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK is a group of inventory items that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned inventory items to be marked as primary.\n * @property {string} pricingType Pricing type of this inventory item.\n * @property {string} startDate Start date of this inventory item.\n */\n/**\n * @typedef PricingSchedule\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} capCostOption Placement cap cost option.\n * @property {boolean} disregardOverdelivery Whether cap costs are ignored by ad serving.\n * @property {string} endDate Placement end date. This date must be later than, or the same day as, the placement start date, but not later than the campaign end date. If, for example, you set 6/25/2015 as both the start and end dates, the effective placement date is just that day only, 6/25/2015. The hours, minutes, and seconds of the end date should not be set, as doing so will result in an error. This field is required on insertion.\n * @property {boolean} flighted Whether this placement is flighted. If true, pricing periods will be computed automatically.\n * @property {string} floodlightActivityId Floodlight activity ID associated with this placement. This field should be set when placement pricing type is set to PRICING_TYPE_CPA.\n * @property {dfareporting(v2.7).PricingSchedulePricingPeriod[]} pricingPeriods Pricing periods for this placement.\n * @property {string} pricingType Placement pricing type. This field is required on insertion.\n * @property {string} startDate Placement start date. This date must be later than, or the same day as, the campaign start date. The hours, minutes, and seconds of the start date should not be set, as doing so will result in an error. This field is required on insertion.\n * @property {string} testingStartDate Testing start date of this placement. The hours, minutes, and seconds of the start date should not be set, as doing so will result in an error.\n */\n/**\n * @typedef PricingSchedulePricingPeriod\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} endDate Pricing period end date. This date must be later than, or the same day as, the pricing period start date, but not later than the placement end date. The period end date can be the same date as the period start date. If, for example, you set 6/25/2015 as both the start and end dates, the effective pricing period date is just that day only, 6/25/2015. The hours, minutes, and seconds of the end date should not be set, as doing so will result in an error.\n * @property {string} pricingComment Comments for this pricing period.\n * @property {string} rateOrCostNanos Rate or cost of this pricing period.\n * @property {string} startDate Pricing period start date. This date must be later than, or the same day as, the placement start date. The hours, minutes, and seconds of the start date should not be set, as doing so will result in an error.\n * @property {string} units Units of this pricing period.\n */\n/**\n * @typedef Project\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this project.\n * @property {string} advertiserId Advertiser ID of this project.\n * @property {string} audienceAgeGroup Audience age group of this project.\n * @property {string} audienceGender Audience gender of this project.\n * @property {string} budget Budget of this project in the currency specified by the current account. The value stored in this field represents only the non-fractional amount. For example, for USD, the smallest value that can be represented by this field is 1 US dollar.\n * @property {string} clientBillingCode Client billing code of this project.\n * @property {string} clientName Name of the project client.\n * @property {string} endDate End date of the project.\n * @property {string} id ID of this project. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#project&quot;.\n * @property {dfareporting(v2.7).LastModifiedInfo} lastModifiedInfo Information about the most recent modification of this project.\n * @property {string} name Name of this project.\n * @property {string} overview Overview of this project.\n * @property {string} startDate Start date of the project.\n * @property {string} subaccountId Subaccount ID of this project.\n * @property {string} targetClicks Number of clicks that the advertiser is targeting.\n * @property {string} targetConversions Number of conversions that the advertiser is targeting.\n * @property {string} targetCpaNanos CPA that the advertiser is targeting.\n * @property {string} targetCpcNanos CPC that the advertiser is targeting.\n * @property {string} targetCpmActiveViewNanos vCPM from Active View that the advertiser is targeting.\n * @property {string} targetCpmNanos CPM that the advertiser is targeting.\n * @property {string} targetImpressions Number of impressions that the advertiser is targeting.\n */\n/**\n * @typedef ProjectsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#projectsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.7).Project[]} projects Project collection.\n */\n/**\n * @typedef ReachReportCompatibleFields\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).Dimension[]} dimensionFilters Dimensions which are compatible to be selected in the &quot;dimensionFilters&quot; section of the report.\n * @property {dfareporting(v2.7).Dimension[]} dimensions Dimensions which are compatible to be selected in the &quot;dimensions&quot; section of the report.\n * @property {string} kind The kind of resource this is, in this case dfareporting#reachReportCompatibleFields.\n * @property {dfareporting(v2.7).Metric[]} metrics Metrics which are compatible to be selected in the &quot;metricNames&quot; section of the report.\n * @property {dfareporting(v2.7).Metric[]} pivotedActivityMetrics Metrics which are compatible to be selected as activity metrics to pivot on in the &quot;activities&quot; section of the report.\n * @property {dfareporting(v2.7).Metric[]} reachByFrequencyMetrics Metrics which are compatible to be selected in the &quot;reachByFrequencyMetricNames&quot; section of the report.\n */\n/**\n * @typedef Recipient\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} deliveryType The delivery type for the recipient.\n * @property {string} email The email address of the recipient.\n * @property {string} kind The kind of resource this is, in this case dfareporting#recipient.\n */\n/**\n * @typedef Region\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} countryCode Country code of the country to which this region belongs.\n * @property {string} countryDartId DART ID of the country to which this region belongs.\n * @property {string} dartId DART ID of this region.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#region&quot;.\n * @property {string} name Name of this region.\n * @property {string} regionCode Region code.\n */\n/**\n * @typedef RegionsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#regionsListResponse&quot;.\n * @property {dfareporting(v2.7).Region[]} regions Region collection.\n */\n/**\n * @typedef RemarketingList\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.\n * @property {boolean} active Whether this remarketing list is active.\n * @property {string} advertiserId Dimension value for the advertiser ID that owns this remarketing list. This is a required field.\n * @property {dfareporting(v2.7).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n * @property {string} description Remarketing list description.\n * @property {string} id Remarketing list ID. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#remarketingList&quot;.\n * @property {string} lifeSpan Number of days that a user should remain in the remarketing list without an impression.\n * @property {dfareporting(v2.7).ListPopulationRule} listPopulationRule Rule used to populate the remarketing list with users.\n * @property {string} listSize Number of users currently in the list. This is a read-only field.\n * @property {string} listSource Product from which this remarketing list was originated.\n * @property {string} name Name of the remarketing list. This is a required field. Must be no greater than 128 characters long.\n * @property {string} subaccountId Subaccount ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.\n */\n/**\n * @typedef RemarketingListShare\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#remarketingListShare&quot;.\n * @property {string} remarketingListId Remarketing list ID. This is a read-only, auto-generated field.\n * @property {string[]} sharedAccountIds Accounts that the remarketing list is shared with.\n * @property {string[]} sharedAdvertiserIds Advertisers that the remarketing list is shared with.\n */\n/**\n * @typedef RemarketingListsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#remarketingListsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.7).RemarketingList[]} remarketingLists Remarketing list collection.\n */\n/**\n * @typedef Report\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId The account ID to which this report belongs.\n * @property {object} criteria The report criteria for a report of type &quot;STANDARD&quot;.\n * @property {object} crossDimensionReachCriteria The report criteria for a report of type &quot;CROSS_DIMENSION_REACH&quot;.\n * @property {object} delivery The report&#39;s email delivery settings.\n * @property {string} etag The eTag of this response for caching purposes.\n * @property {string} fileName The filename used when generating report files for this report.\n * @property {object} floodlightCriteria The report criteria for a report of type &quot;FLOODLIGHT&quot;.\n * @property {string} format The output format of the report. If not specified, default format is &quot;CSV&quot;. Note that the actual format in the completed report file might differ if for instance the report&#39;s size exceeds the format&#39;s capabilities. &quot;CSV&quot; will then be the fallback format.\n * @property {string} id The unique ID identifying this report resource.\n * @property {string} kind The kind of resource this is, in this case dfareporting#report.\n * @property {string} lastModifiedTime The timestamp (in milliseconds since epoch) of when this report was last modified.\n * @property {string} name The name of the report.\n * @property {string} ownerProfileId The user profile id of the owner of this report.\n * @property {object} pathToConversionCriteria The report criteria for a report of type &quot;PATH_TO_CONVERSION&quot;.\n * @property {object} reachCriteria The report criteria for a report of type &quot;REACH&quot;.\n * @property {object} schedule The report&#39;s schedule. Can only be set if the report&#39;s &#39;dateRange&#39; is a relative date range and the relative date range is not &quot;TODAY&quot;.\n * @property {string} subAccountId The subaccount ID to which this report belongs if applicable.\n * @property {string} type The type of the report.\n */\n/**\n * @typedef ReportCompatibleFields\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).Dimension[]} dimensionFilters Dimensions which are compatible to be selected in the &quot;dimensionFilters&quot; section of the report.\n * @property {dfareporting(v2.7).Dimension[]} dimensions Dimensions which are compatible to be selected in the &quot;dimensions&quot; section of the report.\n * @property {string} kind The kind of resource this is, in this case dfareporting#reportCompatibleFields.\n * @property {dfareporting(v2.7).Metric[]} metrics Metrics which are compatible to be selected in the &quot;metricNames&quot; section of the report.\n * @property {dfareporting(v2.7).Metric[]} pivotedActivityMetrics Metrics which are compatible to be selected as activity metrics to pivot on in the &quot;activities&quot; section of the report.\n */\n/**\n * @typedef ReportList\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} etag The eTag of this response for caching purposes.\n * @property {dfareporting(v2.7).Report[]} items The reports returned in this response.\n * @property {string} kind The kind of list this is, in this case dfareporting#reportList.\n * @property {string} nextPageToken Continuation token used to page through reports. To retrieve the next page of results, set the next request&#39;s &quot;pageToken&quot; to the value of this field. The page token is only valid for a limited amount of time and should not be persisted.\n */\n/**\n * @typedef ReportsConfiguration\n * @memberOf! dfareporting(v2.7)\n * @type object\n* @property {boolean} exposureToConversionEnabled Whether the exposure to conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting.\n* @property {dfareporting(v2.7).LookbackConfiguration} lookbackConfiguration Default lookback windows for new advertisers in this account.\n* @property {string} reportGenerationTimeZoneId Report generation time zone ID of this account. This is a required field that can only be changed by a superuser.\nAcceptable values are:\n\n- &quot;1&quot; for &quot;America/New_York&quot; \n- &quot;2&quot; for &quot;Europe/London&quot; \n- &quot;3&quot; for &quot;Europe/Paris&quot; \n- &quot;4&quot; for &quot;Africa/Johannesburg&quot; \n- &quot;5&quot; for &quot;Asia/Jerusalem&quot; \n- &quot;6&quot; for &quot;Asia/Shanghai&quot; \n- &quot;7&quot; for &quot;Asia/Hong_Kong&quot; \n- &quot;8&quot; for &quot;Asia/Tokyo&quot; \n- &quot;9&quot; for &quot;Australia/Sydney&quot; \n- &quot;10&quot; for &quot;Asia/Dubai&quot; \n- &quot;11&quot; for &quot;America/Los_Angeles&quot; \n- &quot;12&quot; for &quot;Pacific/Auckland&quot; \n- &quot;13&quot; for &quot;America/Sao_Paulo&quot;\n*/\n/**\n * @typedef RichMediaExitOverride\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).ClickThroughUrl} clickThroughUrl Click-through URL of this rich media exit override. Applicable if the enabled field is set to true.\n * @property {boolean} enabled Whether to use the clickThroughUrl. If false, the creative-level exit will be used.\n * @property {string} exitId ID for the override to refer to a specific exit in the creative.\n */\n/**\n * @typedef Rule\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} assetId A creativeAssets[].id. This should refer to one of the parent assets in this creative. This is a required field.\n * @property {string} name A user-friendly name for this rule. This is a required field.\n * @property {string} targetingTemplateId A targeting template ID. The targeting from the targeting template will be used to determine whether this asset should be served. This is a required field.\n */\n/**\n * @typedef Site\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this site. This is a read-only field that can be left blank.\n * @property {boolean} approved Whether this site is approved.\n * @property {string} directorySiteId Directory site associated with this site. This is a required field that is read-only after insertion.\n * @property {dfareporting(v2.7).DimensionValue} directorySiteIdDimensionValue Dimension value for the ID of the directory site. This is a read-only, auto-generated field.\n * @property {string} id ID of this site. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.7).DimensionValue} idDimensionValue Dimension value for the ID of this site. This is a read-only, auto-generated field.\n * @property {string} keyName Key name of this site. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#site&quot;.\n * @property {string} name Name of this site.This is a required field. Must be less than 128 characters long. If this site is under a subaccount, the name must be unique among sites of the same subaccount. Otherwise, this site is a top-level site, and the name must be unique among top-level sites of the same account.\n * @property {dfareporting(v2.7).SiteContact[]} siteContacts Site contacts.\n * @property {dfareporting(v2.7).SiteSettings} siteSettings Site-wide settings.\n * @property {string} subaccountId Subaccount ID of this site. This is a read-only field that can be left blank.\n */\n/**\n * @typedef SiteContact\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} address Address of this site contact.\n * @property {string} contactType Site contact type.\n * @property {string} email Email address of this site contact. This is a required field.\n * @property {string} firstName First name of this site contact.\n * @property {string} id ID of this site contact. This is a read-only, auto-generated field.\n * @property {string} lastName Last name of this site contact.\n * @property {string} phone Primary phone number of this site contact.\n * @property {string} title Title or designation of this site contact.\n */\n/**\n * @typedef SiteSettings\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {boolean} activeViewOptOut Whether active view creatives are disabled for this site.\n * @property {dfareporting(v2.7).CreativeSettings} creativeSettings Site-wide creative settings.\n * @property {boolean} disableBrandSafeAds Whether brand safe ads are disabled for this site.\n * @property {boolean} disableNewCookie Whether new cookies are disabled for this site.\n * @property {dfareporting(v2.7).LookbackConfiguration} lookbackConfiguration Lookback window settings for this site.\n * @property {dfareporting(v2.7).TagSetting} tagSetting Configuration settings for dynamic and image floodlight tags.\n * @property {boolean} videoActiveViewOptOutTemplate Whether Verification and ActiveView for in-stream video creatives are disabled by default for new placements created under this site. This value will be used to populate the placement.videoActiveViewOptOut field, when no value is specified for the new placement.\n * @property {string} vpaidAdapterChoiceTemplate Default VPAID adapter setting for new placements created under this site. This value will be used to populate the placements.vpaidAdapterChoice field, when no value is specified for the new placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to the placement. The publisher&#39;s specifications will typically determine this setting. For VPAID creatives, the adapter format will match the VPAID format (HTML5 VPAID creatives use the HTML5 adapter, and Flash VPAID creatives use the Flash adapter).\n */\n/**\n * @typedef SitesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#sitesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.7).Site[]} sites Site collection.\n */\n/**\n * @typedef Size\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {integer} height Height of this size.\n * @property {boolean} iab IAB standard size. This is a read-only, auto-generated field.\n * @property {string} id ID of this size. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#size&quot;.\n * @property {integer} width Width of this size.\n */\n/**\n * @typedef SizesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#sizesListResponse&quot;.\n * @property {dfareporting(v2.7).Size[]} sizes Size collection.\n */\n/**\n * @typedef SkippableSetting\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#skippableSetting&quot;.\n * @property {dfareporting(v2.7).VideoOffset} progressOffset Amount of time to play videos served to this placement before counting a view. Applicable when skippable is true.\n * @property {dfareporting(v2.7).VideoOffset} skipOffset Amount of time to play videos served to this placement before the skip button should appear. Applicable when skippable is true.\n * @property {boolean} skippable Whether the user can skip creatives served to this placement.\n */\n/**\n * @typedef SortedDimension\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind The kind of resource this is, in this case dfareporting#sortedDimension.\n * @property {string} name The name of the dimension.\n * @property {string} sortOrder An optional sort order for the dimension column.\n */\n/**\n * @typedef Subaccount\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId ID of the account that contains this subaccount. This is a read-only field that can be left blank.\n * @property {string[]} availablePermissionIds IDs of the available user role permissions for this subaccount.\n * @property {string} id ID of this subaccount. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#subaccount&quot;.\n * @property {string} name Name of this subaccount. This is a required field. Must be less than 128 characters long and be unique among subaccounts of the same account.\n */\n/**\n * @typedef SubaccountsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#subaccountsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.7).Subaccount[]} subaccounts Subaccount collection.\n */\n/**\n * @typedef TagData\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} adId Ad associated with this placement tag.\n * @property {string} clickTag Tag string to record a click.\n * @property {string} creativeId Creative associated with this placement tag.\n * @property {string} format TagData tag format of this tag.\n * @property {string} impressionTag Tag string for serving an ad.\n */\n/**\n * @typedef TagSetting\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} additionalKeyValues Additional key-values to be included in tags. Each key-value pair must be of the form key=value, and pairs must be separated by a semicolon (;). Keys and values must not contain commas. For example, id=2;color=red is a valid value for this field.\n * @property {boolean} includeClickThroughUrls Whether static landing page URLs should be included in the tags. This setting applies only to placements.\n * @property {boolean} includeClickTracking Whether click-tracking string should be included in the tags.\n * @property {string} keywordOption Option specifying how keywords are embedded in ad tags. This setting can be used to specify whether keyword placeholders are inserted in placement tags for this site. Publishers can then add keywords to those placeholders.\n */\n/**\n * @typedef TagSettings\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {boolean} dynamicTagEnabled Whether dynamic floodlight tags are enabled.\n * @property {boolean} imageTagEnabled Whether image tags are enabled.\n */\n/**\n * @typedef TargetWindow\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} customHtml User-entered value.\n * @property {string} targetWindowOption Type of browser window for which the backup image of the flash creative can be displayed.\n */\n/**\n * @typedef TargetableRemarketingList\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.\n * @property {boolean} active Whether this targetable remarketing list is active.\n * @property {string} advertiserId Dimension value for the advertiser ID that owns this targetable remarketing list.\n * @property {dfareporting(v2.7).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser.\n * @property {string} description Targetable remarketing list description.\n * @property {string} id Targetable remarketing list ID.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#targetableRemarketingList&quot;.\n * @property {string} lifeSpan Number of days that a user should remain in the targetable remarketing list without an impression.\n * @property {string} listSize Number of users currently in the list. This is a read-only field.\n * @property {string} listSource Product from which this targetable remarketing list was originated.\n * @property {string} name Name of the targetable remarketing list. Is no greater than 128 characters long.\n * @property {string} subaccountId Subaccount ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.\n */\n/**\n * @typedef TargetableRemarketingListsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#targetableRemarketingListsListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.7).TargetableRemarketingList[]} targetableRemarketingLists Targetable remarketing list collection.\n */\n/**\n * @typedef TargetingTemplate\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this targeting template. This field, if left unset, will be auto-generated on insert and is read-only after insert.\n * @property {string} advertiserId Advertiser ID of this targeting template. This is a required field on insert and is read-only after insert.\n * @property {dfareporting(v2.7).DimensionValue} advertiserIdDimensionValue Dimension value for the ID of the advertiser. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.7).DayPartTargeting} dayPartTargeting Time and day targeting criteria.\n * @property {dfareporting(v2.7).GeoTargeting} geoTargeting Geographical targeting criteria.\n * @property {string} id ID of this targeting template. This is a read-only, auto-generated field.\n * @property {dfareporting(v2.7).KeyValueTargetingExpression} keyValueTargetingExpression Key-value targeting criteria.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#targetingTemplate&quot;.\n * @property {dfareporting(v2.7).LanguageTargeting} languageTargeting Language targeting criteria.\n * @property {dfareporting(v2.7).ListTargetingExpression} listTargetingExpression Remarketing list targeting criteria.\n * @property {string} name Name of this targeting template. This field is required. It must be less than 256 characters long and unique within an advertiser.\n * @property {string} subaccountId Subaccount ID of this targeting template. This field, if left unset, will be auto-generated on insert and is read-only after insert.\n * @property {dfareporting(v2.7).TechnologyTargeting} technologyTargeting Technology platform targeting criteria.\n */\n/**\n * @typedef TargetingTemplatesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#targetingTemplatesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.7).TargetingTemplate[]} targetingTemplates Targeting template collection.\n */\n/**\n * @typedef TechnologyTargeting\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).Browser[]} browsers Browsers that this ad targets. For each browser either set browserVersionId or dartId along with the version numbers. If both are specified, only browserVersionId will be used. The other fields are populated automatically when the ad is inserted or updated.\n * @property {dfareporting(v2.7).ConnectionType[]} connectionTypes Connection types that this ad targets. For each connection type only id is required. The other fields are populated automatically when the ad is inserted or updated.\n * @property {dfareporting(v2.7).MobileCarrier[]} mobileCarriers Mobile carriers that this ad targets. For each mobile carrier only id is required, and the other fields are populated automatically when the ad is inserted or updated. If targeting a mobile carrier, do not set targeting for any zip codes.\n * @property {dfareporting(v2.7).OperatingSystemVersion[]} operatingSystemVersions Operating system versions that this ad targets. To target all versions, use operatingSystems. For each operating system version, only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system version, do not set targeting for the corresponding operating system in operatingSystems.\n * @property {dfareporting(v2.7).OperatingSystem[]} operatingSystems Operating systems that this ad targets. To target specific versions, use operatingSystemVersions. For each operating system only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system, do not set targeting for operating system versions for the same operating system.\n * @property {dfareporting(v2.7).PlatformType[]} platformTypes Platform types that this ad targets. For example, desktop, mobile, or tablet. For each platform type, only id is required, and the other fields are populated automatically when the ad is inserted or updated.\n */\n/**\n * @typedef ThirdPartyAuthenticationToken\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} name Name of the third-party authentication token.\n * @property {string} value Value of the third-party authentication token. This is a read-only, auto-generated field.\n */\n/**\n * @typedef ThirdPartyTrackingUrl\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} thirdPartyUrlType Third-party URL type for in-stream video creatives.\n * @property {string} url URL for the specified third-party URL type.\n */\n/**\n * @typedef TranscodeSetting\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {integer[]} enabledVideoFormats Whitelist of video formats to be served to this placement. Set this list to null or empty to serve all video formats.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#transcodeSetting&quot;.\n */\n/**\n * @typedef UserDefinedVariableConfiguration\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} dataType Data type for the variable. This is a required field.\n * @property {string} reportName User-friendly name for the variable which will appear in reports. This is a required field, must be less than 64 characters long, and cannot contain the following characters: &quot;&quot;&lt;&gt;&quot;.\n * @property {string} variableType Variable name in the tag. This is a required field.\n */\n/**\n * @typedef UserProfile\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId The account ID to which this profile belongs.\n * @property {string} accountName The account name this profile belongs to.\n * @property {string} etag The eTag of this response for caching purposes.\n * @property {string} kind The kind of resource this is, in this case dfareporting#userProfile.\n * @property {string} profileId The unique ID of the user profile.\n * @property {string} subAccountId The sub account ID this profile belongs to if applicable.\n * @property {string} subAccountName The sub account name this profile belongs to if applicable.\n * @property {string} userName The user name.\n */\n/**\n * @typedef UserProfileList\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} etag The eTag of this response for caching purposes.\n * @property {dfareporting(v2.7).UserProfile[]} items The user profiles returned in this response.\n * @property {string} kind The kind of list this is, in this case dfareporting#userProfileList.\n */\n/**\n * @typedef UserRole\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} accountId Account ID of this user role. This is a read-only field that can be left blank.\n * @property {boolean} defaultUserRole Whether this is a default user role. Default user roles are created by the system for the account/subaccount and cannot be modified or deleted. Each default user role comes with a basic set of preassigned permissions.\n * @property {string} id ID of this user role. This is a read-only, auto-generated field.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#userRole&quot;.\n * @property {string} name Name of this user role. This is a required field. Must be less than 256 characters long. If this user role is under a subaccount, the name must be unique among sites of the same subaccount. Otherwise, this user role is a top-level user role, and the name must be unique among top-level user roles of the same account.\n * @property {string} parentUserRoleId ID of the user role that this user role is based on or copied from. This is a required field.\n * @property {dfareporting(v2.7).UserRolePermission[]} permissions List of permissions associated with this user role.\n * @property {string} subaccountId Subaccount ID of this user role. This is a read-only field that can be left blank.\n */\n/**\n * @typedef UserRolePermission\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} availability Levels of availability for a user role permission.\n * @property {string} id ID of this user role permission.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#userRolePermission&quot;.\n * @property {string} name Name of this user role permission.\n * @property {string} permissionGroupId ID of the permission group that this user role permission belongs to.\n */\n/**\n * @typedef UserRolePermissionGroup\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} id ID of this user role permission.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#userRolePermissionGroup&quot;.\n * @property {string} name Name of this user role permission group.\n */\n/**\n * @typedef UserRolePermissionGroupsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#userRolePermissionGroupsListResponse&quot;.\n * @property {dfareporting(v2.7).UserRolePermissionGroup[]} userRolePermissionGroups User role permission group collection.\n */\n/**\n * @typedef UserRolePermissionsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#userRolePermissionsListResponse&quot;.\n * @property {dfareporting(v2.7).UserRolePermission[]} userRolePermissions User role permission collection.\n */\n/**\n * @typedef UserRolesListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#userRolesListResponse&quot;.\n * @property {string} nextPageToken Pagination token to be used for the next list operation.\n * @property {dfareporting(v2.7).UserRole[]} userRoles User role collection.\n */\n/**\n * @typedef VideoFormat\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} fileType File type of the video format.\n * @property {integer} id ID of the video format.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#videoFormat&quot;.\n * @property {dfareporting(v2.7).Size} resolution The resolution of this video format.\n * @property {integer} targetBitRate The target bit rate of this video format.\n */\n/**\n * @typedef VideoFormatsListResponse\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#videoFormatsListResponse&quot;.\n * @property {dfareporting(v2.7).VideoFormat[]} videoFormats Video format collection.\n */\n/**\n * @typedef VideoOffset\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {integer} offsetPercentage Duration, as a percentage of video duration. Do not set when offsetSeconds is set.\n * @property {integer} offsetSeconds Duration, in seconds. Do not set when offsetPercentage is set.\n */\n/**\n * @typedef VideoSettings\n * @memberOf! dfareporting(v2.7)\n * @type object\n * @property {dfareporting(v2.7).CompanionSetting} companionSettings Settings for the companion creatives of video creatives served to this placement.\n * @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;dfareporting#videoSettings&quot;.\n * @property {dfareporting(v2.7).SkippableSetting} skippableSettings Settings for the skippability of video creatives served to this placement. If this object is provided, the creative-level skippable settings will be overridden.\n * @property {dfareporting(v2.7).TranscodeSetting} transcodeSettings Settings for the transcodes of video creatives served to this placement. If this object is provided, the creative-level transcode settings will be overridden.\n */\nmodule.exports = Dfareporting;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/gamesConfiguration/v1configuration.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Google Play Game Services Publishing API\n *\n * The Publishing API for Google Play Game Services.\n *\n * @example\n * var google = require('googleapis');\n * var gamesConfiguration = google.gamesConfiguration('v1configuration');\n *\n * @namespace gamesConfiguration\n * @type {Function}\n * @version v1configuration\n * @variation v1configuration\n * @param {object=} options Options for Gamesconfiguration\n */\nfunction Gamesconfiguration(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.achievementConfigurations = {\n\n    /**\n     * gamesConfiguration.achievementConfigurations.delete\n     *\n     * @desc Delete the achievement configuration with the given ID.\n     *\n     * @alias gamesConfiguration.achievementConfigurations.delete\n     * @memberOf! gamesConfiguration(v1configuration)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.achievementId The ID of the achievement used by this method.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1configuration/achievements/{achievementId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['achievementId'],\n        pathParams: ['achievementId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesConfiguration.achievementConfigurations.get\n     *\n     * @desc Retrieves the metadata of the achievement configuration with the given ID.\n     *\n     * @alias gamesConfiguration.achievementConfigurations.get\n     * @memberOf! gamesConfiguration(v1configuration)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.achievementId The ID of the achievement used by this method.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1configuration/achievements/{achievementId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['achievementId'],\n        pathParams: ['achievementId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesConfiguration.achievementConfigurations.insert\n     *\n     * @desc Insert a new achievement configuration in this application.\n     *\n     * @alias gamesConfiguration.achievementConfigurations.insert\n     * @memberOf! gamesConfiguration(v1configuration)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.applicationId The application ID from the Google Play developer console.\n     * @param {gamesConfiguration(v1configuration).AchievementConfiguration} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1configuration/applications/{applicationId}/achievements',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['applicationId'],\n        pathParams: ['applicationId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesConfiguration.achievementConfigurations.list\n     *\n     * @desc Returns a list of the achievement configurations in this application.\n     *\n     * @alias gamesConfiguration.achievementConfigurations.list\n     * @memberOf! gamesConfiguration(v1configuration)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.applicationId The application ID from the Google Play developer console.\n     * @param {integer=} params.maxResults The maximum number of resource configurations to return in the response, used for paging. For any response, the actual number of resources returned may be less than the specified maxResults.\n     * @param {string=} params.pageToken The token returned by the previous request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1configuration/applications/{applicationId}/achievements',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['applicationId'],\n        pathParams: ['applicationId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesConfiguration.achievementConfigurations.patch\n     *\n     * @desc Update the metadata of the achievement configuration with the given ID. This method supports patch semantics.\n     *\n     * @alias gamesConfiguration.achievementConfigurations.patch\n     * @memberOf! gamesConfiguration(v1configuration)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.achievementId The ID of the achievement used by this method.\n     * @param {gamesConfiguration(v1configuration).AchievementConfiguration} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1configuration/achievements/{achievementId}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['achievementId'],\n        pathParams: ['achievementId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesConfiguration.achievementConfigurations.update\n     *\n     * @desc Update the metadata of the achievement configuration with the given ID.\n     *\n     * @alias gamesConfiguration.achievementConfigurations.update\n     * @memberOf! gamesConfiguration(v1configuration)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.achievementId The ID of the achievement used by this method.\n     * @param {gamesConfiguration(v1configuration).AchievementConfiguration} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1configuration/achievements/{achievementId}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['achievementId'],\n        pathParams: ['achievementId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.imageConfigurations = {\n\n    /**\n     * gamesConfiguration.imageConfigurations.upload\n     *\n     * @desc Uploads an image for a resource with the given ID and image type.\n     *\n     * @alias gamesConfiguration.imageConfigurations.upload\n     * @memberOf! gamesConfiguration(v1configuration)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.imageType Selects which image in a resource for this method.\n     * @param {string} params.resourceId The ID of the resource used by this method.\n     * @param {object} params.media Media object\n     * @param {string} params.media.mimeType Media mime-type\n     * @param {string|object} params.media.body Media body contents\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    upload: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1configuration/images/{resourceId}/imageType/{imageType}',\n          method: 'POST'\n        }, options),\n        params: params,\n        mediaUrl: 'https://www.googleapis.com/upload/games/v1configuration/images/{resourceId}/imageType/{imageType}',\n        requiredParams: ['resourceId', 'imageType'],\n        pathParams: ['imageType', 'resourceId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.leaderboardConfigurations = {\n\n    /**\n     * gamesConfiguration.leaderboardConfigurations.delete\n     *\n     * @desc Delete the leaderboard configuration with the given ID.\n     *\n     * @alias gamesConfiguration.leaderboardConfigurations.delete\n     * @memberOf! gamesConfiguration(v1configuration)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.leaderboardId The ID of the leaderboard.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1configuration/leaderboards/{leaderboardId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['leaderboardId'],\n        pathParams: ['leaderboardId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesConfiguration.leaderboardConfigurations.get\n     *\n     * @desc Retrieves the metadata of the leaderboard configuration with the given ID.\n     *\n     * @alias gamesConfiguration.leaderboardConfigurations.get\n     * @memberOf! gamesConfiguration(v1configuration)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.leaderboardId The ID of the leaderboard.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1configuration/leaderboards/{leaderboardId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['leaderboardId'],\n        pathParams: ['leaderboardId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesConfiguration.leaderboardConfigurations.insert\n     *\n     * @desc Insert a new leaderboard configuration in this application.\n     *\n     * @alias gamesConfiguration.leaderboardConfigurations.insert\n     * @memberOf! gamesConfiguration(v1configuration)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.applicationId The application ID from the Google Play developer console.\n     * @param {gamesConfiguration(v1configuration).LeaderboardConfiguration} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1configuration/applications/{applicationId}/leaderboards',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['applicationId'],\n        pathParams: ['applicationId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesConfiguration.leaderboardConfigurations.list\n     *\n     * @desc Returns a list of the leaderboard configurations in this application.\n     *\n     * @alias gamesConfiguration.leaderboardConfigurations.list\n     * @memberOf! gamesConfiguration(v1configuration)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.applicationId The application ID from the Google Play developer console.\n     * @param {integer=} params.maxResults The maximum number of resource configurations to return in the response, used for paging. For any response, the actual number of resources returned may be less than the specified maxResults.\n     * @param {string=} params.pageToken The token returned by the previous request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1configuration/applications/{applicationId}/leaderboards',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['applicationId'],\n        pathParams: ['applicationId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesConfiguration.leaderboardConfigurations.patch\n     *\n     * @desc Update the metadata of the leaderboard configuration with the given ID. This method supports patch semantics.\n     *\n     * @alias gamesConfiguration.leaderboardConfigurations.patch\n     * @memberOf! gamesConfiguration(v1configuration)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.leaderboardId The ID of the leaderboard.\n     * @param {gamesConfiguration(v1configuration).LeaderboardConfiguration} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    patch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1configuration/leaderboards/{leaderboardId}',\n          method: 'PATCH'\n        }, options),\n        params: params,\n        requiredParams: ['leaderboardId'],\n        pathParams: ['leaderboardId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesConfiguration.leaderboardConfigurations.update\n     *\n     * @desc Update the metadata of the leaderboard configuration with the given ID.\n     *\n     * @alias gamesConfiguration.leaderboardConfigurations.update\n     * @memberOf! gamesConfiguration(v1configuration)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.leaderboardId The ID of the leaderboard.\n     * @param {gamesConfiguration(v1configuration).LeaderboardConfiguration} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1configuration/leaderboards/{leaderboardId}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['leaderboardId'],\n        pathParams: ['leaderboardId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef AchievementConfiguration\n * @memberOf! gamesConfiguration(v1configuration)\n * @type object\n* @property {string} achievementType The type of the achievement.\nPossible values are:  \n- &quot;STANDARD&quot; - Achievement is either locked or unlocked. \n- &quot;INCREMENTAL&quot; - Achievement is incremental.\n* @property {gamesConfiguration(v1configuration).AchievementConfigurationDetail} draft The draft data of the achievement.\n* @property {string} id The ID of the achievement.\n* @property {string} initialState The initial state of the achievement.\nPossible values are:  \n- &quot;HIDDEN&quot; - Achievement is hidden. \n- &quot;REVEALED&quot; - Achievement is revealed. \n- &quot;UNLOCKED&quot; - Achievement is unlocked.\n* @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesConfiguration#achievementConfiguration.\n* @property {gamesConfiguration(v1configuration).AchievementConfigurationDetail} published The read-only published data of the achievement.\n* @property {integer} stepsToUnlock Steps to unlock. Only applicable to incremental achievements.\n* @property {string} token The token for this resource.\n*/\n/**\n * @typedef AchievementConfigurationDetail\n * @memberOf! gamesConfiguration(v1configuration)\n * @type object\n * @property {gamesConfiguration(v1configuration).LocalizedStringBundle} description Localized strings for the achievement description.\n * @property {string} iconUrl The icon url of this achievement. Writes to this field are ignored.\n * @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesConfiguration#achievementConfigurationDetail.\n * @property {gamesConfiguration(v1configuration).LocalizedStringBundle} name Localized strings for the achievement name.\n * @property {integer} pointValue Point value for the achievement.\n * @property {integer} sortRank The sort rank of this achievement. Writes to this field are ignored.\n */\n/**\n * @typedef AchievementConfigurationListResponse\n * @memberOf! gamesConfiguration(v1configuration)\n * @type object\n * @property {gamesConfiguration(v1configuration).AchievementConfiguration[]} items The achievement configurations.\n * @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string games#achievementConfigurationListResponse.\n * @property {string} nextPageToken The pagination token for the next page of results.\n */\n/**\n * @typedef GamesNumberAffixConfiguration\n * @memberOf! gamesConfiguration(v1configuration)\n * @type object\n * @property {gamesConfiguration(v1configuration).LocalizedStringBundle} few When the language requires special treatment of &quot;small&quot; numbers (as with 2, 3, and 4 in Czech; or numbers ending 2, 3, or 4 but not 12, 13, or 14 in Polish).\n * @property {gamesConfiguration(v1configuration).LocalizedStringBundle} many When the language requires special treatment of &quot;large&quot; numbers (as with numbers ending 11-99 in Maltese).\n * @property {gamesConfiguration(v1configuration).LocalizedStringBundle} one When the language requires special treatment of numbers like one (as with the number 1 in English and most other languages; in Russian, any number ending in 1 but not ending in 11 is in this class).\n * @property {gamesConfiguration(v1configuration).LocalizedStringBundle} other When the language does not require special treatment of the given quantity (as with all numbers in Chinese, or 42 in English).\n * @property {gamesConfiguration(v1configuration).LocalizedStringBundle} two When the language requires special treatment of numbers like two (as with 2 in Welsh, or 102 in Slovenian).\n * @property {gamesConfiguration(v1configuration).LocalizedStringBundle} zero When the language requires special treatment of the number 0 (as in Arabic).\n */\n/**\n * @typedef GamesNumberFormatConfiguration\n * @memberOf! gamesConfiguration(v1configuration)\n * @type object\n* @property {string} currencyCode The curreny code string. Only used for CURRENCY format type.\n* @property {integer} numDecimalPlaces The number of decimal places for number. Only used for NUMERIC format type.\n* @property {string} numberFormatType The formatting for the number.\nPossible values are:  \n- &quot;NUMERIC&quot; - Numbers are formatted to have no digits or a fixed number of digits after the decimal point according to locale. An optional custom unit can be added.\n- &quot;TIME_DURATION&quot; - Numbers are formatted to hours, minutes and seconds.\n- &quot;CURRENCY&quot; - Numbers are formatted to currency according to locale.\n* @property {gamesConfiguration(v1configuration).GamesNumberAffixConfiguration} suffix An optional suffix for the NUMERIC format type. These strings follow the same  plural rules as all Android string resources.\n*/\n/**\n * @typedef ImageConfiguration\n * @memberOf! gamesConfiguration(v1configuration)\n * @type object\n * @property {string} imageType The image type for the image.\n * @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesConfiguration#imageConfiguration.\n * @property {string} resourceId The resource ID of resource which the image belongs to.\n * @property {string} url The url for this image.\n */\n/**\n * @typedef LeaderboardConfiguration\n * @memberOf! gamesConfiguration(v1configuration)\n * @type object\n* @property {gamesConfiguration(v1configuration).LeaderboardConfigurationDetail} draft The draft data of the leaderboard.\n* @property {string} id The ID of the leaderboard.\n* @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesConfiguration#leaderboardConfiguration.\n* @property {gamesConfiguration(v1configuration).LeaderboardConfigurationDetail} published The read-only published data of the leaderboard.\n* @property {string} scoreMax Maximum score that can be posted to this leaderboard.\n* @property {string} scoreMin Minimum score that can be posted to this leaderboard.\n* @property {string} scoreOrder The type of the leaderboard.\nPossible values are:  \n- &quot;LARGER_IS_BETTER&quot; - Larger scores posted are ranked higher. \n- &quot;SMALLER_IS_BETTER&quot; - Smaller scores posted are ranked higher.\n* @property {string} token The token for this resource.\n*/\n/**\n * @typedef LeaderboardConfigurationDetail\n * @memberOf! gamesConfiguration(v1configuration)\n * @type object\n * @property {string} iconUrl The icon url of this leaderboard. Writes to this field are ignored.\n * @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesConfiguration#leaderboardConfigurationDetail.\n * @property {gamesConfiguration(v1configuration).LocalizedStringBundle} name Localized strings for the leaderboard name.\n * @property {gamesConfiguration(v1configuration).GamesNumberFormatConfiguration} scoreFormat The score formatting for the leaderboard.\n * @property {integer} sortRank The sort rank of this leaderboard. Writes to this field are ignored.\n */\n/**\n * @typedef LeaderboardConfigurationListResponse\n * @memberOf! gamesConfiguration(v1configuration)\n * @type object\n * @property {gamesConfiguration(v1configuration).LeaderboardConfiguration[]} items The leaderboard configurations.\n * @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string games#leaderboardConfigurationListResponse.\n * @property {string} nextPageToken The pagination token for the next page of results.\n */\n/**\n * @typedef LocalizedString\n * @memberOf! gamesConfiguration(v1configuration)\n * @type object\n * @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesConfiguration#localizedString.\n * @property {string} locale The locale string.\n * @property {string} value The string value.\n */\n/**\n * @typedef LocalizedStringBundle\n * @memberOf! gamesConfiguration(v1configuration)\n * @type object\n * @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesConfiguration#localizedStringBundle.\n * @property {gamesConfiguration(v1configuration).LocalizedString[]} translations The locale strings.\n */\nmodule.exports = Gamesconfiguration;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/gamesManagement/v1management.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Google Play Game Services Management API\n *\n * The Management API for Google Play Game Services.\n *\n * @example\n * var google = require('googleapis');\n * var gamesManagement = google.gamesManagement('v1management');\n *\n * @namespace gamesManagement\n * @type {Function}\n * @version v1management\n * @variation v1management\n * @param {object=} options Options for Gamesmanagement\n */\nfunction Gamesmanagement(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.achievements = {\n\n    /**\n     * gamesManagement.achievements.reset\n     *\n     * @desc Resets the achievement with the given ID for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.\n     *\n     * @alias gamesManagement.achievements.reset\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.achievementId The ID of the achievement used by this method.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    reset: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/achievements/{achievementId}/reset',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['achievementId'],\n        pathParams: ['achievementId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.achievements.resetAll\n     *\n     * @desc Resets all achievements for the currently authenticated player for your application. This method is only accessible to whitelisted tester accounts for your application.\n     *\n     * @alias gamesManagement.achievements.resetAll\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetAll: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/achievements/reset',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.achievements.resetAllForAllPlayers\n     *\n     * @desc Resets all draft achievements for all players. This method is only available to user accounts for your developer console.\n     *\n     * @alias gamesManagement.achievements.resetAllForAllPlayers\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetAllForAllPlayers: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/achievements/resetAllForAllPlayers',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.achievements.resetForAllPlayers\n     *\n     * @desc Resets the achievement with the given ID for all players. This method is only available to user accounts for your developer console. Only draft achievements can be reset.\n     *\n     * @alias gamesManagement.achievements.resetForAllPlayers\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.achievementId The ID of the achievement used by this method.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetForAllPlayers: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/achievements/{achievementId}/resetForAllPlayers',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['achievementId'],\n        pathParams: ['achievementId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.achievements.resetMultipleForAllPlayers\n     *\n     * @desc Resets achievements with the given IDs for all players. This method is only available to user accounts for your developer console. Only draft achievements may be reset.\n     *\n     * @alias gamesManagement.achievements.resetMultipleForAllPlayers\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object} params Parameters for request\n     * @param {gamesManagement(v1management).AchievementResetMultipleForAllRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetMultipleForAllPlayers: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/achievements/resetMultipleForAllPlayers',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.applications = {\n\n    /**\n     * gamesManagement.applications.listHidden\n     *\n     * @desc Get the list of players hidden from the given application. This method is only available to user accounts for your developer console.\n     *\n     * @alias gamesManagement.applications.listHidden\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.applicationId The application ID from the Google Play developer console.\n     * @param {integer=} params.maxResults The maximum number of player resources to return in the response, used for paging. For any response, the actual number of player resources returned may be less than the specified maxResults.\n     * @param {string=} params.pageToken The token returned by the previous request.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    listHidden: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/applications/{applicationId}/players/hidden',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['applicationId'],\n        pathParams: ['applicationId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.events = {\n\n    /**\n     * gamesManagement.events.reset\n     *\n     * @desc Resets all player progress on the event with the given ID for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application. All quests for this player that use the event will also be reset.\n     *\n     * @alias gamesManagement.events.reset\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.eventId The ID of the event.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    reset: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/events/{eventId}/reset',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['eventId'],\n        pathParams: ['eventId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.events.resetAll\n     *\n     * @desc Resets all player progress on all events for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application. All quests for this player will also be reset.\n     *\n     * @alias gamesManagement.events.resetAll\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetAll: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/events/reset',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.events.resetAllForAllPlayers\n     *\n     * @desc Resets all draft events for all players. This method is only available to user accounts for your developer console. All quests that use any of these events will also be reset.\n     *\n     * @alias gamesManagement.events.resetAllForAllPlayers\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetAllForAllPlayers: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/events/resetAllForAllPlayers',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.events.resetForAllPlayers\n     *\n     * @desc Resets the event with the given ID for all players. This method is only available to user accounts for your developer console. Only draft events can be reset. All quests that use the event will also be reset.\n     *\n     * @alias gamesManagement.events.resetForAllPlayers\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.eventId The ID of the event.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetForAllPlayers: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/events/{eventId}/resetForAllPlayers',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['eventId'],\n        pathParams: ['eventId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.events.resetMultipleForAllPlayers\n     *\n     * @desc Resets events with the given IDs for all players. This method is only available to user accounts for your developer console. Only draft events may be reset. All quests that use any of the events will also be reset.\n     *\n     * @alias gamesManagement.events.resetMultipleForAllPlayers\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object} params Parameters for request\n     * @param {gamesManagement(v1management).EventsResetMultipleForAllRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetMultipleForAllPlayers: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/events/resetMultipleForAllPlayers',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.players = {\n\n    /**\n     * gamesManagement.players.hide\n     *\n     * @desc Hide the given player's leaderboard scores from the given application. This method is only available to user accounts for your developer console.\n     *\n     * @alias gamesManagement.players.hide\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.applicationId The application ID from the Google Play developer console.\n     * @param {string} params.playerId A player ID. A value of me may be used in place of the authenticated player's ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    hide: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/applications/{applicationId}/players/hidden/{playerId}',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['applicationId', 'playerId'],\n        pathParams: ['applicationId', 'playerId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.players.unhide\n     *\n     * @desc Unhide the given player's leaderboard scores from the given application. This method is only available to user accounts for your developer console.\n     *\n     * @alias gamesManagement.players.unhide\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.applicationId The application ID from the Google Play developer console.\n     * @param {string} params.playerId A player ID. A value of me may be used in place of the authenticated player's ID.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    unhide: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/applications/{applicationId}/players/hidden/{playerId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['applicationId', 'playerId'],\n        pathParams: ['applicationId', 'playerId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.quests = {\n\n    /**\n     * gamesManagement.quests.reset\n     *\n     * @desc Resets all player progress on the quest with the given ID for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.\n     *\n     * @alias gamesManagement.quests.reset\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.questId The ID of the quest.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    reset: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/quests/{questId}/reset',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['questId'],\n        pathParams: ['questId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.quests.resetAll\n     *\n     * @desc Resets all player progress on all quests for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.\n     *\n     * @alias gamesManagement.quests.resetAll\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetAll: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/quests/reset',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.quests.resetAllForAllPlayers\n     *\n     * @desc Resets all draft quests for all players. This method is only available to user accounts for your developer console.\n     *\n     * @alias gamesManagement.quests.resetAllForAllPlayers\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetAllForAllPlayers: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/quests/resetAllForAllPlayers',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.quests.resetForAllPlayers\n     *\n     * @desc Resets all player progress on the quest with the given ID for all players. This method is only available to user accounts for your developer console. Only draft quests can be reset.\n     *\n     * @alias gamesManagement.quests.resetForAllPlayers\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.questId The ID of the quest.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetForAllPlayers: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/quests/{questId}/resetForAllPlayers',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['questId'],\n        pathParams: ['questId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.quests.resetMultipleForAllPlayers\n     *\n     * @desc Resets quests with the given IDs for all players. This method is only available to user accounts for your developer console. Only draft quests may be reset.\n     *\n     * @alias gamesManagement.quests.resetMultipleForAllPlayers\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object} params Parameters for request\n     * @param {gamesManagement(v1management).QuestsResetMultipleForAllRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetMultipleForAllPlayers: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/quests/resetMultipleForAllPlayers',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.rooms = {\n\n    /**\n     * gamesManagement.rooms.reset\n     *\n     * @desc Reset all rooms for the currently authenticated player for your application. This method is only accessible to whitelisted tester accounts for your application.\n     *\n     * @alias gamesManagement.rooms.reset\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    reset: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/rooms/reset',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.rooms.resetForAllPlayers\n     *\n     * @desc Deletes rooms where the only room participants are from whitelisted tester accounts for your application. This method is only available to user accounts for your developer console.\n     *\n     * @alias gamesManagement.rooms.resetForAllPlayers\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetForAllPlayers: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/rooms/resetForAllPlayers',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.scores = {\n\n    /**\n     * gamesManagement.scores.reset\n     *\n     * @desc Resets scores for the leaderboard with the given ID for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.\n     *\n     * @alias gamesManagement.scores.reset\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.leaderboardId The ID of the leaderboard.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    reset: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/leaderboards/{leaderboardId}/scores/reset',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['leaderboardId'],\n        pathParams: ['leaderboardId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.scores.resetAll\n     *\n     * @desc Resets all scores for all leaderboards for the currently authenticated players. This method is only accessible to whitelisted tester accounts for your application.\n     *\n     * @alias gamesManagement.scores.resetAll\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetAll: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/scores/reset',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.scores.resetAllForAllPlayers\n     *\n     * @desc Resets scores for all draft leaderboards for all players. This method is only available to user accounts for your developer console.\n     *\n     * @alias gamesManagement.scores.resetAllForAllPlayers\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetAllForAllPlayers: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/scores/resetAllForAllPlayers',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.scores.resetForAllPlayers\n     *\n     * @desc Resets scores for the leaderboard with the given ID for all players. This method is only available to user accounts for your developer console. Only draft leaderboards can be reset.\n     *\n     * @alias gamesManagement.scores.resetForAllPlayers\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.leaderboardId The ID of the leaderboard.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetForAllPlayers: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/leaderboards/{leaderboardId}/scores/resetForAllPlayers',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['leaderboardId'],\n        pathParams: ['leaderboardId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.scores.resetMultipleForAllPlayers\n     *\n     * @desc Resets scores for the leaderboards with the given IDs for all players. This method is only available to user accounts for your developer console. Only draft leaderboards may be reset.\n     *\n     * @alias gamesManagement.scores.resetMultipleForAllPlayers\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object} params Parameters for request\n     * @param {gamesManagement(v1management).ScoresResetMultipleForAllRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetMultipleForAllPlayers: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/scores/resetMultipleForAllPlayers',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.turnBasedMatches = {\n\n    /**\n     * gamesManagement.turnBasedMatches.reset\n     *\n     * @desc Reset all turn-based match data for a user. This method is only accessible to whitelisted tester accounts for your application.\n     *\n     * @alias gamesManagement.turnBasedMatches.reset\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    reset: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/turnbasedmatches/reset',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * gamesManagement.turnBasedMatches.resetForAllPlayers\n     *\n     * @desc Deletes turn-based matches where the only match participants are from whitelisted tester accounts for your application. This method is only available to user accounts for your developer console.\n     *\n     * @alias gamesManagement.turnBasedMatches.resetForAllPlayers\n     * @memberOf! gamesManagement(v1management)\n     *\n     * @param {object=} params Parameters for request\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    resetForAllPlayers: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/games/v1management/turnbasedmatches/resetForAllPlayers',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef AchievementResetAllResponse\n * @memberOf! gamesManagement(v1management)\n * @type object\n * @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#achievementResetAllResponse.\n * @property {gamesManagement(v1management).AchievementResetResponse[]} results The achievement reset results.\n */\n/**\n * @typedef AchievementResetMultipleForAllRequest\n * @memberOf! gamesManagement(v1management)\n * @type object\n * @property {string[]} achievement_ids The IDs of achievements to reset.\n * @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#achievementResetMultipleForAllRequest.\n */\n/**\n * @typedef AchievementResetResponse\n * @memberOf! gamesManagement(v1management)\n * @type object\n* @property {string} currentState The current state of the achievement. This is the same as the initial state of the achievement.\nPossible values are:  \n- &quot;HIDDEN&quot;- Achievement is hidden. \n- &quot;REVEALED&quot; - Achievement is revealed. \n- &quot;UNLOCKED&quot; - Achievement is unlocked.\n* @property {string} definitionId The ID of an achievement for which player state has been updated.\n* @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#achievementResetResponse.\n* @property {boolean} updateOccurred Flag to indicate if the requested update actually occurred.\n*/\n/**\n * @typedef EventsResetMultipleForAllRequest\n * @memberOf! gamesManagement(v1management)\n * @type object\n * @property {string[]} event_ids The IDs of events to reset.\n * @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#eventsResetMultipleForAllRequest.\n */\n/**\n * @typedef GamesPlayedResource\n * @memberOf! gamesManagement(v1management)\n * @type object\n * @property {boolean} autoMatched True if the player was auto-matched with the currently authenticated user.\n * @property {string} timeMillis The last time the player played the game in milliseconds since the epoch in UTC.\n */\n/**\n * @typedef GamesPlayerExperienceInfoResource\n * @memberOf! gamesManagement(v1management)\n * @type object\n * @property {string} currentExperiencePoints The current number of experience points for the player.\n * @property {gamesManagement(v1management).GamesPlayerLevelResource} currentLevel The current level of the player.\n * @property {string} lastLevelUpTimestampMillis The timestamp when the player was leveled up, in millis since Unix epoch UTC.\n * @property {gamesManagement(v1management).GamesPlayerLevelResource} nextLevel The next level of the player. If the current level is the maximum level, this should be same as the current level.\n */\n/**\n * @typedef GamesPlayerLevelResource\n * @memberOf! gamesManagement(v1management)\n * @type object\n * @property {integer} level The level for the user.\n * @property {string} maxExperiencePoints The maximum experience points for this level.\n * @property {string} minExperiencePoints The minimum experience points for this level.\n */\n/**\n * @typedef HiddenPlayer\n * @memberOf! gamesManagement(v1management)\n * @type object\n * @property {string} hiddenTimeMillis The time this player was hidden.\n * @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#hiddenPlayer.\n * @property {gamesManagement(v1management).Player} player The player information.\n */\n/**\n * @typedef HiddenPlayerList\n * @memberOf! gamesManagement(v1management)\n * @type object\n * @property {gamesManagement(v1management).HiddenPlayer[]} items The players.\n * @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#hiddenPlayerList.\n * @property {string} nextPageToken The pagination token for the next page of results.\n */\n/**\n * @typedef Player\n * @memberOf! gamesManagement(v1management)\n * @type object\n * @property {string} avatarImageUrl The base URL for the image that represents the player.\n * @property {string} bannerUrlLandscape The url to the landscape mode player banner image.\n * @property {string} bannerUrlPortrait The url to the portrait mode player banner image.\n * @property {string} displayName The name to display for the player.\n * @property {gamesManagement(v1management).GamesPlayerExperienceInfoResource} experienceInfo An object to represent Play Game experience information for the player.\n * @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#player.\n * @property {gamesManagement(v1management).GamesPlayedResource} lastPlayedWith Details about the last time this player played a multiplayer game with the currently authenticated player. Populated for PLAYED_WITH player collection members.\n * @property {object} name An object representation of the individual components of the player&#39;s name. For some players, these fields may not be present.\n * @property {string} originalPlayerId The player ID that was used for this player the first time they signed into the game in question. This is only populated for calls to player.get for the requesting player, only if the player ID has subsequently changed, and only to clients that support remapping player IDs.\n * @property {string} playerId The ID of the player.\n * @property {gamesManagement(v1management).ProfileSettings} profileSettings The player&#39;s profile settings. Controls whether or not the player&#39;s profile is visible to other players.\n * @property {string} title The player&#39;s title rewarded for their game activities.\n */\n/**\n * @typedef PlayerScoreResetAllResponse\n * @memberOf! gamesManagement(v1management)\n * @type object\n * @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#playerScoreResetResponse.\n * @property {gamesManagement(v1management).PlayerScoreResetResponse[]} results The leaderboard reset results.\n */\n/**\n * @typedef PlayerScoreResetResponse\n * @memberOf! gamesManagement(v1management)\n * @type object\n* @property {string} definitionId The ID of an leaderboard for which player state has been updated.\n* @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#playerScoreResetResponse.\n* @property {string[]} resetScoreTimeSpans The time spans of the updated score.\nPossible values are:  \n- &quot;ALL_TIME&quot; - The score is an all-time score. \n- &quot;WEEKLY&quot; - The score is a weekly score. \n- &quot;DAILY&quot; - The score is a daily score.\n*/\n/**\n * @typedef ProfileSettings\n * @memberOf! gamesManagement(v1management)\n * @type object\n * @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#profileSettings.\n * @property {boolean} profileVisible The player&#39;s current profile visibility. This field is visible to both 1P and 3P APIs.\n */\n/**\n * @typedef QuestsResetMultipleForAllRequest\n * @memberOf! gamesManagement(v1management)\n * @type object\n * @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#questsResetMultipleForAllRequest.\n * @property {string[]} quest_ids The IDs of quests to reset.\n */\n/**\n * @typedef ScoresResetMultipleForAllRequest\n * @memberOf! gamesManagement(v1management)\n * @type object\n * @property {string} kind Uniquely identifies the type of this resource. Value is always the fixed string gamesManagement#scoresResetMultipleForAllRequest.\n * @property {string[]} leaderboard_ids The IDs of leaderboards to reset.\n */\nmodule.exports = Gamesmanagement;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/genomics/v1alpha2.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Genomics API\n *\n * Upload, process, query, and search Genomics data in the cloud.\n *\n * @example\n * var google = require('googleapis');\n * var genomics = google.genomics('v1alpha2');\n *\n * @namespace genomics\n * @type {Function}\n * @version v1alpha2\n * @variation v1alpha2\n * @param {object=} options Options for Genomics\n */\nfunction Genomics(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.operations = {\n\n    /**\n     * genomics.operations.cancel\n     *\n     * @desc Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients may use Operations.GetOperation or Operations.ListOperations to check whether the cancellation succeeded or the operation completed despite cancellation.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1alpha2');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The name of the operation resource to be cancelled.\n     *     name: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   genomics.operations.cancel(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias genomics.operations.cancel\n     * @memberOf! genomics(v1alpha2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.name The name of the operation resource to be cancelled.\n     * @param {genomics(v1alpha2).CancelOperationRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    cancel: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://genomics.googleapis.com/v1alpha2/{name}:cancel',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * genomics.operations.list\n     *\n     * @desc Lists operations that match the specified filter in the request.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1alpha2');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The name of the operation collection.\n     *     name: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var operationsPage = response['operations'];\n     *     if (!operationsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < operationsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `operationsPage`:\n     *       console.log(JSON.stringify(operationsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       genomics.operations.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   genomics.operations.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias genomics.operations.list\n     * @memberOf! genomics(v1alpha2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.filter A string for filtering Operations. The following filter fields are supported&#58;  * projectId&#58; Required. Corresponds to   OperationMetadata.projectId. * createTime&#58; The time this job was created, in seconds from the   [epoch](http://en.wikipedia.org/wiki/Unix_time). Can use `>=` and/or `<=`   operators. * status&#58; Can be `RUNNING`, `SUCCESS`, `FAILURE`, or `CANCELED`. Only   one status may be specified. * labels.key where key is a label key.  Examples&#58;  * `projectId = my-project AND createTime >= 1432140000` * `projectId = my-project AND createTime >= 1432140000 AND createTime <= 1432150000 AND status = RUNNING` * `projectId = my-project AND labels.color = *` * `projectId = my-project AND labels.color = red`\n     * @param {string} params.name The name of the operation collection.\n     * @param {string=} params.pageToken The standard list page token.\n     * @param {integer=} params.pageSize The maximum number of results to return. If unspecified, defaults to 256. The maximum value is 2048.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://genomics.googleapis.com/v1alpha2/{name}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * genomics.operations.get\n     *\n     * @desc Gets the latest state of a long-running operation.  Clients can use this method to poll the operation result at intervals as recommended by the API service.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1alpha2');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The name of the operation resource.\n     *     name: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   genomics.operations.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias genomics.operations.get\n     * @memberOf! genomics(v1alpha2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.name The name of the operation resource.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://genomics.googleapis.com/v1alpha2/{name}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.pipelines = {\n\n    /**\n     * genomics.pipelines.get\n     *\n     * @desc Retrieves a pipeline based on ID.  Caller must have READ permission to the project.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1alpha2');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Caller must have READ access to the project in which this pipeline\n     *     // is defined.\n     *     pipelineId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   genomics.pipelines.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias genomics.pipelines.get\n     * @memberOf! genomics(v1alpha2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.pipelineId Caller must have READ access to the project in which this pipeline is defined.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://genomics.googleapis.com/v1alpha2/pipelines/{pipelineId}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['pipelineId'],\n        pathParams: ['pipelineId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * genomics.pipelines.setOperationStatus\n     *\n     * @desc Sets status of a given operation. Any new timestamps (as determined by description) are appended to TimestampEvents. Should only be called by VMs created by the Pipelines Service and not by end users.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1alpha2');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   genomics.pipelines.setOperationStatus(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias genomics.pipelines.setOperationStatus\n     * @memberOf! genomics(v1alpha2)\n     *\n     * @param {object} params Parameters for request\n     * @param {genomics(v1alpha2).SetOperationStatusRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    setOperationStatus: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://genomics.googleapis.com/v1alpha2/pipelines:setOperationStatus',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * genomics.pipelines.getControllerConfig\n     *\n     * @desc Gets controller configuration information. Should only be called by VMs created by the Pipelines Service and not by end users.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1alpha2');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     auth: authClient\n     *   };\n     *\n     *   genomics.pipelines.getControllerConfig(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias genomics.pipelines.getControllerConfig\n     * @memberOf! genomics(v1alpha2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.operationId The operation to retrieve controller configuration for.\n     * @param {string=} params.validationToken \n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getControllerConfig: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://genomics.googleapis.com/v1alpha2/pipelines:getControllerConfig',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * genomics.pipelines.delete\n     *\n     * @desc Deletes a pipeline based on ID.  Caller must have WRITE permission to the project.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1alpha2');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // Caller must have WRITE access to the project in which this pipeline\n     *     // is defined.\n     *     pipelineId: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   genomics.pipelines.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias genomics.pipelines.delete\n     * @memberOf! genomics(v1alpha2)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.pipelineId Caller must have WRITE access to the project in which this pipeline is defined.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://genomics.googleapis.com/v1alpha2/pipelines/{pipelineId}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['pipelineId'],\n        pathParams: ['pipelineId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * genomics.pipelines.list\n     *\n     * @desc Lists pipelines.  Caller must have READ permission to the project.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1alpha2');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var pipelinesPage = response['pipelines'];\n     *     if (!pipelinesPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < pipelinesPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `pipelinesPage`:\n     *       console.log(JSON.stringify(pipelinesPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       genomics.pipelines.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   genomics.pipelines.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias genomics.pipelines.list\n     * @memberOf! genomics(v1alpha2)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer=} params.pageSize Number of pipelines to return at once. Defaults to 256, and max is 2048.\n     * @param {string=} params.projectId Required. The name of the project to search for pipelines. Caller must have READ access to this project.\n     * @param {string=} params.namePrefix Pipelines with names that match this prefix should be returned.  If unspecified, all pipelines in the project, up to `pageSize`, will be returned.\n     * @param {string=} params.pageToken Token to use to indicate where to start getting results. If unspecified, returns the first page of results.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://genomics.googleapis.com/v1alpha2/pipelines',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * genomics.pipelines.create\n     *\n     * @desc Creates a pipeline that can be run later. Create takes a Pipeline that has all fields other than `pipelineId` populated, and then returns the same pipeline with `pipelineId` populated. This id can be used to run the pipeline.  Caller must have WRITE permission to the project.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1alpha2');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   genomics.pipelines.create(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias genomics.pipelines.create\n     * @memberOf! genomics(v1alpha2)\n     *\n     * @param {object} params Parameters for request\n     * @param {genomics(v1alpha2).Pipeline} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://genomics.googleapis.com/v1alpha2/pipelines',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * genomics.pipelines.run\n     *\n     * @desc Runs a pipeline. If `pipelineId` is specified in the request, then run a saved pipeline. If `ephemeralPipeline` is specified, then run that pipeline once without saving a copy.  The caller must have READ permission to the project where the pipeline is stored and WRITE permission to the project where the pipeline will be run, as VMs will be created and storage will be used.  If a pipeline operation is still running after 6 days, it will be canceled.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Genomics API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/genomics\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var genomics = google.genomics('v1alpha2');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   genomics.pipelines.run(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias genomics.pipelines.run\n     * @memberOf! genomics(v1alpha2)\n     *\n     * @param {object} params Parameters for request\n     * @param {genomics(v1alpha2).RunPipelineRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    run: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://genomics.googleapis.com/v1alpha2/pipelines:run',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef RunPipelineRequest\n * @memberOf! genomics(v1alpha2)\n * @type object\n * @property {string} pipelineId The already created pipeline to run.\n * @property {genomics(v1alpha2).Pipeline} ephemeralPipeline A new pipeline object to run once and then delete.\n * @property {genomics(v1alpha2).RunPipelineArgs} pipelineArgs The arguments to use when running this pipeline.\n */\n/**\n * @typedef CancelOperationRequest\n * @memberOf! genomics(v1alpha2)\n * @type object\n */\n/**\n * @typedef Operation\n * @memberOf! genomics(v1alpha2)\n * @type object\n* @property {genomics(v1alpha2).Status} error The error result of the operation in case of failure or cancellation.\n* @property {object} metadata An OperationMetadata object. This will always be returned with the Operation.\n* @property {boolean} done If the value is `false`, it means the operation is still in progress.\nIf true, the operation is completed, and either `error` or `response` is\navailable.\n* @property {object} response If importing ReadGroupSets, an ImportReadGroupSetsResponse is returned. If importing Variants, an ImportVariantsResponse is returned. For pipelines and exports, an empty response is returned.\n* @property {string} name The server-assigned name, which is only unique within the same service that originally returns it. For example&amp;#58; `operations/CJHU7Oi_ChDrveSpBRjfuL-qzoWAgEw`\n*/\n/**\n * @typedef RuntimeMetadata\n * @memberOf! genomics(v1alpha2)\n * @type object\n * @property {genomics(v1alpha2).ComputeEngine} computeEngine Execution information specific to Google Compute Engine.\n */\n/**\n * @typedef ImportReadGroupSetsResponse\n * @memberOf! genomics(v1alpha2)\n * @type object\n * @property {string[]} readGroupSetIds IDs of the read group sets that were created.\n */\n/**\n * @typedef Status\n * @memberOf! genomics(v1alpha2)\n * @type object\n* @property {integer} code The status code, which should be an enum value of google.rpc.Code.\n* @property {string} message A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.\n* @property {object[]} details A list of messages that carry the error details.  There will be a\ncommon set of message types for APIs to use.\n*/\n/**\n * @typedef ServiceAccount\n * @memberOf! genomics(v1alpha2)\n * @type object\n* @property {string} email Email address of the service account. Defaults to `default`,\nwhich uses the compute service account associated with the project.\n* @property {string[]} scopes List of scopes to be enabled for this service account on the VM.\nThe following scopes are automatically included:\n\n* https://www.googleapis.com/auth/compute\n* https://www.googleapis.com/auth/devstorage.full_control\n* https://www.googleapis.com/auth/genomics\n* https://www.googleapis.com/auth/logging.write\n* https://www.googleapis.com/auth/monitoring.write\n*/\n/**\n * @typedef Pipeline\n * @memberOf! genomics(v1alpha2)\n * @type object\n* @property {genomics(v1alpha2).PipelineResources} resources Required. Specifies resource requirements for the pipeline run.\nRequired fields:\n\n*\nminimumCpuCores\n\n*\nminimumRamGb\n* @property {string} name Required. A user specified pipeline name that does not have to be unique.\nThis name can be used for filtering Pipelines in ListPipelines.\n* @property {string} projectId Required. The project in which to create the pipeline. The caller must have\nWRITE access.\n* @property {string} pipelineId Unique pipeline id that is generated by the service when CreatePipeline\nis called. Cannot be specified in the Pipeline used in the\nCreatePipelineRequest, and will be populated in the response to\nCreatePipeline and all subsequent Get and List calls. Indicates that the\nservice has registered this pipeline.\n* @property {genomics(v1alpha2).PipelineParameter[]} outputParameters Output parameters of the pipeline.\n* @property {genomics(v1alpha2).DockerExecutor} docker Specifies the docker run information.\n* @property {string} description User-specified description.\n* @property {genomics(v1alpha2).PipelineParameter[]} inputParameters Input parameters of the pipeline.\n*/\n/**\n * @typedef PipelineResources\n * @memberOf! genomics(v1alpha2)\n * @type object\n* @property {boolean} noAddress Whether to assign an external IP to the instance. This is an experimental\nfeature that may go away. Defaults to false.\nCorresponds to `--no_address` flag for [gcloud compute instances create]\n(https://cloud.google.com/sdk/gcloud/reference/compute/instances/create).\nIn order to use this, must be true for both create time and run time.\nCannot be true at run time if false at create time. If you need to ssh into\na private IP VM for debugging, you can ssh to a public VM and then ssh into\nthe private VM&#39;s Internal IP.  If noAddress is set, this pipeline run may\nonly load docker images from Google Container Registry and not Docker Hub.\nBefore using this, you must\n[configure access to Google services from internal IPs](https://cloud.google.com/compute/docs/configure-private-google-access#configuring_access_to_google_services_from_internal_ips).\n* @property {genomics(v1alpha2).Disk[]} disks Disks to attach.\n* @property {integer} bootDiskSizeGb The size of the boot disk. Defaults to 10 (GB).\n* @property {boolean} preemptible Whether to use preemptible VMs. Defaults to `false`. In order to use this,\nmust be true for both create time and run time. Cannot be true at run time\nif false at create time.\n* @property {number} minimumRamGb The minimum amount of RAM to use. Defaults to 3.75 (GB)\n* @property {string[]} zones List of Google Compute Engine availability zones to which resource\ncreation will restricted. If empty, any zone may be chosen.\n* @property {integer} minimumCpuCores The minimum number of cores to use. Defaults to 1.\n*/\n/**\n * @typedef OperationEvent\n * @memberOf! genomics(v1alpha2)\n * @type object\n* @property {string} endTime Optional time of when event finished. An event can have a start time and no\nfinish time. If an event has a finish time, there must be a start time.\n* @property {string} startTime Optional time of when event started.\n* @property {string} description Required description of event.\n*/\n/**\n * @typedef ControllerConfig\n * @memberOf! genomics(v1alpha2)\n * @type object\n * @property {string} image \n * @property {string} gcsLogPath \n * @property {object} gcsSources \n * @property {object} gcsSinks \n * @property {object} disks \n * @property {string} machineType \n * @property {string} cmd \n * @property {object} vars \n */\n/**\n * @typedef RepeatedString\n * @memberOf! genomics(v1alpha2)\n * @type object\n * @property {string[]} values \n */\n/**\n * @typedef ListOperationsResponse\n * @memberOf! genomics(v1alpha2)\n * @type object\n * @property {genomics(v1alpha2).Operation[]} operations A list of operations that matches the specified filter in the request.\n * @property {string} nextPageToken The standard List next-page token.\n */\n/**\n * @typedef OperationMetadata\n * @memberOf! genomics(v1alpha2)\n * @type object\n* @property {string} projectId The Google Cloud Project in which the job is scoped.\n* @property {string} clientId This field is deprecated. Use `labels` instead. Optionally provided by the\ncaller when submitting the request that creates the operation.\n* @property {string} endTime The time at which the job stopped running.\n* @property {genomics(v1alpha2).OperationEvent[]} events Optional event messages that were generated during the job&#39;s execution.\nThis also contains any warnings that were generated during import\nor export.\n* @property {string} startTime The time at which the job began to run.\n* @property {object} request The original request that started the operation. Note that this will be in\ncurrent version of the API. If the operation was started with v1beta2 API\nand a GetOperation is performed on v1 API, a v1 request will be returned.\n* @property {object} runtimeMetadata Runtime metadata on this Operation.\n* @property {object} labels Optionally provided by the caller when submitting the request that creates\nthe operation.\n* @property {string} createTime The time at which the job was submitted to the Genomics service.\n*/\n/**\n * @typedef RunPipelineArgs\n * @memberOf! genomics(v1alpha2)\n * @type object\n* @property {object} labels Labels to apply to this pipeline run. Labels will also be applied to\ncompute resources (VM, disks) created by this pipeline run. When listing\noperations, operations can filtered by labels.\nLabel keys may not be empty; label values may be empty. Non-empty labels\nmust be 1-63 characters long, and comply with [RFC1035]\n(https://www.ietf.org/rfc/rfc1035.txt).\nSpecifically, the name must be 1-63 characters long and match the regular\nexpression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first\ncharacter must be a lowercase letter, and all following characters must be\na dash, lowercase letter, or digit, except the last character, which cannot\nbe a dash.\n* @property {genomics(v1alpha2).LoggingOptions} logging Required. Logging options. Used by the service to communicate results\nto the user.\n* @property {string} keepVmAliveOnFailureDuration How long to keep the VM up after a failure (for example docker command\nfailed, copying input or output files failed, etc). While the VM is up, one\ncan ssh into the VM to debug. Default is 0; maximum allowed value is 1 day.\n* @property {genomics(v1alpha2).PipelineResources} resources Specifies resource requirements/overrides for the pipeline run.\n* @property {object} outputs Pipeline output arguments; keys are defined in the pipeline\ndocumentation.  All output parameters of without default values\nmust be specified.  If parameters with defaults are specified\nhere, the defaults will be overridden.\n* @property {string} projectId Required. The project in which to run the pipeline. The caller must have\nWRITER access to all Google Cloud services and resources (e.g. Google\nCompute Engine) will be used.\n* @property {string} clientId This field is deprecated. Use `labels` instead. Client-specified pipeline\noperation identifier.\n* @property {genomics(v1alpha2).ServiceAccount} serviceAccount The Google Cloud Service Account that will be used to access data and\nservices. By default, the compute service account associated with\n`projectId` is used.\n* @property {object} inputs Pipeline input arguments; keys are defined in the pipeline documentation.\nAll input parameters that do not have default values  must be specified.\nIf parameters with defaults are specified here, the defaults will be\noverridden.\n*/\n/**\n * @typedef ListPipelinesResponse\n * @memberOf! genomics(v1alpha2)\n * @type object\n * @property {string} nextPageToken The token to use to get the next page of results.\n * @property {genomics(v1alpha2).Pipeline[]} pipelines The matched pipelines.\n */\n/**\n * @typedef SetOperationStatusRequest\n * @memberOf! genomics(v1alpha2)\n * @type object\n * @property {string} errorCode \n * @property {genomics(v1alpha2).TimestampEvent[]} timestampEvents \n * @property {string} operationId \n * @property {string} errorMessage \n * @property {string} validationToken \n */\n/**\n * @typedef ComputeEngine\n * @memberOf! genomics(v1alpha2)\n * @type object\n * @property {string} instanceName The instance on which the operation is running.\n * @property {string} zone The availability zone in which the instance resides.\n * @property {string} machineType The machine type of the instance.\n * @property {string[]} diskNames The names of the disks that were created for this pipeline.\n */\n/**\n * @typedef ImportVariantsResponse\n * @memberOf! genomics(v1alpha2)\n * @type object\n * @property {string[]} callSetIds IDs of the call sets created during the import.\n */\n/**\n * @typedef TimestampEvent\n * @memberOf! genomics(v1alpha2)\n * @type object\n * @property {string} description String indicating the type of event\n * @property {string} timestamp The time this event occured.\n */\n/**\n * @typedef LocalCopy\n * @memberOf! genomics(v1alpha2)\n * @type object\n* @property {string} disk Required. The name of the disk where this parameter is\nlocated. Can be the name of one of the disks specified in the\nResources field, or &quot;boot&quot;, which represents the Docker\ninstance&#39;s boot disk and has a mount point of `/`.\n* @property {string} path Required. The path within the user&#39;s docker container where\nthis input should be localized to and from, relative to the specified\ndisk&#39;s mount point. For example: file.txt,\n*/\n/**\n * @typedef DockerExecutor\n * @memberOf! genomics(v1alpha2)\n * @type object\n* @property {string} cmd Required. The command or newline delimited script to run. The command\nstring will be executed within a bash shell.\n\nIf the command exits with a non-zero exit code, output parameter\nde-localization will be skipped and the pipeline operation&#39;s\n`error` field will be populated.\n\nMaximum command string length is 16384.\n* @property {string} imageName Required. Image name from either Docker Hub or Google Container Registry.\nUsers that run pipelines must have READ access to the image.\n*/\n/**\n * @typedef Disk\n * @memberOf! genomics(v1alpha2)\n * @type object\n* @property {string} type Required. The type of the disk to create.\n* @property {boolean} autoDelete Deprecated. Disks created by the Pipelines API will be deleted at the end\nof the pipeline run, regardless of what this field is set to.\n* @property {integer} sizeGb The size of the disk. Defaults to 500 (GB).\nThis field is not applicable for local SSD.\n* @property {string} mountPoint Required at create time and cannot be overridden at run time.\nSpecifies the path in the docker container where files on\nthis disk should be located. For example, if `mountPoint`\nis `/mnt/disk`, and the parameter has `localPath`\n`inputs/file.txt`, the docker container can access the data at\n`/mnt/disk/inputs/file.txt`.\n* @property {string} source The full or partial URL of the persistent disk to attach. See\nhttps://cloud.google.com/compute/docs/reference/latest/instances#resource\nand\nhttps://cloud.google.com/compute/docs/disks/persistent-disks#snapshots\nfor more details.\n* @property {string} name Required. The name of the disk that can be used in the pipeline\nparameters. Must be 1 - 63 characters.\nThe name &quot;boot&quot; is reserved for system use.\n*/\n/**\n * @typedef Empty\n * @memberOf! genomics(v1alpha2)\n * @type object\n */\n/**\n * @typedef PipelineParameter\n * @memberOf! genomics(v1alpha2)\n * @type object\n* @property {string} description Human-readable description.\n* @property {genomics(v1alpha2).LocalCopy} localCopy If present, this parameter is marked for copying to and from the VM.\n`LocalCopy` indicates where on the VM the file should be. The value\ngiven to this parameter (either at runtime or using `defaultValue`)\nmust be the remote path where the file should be.\n* @property {string} defaultValue The default value for this parameter. Can be overridden at runtime.\nIf `localCopy` is present, then this must be a Google Cloud Storage path\nbeginning with `gs://`.\n* @property {string} name Required. Name of the parameter - the pipeline runner uses this string\nas the key to the input and output maps in RunPipeline.\n*/\n/**\n * @typedef LoggingOptions\n * @memberOf! genomics(v1alpha2)\n * @type object\n* @property {string} gcsPath The location in Google Cloud Storage to which the pipeline logs\nwill be copied. Can be specified as a fully qualified directory\npath, in which case logs will be output with a unique identifier\nas the filename in that directory, or as a fully specified path,\nwhich must end in `.log`, in which case that path will be\nused, and the user must ensure that logs are not\noverwritten. Stdout and stderr logs from the run are also\ngenerated and output as `-stdout.log` and `-stderr.log`.\n*/\nmodule.exports = Genomics;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/prediction/v1.5.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Prediction API\n *\n * Lets you access a cloud hosted machine learning service that makes it easy to build smart apps\n *\n * @example\n * var google = require('googleapis');\n * var prediction = google.prediction('v1.5');\n *\n * @namespace prediction\n * @type {Function}\n * @version v1.5\n * @variation v1.5\n * @param {object=} options Options for Prediction\n */\nfunction Prediction(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.hostedmodels = {\n\n    /**\n     * prediction.hostedmodels.predict\n     *\n     * @desc Submit input and request an output against a hosted model.\n     *\n     * @alias prediction.hostedmodels.predict\n     * @memberOf! prediction(v1.5)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.hostedModelName The name of a hosted model.\n     * @param {prediction(v1.5).Input} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    predict: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/prediction/v1.5/hostedmodels/{hostedModelName}/predict',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['hostedModelName'],\n        pathParams: ['hostedModelName'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.trainedmodels = {\n\n    /**\n     * prediction.trainedmodels.analyze\n     *\n     * @desc Get analysis of the model and the data the model was trained on.\n     *\n     * @alias prediction.trainedmodels.analyze\n     * @memberOf! prediction(v1.5)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id The unique name for the predictive model.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    analyze: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/prediction/v1.5/trainedmodels/{id}/analyze',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * prediction.trainedmodels.delete\n     *\n     * @desc Delete a trained model.\n     *\n     * @alias prediction.trainedmodels.delete\n     * @memberOf! prediction(v1.5)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id The unique name for the predictive model.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/prediction/v1.5/trainedmodels/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * prediction.trainedmodels.get\n     *\n     * @desc Check training status of your model.\n     *\n     * @alias prediction.trainedmodels.get\n     * @memberOf! prediction(v1.5)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id The unique name for the predictive model.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/prediction/v1.5/trainedmodels/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * prediction.trainedmodels.insert\n     *\n     * @desc Begin training your model.\n     *\n     * @alias prediction.trainedmodels.insert\n     * @memberOf! prediction(v1.5)\n     *\n     * @param {object} params Parameters for request\n     * @param {prediction(v1.5).Training} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/prediction/v1.5/trainedmodels',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * prediction.trainedmodels.list\n     *\n     * @desc List available models.\n     *\n     * @alias prediction.trainedmodels.list\n     * @memberOf! prediction(v1.5)\n     *\n     * @param {object=} params Parameters for request\n     * @param {integer=} params.maxResults Maximum number of results to return\n     * @param {string=} params.pageToken Pagination token\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/prediction/v1.5/trainedmodels/list',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * prediction.trainedmodels.predict\n     *\n     * @desc Submit model id and request a prediction.\n     *\n     * @alias prediction.trainedmodels.predict\n     * @memberOf! prediction(v1.5)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id The unique name for the predictive model.\n     * @param {prediction(v1.5).Input} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    predict: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/prediction/v1.5/trainedmodels/{id}/predict',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * prediction.trainedmodels.update\n     *\n     * @desc Add new data to a trained model.\n     *\n     * @alias prediction.trainedmodels.update\n     * @memberOf! prediction(v1.5)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id The unique name for the predictive model.\n     * @param {prediction(v1.5).Update} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/prediction/v1.5/trainedmodels/{id}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef Analyze\n * @memberOf! prediction(v1.5)\n * @type object\n * @property {object} dataDescription Description of the data the model was trained on.\n * @property {object[]} errors List of errors with the data.\n * @property {string} id The unique name for the predictive model.\n * @property {string} kind What kind of resource this is.\n * @property {object} modelDescription Description of the model.\n * @property {string} selfLink A URL to re-request this resource.\n */\n/**\n * @typedef Input\n * @memberOf! prediction(v1.5)\n * @type object\n * @property {object} input Input to the model for a prediction\n */\n/**\n * @typedef List\n * @memberOf! prediction(v1.5)\n * @type object\n * @property {prediction(v1.5).Training[]} items List of models.\n * @property {string} kind What kind of resource this is.\n * @property {string} nextPageToken Pagination token to fetch the next page, if one exists.\n * @property {string} selfLink A URL to re-request this resource.\n */\n/**\n * @typedef Output\n * @memberOf! prediction(v1.5)\n * @type object\n * @property {string} id The unique name for the predictive model.\n * @property {string} kind What kind of resource this is.\n * @property {string} outputLabel The most likely class label [Categorical models only].\n * @property {object[]} outputMulti A list of class labels with their estimated probabilities [Categorical models only].\n * @property {number} outputValue The estimated regression value [Regression models only].\n * @property {string} selfLink A URL to re-request this resource.\n */\n/**\n * @typedef Training\n * @memberOf! prediction(v1.5)\n * @type object\n * @property {string} created Insert time of the model (as a RFC 3339 timestamp).\n * @property {string} id The unique name for the predictive model.\n * @property {string} kind What kind of resource this is.\n * @property {object} modelInfo Model metadata.\n * @property {string} modelType Type of predictive model (classification or regression)\n * @property {string} selfLink A URL to re-request this resource.\n * @property {string} storageDataLocation Google storage location of the training data file.\n * @property {string} storagePMMLLocation Google storage location of the preprocessing pmml file.\n * @property {string} storagePMMLModelLocation Google storage location of the pmml model file.\n * @property {string} trainingComplete Training completion time (as a RFC 3339 timestamp).\n * @property {object[]} trainingInstances Instances to train model on.\n * @property {string} trainingStatus The current status of the training job. This can be one of following: RUNNING; DONE; ERROR; ERROR: TRAINING JOB NOT FOUND\n * @property {object[]} utility A class weighting function, which allows the importance weights for class labels to be specified [Categorical models only].\n */\n/**\n * @typedef Update\n * @memberOf! prediction(v1.5)\n * @type object\n * @property {any[]} csvInstance The input features for this instance\n * @property {string} label The class label of this instance\n * @property {string} output The generic output value - could be regression value or class label\n */\nmodule.exports = Prediction;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/prediction/v1.6.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Prediction API\n *\n * Lets you access a cloud hosted machine learning service that makes it easy to build smart apps\n *\n * @example\n * var google = require('googleapis');\n * var prediction = google.prediction('v1.6');\n *\n * @namespace prediction\n * @type {Function}\n * @version v1.6\n * @variation v1.6\n * @param {object=} options Options for Prediction\n */\nfunction Prediction(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.hostedmodels = {\n\n    /**\n     * prediction.hostedmodels.predict\n     *\n     * @desc Submit input and request an output against a hosted model.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Prediction API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/prediction\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var prediction = google.prediction('v1.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The project associated with the model.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // The name of a hosted model.\n     *     hostedModelName: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   prediction.hostedmodels.predict(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias prediction.hostedmodels.predict\n     * @memberOf! prediction(v1.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.hostedModelName The name of a hosted model.\n     * @param {string} params.project The project associated with the model.\n     * @param {prediction(v1.6).Input} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    predict: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/prediction/v1.6/projects/{project}/hostedmodels/{hostedModelName}/predict',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'hostedModelName'],\n        pathParams: ['hostedModelName', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.trainedmodels = {\n\n    /**\n     * prediction.trainedmodels.analyze\n     *\n     * @desc Get analysis of the model and the data the model was trained on.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Prediction API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/prediction\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var prediction = google.prediction('v1.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The project associated with the model.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // The unique name for the predictive model.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   prediction.trainedmodels.analyze(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias prediction.trainedmodels.analyze\n     * @memberOf! prediction(v1.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id The unique name for the predictive model.\n     * @param {string} params.project The project associated with the model.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    analyze: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/prediction/v1.6/projects/{project}/trainedmodels/{id}/analyze',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'id'],\n        pathParams: ['id', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * prediction.trainedmodels.delete\n     *\n     * @desc Delete a trained model.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Prediction API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/prediction\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var prediction = google.prediction('v1.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The project associated with the model.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // The unique name for the predictive model.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   prediction.trainedmodels.delete(request, function(err) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias prediction.trainedmodels.delete\n     * @memberOf! prediction(v1.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id The unique name for the predictive model.\n     * @param {string} params.project The project associated with the model.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/prediction/v1.6/projects/{project}/trainedmodels/{id}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'id'],\n        pathParams: ['id', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * prediction.trainedmodels.get\n     *\n     * @desc Check training status of your model.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Prediction API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/prediction\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var prediction = google.prediction('v1.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The project associated with the model.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // The unique name for the predictive model.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   prediction.trainedmodels.get(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias prediction.trainedmodels.get\n     * @memberOf! prediction(v1.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id The unique name for the predictive model.\n     * @param {string} params.project The project associated with the model.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/prediction/v1.6/projects/{project}/trainedmodels/{id}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'id'],\n        pathParams: ['id', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * prediction.trainedmodels.insert\n     *\n     * @desc Train a Prediction API model.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Prediction API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/prediction\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var prediction = google.prediction('v1.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The project associated with the model.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   prediction.trainedmodels.insert(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias prediction.trainedmodels.insert\n     * @memberOf! prediction(v1.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.project The project associated with the model.\n     * @param {prediction(v1.6).Insert} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    insert: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/prediction/v1.6/projects/{project}/trainedmodels',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * prediction.trainedmodels.list\n     *\n     * @desc List available models.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Prediction API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/prediction\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var prediction = google.prediction('v1.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The project associated with the model.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   var handlePage = function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     var itemsPage = response['items'];\n     *     if (!itemsPage) {\n     *       return;\n     *     }\n     *     for (var i = 0; i < itemsPage.length; i++) {\n     *       // TODO: Change code below to process each resource in `itemsPage`:\n     *       console.log(JSON.stringify(itemsPage[i], null, 2));\n     *     }\n     *\n     *     if (response.nextPageToken) {\n     *       request.pageToken = response.nextPageToken;\n     *       prediction.trainedmodels.list(request, handlePage);\n     *     }\n     *   };\n     *\n     *   prediction.trainedmodels.list(request, handlePage);\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias prediction.trainedmodels.list\n     * @memberOf! prediction(v1.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {integer=} params.maxResults Maximum number of results to return.\n     * @param {string=} params.pageToken Pagination token.\n     * @param {string} params.project The project associated with the model.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/prediction/v1.6/projects/{project}/trainedmodels/list',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * prediction.trainedmodels.predict\n     *\n     * @desc Submit model id and request a prediction.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Prediction API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/prediction\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var prediction = google.prediction('v1.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The project associated with the model.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // The unique name for the predictive model.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   prediction.trainedmodels.predict(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias prediction.trainedmodels.predict\n     * @memberOf! prediction(v1.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id The unique name for the predictive model.\n     * @param {string} params.project The project associated with the model.\n     * @param {prediction(v1.6).Input} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    predict: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/prediction/v1.6/projects/{project}/trainedmodels/{id}/predict',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'id'],\n        pathParams: ['id', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * prediction.trainedmodels.update\n     *\n     * @desc Add new data to a trained model.\n     *\n     * @example\n     * // BEFORE RUNNING:\n     * // ---------------\n     * // 1. If not already done, enable the Prediction API\n     * //    and check the quota for your project at\n     * //    https://console.developers.google.com/apis/api/prediction\n     * // 2. This sample uses Application Default Credentials for authentication.\n     * //    If not already done, install the gcloud CLI from\n     * //    https://cloud.google.com/sdk and run\n     * //    `gcloud beta auth application-default login`.\n     * //    For more information, see\n     * //    https://developers.google.com/identity/protocols/application-default-credentials\n     * // 3. Install the Node.js client library by running\n     * //    `npm install googleapis --save`\n     *\n     * var google = require('googleapis');\n     * var prediction = google.prediction('v1.6');\n     *\n     * authorize(function(authClient) {\n     *   var request = {\n     *     // The project associated with the model.\n     *     project: '',  // TODO: Update placeholder value.\n     *\n     *     // The unique name for the predictive model.\n     *     id: '',  // TODO: Update placeholder value.\n     *\n     *     resource: {\n     *       // TODO: Add desired properties to the request body. All existing properties\n     *       // will be replaced.\n     *     },\n     *\n     *     auth: authClient\n     *   };\n     *\n     *   prediction.trainedmodels.update(request, function(err, response) {\n     *     if (err) {\n     *       console.log(err);\n     *       return;\n     *     }\n     *\n     *     // TODO: Change code below to process the `response` object:\n     *     console.log(JSON.stringify(response, null, 2));\n     *   });\n     * });\n     *\n     * function authorize(callback) {\n     *   google.auth.getApplicationDefault(function(err, authClient)) {\n     *     if (err) {\n     *       console.log('authentication failed: ', err);\n     *       return;\n     *     }\n     *     if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n     *       var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n     *       authClient = authClient.createScoped(scopes);\n     *     }\n     *     callback(authClient);\n     *   });\n     * }\n     *\n     * @alias prediction.trainedmodels.update\n     * @memberOf! prediction(v1.6)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.id The unique name for the predictive model.\n     * @param {string} params.project The project associated with the model.\n     * @param {prediction(v1.6).Update} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    update: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/prediction/v1.6/projects/{project}/trainedmodels/{id}',\n          method: 'PUT'\n        }, options),\n        params: params,\n        requiredParams: ['project', 'id'],\n        pathParams: ['id', 'project'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef Analyze\n * @memberOf! prediction(v1.6)\n * @type object\n * @property {object} dataDescription Description of the data the model was trained on.\n * @property {object[]} errors List of errors with the data.\n * @property {string} id The unique name for the predictive model.\n * @property {string} kind What kind of resource this is.\n * @property {object} modelDescription Description of the model.\n * @property {string} selfLink A URL to re-request this resource.\n */\n/**\n * @typedef Input\n * @memberOf! prediction(v1.6)\n * @type object\n * @property {object} input Input to the model for a prediction.\n */\n/**\n * @typedef Insert\n * @memberOf! prediction(v1.6)\n * @type object\n * @property {string} id The unique name for the predictive model.\n * @property {string} modelType Type of predictive model (classification or regression).\n * @property {string} sourceModel The Id of the model to be copied over.\n * @property {string} storageDataLocation Google storage location of the training data file.\n * @property {string} storagePMMLLocation Google storage location of the preprocessing pmml file.\n * @property {string} storagePMMLModelLocation Google storage location of the pmml model file.\n * @property {object[]} trainingInstances Instances to train model on.\n * @property {object[]} utility A class weighting function, which allows the importance weights for class labels to be specified (Categorical models only).\n */\n/**\n * @typedef Insert2\n * @memberOf! prediction(v1.6)\n * @type object\n * @property {string} created Insert time of the model (as a RFC 3339 timestamp).\n * @property {string} id The unique name for the predictive model.\n * @property {string} kind What kind of resource this is.\n * @property {object} modelInfo Model metadata.\n * @property {string} modelType Type of predictive model (CLASSIFICATION or REGRESSION).\n * @property {string} selfLink A URL to re-request this resource.\n * @property {string} storageDataLocation Google storage location of the training data file.\n * @property {string} storagePMMLLocation Google storage location of the preprocessing pmml file.\n * @property {string} storagePMMLModelLocation Google storage location of the pmml model file.\n * @property {string} trainingComplete Training completion time (as a RFC 3339 timestamp).\n * @property {string} trainingStatus The current status of the training job. This can be one of following: RUNNING; DONE; ERROR; ERROR: TRAINING JOB NOT FOUND\n */\n/**\n * @typedef List\n * @memberOf! prediction(v1.6)\n * @type object\n * @property {prediction(v1.6).Insert2[]} items List of models.\n * @property {string} kind What kind of resource this is.\n * @property {string} nextPageToken Pagination token to fetch the next page, if one exists.\n * @property {string} selfLink A URL to re-request this resource.\n */\n/**\n * @typedef Output\n * @memberOf! prediction(v1.6)\n * @type object\n * @property {string} id The unique name for the predictive model.\n * @property {string} kind What kind of resource this is.\n * @property {string} outputLabel The most likely class label (Categorical models only).\n * @property {object[]} outputMulti A list of class labels with their estimated probabilities (Categorical models only).\n * @property {string} outputValue The estimated regression value (Regression models only).\n * @property {string} selfLink A URL to re-request this resource.\n */\n/**\n * @typedef Update\n * @memberOf! prediction(v1.6)\n * @type object\n * @property {any[]} csvInstance The input features for this instance.\n * @property {string} output The generic output value - could be regression or class label.\n */\nmodule.exports = Prediction;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/pubsub/v1beta1a.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Google Cloud Pub/Sub API\n *\n * Provides reliable, many-to-many, asynchronous messaging between applications.\n\n *\n * @example\n * var google = require('googleapis');\n * var pubsub = google.pubsub('v1beta1a');\n *\n * @namespace pubsub\n * @type {Function}\n * @version v1beta1a\n * @variation v1beta1a\n * @param {object=} options Options for Pubsub\n */\nfunction Pubsub(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.subscriptions = {\n\n    /**\n     * pubsub.subscriptions.list\n     *\n     * @desc Lists matching subscriptions.\n     *\n     * @alias pubsub.subscriptions.list\n     * @memberOf! pubsub(v1beta1a)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.pageToken The value obtained in the last <code>ListSubscriptionsResponse</code> for continuation.\n     * @param {string=} params.query A valid label query expression.\n     * @param {integer=} params.maxResults Maximum number of subscriptions to return.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://pubsub.googleapis.com/v1beta1a/subscriptions',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * pubsub.subscriptions.create\n     *\n     * @desc Creates a subscription on a given topic for a given subscriber. If the subscription already exists, returns ALREADY_EXISTS. If the corresponding topic doesn't exist, returns NOT_FOUND.  If the name is not provided in the request, the server will assign a random name for this subscription on the same project as the topic.\n     *\n     * @alias pubsub.subscriptions.create\n     * @memberOf! pubsub(v1beta1a)\n     *\n     * @param {object} params Parameters for request\n     * @param {pubsub(v1beta1a).Subscription} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://pubsub.googleapis.com/v1beta1a/subscriptions',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * pubsub.subscriptions.modifyAckDeadline\n     *\n     * @desc Modifies the Ack deadline for a message received from a pull request.\n     *\n     * @alias pubsub.subscriptions.modifyAckDeadline\n     * @memberOf! pubsub(v1beta1a)\n     *\n     * @param {object} params Parameters for request\n     * @param {pubsub(v1beta1a).ModifyAckDeadlineRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    modifyAckDeadline: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://pubsub.googleapis.com/v1beta1a/subscriptions/modifyAckDeadline',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * pubsub.subscriptions.acknowledge\n     *\n     * @desc Acknowledges a particular received message: the Pub/Sub system can remove the given message from the subscription. Acknowledging a message whose Ack deadline has expired may succeed, but the message could have been already redelivered. Acknowledging a message more than once will not result in an error. This is only used for messages received via pull.\n     *\n     * @alias pubsub.subscriptions.acknowledge\n     * @memberOf! pubsub(v1beta1a)\n     *\n     * @param {object} params Parameters for request\n     * @param {pubsub(v1beta1a).AcknowledgeRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    acknowledge: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://pubsub.googleapis.com/v1beta1a/subscriptions/acknowledge',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * pubsub.subscriptions.get\n     *\n     * @desc Gets the configuration details of a subscription.\n     *\n     * @alias pubsub.subscriptions.get\n     * @memberOf! pubsub(v1beta1a)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.subscription The name of the subscription to get.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://pubsub.googleapis.com/v1beta1a/subscriptions/{subscription}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['subscription'],\n        pathParams: ['subscription'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * pubsub.subscriptions.pullBatch\n     *\n     * @desc Pulls messages from the server. Returns an empty list if there are no messages available in the backlog. The system is free to return UNAVAILABLE if there are too many pull requests outstanding for the given subscription.\n     *\n     * @alias pubsub.subscriptions.pullBatch\n     * @memberOf! pubsub(v1beta1a)\n     *\n     * @param {object} params Parameters for request\n     * @param {pubsub(v1beta1a).PullBatchRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    pullBatch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://pubsub.googleapis.com/v1beta1a/subscriptions/pullBatch',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * pubsub.subscriptions.modifyPushConfig\n     *\n     * @desc Modifies the <code>PushConfig</code> for a specified subscription. This method can be used to suspend the flow of messages to an endpoint by clearing the <code>PushConfig</code> field in the request. Messages will be accumulated for delivery even if no push configuration is defined or while the configuration is modified.\n     *\n     * @alias pubsub.subscriptions.modifyPushConfig\n     * @memberOf! pubsub(v1beta1a)\n     *\n     * @param {object} params Parameters for request\n     * @param {pubsub(v1beta1a).ModifyPushConfigRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    modifyPushConfig: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://pubsub.googleapis.com/v1beta1a/subscriptions/modifyPushConfig',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * pubsub.subscriptions.pull\n     *\n     * @desc Pulls a single message from the server. If return_immediately is true, and no messages are available in the subscription, this method returns FAILED_PRECONDITION. The system is free to return an UNAVAILABLE error if no messages are available in a reasonable amount of time (to reduce system load).\n     *\n     * @alias pubsub.subscriptions.pull\n     * @memberOf! pubsub(v1beta1a)\n     *\n     * @param {object} params Parameters for request\n     * @param {pubsub(v1beta1a).PullRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    pull: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://pubsub.googleapis.com/v1beta1a/subscriptions/pull',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * pubsub.subscriptions.delete\n     *\n     * @desc Deletes an existing subscription. All pending messages in the subscription are immediately dropped. Calls to Pull after deletion will return NOT_FOUND.\n     *\n     * @alias pubsub.subscriptions.delete\n     * @memberOf! pubsub(v1beta1a)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.subscription The subscription to delete.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://pubsub.googleapis.com/v1beta1a/subscriptions/{subscription}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['subscription'],\n        pathParams: ['subscription'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n\n  self.topics = {\n\n    /**\n     * pubsub.topics.get\n     *\n     * @desc Gets the configuration of a topic. Since the topic only has the name attribute, this method is only useful to check the existence of a topic. If other attributes are added in the future, they will be returned here.\n     *\n     * @alias pubsub.topics.get\n     * @memberOf! pubsub(v1beta1a)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.topic The name of the topic to get.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    get: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://pubsub.googleapis.com/v1beta1a/topics/{topic}',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['topic'],\n        pathParams: ['topic'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * pubsub.topics.publish\n     *\n     * @desc Adds a message to the topic.  Returns NOT_FOUND if the topic does not exist.\n     *\n     * @alias pubsub.topics.publish\n     * @memberOf! pubsub(v1beta1a)\n     *\n     * @param {object} params Parameters for request\n     * @param {pubsub(v1beta1a).PublishRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    publish: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://pubsub.googleapis.com/v1beta1a/topics/publish',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * pubsub.topics.delete\n     *\n     * @desc Deletes the topic with the given name. Returns NOT_FOUND if the topic does not exist. After a topic is deleted, a new topic may be created with the same name.\n     *\n     * @alias pubsub.topics.delete\n     * @memberOf! pubsub(v1beta1a)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.topic Name of the topic to delete.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    delete: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://pubsub.googleapis.com/v1beta1a/topics/{topic}',\n          method: 'DELETE'\n        }, options),\n        params: params,\n        requiredParams: ['topic'],\n        pathParams: ['topic'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * pubsub.topics.publishBatch\n     *\n     * @desc Adds one or more messages to the topic. Returns NOT_FOUND if the topic does not exist.\n     *\n     * @alias pubsub.topics.publishBatch\n     * @memberOf! pubsub(v1beta1a)\n     *\n     * @param {object} params Parameters for request\n     * @param {pubsub(v1beta1a).PublishBatchRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    publishBatch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://pubsub.googleapis.com/v1beta1a/topics/publishBatch',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * pubsub.topics.list\n     *\n     * @desc Lists matching topics.\n     *\n     * @alias pubsub.topics.list\n     * @memberOf! pubsub(v1beta1a)\n     *\n     * @param {object} params Parameters for request\n     * @param {string=} params.pageToken The value obtained in the last <code>ListTopicsResponse</code> for continuation.\n     * @param {string=} params.query A valid label query expression.\n     * @param {integer=} params.maxResults Maximum number of topics to return.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    list: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://pubsub.googleapis.com/v1beta1a/topics',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * pubsub.topics.create\n     *\n     * @desc Creates the given topic with the given name.\n     *\n     * @alias pubsub.topics.create\n     * @memberOf! pubsub(v1beta1a)\n     *\n     * @param {object} params Parameters for request\n     * @param {pubsub(v1beta1a).Topic} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    create: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://pubsub.googleapis.com/v1beta1a/topics',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef ModifyAckDeadlineRequest\n * @memberOf! pubsub(v1beta1a)\n * @type object\n* @property {string} subscription Next Index: 5\nThe name of the subscription from which messages are being pulled.\n* @property {string} ackId The acknowledgment ID. Either this or ack_ids must be populated,\nnot both.\n* @property {integer} ackDeadlineSeconds The new ack deadline with respect to the time this request was sent to the\nPub/Sub system. Must be &gt;= 0. For example, if the value is 10, the new ack\ndeadline will expire 10 seconds after the ModifyAckDeadline call was made.\nSpecifying zero may immediately make the message available for another pull\nrequest.\n* @property {string[]} ackIds List of acknowledgment IDs. Either this field or ack_id\nshould be populated, not both.\n*/\n/**\n * @typedef PullBatchRequest\n * @memberOf! pubsub(v1beta1a)\n * @type object\n* @property {string} subscription The subscription from which messages should be pulled.\n* @property {boolean} returnImmediately If this is specified as true the system will respond immediately even if\nit is not able to return a message in the Pull response. Otherwise the\nsystem is allowed to wait until at least one message is available rather\nthan returning no messages. The client may cancel the request if it does\nnot wish to wait any longer for the response.\n* @property {integer} maxEvents The maximum number of PubsubEvents returned for this request. The Pub/Sub\nsystem may return fewer than the number of events specified.\n*/\n/**\n * @typedef ModifyPushConfigRequest\n * @memberOf! pubsub(v1beta1a)\n * @type object\n* @property {pubsub(v1beta1a).PushConfig} pushConfig An empty &lt;code&gt;push_config&lt;/code&gt; indicates that the Pub/Sub system should\npause pushing messages from the given subscription.\n* @property {string} subscription The name of the subscription.\n*/\n/**\n * @typedef PubsubMessage\n * @memberOf! pubsub(v1beta1a)\n * @type object\n* @property {string} data The message payload.\n* @property {string} messageId ID of this message assigned by the server at publication time. Guaranteed\nto be unique within the topic. This value may be read by a subscriber\nthat receives a PubsubMessage via a Pull call or a push delivery. It must\nnot be populated by a publisher in a Publish call.\n* @property {pubsub(v1beta1a).Label[]} label Optional list of labels for this message. Keys in this collection must\nbe unique.\n* @property {string} publishTime The time at which the message was published.\nThe time is milliseconds since the UNIX epoch.\n*/\n/**\n * @typedef AcknowledgeRequest\n * @memberOf! pubsub(v1beta1a)\n * @type object\n* @property {string} subscription The subscription whose message is being acknowledged.\n* @property {string[]} ackId The acknowledgment ID for the message being acknowledged. This was\nreturned by the Pub/Sub system in the Pull response.\n*/\n/**\n * @typedef PullBatchResponse\n * @memberOf! pubsub(v1beta1a)\n * @type object\n* @property {pubsub(v1beta1a).PullResponse[]} pullResponses Received Pub/Sub messages or status events. The Pub/Sub system will return\nzero messages if there are no more messages available in the backlog. The\nPub/Sub system may return fewer than the max_events requested even if\nthere are more messages available in the backlog.\n*/\n/**\n * @typedef Empty\n * @memberOf! pubsub(v1beta1a)\n * @type object\n */\n/**\n * @typedef PublishBatchRequest\n * @memberOf! pubsub(v1beta1a)\n * @type object\n * @property {string} topic The messages in the request will be published on this topic.\n * @property {pubsub(v1beta1a).PubsubMessage[]} messages The messages to publish.\n */\n/**\n * @typedef ListTopicsResponse\n * @memberOf! pubsub(v1beta1a)\n * @type object\n* @property {string} nextPageToken If not empty, indicates that there are more topics that match the request,\nand this value should be passed to the next &lt;code&gt;ListTopicsRequest&lt;/code&gt;\nto continue.\n* @property {pubsub(v1beta1a).Topic[]} topic The resulting topics.\n*/\n/**\n * @typedef PullResponse\n * @memberOf! pubsub(v1beta1a)\n * @type object\n * @property {string} ackId This ID must be used to acknowledge the received event or message.\n * @property {pubsub(v1beta1a).PubsubEvent} pubsubEvent A pubsub message or truncation event.\n */\n/**\n * @typedef PushConfig\n * @memberOf! pubsub(v1beta1a)\n * @type object\n* @property {string} pushEndpoint A URL locating the endpoint to which messages should be pushed.\nFor example, a Webhook endpoint might use &quot;https://example.com/push&quot;.\n*/\n/**\n * @typedef PullRequest\n * @memberOf! pubsub(v1beta1a)\n * @type object\n* @property {string} subscription The subscription from which a message should be pulled.\n* @property {boolean} returnImmediately If this is specified as true the system will respond immediately even if\nit is not able to return a message in the Pull response. Otherwise the\nsystem is allowed to wait until at least one message is available rather\nthan returning FAILED_PRECONDITION. The client may cancel the request if\nit does not wish to wait any longer for the response.\n*/\n/**\n * @typedef ListSubscriptionsResponse\n * @memberOf! pubsub(v1beta1a)\n * @type object\n* @property {pubsub(v1beta1a).Subscription[]} subscription The subscriptions that match the request.\n* @property {string} nextPageToken If not empty, indicates that there are more subscriptions that match the\nrequest and this value should be passed to the next\n&lt;code&gt;ListSubscriptionsRequest&lt;/code&gt; to continue.\n*/\n/**\n * @typedef PubsubEvent\n * @memberOf! pubsub(v1beta1a)\n * @type object\n* @property {boolean} truncated Indicates that this subscription has been truncated.\n* @property {boolean} deleted Indicates that this subscription has been deleted. (Note that pull\nsubscribers will always receive NOT_FOUND in response in their pull\nrequest on the subscription, rather than seeing this boolean.)\n* @property {pubsub(v1beta1a).PubsubMessage} message A received message.\n* @property {string} subscription The subscription that received the event.\n*/\n/**\n * @typedef PublishRequest\n * @memberOf! pubsub(v1beta1a)\n * @type object\n * @property {string} topic The message in the request will be published on this topic.\n * @property {pubsub(v1beta1a).PubsubMessage} message The message to publish.\n */\n/**\n * @typedef Subscription\n * @memberOf! pubsub(v1beta1a)\n * @type object\n* @property {integer} ackDeadlineSeconds For either push or pull delivery, the value is the maximum time after a\nsubscriber receives a message before the subscriber should acknowledge or\nNack the message. If the Ack deadline for a message passes without an\nAck or a Nack, the Pub/Sub system will eventually redeliver the message.\nIf a subscriber acknowledges after the deadline, the Pub/Sub system may\naccept the Ack, but it is possible that the message has been already\ndelivered again. Multiple Acks to the message are allowed and will\nsucceed.\n\nFor push delivery, this value is used to set the request timeout for\nthe call to the push endpoint.\n\nFor pull delivery, this value is used as the initial value for the Ack\ndeadline. It may be overridden for each message using its corresponding\nack_id with &lt;code&gt;ModifyAckDeadline&lt;/code&gt;.\nWhile a message is outstanding (i.e. it has been delivered to a pull\nsubscriber and the subscriber has not yet Acked or Nacked), the Pub/Sub\nsystem will not deliver that message to another pull subscriber\n(on a best-effort basis).\n* @property {string} name Name of the subscription.\n* @property {string} topic The name of the topic from which this subscription is receiving messages.\n* @property {pubsub(v1beta1a).PushConfig} pushConfig If push delivery is used with this subscription, this field is\nused to configure it.\n*/\n/**\n * @typedef PublishBatchResponse\n * @memberOf! pubsub(v1beta1a)\n * @type object\n* @property {string[]} messageIds The server-assigned ID of each published message, in the same order as\nthe messages in the request. IDs are guaranteed to be unique within\nthe topic.\n*/\n/**\n * @typedef Topic\n * @memberOf! pubsub(v1beta1a)\n * @type object\n * @property {string} name Name of the topic.\n */\n/**\n * @typedef Label\n * @memberOf! pubsub(v1beta1a)\n * @type object\n* @property {string} strValue A string value.\n* @property {string} numValue An integer value.\n* @property {string} key The key of a label is a syntactically valid URL (as per RFC 1738) with\nthe &quot;scheme&quot; and initial slashes omitted and with the additional\nrestrictions noted below.  Each key should be globally unique.  The\n&quot;host&quot; portion is called the &quot;namespace&quot; and is not necessarily\nresolvable to a network endpoint.  Instead, the namespace indicates what\nsystem or entity defines the semantics of the label.  Namespaces do not\nrestrict the set of objects to which a label may be associated.\n\nKeys are defined by the following grammar:\n\n  key          = hostname &quot;/&quot; kpath\n  kpath        = ksegment *[ &quot;/&quot; ksegment ]\n  ksegment     = alphadigit | *[ alphadigit | &quot;-&quot; | &quot;_&quot; | &quot;.&quot; ]\n\nwhere &quot;hostname&quot; and &quot;alphadigit&quot; are defined as in RFC 1738.\n\nExample key:\n  spanner.google.com/universe\n*/\nmodule.exports = Pubsub;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/spectrum/v1explorer.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Google Spectrum Database API\n *\n * API for spectrum-management functions.\n *\n * @example\n * var google = require('googleapis');\n * var spectrum = google.spectrum('v1explorer');\n *\n * @namespace spectrum\n * @type {Function}\n * @version v1explorer\n * @variation v1explorer\n * @param {object=} options Options for Spectrum\n */\nfunction Spectrum(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.paws = {\n\n    /**\n     * spectrum.paws.getSpectrum\n     *\n     * @desc Requests information about the available spectrum for a device at a location. Requests from a fixed-mode device must include owner information so the device can be registered with the database.\n     *\n     * @alias spectrum.paws.getSpectrum\n     * @memberOf! spectrum(v1explorer)\n     *\n     * @param {object} params Parameters for request\n     * @param {spectrum(v1explorer).PawsGetSpectrumRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getSpectrum: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/spectrum/v1explorer/paws/getSpectrum',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * spectrum.paws.getSpectrumBatch\n     *\n     * @desc The Google Spectrum Database does not support batch requests, so this method always yields an UNIMPLEMENTED error.\n     *\n     * @alias spectrum.paws.getSpectrumBatch\n     * @memberOf! spectrum(v1explorer)\n     *\n     * @param {object} params Parameters for request\n     * @param {spectrum(v1explorer).PawsGetSpectrumBatchRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getSpectrumBatch: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/spectrum/v1explorer/paws/getSpectrumBatch',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * spectrum.paws.init\n     *\n     * @desc Initializes the connection between a white space device and the database.\n     *\n     * @alias spectrum.paws.init\n     * @memberOf! spectrum(v1explorer)\n     *\n     * @param {object} params Parameters for request\n     * @param {spectrum(v1explorer).PawsInitRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    init: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/spectrum/v1explorer/paws/init',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * spectrum.paws.notifySpectrumUse\n     *\n     * @desc Notifies the database that the device has selected certain frequency ranges for transmission. Only to be invoked when required by the regulator. The Google Spectrum Database does not operate in domains that require notification, so this always yields an UNIMPLEMENTED error.\n     *\n     * @alias spectrum.paws.notifySpectrumUse\n     * @memberOf! spectrum(v1explorer)\n     *\n     * @param {object} params Parameters for request\n     * @param {spectrum(v1explorer).PawsNotifySpectrumUseRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    notifySpectrumUse: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/spectrum/v1explorer/paws/notifySpectrumUse',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * spectrum.paws.register\n     *\n     * @desc The Google Spectrum Database implements registration in the getSpectrum method. As such this always returns an UNIMPLEMENTED error.\n     *\n     * @alias spectrum.paws.register\n     * @memberOf! spectrum(v1explorer)\n     *\n     * @param {object} params Parameters for request\n     * @param {spectrum(v1explorer).PawsRegisterRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    register: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/spectrum/v1explorer/paws/register',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * spectrum.paws.verifyDevice\n     *\n     * @desc Validates a device for white space use in accordance with regulatory rules. The Google Spectrum Database does not support master/slave configurations, so this always yields an UNIMPLEMENTED error.\n     *\n     * @alias spectrum.paws.verifyDevice\n     * @memberOf! spectrum(v1explorer)\n     *\n     * @param {object} params Parameters for request\n     * @param {spectrum(v1explorer).PawsVerifyDeviceRequest} params.resource Request body data\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    verifyDevice: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/spectrum/v1explorer/paws/verifyDevice',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: [],\n        pathParams: [],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    }\n\n  };\n}\n\n/**\n * @typedef AntennaCharacteristics\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {number} height The antenna height in meters. Whether the antenna height is required depends on the device type and the regulatory domain. Note that the height may be negative.\n * @property {string} heightType If the height is required, then the height type (AGL for above ground level or AMSL for above mean sea level) is also required. The default is AGL.\n * @property {number} heightUncertainty The height uncertainty in meters. Whether this is required depends on the regulatory domain.\n */\n/**\n * @typedef DatabaseSpec\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {string} name The display name for a database.\n * @property {string} uri The corresponding URI of the database.\n */\n/**\n * @typedef DbUpdateSpec\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {spectrum(v1explorer).DatabaseSpec[]} databases A required list of one or more databases. A device should update its preconfigured list of databases to replace (only) the database that provided the response with the specified entries.\n */\n/**\n * @typedef DeviceCapabilities\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {spectrum(v1explorer).FrequencyRange[]} frequencyRanges An optional list of frequency ranges supported by the device. Each element must contain start and stop frequencies in which the device can operate. Channel identifiers are optional. When specified, the database should not return available spectrum that falls outside these ranges or channel IDs.\n */\n/**\n * @typedef DeviceDescriptor\n * @memberOf! spectrum(v1explorer)\n * @type object\n* @property {string} etsiEnDeviceCategory Specifies the ETSI white space device category. Valid values are the strings master and slave. This field is case-insensitive. Consult the ETSI documentation for details about the device types.\n* @property {string} etsiEnDeviceEmissionsClass Specifies the ETSI white space device emissions class. The values are represented by numeric strings, such as 1, 2, etc. Consult the ETSI documentation for details about the device types.\n* @property {string} etsiEnDeviceType Specifies the ETSI white space device type. Valid values are single-letter strings, such as A, B, etc. Consult the ETSI documentation for details about the device types.\n* @property {string} etsiEnTechnologyId Specifies the ETSI white space device technology identifier. The string value must not exceed 64 characters in length. Consult the ETSI documentation for details about the device types.\n* @property {string} fccId Specifies the device&#39;s FCC certification identifier. The value is an identifier string whose length should not exceed 32 characters. Note that, in practice, a valid FCC ID may be limited to 19 characters.\n* @property {string} fccTvbdDeviceType Specifies the TV Band White Space device type, as defined by the FCC. Valid values are FIXED, MODE_1, MODE_2.\n* @property {string} manufacturerId The manufacturer&#39;s ID may be required by the regulatory domain. This should represent the name of the device manufacturer, should be consistent across all devices from the same manufacturer, and should be distinct from that of other manufacturers. The string value must not exceed 64 characters in length.\n* @property {string} modelId The device&#39;s model ID may be required by the regulatory domain. The string value must not exceed 64 characters in length.\n* @property {string[]} rulesetIds The list of identifiers for rulesets supported by the device. A database may require that the device provide this list before servicing the device requests. If the database does not support any of the rulesets specified in the list, the database may refuse to service the device requests. If present, the list must contain at least one entry.\n\nFor information about the valid requests, see section 9.2 of the PAWS specification. Currently, FccTvBandWhiteSpace-2010 is the only supported ruleset.\n* @property {string} serialNumber The manufacturer&#39;s device serial number; required by the applicable regulatory domain. The length of the value must not exceed 64 characters.\n*/\n/**\n * @typedef DeviceOwner\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {spectrum(v1explorer).Vcard} operator The vCard contact information for the device operator is optional, but may be required by specific regulatory domains.\n * @property {spectrum(v1explorer).Vcard} owner The vCard contact information for the individual or business that owns the device is required.\n */\n/**\n * @typedef DeviceValidity\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {spectrum(v1explorer).DeviceDescriptor} deviceDesc The descriptor of the device for which the validity check was requested. It will always be present.\n * @property {boolean} isValid The validity status: true if the device is valid for operation, false otherwise. It will always be present.\n * @property {string} reason If the device identifier is not valid, the database may include a reason. The reason may be in any language. The length of the value should not exceed 128 characters.\n */\n/**\n * @typedef EventTime\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {string} startTime The inclusive start of the event. It will be present.\n * @property {string} stopTime The exclusive end of the event. It will be present.\n */\n/**\n * @typedef FrequencyRange\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {string} channelId The database may include a channel identifier, when applicable. When it is included, the device should treat it as informative. The length of the identifier should not exceed 16 characters.\n * @property {number} maxPowerDBm The maximum total power level (EIRP)—computed over the corresponding operating bandwidth—that is permitted within the frequency range. Depending on the context in which the frequency-range element appears, this value may be required. For example, it is required in the available-spectrum response, available-spectrum-batch response, and spectrum-use notification message, but it should not be present (it is not applicable) when the frequency range appears inside a device-capabilities message.\n * @property {number} startHz The required inclusive start of the frequency range (in Hertz).\n * @property {number} stopHz The required exclusive end of the frequency range (in Hertz).\n */\n/**\n * @typedef GeoLocation\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {integer} confidence The location confidence level, as an integer percentage, may be required, depending on the regulatory domain. When the parameter is optional and not provided, its value is assumed to be 95. Valid values range from 0 to 99, since, in practice, 100-percent confidence is not achievable. The confidence value is meaningful only when geolocation refers to a point with uncertainty.\n * @property {spectrum(v1explorer).GeoLocationEllipse} point If present, indicates that the geolocation represents a point. Paradoxically, a point is parameterized using an ellipse, where the center represents the location of the point and the distances along the major and minor axes represent the uncertainty. The uncertainty values may be required, depending on the regulatory domain.\n * @property {spectrum(v1explorer).GeoLocationPolygon} region If present, indicates that the geolocation represents a region. Database support for regions is optional.\n */\n/**\n * @typedef GeoLocationEllipse\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {spectrum(v1explorer).GeoLocationPoint} center A required geo-spatial point representing the center of the ellipse.\n * @property {number} orientation A floating-point number that expresses the orientation of the ellipse, representing the rotation, in degrees, of the semi-major axis from North towards the East. For example, when the uncertainty is greatest along the North-South direction, orientation is 0 degrees; conversely, if the uncertainty is greatest along the East-West direction, orientation is 90 degrees. When orientation is not present, the orientation is assumed to be 0.\n * @property {number} semiMajorAxis A floating-point number that expresses the location uncertainty along the major axis of the ellipse. May be required by the regulatory domain. When the uncertainty is optional, the default value is 0.\n * @property {number} semiMinorAxis A floating-point number that expresses the location uncertainty along the minor axis of the ellipse. May be required by the regulatory domain. When the uncertainty is optional, the default value is 0.\n */\n/**\n * @typedef GeoLocationPoint\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {number} latitude A required floating-point number that expresses the latitude in degrees using the WGS84 datum. For details on this encoding, see the National Imagery and Mapping Agency&#39;s Technical Report TR8350.2.\n * @property {number} longitude A required floating-point number that expresses the longitude in degrees using the WGS84 datum. For details on this encoding, see the National Imagery and Mapping Agency&#39;s Technical Report TR8350.2.\n */\n/**\n * @typedef GeoLocationPolygon\n * @memberOf! spectrum(v1explorer)\n * @type object\n* @property {spectrum(v1explorer).GeoLocationPoint[]} exterior When the geolocation describes a region, the exterior field refers to a list of latitude/longitude points that represent the vertices of a polygon. The first and last points must be the same. Thus, a minimum of four points is required. The following polygon restrictions from RFC5491 apply:  \n- A connecting line shall not cross another connecting line of the same polygon. \n- The vertices must be defined in a counterclockwise order. \n- The edges of a polygon are defined by the shortest path between two points in space (not a geodesic curve). Consequently, the length between two adjacent vertices should be restricted to a maximum of 130 km. \n- All vertices are assumed to be at the same altitude. \n- Polygon shapes should be restricted to a maximum of 15 vertices (16 points that include the repeated vertex).\n*/\n/**\n * @typedef GeoSpectrumSchedule\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {spectrum(v1explorer).GeoLocation} location The geolocation identifies the location at which the spectrum schedule applies. It will always be present.\n * @property {spectrum(v1explorer).SpectrumSchedule[]} spectrumSchedules A list of available spectrum profiles and associated times. It will always be present, and at least one schedule must be included (though it may be empty if there is no available spectrum). More than one schedule may be included to represent future changes to the available spectrum.\n */\n/**\n * @typedef PawsGetSpectrumBatchRequest\n * @memberOf! spectrum(v1explorer)\n * @type object\n* @property {spectrum(v1explorer).AntennaCharacteristics} antenna Depending on device type and regulatory domain, antenna characteristics may be required.\n* @property {spectrum(v1explorer).DeviceCapabilities} capabilities The master device may include its device capabilities to limit the available-spectrum batch response to the spectrum that is compatible with its capabilities. The database should not return spectrum that is incompatible with the specified capabilities.\n* @property {spectrum(v1explorer).DeviceDescriptor} deviceDesc When the available spectrum request is made on behalf of a specific device (a master or slave device), device descriptor information for the device on whose behalf the request is made is required (in such cases, the requestType parameter must be empty). When a requestType value is specified, device descriptor information may be optional or required according to the rules of the applicable regulatory domain.\n* @property {spectrum(v1explorer).GeoLocation[]} locations A geolocation list is required. This allows a device to specify its current location plus additional anticipated locations when allowed by the regulatory domain. At least one location must be included. Geolocation must be given as the location of the radiation center of the device&#39;s antenna. If a location specifies a region, rather than a point, the database may return an UNIMPLEMENTED error if it does not support query by region.\n\nThere is no upper limit on the number of locations included in a available spectrum batch request, but the database may restrict the number of locations it supports by returning a response with fewer locations than specified in the batch request. Note that geolocations must be those of the master device (a device with geolocation capability that makes an available spectrum batch request), whether the master device is making the request on its own behalf or on behalf of a slave device (one without geolocation capability).\n* @property {spectrum(v1explorer).DeviceDescriptor} masterDeviceDesc When an available spectrum batch request is made by the master device (a device with geolocation capability) on behalf of a slave device (a device without geolocation capability), the rules of the applicable regulatory domain may require the master device to provide its own device descriptor information (in addition to device descriptor information for the slave device in a separate parameter).\n* @property {spectrum(v1explorer).DeviceOwner} owner Depending on device type and regulatory domain, device owner information may be included in an available spectrum batch request. This allows the device to register and get spectrum-availability information in a single request.\n* @property {string} requestType The request type parameter is an optional parameter that can be used to modify an available spectrum batch request, but its use depends on applicable regulatory rules. For example, It may be used to request generic slave device parameters without having to specify the device descriptor for a specific device. When the requestType parameter is missing, the request is for a specific device (master or slave), and the device descriptor parameter for the device on whose behalf the batch request is made is required.\n* @property {string} type The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).\n\nRequired field.\n* @property {string} version The PAWS version. Must be exactly 1.0.\n\nRequired field.\n*/\n/**\n * @typedef PawsGetSpectrumBatchResponse\n * @memberOf! spectrum(v1explorer)\n * @type object\n* @property {spectrum(v1explorer).DbUpdateSpec} databaseChange A database may include the databaseChange parameter to notify a device of a change to its database URI, providing one or more alternate database URIs. The device should use this information to update its list of pre-configured databases by (only) replacing its entry for the responding database with the list of alternate URIs.\n* @property {spectrum(v1explorer).DeviceDescriptor} deviceDesc The database must return in its available spectrum response the device descriptor information it received in the master device&#39;s available spectrum batch request.\n* @property {spectrum(v1explorer).GeoSpectrumSchedule[]} geoSpectrumSchedules The available spectrum batch response must contain a geo-spectrum schedule list, The list may be empty if spectrum is not available. The database may return more than one geo-spectrum schedule to represent future changes to the available spectrum. How far in advance a schedule may be provided depends upon the applicable regulatory domain. The database may return available spectrum for fewer geolocations than requested. The device must not make assumptions about the order of the entries in the list, and must use the geolocation value in each geo-spectrum schedule entry to match available spectrum to a location.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;spectrum#pawsGetSpectrumBatchResponse&quot;.\n* @property {number} maxContiguousBwHz The database may return a constraint on the allowed maximum contiguous bandwidth (in Hertz). A regulatory domain may require the database to return this parameter. When this parameter is present in the response, the device must apply this constraint to its spectrum-selection logic to ensure that no single block of spectrum has bandwidth that exceeds this value.\n* @property {number} maxTotalBwHz The database may return a constraint on the allowed maximum total bandwidth (in Hertz), which does not need to be contiguous. A regulatory domain may require the database to return this parameter. When this parameter is present in the available spectrum batch response, the device must apply this constraint to its spectrum-selection logic to ensure that total bandwidth does not exceed this value.\n* @property {boolean} needsSpectrumReport For regulatory domains that require a spectrum-usage report from devices, the database must return true for this parameter if the geo-spectrum schedules list is not empty; otherwise, the database should either return false or omit this parameter. If this parameter is present and its value is true, the device must send a spectrum use notify message to the database; otherwise, the device should not send the notification.\n* @property {spectrum(v1explorer).RulesetInfo} rulesetInfo The database should return ruleset information, which identifies the applicable regulatory authority and ruleset for the available spectrum batch response. If included, the device must use the corresponding ruleset to interpret the response. Values provided in the returned ruleset information, such as maxLocationChange, take precedence over any conflicting values provided in the ruleset information returned in a prior initialization response sent by the database to the device.\n* @property {string} timestamp The database includes a timestamp of the form, YYYY-MM-DDThh:mm:ssZ (Internet timestamp format per RFC3339), in its available spectrum batch response. The timestamp should be used by the device as a reference for the start and stop times specified in the response spectrum schedules.\n* @property {string} type The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).\n\nRequired field.\n* @property {string} version The PAWS version. Must be exactly 1.0.\n\nRequired field.\n*/\n/**\n * @typedef PawsGetSpectrumRequest\n * @memberOf! spectrum(v1explorer)\n * @type object\n* @property {spectrum(v1explorer).AntennaCharacteristics} antenna Depending on device type and regulatory domain, the characteristics of the antenna may be required.\n* @property {spectrum(v1explorer).DeviceCapabilities} capabilities The master device may include its device capabilities to limit the available-spectrum response to the spectrum that is compatible with its capabilities. The database should not return spectrum that is incompatible with the specified capabilities.\n* @property {spectrum(v1explorer).DeviceDescriptor} deviceDesc When the available spectrum request is made on behalf of a specific device (a master or slave device), device descriptor information for that device is required (in such cases, the requestType parameter must be empty). When a requestType value is specified, device descriptor information may be optional or required according to the rules of the applicable regulatory domain.\n* @property {spectrum(v1explorer).GeoLocation} location The geolocation of the master device (a device with geolocation capability that makes an available spectrum request) is required whether the master device is making the request on its own behalf or on behalf of a slave device (one without geolocation capability). The location must be the location of the radiation center of the master device&#39;s antenna. To support mobile devices, a regulatory domain may allow the anticipated position of the master device to be given instead. If the location specifies a region, rather than a point, the database may return an UNIMPLEMENTED error code if it does not support query by region.\n* @property {spectrum(v1explorer).DeviceDescriptor} masterDeviceDesc When an available spectrum request is made by the master device (a device with geolocation capability) on behalf of a slave device (a device without geolocation capability), the rules of the applicable regulatory domain may require the master device to provide its own device descriptor information (in addition to device descriptor information for the slave device, which is provided in a separate parameter).\n* @property {spectrum(v1explorer).DeviceOwner} owner Depending on device type and regulatory domain, device owner information may be included in an available spectrum request. This allows the device to register and get spectrum-availability information in a single request.\n* @property {string} requestType The request type parameter is an optional parameter that can be used to modify an available spectrum request, but its use depends on applicable regulatory rules. It may be used, for example, to request generic slave device parameters without having to specify the device descriptor for a specific device. When the requestType parameter is missing, the request is for a specific device (master or slave), and the deviceDesc parameter for the device on whose behalf the request is made is required.\n* @property {string} type The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).\n\nRequired field.\n* @property {string} version The PAWS version. Must be exactly 1.0.\n\nRequired field.\n*/\n/**\n * @typedef PawsGetSpectrumResponse\n * @memberOf! spectrum(v1explorer)\n * @type object\n* @property {spectrum(v1explorer).DbUpdateSpec} databaseChange A database may include the databaseChange parameter to notify a device of a change to its database URI, providing one or more alternate database URIs. The device should use this information to update its list of pre-configured databases by (only) replacing its entry for the responding database with the list of alternate URIs.\n* @property {spectrum(v1explorer).DeviceDescriptor} deviceDesc The database must return, in its available spectrum response, the device descriptor information it received in the master device&#39;s available spectrum request.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;spectrum#pawsGetSpectrumResponse&quot;.\n* @property {number} maxContiguousBwHz The database may return a constraint on the allowed maximum contiguous bandwidth (in Hertz). A regulatory domain may require the database to return this parameter. When this parameter is present in the response, the device must apply this constraint to its spectrum-selection logic to ensure that no single block of spectrum has bandwidth that exceeds this value.\n* @property {number} maxTotalBwHz The database may return a constraint on the allowed maximum total bandwidth (in Hertz), which need not be contiguous. A regulatory domain may require the database to return this parameter. When this parameter is present in the available spectrum response, the device must apply this constraint to its spectrum-selection logic to ensure that total bandwidth does not exceed this value.\n* @property {boolean} needsSpectrumReport For regulatory domains that require a spectrum-usage report from devices, the database must return true for this parameter if the spectrum schedule list is not empty; otherwise, the database will either return false or omit this parameter. If this parameter is present and its value is true, the device must send a spectrum use notify message to the database; otherwise, the device must not send the notification.\n* @property {spectrum(v1explorer).RulesetInfo} rulesetInfo The database should return ruleset information, which identifies the applicable regulatory authority and ruleset for the available spectrum response. If included, the device must use the corresponding ruleset to interpret the response. Values provided in the returned ruleset information, such as maxLocationChange, take precedence over any conflicting values provided in the ruleset information returned in a prior initialization response sent by the database to the device.\n* @property {spectrum(v1explorer).SpectrumSchedule[]} spectrumSchedules The available spectrum response must contain a spectrum schedule list. The list may be empty if spectrum is not available. The database may return more than one spectrum schedule to represent future changes to the available spectrum. How far in advance a schedule may be provided depends on the applicable regulatory domain.\n* @property {string} timestamp The database includes a timestamp of the form YYYY-MM-DDThh:mm:ssZ (Internet timestamp format per RFC3339) in its available spectrum response. The timestamp should be used by the device as a reference for the start and stop times specified in the response spectrum schedules.\n* @property {string} type The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).\n\nRequired field.\n* @property {string} version The PAWS version. Must be exactly 1.0.\n\nRequired field.\n*/\n/**\n * @typedef PawsInitRequest\n * @memberOf! spectrum(v1explorer)\n * @type object\n* @property {spectrum(v1explorer).DeviceDescriptor} deviceDesc The DeviceDescriptor parameter is required. If the database does not support the device or any of the rulesets specified in the device descriptor, it must return an UNSUPPORTED error code in the error response.\n* @property {spectrum(v1explorer).GeoLocation} location A device&#39;s geolocation is required.\n* @property {string} type The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).\n\nRequired field.\n* @property {string} version The PAWS version. Must be exactly 1.0.\n\nRequired field.\n*/\n/**\n * @typedef PawsInitResponse\n * @memberOf! spectrum(v1explorer)\n * @type object\n* @property {spectrum(v1explorer).DbUpdateSpec} databaseChange A database may include the databaseChange parameter to notify a device of a change to its database URI, providing one or more alternate database URIs. The device should use this information to update its list of pre-configured databases by (only) replacing its entry for the responding database with the list of alternate URIs.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;spectrum#pawsInitResponse&quot;.\n* @property {spectrum(v1explorer).RulesetInfo} rulesetInfo The rulesetInfo parameter must be included in the response. This parameter specifies the regulatory domain and parameters applicable to that domain. The database must include the authority field, which defines the regulatory domain for the location specified in the INIT_REQ message.\n* @property {string} type The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).\n\nRequired field.\n* @property {string} version The PAWS version. Must be exactly 1.0.\n\nRequired field.\n*/\n/**\n * @typedef PawsNotifySpectrumUseRequest\n * @memberOf! spectrum(v1explorer)\n * @type object\n* @property {spectrum(v1explorer).DeviceDescriptor} deviceDesc Device descriptor information is required in the spectrum-use notification message.\n* @property {spectrum(v1explorer).GeoLocation} location The geolocation of the master device (the device that is sending the spectrum-use notification) to the database is required in the spectrum-use notification message.\n* @property {spectrum(v1explorer).SpectrumMessage[]} spectra A spectrum list is required in the spectrum-use notification. The list specifies the spectrum that the device expects to use, which includes frequency ranges and maximum power levels. The list may be empty if the device decides not to use any of spectrum. For consistency, the psdBandwidthHz value should match that from one of the spectrum elements in the corresponding available spectrum response previously sent to the device by the database. Note that maximum power levels in the spectrum element must be expressed as power spectral density over the specified psdBandwidthHz value. The actual bandwidth to be used (as computed from the start and stop frequencies) may be different from the psdBandwidthHz value. As an example, when regulatory rules express maximum power spectral density in terms of maximum power over any 100 kHz band, then the psdBandwidthHz value should be set to 100 kHz, even though the actual bandwidth used can be 20 kHz.\n* @property {string} type The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).\n\nRequired field.\n* @property {string} version The PAWS version. Must be exactly 1.0.\n\nRequired field.\n*/\n/**\n * @typedef PawsNotifySpectrumUseResponse\n * @memberOf! spectrum(v1explorer)\n * @type object\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;spectrum#pawsNotifySpectrumUseResponse&quot;.\n* @property {string} type The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).\n\nRequired field.\n* @property {string} version The PAWS version. Must be exactly 1.0.\n\nRequired field.\n*/\n/**\n * @typedef PawsRegisterRequest\n * @memberOf! spectrum(v1explorer)\n * @type object\n* @property {spectrum(v1explorer).AntennaCharacteristics} antenna Antenna characteristics, including its height and height type.\n* @property {spectrum(v1explorer).DeviceDescriptor} deviceDesc A DeviceDescriptor is required.\n* @property {spectrum(v1explorer).DeviceOwner} deviceOwner Device owner information is required.\n* @property {spectrum(v1explorer).GeoLocation} location A device&#39;s geolocation is required.\n* @property {string} type The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).\n\nRequired field.\n* @property {string} version The PAWS version. Must be exactly 1.0.\n\nRequired field.\n*/\n/**\n * @typedef PawsRegisterResponse\n * @memberOf! spectrum(v1explorer)\n * @type object\n* @property {spectrum(v1explorer).DbUpdateSpec} databaseChange A database may include the databaseChange parameter to notify a device of a change to its database URI, providing one or more alternate database URIs. The device should use this information to update its list of pre-configured databases by (only) replacing its entry for the responding database with the list of alternate URIs.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;spectrum#pawsRegisterResponse&quot;.\n* @property {string} type The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).\n\nRequired field.\n* @property {string} version The PAWS version. Must be exactly 1.0.\n\nRequired field.\n*/\n/**\n * @typedef PawsVerifyDeviceRequest\n * @memberOf! spectrum(v1explorer)\n * @type object\n* @property {spectrum(v1explorer).DeviceDescriptor[]} deviceDescs A list of device descriptors, which specifies the slave devices to be validated, is required.\n* @property {string} type The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).\n\nRequired field.\n* @property {string} version The PAWS version. Must be exactly 1.0.\n\nRequired field.\n*/\n/**\n * @typedef PawsVerifyDeviceResponse\n * @memberOf! spectrum(v1explorer)\n * @type object\n* @property {spectrum(v1explorer).DbUpdateSpec} databaseChange A database may include the databaseChange parameter to notify a device of a change to its database URI, providing one or more alternate database URIs. The device should use this information to update its list of pre-configured databases by (only) replacing its entry for the responding database with the list of alternate URIs.\n* @property {spectrum(v1explorer).DeviceValidity[]} deviceValidities A device validities list is required in the device validation response to report whether each slave device listed in a previous device validation request is valid. The number of entries must match the number of device descriptors listed in the previous device validation request.\n* @property {string} kind Identifies what kind of resource this is. Value: the fixed string &quot;spectrum#pawsVerifyDeviceResponse&quot;.\n* @property {string} type The message type (e.g., INIT_REQ, AVAIL_SPECTRUM_REQ, ...).\n\nRequired field.\n* @property {string} version The PAWS version. Must be exactly 1.0.\n\nRequired field.\n*/\n/**\n * @typedef RulesetInfo\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {string} authority The regulatory domain to which the ruleset belongs is required. It must be a 2-letter country code. The device should use this to determine additional device behavior required by the associated regulatory domain.\n * @property {number} maxLocationChange The maximum location change in meters is required in the initialization response, but optional otherwise. When the device changes location by more than this specified distance, it must contact the database to get the available spectrum for the new location. If the device is using spectrum that is no longer available, it must immediately cease use of the spectrum under rules for database-managed spectrum. If this value is provided within the context of an available-spectrum response, it takes precedence over the value within the initialization response.\n * @property {integer} maxPollingSecs The maximum duration, in seconds, between requests for available spectrum. It is required in the initialization response, but optional otherwise. The device must contact the database to get available spectrum no less frequently than this duration. If the new spectrum information indicates that the device is using spectrum that is no longer available, it must immediately cease use of those frequencies under rules for database-managed spectrum. If this value is provided within the context of an available-spectrum response, it takes precedence over the value within the initialization response.\n * @property {string[]} rulesetIds The identifiers of the rulesets supported for the device&#39;s location. The database should include at least one applicable ruleset in the initialization response. The device may use the ruleset identifiers to determine parameters to include in subsequent requests. Within the context of the available-spectrum responses, the database should include the identifier of the ruleset that it used to determine the available-spectrum response. If included, the device must use the specified ruleset to interpret the response. If the device does not support the indicated ruleset, it must not operate in the spectrum governed by the ruleset.\n */\n/**\n * @typedef SpectrumMessage\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {number} bandwidth The bandwidth (in Hertz) for which permissible power levels are specified. For example, FCC regulation would require only one spectrum specification at 6MHz bandwidth, but Ofcom regulation would require two specifications, at 0.1MHz and 8MHz. This parameter may be empty if there is no available spectrum. It will be present otherwise.\n * @property {spectrum(v1explorer).FrequencyRange[]} frequencyRanges The list of frequency ranges and permissible power levels. The list may be empty if there is no available spectrum, otherwise it will be present.\n */\n/**\n * @typedef SpectrumSchedule\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {spectrum(v1explorer).EventTime} eventTime The event time expresses when the spectrum profile is valid. It will always be present.\n * @property {spectrum(v1explorer).SpectrumMessage[]} spectra A list of spectrum messages representing the usable profile. It will always be present, but may be empty when there is no available spectrum.\n */\n/**\n * @typedef Vcard\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {spectrum(v1explorer).VcardAddress} adr The street address of the entity.\n * @property {spectrum(v1explorer).VcardTypedText} email An email address that can be used to reach the contact.\n * @property {string} fn The full name of the contact person. For example: John A. Smith.\n * @property {spectrum(v1explorer).VcardTypedText} org The organization associated with the registering entity.\n * @property {spectrum(v1explorer).VcardTelephone} tel A telephone number that can be used to call the contact.\n */\n/**\n * @typedef VcardAddress\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {string} code The postal code associated with the address. For example: 94423.\n * @property {string} country The country name. For example: US.\n * @property {string} locality The city or local equivalent portion of the address. For example: San Jose.\n * @property {string} pobox An optional post office box number.\n * @property {string} region The state or local equivalent portion of the address. For example: CA.\n * @property {string} street The street number and name. For example: 123 Any St.\n */\n/**\n * @typedef VcardTelephone\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {string} uri A nested telephone URI of the form: tel:+1-123-456-7890.\n */\n/**\n * @typedef VcardTypedText\n * @memberOf! spectrum(v1explorer)\n * @type object\n * @property {string} text The text string associated with this item. For example, for an org field: ACME, inc. For an email field: smith@example.com.\n */\nmodule.exports = Spectrum;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/apis/toolresults/v1beta3firstparty.js":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* jshint maxlen: false */\n\n'use strict';\n\nvar createAPIRequest = require('../../lib/apirequest');\nvar utils = require('../../lib/utils');\n\n/**\n * Cloud Tool Results firstparty API\n *\n * Reads and publishes results from Firebase Test Lab.\n *\n * @example\n * var google = require('googleapis');\n * var toolresults = google.toolresults('v1beta3firstparty');\n *\n * @namespace toolresults\n * @type {Function}\n * @version v1beta3firstparty\n * @variation v1beta3firstparty\n * @param {object=} options Options for Toolresults\n */\nfunction Toolresults(options) { // eslint-disable-line\n  var self = this;\n  self._options = options || {};\n\n  self.projects = {\n\n    /**\n     * toolresults.projects.getSettings\n     *\n     * @desc Gets the Tool Results settings for a project.  May return any of the following canonical error codes:  - PERMISSION_DENIED - if the user is not authorized to read from project\n     *\n     * @alias toolresults.projects.getSettings\n     * @memberOf! toolresults(v1beta3firstparty)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.projectId A Project id.  Required.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    getSettings: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/settings',\n          method: 'GET'\n        }, options),\n        params: params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    /**\n     * toolresults.projects.initializeSettings\n     *\n     * @desc Creates resources for settings which have not yet been set.  Currently, this creates a single resource: a Google Cloud Storage bucket, to be used as the default bucket for this project. The bucket is created in the name of the user calling. Except in rare cases, calling this method in parallel from multiple clients will only create a single bucket. In order to avoid unnecessary storage charges, the bucket is configured to automatically delete objects older than 90 days.  The bucket is created with the project-private ACL: All project team members are given permissions to the bucket and objects created within it according to their roles. Project owners have owners rights, and so on. The default ACL on objects created in the bucket is project-private as well. See Google Cloud Storage documentation for more details.  If there is already a default bucket set and the project can access the bucket, this call does nothing. However, if the project doesn't have the permission to access the bucket or the bucket is deteleted, a new bucket will be created.  May return any canonical error codes, including the following:  - PERMISSION_DENIED - if the user is not authorized to write to project - Any error code raised by Google Cloud Storage\n     *\n     * @alias toolresults.projects.initializeSettings\n     * @memberOf! toolresults(v1beta3firstparty)\n     *\n     * @param {object} params Parameters for request\n     * @param {string} params.projectId A Project id.  Required.\n     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n     * @param {callback} callback The callback that handles the response.\n     * @return {object} Request object\n     */\n    initializeSettings: function (params, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      options || (options = {});\n\n      var parameters = {\n        options: utils.extend({\n          url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}:initializeSettings',\n          method: 'POST'\n        }, options),\n        params: params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: self\n      };\n\n      return createAPIRequest(parameters, callback);\n    },\n\n    histories: {\n\n      /**\n       * toolresults.projects.histories.create\n       *\n       * @desc Creates a History.  The returned History will have the id set.  May return any of the following canonical error codes:  - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing project does not exist\n       *\n       * @alias toolresults.projects.histories.create\n       * @memberOf! toolresults(v1beta3firstparty)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.projectId A Project id.  Required.\n       * @param {string=} params.requestId A unique request ID for server to detect duplicated requests. For example, a UUID.  Optional, but strongly recommended.\n       * @param {toolresults(v1beta3firstparty).History} params.resource Request body data\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      create: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories',\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * toolresults.projects.histories.get\n       *\n       * @desc Gets a History.  May return any of the following canonical error codes:  - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the History does not exist\n       *\n       * @alias toolresults.projects.histories.get\n       * @memberOf! toolresults(v1beta3firstparty)\n       *\n       * @param {object} params Parameters for request\n       * @param {string} params.historyId A History id.  Required.\n       * @param {string} params.projectId A Project id.  Required.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      get: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId', 'historyId'],\n          pathParams: ['historyId', 'projectId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      /**\n       * toolresults.projects.histories.list\n       *\n       * @desc Lists Histories for a given Project.  The histories are sorted by modification time in descending order. The history_id key will be used to order the history with the same modification time.  May return any of the following canonical error codes:  - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the History does not exist\n       *\n       * @alias toolresults.projects.histories.list\n       * @memberOf! toolresults(v1beta3firstparty)\n       *\n       * @param {object} params Parameters for request\n       * @param {string=} params.filterByName If set, only return histories with the given name.  Optional.\n       * @param {integer=} params.pageSize The maximum number of Histories to fetch.  Default value: 20. The server will use this default if the field is not set or has a value of 0. Any value greater than 100 will be treated as 100.  Optional.\n       * @param {string=} params.pageToken A continuation token to resume the query at the next item.  Optional.\n       * @param {string} params.projectId A Project id.  Required.\n       * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n       * @param {callback} callback The callback that handles the response.\n       * @return {object} Request object\n       */\n      list: function (params, options, callback) {\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        options || (options = {});\n\n        var parameters = {\n          options: utils.extend({\n            url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories',\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: self\n        };\n\n        return createAPIRequest(parameters, callback);\n      },\n\n      executions: {\n\n        /**\n         * toolresults.projects.histories.executions.create\n         *\n         * @desc Creates an Execution.  The returned Execution will have the id set.  May return any of the following canonical error codes:  - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing History does not exist\n         *\n         * @alias toolresults.projects.histories.executions.create\n         * @memberOf! toolresults(v1beta3firstparty)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.historyId A History id.  Required.\n         * @param {string} params.projectId A Project id.  Required.\n         * @param {string=} params.requestId A unique request ID for server to detect duplicated requests. For example, a UUID.  Optional, but strongly recommended.\n         * @param {toolresults(v1beta3firstparty).Execution} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        create: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions',\n              method: 'POST'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'historyId'],\n            pathParams: ['historyId', 'projectId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * toolresults.projects.histories.executions.get\n         *\n         * @desc Gets an Execution.  May return any of the following canonical error codes:  - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Execution does not exist\n         *\n         * @alias toolresults.projects.histories.executions.get\n         * @memberOf! toolresults(v1beta3firstparty)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.executionId An Execution id.  Required.\n         * @param {string} params.historyId A History id.  Required.\n         * @param {string} params.projectId A Project id.  Required.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        get: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'historyId', 'executionId'],\n            pathParams: ['executionId', 'historyId', 'projectId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * toolresults.projects.histories.executions.list\n         *\n         * @desc Lists Histories for a given Project.  The executions are sorted by creation_time in descending order. The execution_id key will be used to order the executions with the same creation_time.  May return any of the following canonical error codes:  - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing History does not exist\n         *\n         * @alias toolresults.projects.histories.executions.list\n         * @memberOf! toolresults(v1beta3firstparty)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.historyId A History id.  Required.\n         * @param {integer=} params.pageSize The maximum number of Executions to fetch.  Default value: 25. The server will use this default if the field is not set or has a value of 0.  Optional.\n         * @param {string=} params.pageToken A continuation token to resume the query at the next item.  Optional.\n         * @param {string} params.projectId A Project id.  Required.\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        list: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions',\n              method: 'GET'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'historyId'],\n            pathParams: ['historyId', 'projectId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        /**\n         * toolresults.projects.histories.executions.patch\n         *\n         * @desc Updates an existing Execution with the supplied partial entity.  May return any of the following canonical error codes:  - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the requested state transition is illegal - NOT_FOUND - if the containing History does not exist\n         *\n         * @alias toolresults.projects.histories.executions.patch\n         * @memberOf! toolresults(v1beta3firstparty)\n         *\n         * @param {object} params Parameters for request\n         * @param {string} params.executionId Required.\n         * @param {string} params.historyId Required.\n         * @param {string} params.projectId A Project id. Required.\n         * @param {string=} params.requestId A unique request ID for server to detect duplicated requests. For example, a UUID.  Optional, but strongly recommended.\n         * @param {toolresults(v1beta3firstparty).Execution} params.resource Request body data\n         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n         * @param {callback} callback The callback that handles the response.\n         * @return {object} Request object\n         */\n        patch: function (params, options, callback) {\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          options || (options = {});\n\n          var parameters = {\n            options: utils.extend({\n              url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}',\n              method: 'PATCH'\n            }, options),\n            params: params,\n            requiredParams: ['projectId', 'historyId', 'executionId'],\n            pathParams: ['executionId', 'historyId', 'projectId'],\n            context: self\n          };\n\n          return createAPIRequest(parameters, callback);\n        },\n\n        steps: {\n\n          /**\n           * toolresults.projects.histories.executions.steps.create\n           *\n           * @desc Creates a Step.  The returned Step will have the id set.  May return any of the following canonical error codes:  - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the step is too large (more than 10Mib) - NOT_FOUND - if the containing Execution does not exist\n           *\n           * @alias toolresults.projects.histories.executions.steps.create\n           * @memberOf! toolresults(v1beta3firstparty)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.executionId A Execution id.  Required.\n           * @param {string} params.historyId A History id.  Required.\n           * @param {string} params.projectId A Project id.  Required.\n           * @param {string=} params.requestId A unique request ID for server to detect duplicated requests. For example, a UUID.  Optional, but strongly recommended.\n           * @param {toolresults(v1beta3firstparty).Step} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          create: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps',\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'historyId', 'executionId'],\n              pathParams: ['executionId', 'historyId', 'projectId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          },\n\n          /**\n           * toolresults.projects.histories.executions.steps.get\n           *\n           * @desc Gets a Step.  May return any of the following canonical error codes:  - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Step does not exist\n           *\n           * @alias toolresults.projects.histories.executions.steps.get\n           * @memberOf! toolresults(v1beta3firstparty)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.executionId A Execution id.  Required.\n           * @param {string} params.historyId A History id.  Required.\n           * @param {string} params.projectId A Project id.  Required.\n           * @param {string} params.stepId A Step id.  Required.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          get: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}',\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n              pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          },\n\n          /**\n           * toolresults.projects.histories.executions.steps.getPerfMetricsSummary\n           *\n           * @desc Retrieves a PerfMetricsSummary.  May return any of the following error code(s): - NOT_FOUND - The specified PerfMetricsSummary does not exist\n           *\n           * @alias toolresults.projects.histories.executions.steps.getPerfMetricsSummary\n           * @memberOf! toolresults(v1beta3firstparty)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.executionId A tool results execution ID.\n           * @param {string} params.historyId A tool results history ID.\n           * @param {string} params.projectId The cloud project\n           * @param {string} params.stepId A tool results step ID.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          getPerfMetricsSummary: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary',\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n              pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          },\n\n          /**\n           * toolresults.projects.histories.executions.steps.list\n           *\n           * @desc Lists Steps for a given Execution.  The steps are sorted by creation_time in descending order. The step_id key will be used to order the steps with the same creation_time.  May return any of the following canonical error codes:  - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if an argument in the request happens to be invalid; e.g. if an attempt is made to list the children of a nonexistent Step - NOT_FOUND - if the containing Execution does not exist\n           *\n           * @alias toolresults.projects.histories.executions.steps.list\n           * @memberOf! toolresults(v1beta3firstparty)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.executionId A Execution id.  Required.\n           * @param {string} params.historyId A History id.  Required.\n           * @param {integer=} params.pageSize The maximum number of Steps to fetch.  Default value: 25. The server will use this default if the field is not set or has a value of 0.  Optional.\n           * @param {string=} params.pageToken A continuation token to resume the query at the next item.  Optional.\n           * @param {string} params.projectId A Project id.  Required.\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          list: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps',\n                method: 'GET'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'historyId', 'executionId'],\n              pathParams: ['executionId', 'historyId', 'projectId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          },\n\n          /**\n           * toolresults.projects.histories.executions.steps.patch\n           *\n           * @desc Updates an existing Step with the supplied partial entity.  May return any of the following canonical error codes:  - PERMISSION_DENIED - if the user is not authorized to write project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the requested state transition is illegal (e.g try to upload a duplicate xml file), if the updated step is too large (more than 10Mib) - NOT_FOUND - if the containing Execution does not exist\n           *\n           * @alias toolresults.projects.histories.executions.steps.patch\n           * @memberOf! toolresults(v1beta3firstparty)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.executionId A Execution id.  Required.\n           * @param {string} params.historyId A History id.  Required.\n           * @param {string} params.projectId A Project id.  Required.\n           * @param {string=} params.requestId A unique request ID for server to detect duplicated requests. For example, a UUID.  Optional, but strongly recommended.\n           * @param {string} params.stepId A Step id.  Required.\n           * @param {toolresults(v1beta3firstparty).Step} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          patch: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}',\n                method: 'PATCH'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n              pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          },\n\n          /**\n           * toolresults.projects.histories.executions.steps.publishXunitXmlFiles\n           *\n           * @desc Publish xml files to an existing Step.  May return any of the following canonical error codes:  - PERMISSION_DENIED - if the user is not authorized to write project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the requested state transition is illegal, e.g try to upload a duplicate xml file or a file too large. - NOT_FOUND - if the containing Execution does not exist\n           *\n           * @alias toolresults.projects.histories.executions.steps.publishXunitXmlFiles\n           * @memberOf! toolresults(v1beta3firstparty)\n           *\n           * @param {object} params Parameters for request\n           * @param {string} params.executionId A Execution id.  Required.\n           * @param {string} params.historyId A History id.  Required.\n           * @param {string} params.projectId A Project id.  Required.\n           * @param {string} params.stepId A Step id. Note: This step must include a TestExecutionStep.  Required.\n           * @param {toolresults(v1beta3firstparty).PublishXunitXmlFilesRequest} params.resource Request body data\n           * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n           * @param {callback} callback The callback that handles the response.\n           * @return {object} Request object\n           */\n          publishXunitXmlFiles: function (params, options, callback) {\n            if (typeof options === 'function') {\n              callback = options;\n              options = {};\n            }\n            options || (options = {});\n\n            var parameters = {\n              options: utils.extend({\n                url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}:publishXunitXmlFiles',\n                method: 'POST'\n              }, options),\n              params: params,\n              requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n              pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n              context: self\n            };\n\n            return createAPIRequest(parameters, callback);\n          },\n\n          perfMetricsSummary: {\n\n            /**\n             * toolresults.projects.histories.executions.steps.perfMetricsSummary.create\n             *\n             * @desc Creates a PerfMetricsSummary resource.  May return any of the following error code(s): - ALREADY_EXISTS - A PerfMetricSummary already exists for the given Step - NOT_FOUND - The containing Step does not exist\n             *\n             * @alias toolresults.projects.histories.executions.steps.perfMetricsSummary.create\n             * @memberOf! toolresults(v1beta3firstparty)\n             *\n             * @param {object} params Parameters for request\n             * @param {string} params.executionId A tool results execution ID.\n             * @param {string} params.historyId A tool results history ID.\n             * @param {string} params.projectId The cloud project\n             * @param {string} params.stepId A tool results step ID.\n             * @param {toolresults(v1beta3firstparty).PerfMetricsSummary} params.resource Request body data\n             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n             * @param {callback} callback The callback that handles the response.\n             * @return {object} Request object\n             */\n            create: function (params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n              options || (options = {});\n\n              var parameters = {\n                options: utils.extend({\n                  url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary',\n                  method: 'POST'\n                }, options),\n                params: params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n                context: self\n              };\n\n              return createAPIRequest(parameters, callback);\n            }\n          },\n\n          perfSampleSeries: {\n\n            /**\n             * toolresults.projects.histories.executions.steps.perfSampleSeries.create\n             *\n             * @desc Creates a PerfSampleSeries.  May return any of the following error code(s): - ALREADY_EXISTS - PerfMetricSummary already exists for the given Step - NOT_FOUND - The containing Step does not exist\n             *\n             * @alias toolresults.projects.histories.executions.steps.perfSampleSeries.create\n             * @memberOf! toolresults(v1beta3firstparty)\n             *\n             * @param {object} params Parameters for request\n             * @param {string} params.executionId A tool results execution ID.\n             * @param {string} params.historyId A tool results history ID.\n             * @param {string} params.projectId The cloud project\n             * @param {string} params.stepId A tool results step ID.\n             * @param {toolresults(v1beta3firstparty).PerfSampleSeries} params.resource Request body data\n             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n             * @param {callback} callback The callback that handles the response.\n             * @return {object} Request object\n             */\n            create: function (params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n              options || (options = {});\n\n              var parameters = {\n                options: utils.extend({\n                  url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries',\n                  method: 'POST'\n                }, options),\n                params: params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n                context: self\n              };\n\n              return createAPIRequest(parameters, callback);\n            },\n\n            /**\n             * toolresults.projects.histories.executions.steps.perfSampleSeries.get\n             *\n             * @desc Gets a PerfSampleSeries.  May return any of the following error code(s): - NOT_FOUND - The specified PerfSampleSeries does not exist\n             *\n             * @alias toolresults.projects.histories.executions.steps.perfSampleSeries.get\n             * @memberOf! toolresults(v1beta3firstparty)\n             *\n             * @param {object} params Parameters for request\n             * @param {string} params.executionId A tool results execution ID.\n             * @param {string} params.historyId A tool results history ID.\n             * @param {string} params.projectId The cloud project\n             * @param {string} params.sampleSeriesId A sample series id\n             * @param {string} params.stepId A tool results step ID.\n             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n             * @param {callback} callback The callback that handles the response.\n             * @return {object} Request object\n             */\n            get: function (params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n              options || (options = {});\n\n              var parameters = {\n                options: utils.extend({\n                  url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}',\n                  method: 'GET'\n                }, options),\n                params: params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId', 'sampleSeriesId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'sampleSeriesId', 'stepId'],\n                context: self\n              };\n\n              return createAPIRequest(parameters, callback);\n            },\n\n            /**\n             * toolresults.projects.histories.executions.steps.perfSampleSeries.list\n             *\n             * @desc Lists PerfSampleSeries for a given Step.  The request provides an optional filter which specifies one or more PerfMetricsType to include in the result; if none returns all. The resulting PerfSampleSeries are sorted by ids.  May return any of the following canonical error codes: - NOT_FOUND - The containing Step does not exist\n             *\n             * @alias toolresults.projects.histories.executions.steps.perfSampleSeries.list\n             * @memberOf! toolresults(v1beta3firstparty)\n             *\n             * @param {object} params Parameters for request\n             * @param {string} params.executionId A tool results execution ID.\n             * @param {string=} params.filter Specify one or more PerfMetricType values such as CPU to filter the result\n             * @param {string} params.historyId A tool results history ID.\n             * @param {string} params.projectId The cloud project\n             * @param {string} params.stepId A tool results step ID.\n             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n             * @param {callback} callback The callback that handles the response.\n             * @return {object} Request object\n             */\n            list: function (params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n              options || (options = {});\n\n              var parameters = {\n                options: utils.extend({\n                  url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries',\n                  method: 'GET'\n                }, options),\n                params: params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n                context: self\n              };\n\n              return createAPIRequest(parameters, callback);\n            },\n\n            samples: {\n\n              /**\n               * toolresults.projects.histories.executions.steps.perfSampleSeries.samples.batchCreate\n               *\n               * @desc Creates a batch of PerfSamples - a client can submit multiple batches of Perf Samples through repeated calls to this method in order to split up a large request payload - duplicates and existing timestamp entries will be ignored. - the batch operation may partially succeed - the set of elements successfully inserted is returned in the response (omits items which already existed in the database).  May return any of the following canonical error codes: - NOT_FOUND - The containing PerfSampleSeries does not exist\n               *\n               * @alias toolresults.projects.histories.executions.steps.perfSampleSeries.samples.batchCreate\n               * @memberOf! toolresults(v1beta3firstparty)\n               *\n               * @param {object} params Parameters for request\n               * @param {string} params.executionId A tool results execution ID.\n               * @param {string} params.historyId A tool results history ID.\n               * @param {string} params.projectId The cloud project\n               * @param {string} params.sampleSeriesId A sample series id\n               * @param {string} params.stepId A tool results step ID.\n               * @param {toolresults(v1beta3firstparty).BatchCreatePerfSamplesRequest} params.resource Request body data\n               * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n               * @param {callback} callback The callback that handles the response.\n               * @return {object} Request object\n               */\n              batchCreate: function (params, options, callback) {\n                if (typeof options === 'function') {\n                  callback = options;\n                  options = {};\n                }\n                options || (options = {});\n\n                var parameters = {\n                  options: utils.extend({\n                    url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples:batchCreate',\n                    method: 'POST'\n                  }, options),\n                  params: params,\n                  requiredParams: ['projectId', 'historyId', 'executionId', 'stepId', 'sampleSeriesId'],\n                  pathParams: ['executionId', 'historyId', 'projectId', 'sampleSeriesId', 'stepId'],\n                  context: self\n                };\n\n                return createAPIRequest(parameters, callback);\n              },\n\n              /**\n               * toolresults.projects.histories.executions.steps.perfSampleSeries.samples.list\n               *\n               * @desc Lists the Performance Samples of a given Sample Series - The list results are sorted by timestamps ascending - The default page size is 500 samples; and maximum size allowed 5000 - The response token indicates the last returned PerfSample timestamp - When the results size exceeds the page size, submit a subsequent request including the page token to return the rest of the samples up to the page limit  May return any of the following canonical error codes: - OUT_OF_RANGE - The specified request page_token is out of valid range - NOT_FOUND - The containing PerfSampleSeries does not exist\n               *\n               * @alias toolresults.projects.histories.executions.steps.perfSampleSeries.samples.list\n               * @memberOf! toolresults(v1beta3firstparty)\n               *\n               * @param {object} params Parameters for request\n               * @param {string} params.executionId A tool results execution ID.\n               * @param {string} params.historyId A tool results history ID.\n               * @param {integer=} params.pageSize The default page size is 500 samples, and the maximum size is 5000. If the page_size is greater than 5000, the effective page size will be 5000\n               * @param {string=} params.pageToken Optional, the next_page_token returned in the previous response\n               * @param {string} params.projectId The cloud project\n               * @param {string} params.sampleSeriesId A sample series id\n               * @param {string} params.stepId A tool results step ID.\n               * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n               * @param {callback} callback The callback that handles the response.\n               * @return {object} Request object\n               */\n              list: function (params, options, callback) {\n                if (typeof options === 'function') {\n                  callback = options;\n                  options = {};\n                }\n                options || (options = {});\n\n                var parameters = {\n                  options: utils.extend({\n                    url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples',\n                    method: 'GET'\n                  }, options),\n                  params: params,\n                  requiredParams: ['projectId', 'historyId', 'executionId', 'stepId', 'sampleSeriesId'],\n                  pathParams: ['executionId', 'historyId', 'projectId', 'sampleSeriesId', 'stepId'],\n                  context: self\n                };\n\n                return createAPIRequest(parameters, callback);\n              }\n            }\n          },\n\n          thumbnails: {\n\n            /**\n             * toolresults.projects.histories.executions.steps.thumbnails.list\n             *\n             * @desc Lists thumbnails of images attached to a step.  May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read from the project, or from any of the images - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the step does not exist, or if any of the images do not exist\n             *\n             * @alias toolresults.projects.histories.executions.steps.thumbnails.list\n             * @memberOf! toolresults(v1beta3firstparty)\n             *\n             * @param {object} params Parameters for request\n             * @param {string} params.executionId An Execution id.  Required.\n             * @param {string} params.historyId A History id.  Required.\n             * @param {integer=} params.pageSize The maximum number of thumbnails to fetch.  Default value: 50. The server will use this default if the field is not set or has a value of 0.  Optional.\n             * @param {string=} params.pageToken A continuation token to resume the query at the next item.  Optional.\n             * @param {string} params.projectId A Project id.  Required.\n             * @param {string} params.stepId A Step id.  Required.\n             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.\n             * @param {callback} callback The callback that handles the response.\n             * @return {object} Request object\n             */\n            list: function (params, options, callback) {\n              if (typeof options === 'function') {\n                callback = options;\n                options = {};\n              }\n              options || (options = {});\n\n              var parameters = {\n                options: utils.extend({\n                  url: 'https://www.googleapis.com/toolresults/v1beta3firstparty/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/thumbnails',\n                  method: 'GET'\n                }, options),\n                params: params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n                context: self\n              };\n\n              return createAPIRequest(parameters, callback);\n            }\n          }\n        }\n      }\n    }\n  };\n}\n\n/**\n * @typedef Any\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {string} typeUrl A URL/resource name whose content describes the type of the serialized protocol buffer message.\n\nFor URLs which use the scheme `http`, `https`, or no scheme, the following restrictions and interpretations apply:\n\n* If no scheme is provided, `https` is assumed. * The last segment of the URL&#39;s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading &quot;.&quot; is not accepted). * An HTTP GET on the URL must yield a [google.protobuf.Type][] value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.)\n\nSchemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.\n* @property {string} value Must be a valid serialized protocol buffer of the above specified type.\n*/\n/**\n * @typedef BasicPerfSampleSeries\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {string} perfMetricType \n * @property {string} perfUnit \n * @property {string} sampleSeriesLabel \n */\n/**\n * @typedef BatchCreatePerfSamplesRequest\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {toolresults(v1beta3firstparty).PerfSample[]} perfSamples The set of PerfSamples to create should not include existing timestamps\n */\n/**\n * @typedef BatchCreatePerfSamplesResponse\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {toolresults(v1beta3firstparty).PerfSample[]} perfSamples \n */\n/**\n * @typedef CPUInfo\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {string} cpuProcessor description of the device processor ie &#39;1.8 GHz hexa core 64-bit ARMv8-A&#39;\n * @property {number} cpuSpeedInGhz the CPU clock speed in GHz\n * @property {integer} numberOfCores the number of CPU cores\n */\n/**\n * @typedef Duration\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {integer} nanos Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.\n * @property {string} seconds Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years\n */\n/**\n * @typedef Execution\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {toolresults(v1beta3firstparty).Timestamp} completionTime The time when the Execution status transitioned to COMPLETE.\n\nThis value will be set automatically when state transitions to COMPLETE.\n\n- In response: set if the execution state is COMPLETE. - In create/update request: never set\n* @property {toolresults(v1beta3firstparty).Timestamp} creationTime The time when the Execution was created.\n\nThis value will be set automatically when CreateExecution is called.\n\n- In response: always set - In create/update request: never set\n* @property {string} executionId A unique identifier within a History for this Execution.\n\nReturns INVALID_ARGUMENT if this field is set or overwritten by the caller.\n\n- In response always set - In create/update request: never set\n* @property {toolresults(v1beta3firstparty).Outcome} outcome Classify the result, for example into SUCCESS or FAILURE\n\n- In response: present if set by create/update request - In create/update request: optional\n* @property {string} state The initial state is IN_PROGRESS.\n\nThe only legal state transitions is from IN_PROGRESS to COMPLETE.\n\nA PRECONDITION_FAILED will be returned if an invalid transition is requested.\n\nThe state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times.\n\nIf the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE.\n\n- In response always set - In create/update request: optional\n* @property {string} testExecutionMatrixId TestExecution Matrix ID that the Test Service uses.\n\n- In response: present if set by create - In create: optional - In update: never set\n*/\n/**\n * @typedef FailureDetail\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {boolean} crashed If the failure was severe because the system under test crashed.\n * @property {boolean} notInstalled If an app is not installed and thus no test can be run with the app. This might be caused by trying to run a test on an unsupported platform.\n * @property {boolean} otherNativeCrash If a native process other than the app crashed.\n * @property {boolean} timedOut If the test overran some time limit, and that is why it failed.\n * @property {boolean} unableToCrawl If the robo was unable to crawl the app; perhaps because the app did not start.\n */\n/**\n * @typedef FileReference\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {string} fileUri The URI of a file stored in Google Cloud Storage.\n\nFor example: http://storage.googleapis.com/mybucket/path/to/test.xml or in gsutil format: gs://mybucket/path/to/test.xml with version-specific info, gs://mybucket/path/to/test.xml#1360383693690000\n\nAn INVALID_ARGUMENT error will be returned if the URI format is not supported.\n\n- In response: always set - In create/update request: always set\n*/\n/**\n * @typedef History\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {string} displayName A short human-readable (plain text) name to display in the UI. Maximum of 100 characters.\n\n- In response: present if set during create. - In create request: optional\n* @property {string} historyId A unique identifier within a project for this History.\n\nReturns INVALID_ARGUMENT if this field is set or overwritten by the caller.\n\n- In response always set - In create request: never set\n* @property {string} name A name to uniquely identify a history within a project. Maximum of 100 characters.\n\n- In response always set - In create request: always set\n*/\n/**\n * @typedef Image\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {toolresults(v1beta3firstparty).Status} error An error explaining why the thumbnail could not be rendered.\n* @property {toolresults(v1beta3firstparty).ToolOutputReference} sourceImage A reference to the full-size, original image.\n\nThis is the same as the tool_outputs entry for the image under its Step.\n\nAlways set.\n* @property {string} stepId The step to which the image is attached.\n\nAlways set.\n* @property {toolresults(v1beta3firstparty).Thumbnail} thumbnail The thumbnail.\n*/\n/**\n * @typedef InconclusiveDetail\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {boolean} abortedByUser If the end user aborted the test execution before a pass or fail could be determined. For example, the user pressed ctrl-c which sent a kill signal to the test runner while the test was running.\n* @property {boolean} infrastructureFailure If the test runner could not determine success or failure because the test depends on a component other than the system under test which failed.\n\nFor example, a mobile test requires provisioning a device where the test executes, and that provisioning can fail.\n*/\n/**\n * @typedef ListExecutionsResponse\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {toolresults(v1beta3firstparty).Execution[]} executions Executions.\n\nAlways set.\n* @property {string} nextPageToken A continuation token to resume the query at the next item.\n\nWill only be set if there are more Executions to fetch.\n*/\n/**\n * @typedef ListHistoriesResponse\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {toolresults(v1beta3firstparty).History[]} histories Histories.\n* @property {string} nextPageToken A continuation token to resume the query at the next item.\n\nWill only be set if there are more histories to fetch.\n\nTokens are valid for up to one hour from the time of the first list request. For instance, if you make a list request at 1PM and use the token from this first request 10 minutes later, the token from this second response will only be valid for 50 minutes.\n*/\n/**\n * @typedef ListPerfSampleSeriesResponse\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {toolresults(v1beta3firstparty).PerfSampleSeries[]} perfSampleSeries The resulting PerfSampleSeries sorted by id\n */\n/**\n * @typedef ListPerfSamplesResponse\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {string} nextPageToken Optional, returned if result size exceeds the page size specified in the request (or the default page size, 500, if unspecified). It indicates the last sample timestamp to be used as page_token in subsequent request\n * @property {toolresults(v1beta3firstparty).PerfSample[]} perfSamples \n */\n/**\n * @typedef ListStepThumbnailsResponse\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {string} nextPageToken A continuation token to resume the query at the next item.\n\nIf set, indicates that there are more thumbnails to read, by calling list again with this value in the page_token field.\n* @property {toolresults(v1beta3firstparty).Image[]} thumbnails A list of image data.\n\nImages are returned in a deterministic order; they are ordered by these factors, in order of importance: * First, by their associated test case. Images without a test case are considered greater than images with one. * Second, by their creation time. Images without a creation time are greater than images with one. * Third, by the order in which they were added to the step (by calls to CreateStep or UpdateStep).\n*/\n/**\n * @typedef ListStepsResponse\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {string} nextPageToken A continuation token to resume the query at the next item.\n\nIf set, indicates that there are more steps to read, by calling list again with this value in the page_token field.\n* @property {toolresults(v1beta3firstparty).Step[]} steps Steps.\n*/\n/**\n * @typedef MemoryInfo\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {string} memoryCapInKibibyte Maximum memory that can be allocated to the process in KiB\n * @property {string} memoryTotalInKibibyte Total memory available on the device in KiB\n */\n/**\n * @typedef Outcome\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {toolresults(v1beta3firstparty).FailureDetail} failureDetail More information about a FAILURE outcome.\n\nReturns INVALID_ARGUMENT if this field is set but the summary is not FAILURE.\n\nOptional\n* @property {toolresults(v1beta3firstparty).InconclusiveDetail} inconclusiveDetail More information about an INCONCLUSIVE outcome.\n\nReturns INVALID_ARGUMENT if this field is set but the summary is not INCONCLUSIVE.\n\nOptional\n* @property {toolresults(v1beta3firstparty).SkippedDetail} skippedDetail More information about a SKIPPED outcome.\n\nReturns INVALID_ARGUMENT if this field is set but the summary is not SKIPPED.\n\nOptional\n* @property {toolresults(v1beta3firstparty).SuccessDetail} successDetail More information about a SUCCESS outcome.\n\nReturns INVALID_ARGUMENT if this field is set but the summary is not SUCCESS.\n\nOptional\n* @property {string} summary The simplest way to interpret a result.\n\nRequired\n*/\n/**\n * @typedef PerfEnvironment\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {toolresults(v1beta3firstparty).CPUInfo} cpuInfo CPU related environment info\n * @property {toolresults(v1beta3firstparty).MemoryInfo} memoryInfo Memory related environment info\n */\n/**\n * @typedef PerfMetricsSummary\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {string} executionId A tool results execution ID.\n * @property {string} historyId A tool results history ID.\n * @property {toolresults(v1beta3firstparty).PerfEnvironment} perfEnvironment Describes the environment in which the performance metrics were collected\n * @property {string[]} perfMetrics Set of resource collected\n * @property {string} projectId The cloud project\n * @property {string} stepId A tool results step ID.\n */\n/**\n * @typedef PerfSample\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {toolresults(v1beta3firstparty).Timestamp} sampleTime Timestamp of collection\n * @property {number} value Value observed\n */\n/**\n * @typedef PerfSampleSeries\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {toolresults(v1beta3firstparty).BasicPerfSampleSeries} basicPerfSampleSeries Basic series represented by a line chart\n * @property {string} executionId A tool results execution ID.\n * @property {string} historyId A tool results history ID.\n * @property {string} projectId The cloud project\n * @property {string} sampleSeriesId A sample series id\n * @property {string} stepId A tool results step ID.\n */\n/**\n * @typedef ProjectSettings\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {string} defaultBucket The name of the Google Cloud Storage bucket to which results are written.\n\nBy default, this is unset.\n\nIn update request: optional In response: optional\n* @property {string} name The name of the project&#39;s settings.\n\nAlways of the form: projects/{project-id}/settings\n\nIn update request: never set In response: always set\n*/\n/**\n * @typedef PublishXunitXmlFilesRequest\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {toolresults(v1beta3firstparty).FileReference[]} xunitXmlFiles URI of the Xunit XML files to publish.\n\nThe maximum size of the file this reference is pointing to is 50MB.\n\nRequired.\n*/\n/**\n * @typedef SkippedDetail\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {boolean} incompatibleAppVersion If the App doesn&#39;t support the specific API level.\n * @property {boolean} incompatibleArchitecture If the App doesn&#39;t run on the specific architecture, for example, x86.\n * @property {boolean} incompatibleDevice If the requested OS version doesn&#39;t run on the specific device model.\n */\n/**\n * @typedef StackTrace\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {string} exception The stack trace message.\n\nRequired\n*/\n/**\n * @typedef Status\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {integer} code The status code, which should be an enum value of [google.rpc.Code][].\n * @property {toolresults(v1beta3firstparty).Any[]} details A list of messages that carry the error details. There will be a common set of message types for APIs to use.\n * @property {string} message A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][] field, or localized by the client.\n */\n/**\n * @typedef Step\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {toolresults(v1beta3firstparty).Timestamp} completionTime The time when the step status was set to complete.\n\nThis value will be set automatically when state transitions to COMPLETE.\n\n- In response: set if the execution state is COMPLETE. - In create/update request: never set\n* @property {toolresults(v1beta3firstparty).Timestamp} creationTime The time when the step was created.\n\n- In response: always set - In create/update request: never set\n* @property {string} description A description of this tool For example: mvn clean package -D skipTests=true\n\n- In response: present if set by create/update request - In create/update request: optional\n* @property {toolresults(v1beta3firstparty).Duration} deviceUsageDuration How much the device resource is used to perform the test.\n\nThis is the device usage used for billing purpose, which is different from the run_duration, for example, infrastructure failure won&#39;t be charged for device usage.\n\nPRECONDITION_FAILED will be returned if one attempts to set a device_usage on a step which already has this field set.\n\n- In response: present if previously set. - In create request: optional - In update request: optional\n* @property {toolresults(v1beta3firstparty).StepDimensionValueEntry[]} dimensionValue If the execution containing this step has any dimension_definition set, then this field allows the child to specify the values of the dimensions.\n\nThe keys must exactly match the dimension_definition of the execution.\n\nFor example, if the execution has `dimension_definition = [&#39;attempt&#39;, &#39;device&#39;]` then a step must define values for those dimensions, eg. `dimension_value = [&#39;attempt&#39;: &#39;1&#39;, &#39;device&#39;: &#39;Nexus 6&#39;]`\n\nIf a step does not participate in one dimension of the matrix, the value for that dimension should be empty string. For example, if one of the tests is executed by a runner which does not support retries, the step could have `dimension_value = [&#39;attempt&#39;: &#39;&#39;, &#39;device&#39;: &#39;Nexus 6&#39;]`\n\nIf the step does not participate in any dimensions of the matrix, it may leave dimension_value unset.\n\nA PRECONDITION_FAILED will be returned if any of the keys do not exist in the dimension_definition of the execution.\n\nA PRECONDITION_FAILED will be returned if another step in this execution already has the same name and dimension_value, but differs on other data fields, for example, step field is different.\n\nA PRECONDITION_FAILED will be returned if dimension_value is set, and there is a dimension_definition in the execution which is not specified as one of the keys.\n\n- In response: present if set by create - In create request: optional - In update request: never set\n* @property {boolean} hasImages Whether any of the outputs of this step are images whose thumbnails can be fetched with ListThumbnails.\n\n- In response: always set - In create/update request: never set\n* @property {toolresults(v1beta3firstparty).StepLabelsEntry[]} labels Arbitrary user-supplied key/value pairs that are associated with the step.\n\nUsers are responsible for managing the key namespace such that keys don&#39;t accidentally collide.\n\nAn INVALID_ARGUMENT will be returned if the number of labels exceeds 100 or if the length of any of the keys or values exceeds 100 characters.\n\n- In response: always set - In create request: optional - In update request: optional; any new key/value pair will be added to the map, and any new value for an existing key will update that key&#39;s value\n* @property {string} name A short human-readable name to display in the UI. Maximum of 100 characters. For example: Clean build\n\nA PRECONDITION_FAILED will be returned upon creating a new step if it shares its name and dimension_value with an existing step. If two steps represent a similar action, but have different dimension values, they should share the same name. For instance, if the same set of tests is run on two different platforms, the two steps should have the same name.\n\n- In response: always set - In create request: always set - In update request: never set\n* @property {toolresults(v1beta3firstparty).Outcome} outcome Classification of the result, for example into SUCCESS or FAILURE\n\n- In response: present if set by create/update request - In create/update request: optional\n* @property {toolresults(v1beta3firstparty).Duration} runDuration How long it took for this step to run.\n\nIf unset, this is set to the difference between creation_time and completion_time when the step is set to the COMPLETE state. In some cases, it is appropriate to set this value separately: For instance, if a step is created, but the operation it represents is queued for a few minutes before it executes, it would be appropriate not to include the time spent queued in its run_duration.\n\nPRECONDITION_FAILED will be returned if one attempts to set a run_duration on a step which already has this field set.\n\n- In response: present if previously set; always present on COMPLETE step - In create request: optional - In update request: optional\n* @property {string} state The initial state is IN_PROGRESS. The only legal state transitions are * IN_PROGRESS -&gt; COMPLETE\n\nA PRECONDITION_FAILED will be returned if an invalid transition is requested.\n\nIt is valid to create Step with a state set to COMPLETE. The state can only be set to COMPLETE once. A PRECONDITION_FAILED will be returned if the state is set to COMPLETE multiple times.\n\n- In response: always set - In create/update request: optional\n* @property {string} stepId A unique identifier within a Execution for this Step.\n\nReturns INVALID_ARGUMENT if this field is set or overwritten by the caller.\n\n- In response: always set - In create/update request: never set\n* @property {toolresults(v1beta3firstparty).TestExecutionStep} testExecutionStep An execution of a test runner.\n* @property {toolresults(v1beta3firstparty).ToolExecutionStep} toolExecutionStep An execution of a tool (used for steps we don&#39;t explicitly support).\n*/\n/**\n * @typedef StepDimensionValueEntry\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {string} key \n * @property {string} value \n */\n/**\n * @typedef StepLabelsEntry\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {string} key \n * @property {string} value \n */\n/**\n * @typedef SuccessDetail\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {boolean} otherNativeCrash If a native process other than the app crashed.\n */\n/**\n * @typedef TestCaseReference\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {string} className The name of the class.\n* @property {string} name The name of the test case.\n\nRequired.\n* @property {string} testSuiteName The name of the test suite to which this test case belongs.\n*/\n/**\n * @typedef TestExecutionStep\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {toolresults(v1beta3firstparty).TestIssue[]} testIssues Issues observed during the test execution.\n\nFor example, if the mobile app under test crashed during the test, the error message and the stack trace content can be recorded here to assist debugging.\n\n- In response: present if set by create or update - In create/update request: optional\n* @property {toolresults(v1beta3firstparty).TestSuiteOverview[]} testSuiteOverviews List of test suite overview contents. This could be parsed from xUnit XML log by server, or uploaded directly by user. This references should only be called when test suites are fully parsed or uploaded.\n\nThe maximum allowed number of test suite overviews per step is 1000.\n\n- In response: always set - In create request: optional - In update request: never (use publishXunitXmlFiles custom method instead)\n* @property {toolresults(v1beta3firstparty).TestTiming} testTiming The timing break down of the test execution.\n\n- In response: present if set by create or update - In create/update request: optional\n* @property {toolresults(v1beta3firstparty).ToolExecution} toolExecution Represents the execution of the test runner.\n\nThe exit code of this tool will be used to determine if the test passed.\n\n- In response: always set - In create/update request: optional\n*/\n/**\n * @typedef TestIssue\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {string} errorMessage A brief human-readable message describing the abnormal event.\n\nRequired.\n* @property {toolresults(v1beta3firstparty).StackTrace} stackTrace Optional.\n*/\n/**\n * @typedef TestSuiteOverview\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {integer} errorCount Number of test cases in error, typically set by the service by parsing the xml_source.\n\n- In create/response: always set - In update request: never\n* @property {integer} failureCount Number of failed test cases, typically set by the service by parsing the xml_source. May also be set by the user.\n\n- In create/response: always set - In update request: never\n* @property {string} name The name of the test suite.\n\n- In create/response: always set - In update request: never\n* @property {integer} skippedCount Number of test cases not run, typically set by the service by parsing the xml_source.\n\n- In create/response: always set - In update request: never\n* @property {integer} totalCount Number of test cases, typically set by the service by parsing the xml_source.\n\n- In create/response: always set - In update request: never\n* @property {toolresults(v1beta3firstparty).FileReference} xmlSource If this test suite was parsed from XML, this is the URI where the original XML file is stored.\n\nNote: Multiple test suites can share the same xml_source\n\nReturns INVALID_ARGUMENT if the uri format is not supported.\n\n- In create/response: optional - In update request: never\n*/\n/**\n * @typedef TestTiming\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {toolresults(v1beta3firstparty).Duration} testProcessDuration How long it took to run the test process.\n\n- In response: present if previously set. - In create/update request: optional\n*/\n/**\n * @typedef Thumbnail\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {string} contentType The thumbnail&#39;s content type, i.e. &quot;image/png&quot;.\n\nAlways set.\n* @property {string} data The thumbnail file itself.\n\nThat is, the bytes here are precisely the bytes that make up the thumbnail file; they can be served as an image as-is (with the appropriate content type.)\n\nAlways set.\n* @property {integer} heightPx The height of the thumbnail, in pixels.\n\nAlways set.\n* @property {integer} widthPx The width of the thumbnail, in pixels.\n\nAlways set.\n*/\n/**\n * @typedef Timestamp\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n * @property {integer} nanos Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.\n * @property {string} seconds Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\n */\n/**\n * @typedef ToolExecution\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {string[]} commandLineArguments The full tokenized command line including the program name (equivalent to argv in a C program).\n\n- In response: present if set by create request - In create request: optional - In update request: never set\n* @property {toolresults(v1beta3firstparty).ToolExitCode} exitCode Tool execution exit code. This field will be set once the tool has exited.\n\n- In response: present if set by create/update request - In create request: optional - In update request: optional, a FAILED_PRECONDITION error will be returned if an exit_code is already set.\n* @property {toolresults(v1beta3firstparty).FileReference[]} toolLogs References to any plain text logs output the tool execution.\n\nThis field can be set before the tool has exited in order to be able to have access to a live view of the logs while the tool is running.\n\nThe maximum allowed number of tool logs per step is 1000.\n\n- In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list\n* @property {toolresults(v1beta3firstparty).ToolOutputReference[]} toolOutputs References to opaque files of any format output by the tool execution.\n\nThe maximum allowed number of tool outputs per step is 1000.\n\n- In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list\n*/\n/**\n * @typedef ToolExecutionStep\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {toolresults(v1beta3firstparty).ToolExecution} toolExecution A Tool execution.\n\n- In response: present if set by create/update request - In create/update request: optional\n*/\n/**\n * @typedef ToolExitCode\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {integer} number Tool execution exit code. A value of 0 means that the execution was successful.\n\n- In response: always set - In create/update request: always set\n*/\n/**\n * @typedef ToolOutputReference\n * @memberOf! toolresults(v1beta3firstparty)\n * @type object\n* @property {toolresults(v1beta3firstparty).Timestamp} creationTime The creation time of the file.\n\n- In response: present if set by create/update request - In create/update request: optional\n* @property {toolresults(v1beta3firstparty).FileReference} output A FileReference to an output file.\n\n- In response: always set - In create/update request: always set\n* @property {toolresults(v1beta3firstparty).TestCaseReference} testCase The test case to which this output file belongs.\n\n- In response: present if set by create/update request - In create/update request: optional\n*/\nmodule.exports = Toolresults;\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/lib/auth/authclient.js":"// Copyright 2012-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\n/**\n * This code has been moved to the google-auth-library repo, at\n * https://github.com/google/google-auth-library-nodejs.\n *\n * Please update your references to point to the google-auth-library implementation,\n * rather than this file.\n */\n\nmodule.exports = require('google-auth-library/lib/auth/authclient.js');\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/lib/auth/computeclient.js":"// Copyright 2012-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\n/**\n * This code has been moved to the google-auth-library repo, at\n * https://github.com/google/google-auth-library-nodejs.\n *\n * Please update your references to point to the google-auth-library implementation,\n * rather than this file.\n */\n\nmodule.exports = require('google-auth-library/lib/auth/computeclient.js');\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/lib/auth/jwtclient.js":"// Copyright 2012-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\n/**\n * This code has been moved to the google-auth-library repo, at\n * https://github.com/google/google-auth-library-nodejs.\n *\n * Please update your references to point to the google-auth-library implementation,\n * rather than this file.\n */\n\nmodule.exports = require('google-auth-library/lib/auth/jwtclient.js');\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/lib/auth/loginticket.js":"// Copyright 2012-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\n/**\n * This code has been moved to the google-auth-library repo, at\n * https://github.com/google/google-auth-library-nodejs.\n *\n * Please update your references to point to the google-auth-library implementation,\n * rather than this file.\n */\n\nmodule.exports = require('google-auth-library/lib/auth/loginticket.js');\n","/home/travis/build/npmtest/node-npmtest-googleapis/node_modules/googleapis/lib/auth/oauth2client.js":"// Copyright 2012-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\n/**\n * This code has been moved to the google-auth-library repo, at\n * https://github.com/google/google-auth-library-nodejs.\n *\n * Please update your references to point to the google-auth-library implementation,\n * rather than this file.\n */\n\nmodule.exports = require('google-auth-library/lib/auth/oauth2client.js');\n"}