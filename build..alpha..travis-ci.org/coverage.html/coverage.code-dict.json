{"/home/travis/build/npmtest/node-npmtest-googleapis/test.js":"/* istanbul instrument in package npmtest_googleapis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-googleapis/lib.npmtest_googleapis.js":"/* istanbul instrument in package npmtest_googleapis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_googleapis = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_googleapis = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-googleapis/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-googleapis && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_googleapis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_googleapis\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_googleapis.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_googleapis.rollup.js'] =\n            local.assetsDict['/assets.npmtest_googleapis.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_googleapis.__dirname +\n                    '/lib.npmtest_googleapis.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-googleapis/googleapis/lib/googleapis.js":"// Copyright 2012-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar util = require('util');\nvar Discovery = require('./discovery');\nvar discovery = new Discovery({ debug: false, includePrivate: false });\n\n/**\n * Load the apis from apis index file\n * This file holds all version information\n * @private\n */\nvar apis = {};\n\n/**\n * Return a Function that requires an API from the disk\n * @param  {String} filename Filename of API\n * @return {function}        function used to require the API from disk\n * @private\n */\nfunction requireAPI (filename) {\n  return function (options) {\n    var type = typeof options;\n    var version;\n    if (type === 'string') {\n      version = options;\n      options = {};\n    } else if (type === 'object') {\n      version = options.version;\n      delete options.version;\n    } else {\n      throw new Error('Argument error: Accepts only string or object');\n    }\n    try {\n      var endpointPath = path.join(__dirname, filename, path.basename(version));\n      var Endpoint = require(endpointPath);\n      var ep = new Endpoint(options);\n      ep.google = this; // for drive.google.transporter\n      return Object.freeze(ep); // create new & freeze\n    } catch (e) {\n      throw new Error(util.format('Unable to load endpoint %s(\"%s\"): %s',\n        filename, version, e.message));\n    }\n  };\n}\n\n// Dynamically discover available APIs\nfs.readdirSync(path.join(__dirname, '../apis')).forEach(function (file) {\n  apis[file] = requireAPI('../apis/' + file);\n});\n\n/**\n * @class GoogleAuth\n */\nvar GoogleAuth = require('google-auth-library');\n\n/**\n * GoogleApis constructor.\n *\n * @example\n * var GoogleApis = require('googleapis').GoogleApis;\n * var google = new GoogleApis();\n *\n * @class GoogleApis\n * @param {Object} [options] Configuration options.\n */\nfunction GoogleApis (options) {\n  this.options(options);\n  this.addAPIs(apis);\n\n  /**\n   * A reference to an instance of GoogleAuth.\n   *\n   * @name GoogleApis#auth\n   * @type {GoogleAuth}\n   */\n  this.auth = new GoogleAuth();\n\n  /**\n   * A reference to the {@link GoogleApis} constructor function.\n   *\n   * @name GoogleApis#GoogleApis\n   * @see GoogleApis\n   * @type {Function}\n   */\n  this.GoogleApis = GoogleApis;\n}\n\n/**\n * Set options.\n *\n * @param  {Object} [options] Configuration options.\n */\nGoogleApis.prototype.options = function (options) {\n  this._options = options || {};\n};\n\n/**\n * Add APIs endpoints to googleapis object\n * E.g. googleapis.drive and googleapis.datastore\n *\n * @name GoogleApis#addAPIs\n * @method\n * @param {Object} apis Apis to be added to this GoogleApis instance.\n * @private\n */\nGoogleApis.prototype.addAPIs = function (apis) {\n  for (var apiName in apis) {\n    this[apiName] = apis[apiName].bind(this);\n  }\n};\n\n/**\n * Dynamically generate an apis object that can provide Endpoint objects for the\n * discovered APIs.\n *\n * @example\n * var google = require('googleapis');\n * var discoveryUrl = 'https://myapp.appspot.com/_ah/api/discovery/v1/apis/';\n * google.discover(discoveryUrl, function (err) {\n *   var someapi = google.someapi('v1');\n * });\n *\n * @name GoogleApis#discover\n * @method\n * @param {string} url Url to the discovery service for a set of APIs. e.g.,\n * https://www.googleapis.com/discovery/v1/apis\n * @param {Function} callback Callback function.\n */\nGoogleApis.prototype.discover = function (url, callback) {\n  var self = this;\n\n  discovery.discoverAllAPIs(url, function (err, apis) {\n    if (err) {\n      return callback(err);\n    }\n    self.addAPIs(apis);\n    callback();\n  });\n};\n\n/**\n * Dynamically generate an Endpoint object from a discovery doc.\n *\n * @example\n * var google = require('google');\n * var discoveryDocUrl = 'https://myapp.appspot.com/_ah/api/discovery/v1/apis/someapi/v1/rest';\n * google.discoverApi(discoveryDocUrl, function (err, someapi) {\n *   // use someapi\n * });\n *\n * @name GoogleApis#discoverAPI\n * @method\n * @param {string} path Url or file path to discover doc for a single API.\n * @param {object} [options] Options to configure the Endpoint object generated\n * from the discovery doc.\n * @param {Function} callback Callback function.\n */\nGoogleApis.prototype.discoverAPI = function (path, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  if (!options) {\n    options = {};\n  }\n  discovery.discoverAPI(path, function (err, Endpoint) {\n    if (err) {\n      return callback(err);\n    }\n    var ep = new Endpoint(options);\n    ep.google = self; // for drive.google.transporter\n    return callback(null, Object.freeze(ep)); // create new & freeze\n  });\n};\n\n/**\n * {@link GoogleApis} class.\n *\n * @name module:googleapis.GoogleApis\n * @see GoogleApis\n * @type {Function}\n */\n\n/**\n * {@link GoogleAuth} class.\n *\n * @name module:googleapis.auth\n * @see GoogleAuth\n * @type {Function}\n */\n\n/**\n * @example\n * var google = require('googleapis');\n *\n * @module googleapis\n * @type {GoogleApis}\n */\nmodule.exports = new GoogleApis();\n","/home/travis/build/npmtest/node-npmtest-googleapis/googleapis/lib/discovery.js":"// Copyright 2014-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\nvar generatorUtils = require('./generator_utils');\nvar DefaultTransporter = generatorUtils.DefaultTransporter;\nvar buildurl = generatorUtils.buildurl;\nvar handleError = generatorUtils.handleError;\nvar async = require('async');\nvar fs = require('fs');\nvar url = require('url');\nvar util = require('util');\nvar createAPIRequest = require('./apirequest');\n\nvar transporter = new DefaultTransporter();\n\nfunction getPathParams (params) {\n  var pathParams = [];\n  if (typeof params !== 'object') {\n    params = {};\n  }\n  Object.keys(params).forEach(function (key) {\n    if (params[key].location === 'path') {\n      pathParams.push(key);\n    }\n  });\n  return pathParams;\n}\n\n/**\n * Given a method schema, add a method to a target.\n *\n * @private\n * @param {object} target The target to which to add the method.\n * @param {object} schema The top-level schema that contains the rootUrl, etc.\n * @param {object} method The method schema from which to generate the method.\n * @param {object} context The context to add to the method.\n */\nfunction makeMethod (schema, method, context) {\n  return function (params, callback) {\n    var url = buildurl(schema.rootUrl + schema.servicePath + method.path);\n\n    var parameters = {\n      options: {\n        url: url.substring(1, url.length - 1),\n        method: method.httpMethod\n      },\n      params: params,\n      requiredParams: method.parameterOrder || [],\n      pathParams: getPathParams(method.parameters),\n      context: context\n    };\n\n    if (method.mediaUpload && method.mediaUpload.protocols &&\n      method.mediaUpload.protocols.simple &&\n      method.mediaUpload.protocols.simple.path) {\n      var mediaUrl = buildurl(\n        schema.rootUrl +\n        method.mediaUpload.protocols.simple.path\n      );\n      parameters.mediaUrl = mediaUrl.substring(1, mediaUrl.length - 1);\n    }\n\n    return createAPIRequest(parameters, callback);\n  };\n}\n\n/**\n * Given a schema, add methods to a target.\n *\n * @private\n * @param {object} target The target to which to apply the methods.\n * @param {object} rootSchema The top-level schema, so we don't lose track of it\n * during recursion.\n * @param {object} schema The current schema from which to extract methods.\n * @param {object} context The context to add to each method.\n */\nfunction applyMethodsFromSchema (target, rootSchema, schema, context) {\n  if (schema.methods) {\n    for (var name in schema.methods) {\n      var method = schema.methods[name];\n      target[name] = makeMethod(rootSchema, method, context);\n    }\n  }\n}\n\n/**\n * Given a schema, add methods and resources to a target.\n *\n * @private\n * @param {object} target The target to which to apply the schema.\n * @param {object} rootSchema The top-level schema, so we don't lose track of it\n * during recursion.\n * @param {object} schema The current schema from which to extract methods and\n * resources.\n * @param {object} context The context to add to each method.\n */\nfunction applySchema (target, rootSchema, schema, context) {\n  applyMethodsFromSchema(target, rootSchema, schema, context);\n\n  if (schema.resources) {\n    for (var resourceName in schema.resources) {\n      var resource = schema.resources[resourceName];\n      if (!target[resourceName]) {\n        target[resourceName] = {};\n      }\n      applySchema(target[resourceName], rootSchema, resource, context);\n    }\n  }\n}\n\n/**\n * Generate and Endpoint from an endpoint schema object.\n *\n * @private\n * @param {object} schema The schema from which to generate the Endpoint.\n * @return Function The Endpoint.\n */\nfunction makeEndpoint (schema) {\n  var Endpoint = function (options) {\n    var self = this;\n    self._options = options || {};\n\n    applySchema(self, schema, schema, self);\n  };\n  return Endpoint;\n}\n\n/**\n * Discovery for discovering API endpoints\n *\n * @private\n * @param {object} options Options for discovery\n * @this {Discovery}\n */\nfunction Discovery (options) {\n  this.options = options || {};\n}\n\n/**\n * Log output of generator\n * Works just like console.log\n */\nDiscovery.prototype.log = function () {\n  if (this.options && this.options.debug) {\n    console.log.apply(this, arguments);\n  }\n};\n\n/**\n * Generate all APIs and return as in-memory object.\n *\n * @param {function} callback Callback when all APIs have been generated\n * @throws {Error} If there is an error generating any of the APIs\n */\nDiscovery.prototype.discoverAllAPIs = function (discoveryUrl, callback) {\n  var self = this;\n  var headers = this.options.includePrivate ? {} : { 'X-User-Ip': '0.0.0.0' };\n  transporter.request({\n    uri: discoveryUrl,\n    headers: headers\n  }, function (err, resp) {\n    if (err) {\n      return handleError(err, callback);\n    }\n\n    async.parallel(resp.items.map(function (api) {\n      return function (cb) {\n        self.discoverAPI(api.discoveryRestUrl, function (err, _api) {\n          if (err) {\n            return cb(err);\n          }\n          api.api = _api;\n          cb(null, api);\n        });\n      };\n    }), function (err, apis) {\n      if (err) {\n        return callback(err);\n      }\n\n      var versionIndex = {};\n      var apisIndex = {};\n\n      apis.forEach(function (api) {\n        if (!apisIndex[api.name]) {\n          versionIndex[api.name] = {};\n          apisIndex[api.name] = function (options) {\n            var type = typeof options;\n            var version;\n            if (type === 'string') {\n              version = options;\n              options = {};\n            } else if (type === 'object') {\n              version = options.version;\n              delete options.version;\n            } else {\n              throw new Error('Argument error: Accepts only string or object');\n            }\n            try {\n              var Endpoint = versionIndex[api.name][version];\n              var ep = new Endpoint(options);\n              ep.google = this; // for drive.google.transporter\n              return Object.freeze(ep); // create new & freeze\n            } catch (e) {\n              throw new Error(util.format('Unable to load endpoint %s(\"%s\"): %s',\n                api.name, version, e.message));\n            }\n          };\n        }\n        versionIndex[api.name][api.version] = api.api;\n      });\n\n      return callback(null, apisIndex);\n    });\n  });\n};\n\n/**\n * Generate API file given discovery URL\n *\n * @param  {String} apiDiscoveryUrl URL or filename of discovery doc for API\n * @param {function} callback Callback when successful write of API\n * @throws {Error} If there is an error generating the API.\n */\nDiscovery.prototype.discoverAPI = function (apiDiscoveryUrl, callback) {\n  function _generate (err, resp) {\n    if (err) {\n      return handleError(err, callback);\n    }\n    return callback(null, makeEndpoint(resp));\n  }\n\n  if (typeof apiDiscoveryUrl === 'string') {\n    var parts = url.parse(apiDiscoveryUrl);\n\n    if (apiDiscoveryUrl && !parts.protocol) {\n      this.log('Reading from file ' + apiDiscoveryUrl);\n      try {\n        return fs.readFile(apiDiscoveryUrl, {\n          encoding: 'utf8'\n        }, function (err, file) {\n          _generate(err, JSON.parse(file));\n        });\n      } catch (err) {\n        return handleError(err, callback);\n      }\n    } else {\n      this.log('Requesting ' + apiDiscoveryUrl);\n      transporter.request({\n        uri: apiDiscoveryUrl\n      }, _generate);\n    }\n  } else {\n    var options = apiDiscoveryUrl;\n    this.log('Requesting ' + options.url);\n    var parameters = {\n      options: {\n        url: options.url,\n        method: 'GET'\n      },\n      requiredParams: [],\n      pathParams: [],\n      context: {\n        google: {\n          _options: {}\n        },\n        _options: {}\n      }\n    };\n    delete options.url;\n    parameters.params = options;\n    createAPIRequest(parameters, _generate);\n  }\n};\n\n/**\n * Export the Discovery object\n * @type {Discovery}\n */\nmodule.exports = Discovery;\n","/home/travis/build/npmtest/node-npmtest-googleapis/googleapis/lib/generator_utils.js":"// Copyright 2014-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\n/**\n * Build a string used to create a URL from the discovery doc provided URL.\n *\n * @private\n * @param  {String} input URL to build from\n * @return {String}       Resulting built URL\n */\nfunction buildurl (input) {\n  return ('\\'' + input + '\\'')\n    // No * symbols\n    .replace(/\\*/g, '')\n    // No + symbols\n    .replace(/\\+/g, '')\n    // replace double slashes with single slash (except in https://)\n    .replace(/([^:]\\/)\\/+/g, '$1')\n    // No {/ symbols\n    .replace(/\\{\\//g, '/{');\n}\n\n/**\n * Disable auto-escaping its output\n * @type {Boolean}\n */\nbuildurl.safe = true;\n\n/**\n * Handle error object with callback\n *\n * @private\n * @param  {Error}   err      Error object to return in callback\n * @param  {Function=} callback Optional callback function\n */\nfunction handleError (err, callback) {\n  if (callback && typeof callback === 'function') {\n    callback(err, null);\n  }\n}\n\nexports.DefaultTransporter = require('../lib/transporters');\nexports.buildurl = buildurl;\nexports.handleError = handleError;\n","/home/travis/build/npmtest/node-npmtest-googleapis/googleapis/lib/transporters.js":"// Copyright 2012-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\n/**\n * This code has been moved to the google-auth-library repo, at\n * https://github.com/google/google-auth-library-nodejs.\n *\n * Please update your references to point to the google-auth-library implementation,\n * rather than this file.\n */\n\nmodule.exports = require('google-auth-library/lib/transporters.js');\n","/home/travis/build/npmtest/node-npmtest-googleapis/googleapis/lib/apirequest.js":"// Copyright 2014-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\nvar utils = require('./utils.js');\nvar DefaultTransporter = require('./transporters.js');\nvar stream = require('stream');\nvar parseString = require('string-template');\n\nfunction isReadableStream (obj) {\n  return obj instanceof stream.Stream &&\n    typeof obj._read === 'function' &&\n    typeof obj._readableState === 'object';\n}\n\nfunction logError (err) {\n  if (err) {\n    console.error(err);\n  }\n}\n\nfunction createCallback (callback) {\n  return typeof callback === 'function' ? callback : logError;\n}\n\nfunction getMissingParams (params, required) {\n  var missing = [];\n\n  required.forEach(function (param) {\n    // Is the required param in the params object?\n    if (!params[param]) {\n      missing.push(param);\n    }\n  });\n\n  // If there are any required params missing, return their names in array, otherwise return null\n  return missing.length > 0 ? missing : null;\n}\n\n/**\n * Create and send request to Google API\n * @param  {object}   parameters Parameters used to form request\n * @param  {Function} callback   Callback when request finished or error found\n * @return {Request}             Returns Request object or null\n */\nfunction createAPIRequest (parameters, callback) {\n  var req, body, missingParams;\n  var params = parameters.params;\n  var options = utils.extend({}, parameters.options);\n\n  // If the params are not present, and callback was passed instead,\n  // use params as the callback and create empty params.\n  if (typeof params === 'function') {\n    callback = params;\n    params = {};\n  }\n\n  // Create a new params object so it can no longer be modified from outside code\n  // Also support global and per-client params, but allow them to be overriden per-request\n  params = utils.extend(\n    {}, // New base object\n    parameters.context.google._options.params, // Global params\n    parameters.context._options.params, // Per-client params\n    params // API call params\n  );\n\n  var media = params.media || {};\n  var resource = params.resource;\n  var authClient = params.auth ||\n    parameters.context._options.auth ||\n    parameters.context.google._options.auth;\n\n  var defaultMime = typeof media.body === 'string' ? 'text/plain' : 'application/octet-stream';\n  delete params.media;\n  delete params.resource;\n  delete params.auth;\n\n  // Grab headers from user provided options\n  var headers = params.headers || {};\n  delete params.headers;\n\n  // Un-alias parameters that were modified due to conflicts with reserved names\n  Object.keys(params).forEach(function (key) {\n    if (key.slice(-1) === '_') {\n      var newKey = key.slice(0, -1);\n      params[newKey] = params[key];\n      delete params[key];\n    }\n  });\n\n  // Normalize callback\n  callback = createCallback(callback);\n\n  // Check for missing required parameters in the API request\n  missingParams = getMissingParams(params, parameters.requiredParams);\n  if (missingParams) {\n    // Some params are missing - stop further operations and inform the developer which required\n    // params are not included in the request\n    callback(new Error('Missing required parameters: ' + missingParams.join(', ')));\n\n    return null;\n  }\n\n  // Parse urls\n  if (options.url) {\n    options.url = parseString(options.url, params);\n  }\n  if (parameters.mediaUrl) {\n    parameters.mediaUrl = parseString(parameters.mediaUrl, params);\n  }\n\n  // delete path parameters from the params object so they do not end up in query\n  parameters.pathParams.forEach(function (param) {\n    delete params[param];\n  });\n\n  // if authClient is actually a string, use it as an API KEY\n  if (typeof authClient === 'string') {\n    params.key = params.key || authClient;\n    authClient = null;\n  }\n\n  if (parameters.mediaUrl && media.body) {\n    options.url = parameters.mediaUrl;\n    if (resource) {\n      params.uploadType = 'multipart';\n      options.multipart = [\n        {\n          'Content-Type': 'application/json',\n          body: JSON.stringify(resource)\n        },\n        {\n          'Content-Type': media.mimeType || (resource && resource.mimeType) || defaultMime,\n          body: media.body // can be a readable stream or raw string!\n        }\n      ];\n    } else {\n      params.uploadType = 'media';\n      utils.extend(headers, {\n        'Content-Type': media.mimeType || defaultMime\n      });\n\n      if (isReadableStream(media.body)) {\n        body = media.body;\n      } else {\n        options.body = media.body;\n      }\n    }\n  } else {\n    options.json = resource || (\n      (options.method === 'GET' || options.method === 'DELETE') ? true : {}\n    );\n  }\n\n  options.headers = headers;\n  options.qs = params;\n  options.useQuerystring = true;\n\n  options = utils.extend({},\n    parameters.context.google._options,\n    parameters.context._options,\n    options\n  );\n  delete options.auth; // is overridden by our auth code\n  delete options.params; // We handle params ourselves and Request does not recognise 'params'\n\n  // create request (using authClient or otherwise and return request obj)\n  if (authClient) {\n    req = authClient.request(options, callback);\n  } else {\n    req = new DefaultTransporter().request(options, callback);\n  }\n\n  if (body) {\n    body.pipe(req);\n  }\n  return req;\n}\n\n/**\n * Exports createAPIRequest\n * @type {Function}\n */\nmodule.exports = createAPIRequest;\n","/home/travis/build/npmtest/node-npmtest-googleapis/googleapis/lib/utils.js":"// Copyright 2012-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\n/**\n * This code has been moved to the google-auth-library repo, at\n * https://github.com/google/google-auth-library-nodejs.\n *\n * Please update your references to point to the google-auth-library implementation,\n * rather than this file.\n */\n\nmodule.exports = require('google-auth-library/lib/utils.js');\n"}